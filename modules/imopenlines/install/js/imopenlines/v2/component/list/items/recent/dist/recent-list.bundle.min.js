this.BX=this.BX||{};this.BX.OpenLines=this.BX.OpenLines||{};this.BX.OpenLines.v2=this.BX.OpenLines.v2||{};this.BX.OpenLines.v2.Component=this.BX.OpenLines.v2.Component||{};(function(t,e,s,n,i,r,a,o,c){"use strict";const l={name:"EmptyState",computed:{message(){return this.loc("IMOL_LIST_RECENT_EMPTY_MESSAGE")}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-imol-list-recent-empty-state__container">\n\t\t\t<p class="bx-im-list-openlines-empty-state__text">\n\t\t\t\t{{ message }}\n\t\t\t</p>\n\t\t</div>\n\t`};const m={name:"MessageText",props:{item:{type:Object,required:true}},computed:{recentItems(){return this.item},message(){return this.$store.getters["messages/getById"](this.recentItems.messageId)},lastMessageAuthorAvatar(){const t=this.$store.getters["chats/get"](this.message.authorId);if(!t){return""}return t.avatar},lastMessageAuthorAvatarStyle(){return{backgroundImage:`url('${this.lastMessageAuthorAvatar}')`}},formattedMessageText(){if(this.message.isDeleted){return this.loc("IMOL_LIST_RECENT_DELETED_MESSAGE")}const t=27;const e=c.Parser.purifyRecent(this.recentItems);return o.Utils.text.insertUnseenWhitespace(e,t)}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-imol-list-recent-item__message">\n\t\t\t<span class="bx-imol-list-recent-item__message_text-container">\n\t\t\t\t<template v-if="message.authorId">\n\t\t\t\t\t<span v-if="lastMessageAuthorAvatar" :style="lastMessageAuthorAvatarStyle" class="bx-imol-list-recent-item__message_author-icon --user"></span>\n\t\t\t\t\t<span v-else class="bx-imol-list-recent-item__message_author-icon --user --default"></span>\n\t\t\t\t</template>\n\t\t\t\t<span class="bx-imol-list-recent-item__message_text">{{ formattedMessageText }}</span>\n\t\t\t</span>\n\t\t</div>\n\t`};const u={name:"ItemCounter",props:{item:{type:Object,required:true}},computed:{recentItem(){return this.item},dialog(){return this.$store.getters["chats/get"](this.item.dialogId)},openLinesCounter(){return this.$store.getters["counters/getSpecificLinesCounter"](this.dialog.chatId)},totalCounter(){return this.openLinesCounter},formattedCounter(){return this.formatCounter(this.totalCounter)}},methods:{formatCounter(t){return t>99?"99+":t.toString()}},template:`\n\t\t<div class="bx-imol-list-recent-item__counter_wrap">\n\t\t\t<div class="bx-imol-list-recent-item__counter_container">\n\t\t\t\t<div v-if="formattedCounter > 0" class="bx-imol-list-recent-item__counter_number">\n\t\t\t\t\t{{ formattedCounter }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const g={name:"RecentItem",components:{ChatTitle:i.ChatTitle,ChatAvatar:i.ChatAvatar,MessageText:m,ItemCounter:u},props:{item:{type:Object,required:true}},computed:{AvatarSize:()=>i.AvatarSize,dialog(){return this.$store.getters["chats/get"](this.item.dialogId,true)},layout(){return this.$store.getters["application/getLayout"]},message(){return this.$store.getters["messages/getById"](this.item.messageId)},recentItem(){return this.item},formattedDate(){return this.message?this.formatDate(this.message.date):""},isChatSelected(){if(this.layout.name!==r.Layout.openlinesV2.name){return false}return this.layout.entityId===this.recentItem.dialogId},wrapClasses(){return{"--selected":this.isChatSelected}}},methods:{formatDate(t){return a.DateFormatter.formatByTemplate(t,a.DateTemplate.recent)}},template:`\n\t\t<div class="bx-imol-list-recent__item" :class="wrapClasses">\n\t\t\t<div class="bx-imol-list-recent-item__main_content">\n\t\t\t\t<div class="bx-imol-list-recent-item__avatar_container">\n\t\t\t\t\t<div class="bx-imol-list-recent-item__avatar_content">\n\t\t\t\t\t\t<ChatAvatar\n\t\t\t\t\t\t\t:avatarDialogId="recentItem.dialogId"\n\t\t\t\t\t\t\t:contextDialogId="recentItem.dialogId"\n\t\t\t\t\t\t\t:size="AvatarSize.XL"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-imol-list-recent-item__content_right">\n\t\t\t\t\t<div class="bx-imol-list-recent-item__content_header">\n\t\t\t\t\t\t<div class="bx-imol-list-recent-item__content_title">\n\t\t\t\t\t\t\t<ChatTitle :dialogId="recentItem.dialogId" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-imol-list-recent-item__content_date">\n\t\t\t\t\t\t\t<span class="bx-imol-list-recent-item__content_date">{{ formattedDate }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-imol-list-recent-item__content_bottom">\n\t\t\t\t\t\t<MessageText :item="recentItem" />\n\t\t\t\t\t\t<ItemCounter :item="recentItem" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const d={name:"RecentGroup",components:{RecentItem:g},props:{groupItems:{type:Array,required:true},groupName:{type:String,required:true}},emits:["recentClick"],computed:{groupTitle(){return this.loc(`IMOL_LIST_STATUS_MESSAGE_${this.groupName.toUpperCase()}`)}},methods:{onRecentClick(t){this.$emit("recentClick",t)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-imol-list-recent__group-item_container" v-if="groupItems.length !== 0">\n\t\t\t<span \n\t\t\t\tclass="bx-imol-list-recent__group_name" \n\t\t\t\t:class="'bx-imol-list-recent__group_name_' + groupName.toLowerCase()"\n\t\t\t>\n\t\t\t\t{{ groupTitle }}\n\t\t\t</span>\n\t\t\t<RecentItem\n\t\t\t\tv-for="item in groupItems"\n\t\t\t\t:item="item"\n\t\t\t\t:key="item.dialogId"\n\t\t\t\t@click="onRecentClick(item.dialogId)"\n\t\t\t/>\n\t\t</div>\n\t`};const p={name:"RecentList",components:{EmptyState:l,RecentGroup:d,LoadingState:i.ListLoadingState},emits:["chatClick"],data(){return{isLoading:false,isLoadingNextPage:false,firstPageLoaded:false}},computed:{collection(){return e.Core.getStore().getters["recentOpenLines/getOpenLinesCollection"]},collectionByGroups(){const t={[s.StatusGroup.new]:[],[s.StatusGroup.work]:[],[s.StatusGroup.answered]:[]};this.collection.forEach((e=>{const s=e;const n=this.getStatusByDialogId(s.dialogId);t[n].push(s)}));return t},sortedCollectionByGroups(){const t={};Object.entries(this.collectionByGroups).forEach((([e,s])=>{t[e]=this.sortGroupItems(e,s)}));return t},isEmptyCollection(){return this.collection.length===0}},async activated(){this.isLoading=true;await this.getRecentService().loadFirstPage();this.firstPageLoaded=true;this.isLoading=false},methods:{async onScroll(t){if(!o.Utils.dom.isOneScreenRemaining(t.target)||!this.getRecentService().hasMoreItemsToLoad()){return}this.isLoadingNextPage=true;await this.getRecentService().loadNextPage();this.isLoadingNextPage=false},onClick(t){this.$emit("chatClick",t)},getSessionByDialogId(t){return this.$store.getters["recentOpenLines/getSession"](t)},getStatusByDialogId(t){const e=this.getSessionByDialogId(t);return e?e.status:s.StatusGroup.new},sortGroupItems(t,e){if(t===s.StatusGroup.answered){return this.sortItemsDesc(e)}return this.sortItemsAsc(e)},sortItemsAsc(t){return t.sort(((t,e)=>t.sessionId-e.sessionId))},sortItemsDesc(t){return t.sort(((t,e)=>{const s=this.messageDate(t.messageId);const n=this.messageDate(e.messageId);return n-s}))},messageDate(t){const s=e.Core.getStore().getters["messages/getById"](t);return s?s.date:null},getRecentService(){if(!this.service){this.service=new n.RecentService}return this.service}},template:`\n\t\t<div class="bx-imol-list-recent__content">\n\t\t\t<LoadingState v-if="isLoading && !firstPageLoaded" />\n\t\t\t<div v-else @scroll="onScroll"  class="bx-imol-list-recent__scroll-container">\n\t\t\t\t<EmptyState v-if="isEmptyCollection" />\n\t\t\t\t<RecentGroup\n\t\t\t\t\tv-for="(groupItems, groupName) in sortedCollectionByGroups"\n\t\t\t\t\t:groupItems="groupItems"\n\t\t\t\t\t:groupName="groupName"\n\t\t\t\t\t:key="groupName"\n\t\t\t\t\t@recentClick="onClick"\n\t\t\t\t/>\n\t\t\t\t<LoadingState v-if="isLoadingNextPage" />\n\t\t\t</div>\n\t\t</div>\n\t`};t.RecentList=p})(this.BX.OpenLines.v2.Component.List=this.BX.OpenLines.v2.Component.List||{},BX.Messenger.v2.Application,BX.OpenLines.v2.Const,BX.OpenLines.v2.Provider.Service,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib);
//# sourceMappingURL=recent-list.bundle.map.js