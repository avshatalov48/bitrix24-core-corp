this.BX=this.BX||{};this.BX.OpenLines=this.BX.OpenLines||{};this.BX.OpenLines.v2=this.BX.OpenLines.v2||{};this.BX.OpenLines.v2.Provider=this.BX.OpenLines.v2.Provider||{};(function(e,s,t,r,a,o,i){"use strict";var n=babelHelpers.classPrivateFieldLooseKey("itemsPerPage");var l=babelHelpers.classPrivateFieldLooseKey("isLoading");var c=babelHelpers.classPrivateFieldLooseKey("hasMoreItemsToLoad");var d=babelHelpers.classPrivateFieldLooseKey("sortPointer");var p=babelHelpers.classPrivateFieldLooseKey("lastStatusGroup");var h=babelHelpers.classPrivateFieldLooseKey("requestItems");var u=babelHelpers.classPrivateFieldLooseKey("updateModel");var v=babelHelpers.classPrivateFieldLooseKey("getLastDate");var b=babelHelpers.classPrivateFieldLooseKey("getLastStatusGroup");class L{constructor(){Object.defineProperty(this,b,{value:f});Object.defineProperty(this,v,{value:S});Object.defineProperty(this,u,{value:P});Object.defineProperty(this,h,{value:g});this.firstPageIsLoaded=false;Object.defineProperty(this,n,{writable:true,value:50});Object.defineProperty(this,l,{writable:true,value:false});Object.defineProperty(this,c,{writable:true,value:true});Object.defineProperty(this,d,{writable:true,value:0});Object.defineProperty(this,p,{writable:true,value:""})}async loadFirstPage(){babelHelpers.classPrivateFieldLooseBase(this,l)[l]=true;const e=await babelHelpers.classPrivateFieldLooseBase(this,h)[h]({firstPage:true});this.firstPageIsLoaded=true;return e}loadNextPage(){if(babelHelpers.classPrivateFieldLooseBase(this,l)[l]||!babelHelpers.classPrivateFieldLooseBase(this,c)[c]){return Promise.resolve()}babelHelpers.classPrivateFieldLooseBase(this,l)[l]=true;return babelHelpers.classPrivateFieldLooseBase(this,h)[h]()}hasMoreItemsToLoad(){return babelHelpers.classPrivateFieldLooseBase(this,c)[c]}}async function g({firstPage:e=false}={}){const s={data:{cursor:{sortPointer:e?null:babelHelpers.classPrivateFieldLooseBase(this,d)[d],statusGroup:e?null:babelHelpers.classPrivateFieldLooseBase(this,p)[p]},limit:babelHelpers.classPrivateFieldLooseBase(this,n)[n]}};const t=await o.runAction(i.RestMethod.linesV2RecentList,s).catch((e=>{console.error("Imol.OpenlinesList: page request error",e)}));const{messages:r,recentItems:a,sessions:h,hasNextPage:L}=t;if(!L){babelHelpers.classPrivateFieldLooseBase(this,c)[c]=false}babelHelpers.classPrivateFieldLooseBase(this,l)[l]=false;if(a.length===0){return Promise.resolve()}babelHelpers.classPrivateFieldLooseBase(this,p)[p]=babelHelpers.classPrivateFieldLooseBase(this,b)[b](h,a);if(babelHelpers.classPrivateFieldLooseBase(this,p)[p]===i.StatusGroup.answered){babelHelpers.classPrivateFieldLooseBase(this,d)[d]=babelHelpers.classPrivateFieldLooseBase(this,v)[v](r,a)}else{babelHelpers.classPrivateFieldLooseBase(this,d)[d]=a[a.length-1].sessionId}return babelHelpers.classPrivateFieldLooseBase(this,u)[u](t)}function P(e){const{users:t,chats:r,messages:a,files:o,recentItems:i,sessions:n}=e;const l=s.Core.getStore().dispatch("users/set",t);const c=s.Core.getStore().dispatch("chats/set",r);const d=s.Core.getStore().dispatch("messages/store",a);const p=s.Core.getStore().dispatch("files/set",o);const h=s.Core.getStore().dispatch("recentOpenLines/set",i);const u=s.Core.getStore().dispatch("sessions/set",n);return Promise.all([l,c,d,p,h,u])}function S(e,s){const t=s[s.length-1].messageId;return e.find((e=>e.id===t)).date}function f(e,s){const t=s[s.length-1].sessionId;return e.find((e=>e.id===t)).status}class I{requestAnswer(e){const s={data:{dialogId:e}};return o.runAction(i.RestMethod.linesV2SessionAnswer,s).catch((e=>{console.error("Imol.OperatorAnswer: request error",e)}))}}var B=babelHelpers.classPrivateFieldLooseKey("updateModel");var F=babelHelpers.classPrivateFieldLooseKey("clearLastOpenedElement");class m{constructor(){Object.defineProperty(this,F,{value:O});Object.defineProperty(this,B,{value:H})}markSpamChat(e){babelHelpers.classPrivateFieldLooseBase(this,B)[B](e);const s={data:{dialogId:e}};return o.runAction(i.RestMethod.linesV2SessionMarkSpam,s).catch((e=>{console.error("Imol.MarkSpam: request error",e)}))}finishChat(e){babelHelpers.classPrivateFieldLooseBase(this,B)[B](e);const s={data:{dialogId:e}};return o.runAction(i.RestMethod.linesV2SessionFinish,s).catch((e=>{console.error("Imol.Finish: request error",e)}))}}function H(e){const r=s.Core.getStore().getters["application/isLinesChatOpen"](e);const a=s.Core.getStore().getters["chats/get"](e).chatId;const o=s.Core.getStore().getters["sessions/getByChatId"](a);if(r){void t.Messenger.openLines();babelHelpers.classPrivateFieldLooseBase(this,F)[F]()}void s.Core.getStore().dispatch("sessions/set",{...o,isClosed:true});void s.Core.getStore().dispatch("recentOpenLines/delete",{id:e})}function O(){a.LayoutManager.getInstance().setLastOpenedElement(r.Layout.openlinesV2.name,"")}var y=babelHelpers.classPrivateFieldLooseKey("sendRequest");class M{constructor(){Object.defineProperty(this,y,{value:C})}pinChat(e){return babelHelpers.classPrivateFieldLooseBase(this,y)[y]({dialogId:e,action:true,restMethod:i.RestMethod.linesV2SessionPin})}unpinChat(e){return babelHelpers.classPrivateFieldLooseBase(this,y)[y]({dialogId:e,action:false,restMethod:i.RestMethod.linesV2SessionUnpin})}}function C(e){const t=s.Core.getStore().getters["recentOpenLines/getSession"](e.dialogId);void s.Core.getStore().dispatch("sessions/pin",{id:t.id,chatId:t.chatId,action:e.action});const r={data:{dialogId:e.dialogId}};return o.runAction(e.restMethod,r).catch((r=>{console.error("Imol.MarkSpam: request error",r);void s.Core.getStore().dispatch("sessions/pin",{id:t.id,action:!e.action})}))}class A{interceptDialog(e){const s={data:{dialogId:e}};return o.runAction(i.RestMethod.linesV2SessionIntercept,s).catch((e=>{console.error("Imol.InterceptDialog: request error",e)}))}}class X{requestSkip(e){const n=s.Core.getStore().getters["application/isLinesChatOpen"](e);if(n){void t.Messenger.openLines()}void s.Core.getStore().dispatch("recentOpenLines/delete",{id:e});a.LayoutManager.getInstance().setLastOpenedElement(r.Layout.openlinesV2.name,"");const l={data:{dialogId:e}};return o.runAction(i.RestMethod.linesV2SessionSkip,l).catch((e=>{console.error("Imol.OperatorAnswer: request error",e)}))}}class j{startDialog(e){const s={data:{dialogId:e}};return o.runAction(i.RestMethod.linesV2SessionStart,s).catch((e=>{console.error("Imol.start: request error",e)}))}}class q{chatTransfer(e,s){void t.Messenger.openLines();a.LayoutManager.getInstance().setLastOpenedElement(r.Layout.openlinesV2.name,"");const n={data:{dialogId:e,transferId:s}};return o.runAction(i.RestMethod.linesV2SessionTransfer,n).catch((e=>{console.error("Imol.transfer: request error",e)}))}}class R{joinToDialog(e){const s={data:{dialogId:e}};return o.runAction(i.RestMethod.linesV2SessionJoin,s).catch((e=>{console.error("Imol.join: request error",e)}))}}e.RecentService=L;e.AnswerService=I;e.FinishService=m;e.PinService=M;e.InterceptService=A;e.SkipService=X;e.StartService=j;e.TransferService=q;e.JoinService=R})(this.BX.OpenLines.v2.Provider.Service=this.BX.OpenLines.v2.Provider.Service||{},BX.Messenger.v2.Application,BX.Messenger.v2.Lib,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.OpenLines.v2.Const);
//# sourceMappingURL=service.bundle.map.js