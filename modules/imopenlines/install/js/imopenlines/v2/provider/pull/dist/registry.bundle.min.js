this.BX=this.BX||{};this.BX.OpenLines=this.BX.OpenLines||{};this.BX.OpenLines.v2=this.BX.OpenLines.v2||{};this.BX.OpenLines.v2.Provider=this.BX.OpenLines.v2.Provider||{};(function(e,s,t,n,i,d,o){"use strict";class a{constructor(){this.store=o.Core.getStore()}getModuleId(){return"im"}handleMessage(e,s){this.handleMessageAdd(e,s)}handleMessageChat(e){this.handleMessageAdd(e);this.updateUnloadedLinesCounter(e)}handleMessageAdd(e){if(!e.lines){return}const s=o.Core.getUserId();const t=e.userInChat[e.chatId];const n=e.lines.isClosed;if(t.includes(s)&&!n){void this.store.dispatch("recentOpenLines/set",{id:e.dialogId,messageId:e.message.id,sessionId:e.lines.id})}void this.store.dispatch("sessions/set",{...e.lines,chatId:e.chatId,status:e.lines.statusGroup})}handleReadMessageChat(e){this.updateUnloadedLinesCounter(e)}handleUnreadMessageChat(e){this.updateUnloadedLinesCounter(e)}handleChatHide(e){this.updateUnloadedLinesCounter({dialogId:e.dialogId,chatId:e.chatId,lines:e.lines,counter:0});const s=this.store.getters["recentOpenLines/get"](e.dialogId);if(!s){return}void this.store.dispatch("recentOpenLines/delete",{id:e.dialogId})}updateUnloadedLinesCounter(e){const{dialogId:t,chatId:n,counter:i,lines:o}=e;if(!o||s.Type.isUndefined(i)){return}d.Logger.warn("LinesPullHandler: updateUnloadedLinesCounter:",{dialogId:t,chatId:n,counter:i});void this.store.dispatch("counters/setUnloadedLinesCounters",{[n]:i})}handleChatUserLeave(e){const s=this.store.getters["recentOpenLines/get"](e.dialogId);const d=o.Core.getStore().getters["application/isLinesChatOpen"](e.dialogId);const a=o.Core.getUserId();if(d&&e.userId===a){void t.Messenger.openLines();i.LayoutManager.getInstance().setLastOpenedElement(n.Layout.openlinesV2.name,"")}if(!s||e.userId!==o.Core.getUserId()){return}void this.store.dispatch("recentOpenLines/delete",{id:e.dialogId})}}class r{constructor(){this.store=o.Core.getStore()}getModuleId(){return"imopenlines"}handleUpdateSessionStatus(e){const s=e.session;const t=s.isClosed;if(!t){void this.store.dispatch("recentOpenLines/set",{id:e.chat.dialogId,messageId:e.message.id,sessionId:s.id})}void this.store.dispatch("sessions/set",s)}}class h{constructor(){this.store=o.Core.getStore()}getModuleId(){return"imopenlines"}handleQueueItemUpdate(e){void this.store.dispatch("queue/set",e)}handleQueueItemDelete(e){void this.store.dispatch("queue/delete",e.id)}}const l=[a,r,h];e.OpenLinesHandlers=l})(this.BX.OpenLines.v2.Provider.Pull=this.BX.OpenLines.v2.Provider.Pull||{},BX,BX.Messenger.v2.Lib,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Application);
//# sourceMappingURL=registry.bundle.map.js