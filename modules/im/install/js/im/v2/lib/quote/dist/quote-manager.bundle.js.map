{"version":3,"file":"quote-manager.bundle.js","sources":["../src/quote-manager.js"],"sourcesContent":["import { Loc } from 'main.core';\nimport { EventEmitter } from 'main.core.events';\n\nimport { Core } from 'im.v2.application.core';\nimport { EventType, DialogType } from 'im.v2.const';\nimport { DateFormatter, DateTemplate } from 'im.v2.lib.date-formatter';\nimport { Parser } from 'im.v2.lib.parser';\n\nimport type { ImModelMessage, ImModelUser, ImModelDialog } from 'im.v2.model';\n\nconst QUOTE_DELIMITER = '-'.repeat(54);\n\nexport const QuoteManager = {\n    sendQuoteEvent(message: ImModelMessage, text: string)\n    {\n        EventEmitter.emit(EventType.textarea.insertText, {\n            text: this.prepareQuoteText(message, text),\n            withNewLine: true,\n            replace: false,\n        });\n    },\n    prepareQuoteText(message: ImModelMessage, text: string): string\n    {\n        let quoteTitle = Loc.getMessage('IM_DIALOG_CHAT_QUOTE_DEFAULT_TITLE');\n        if (message.authorId)\n        {\n            const user: ImModelUser = Core.getStore().getters['users/get'](message.authorId);\n            quoteTitle = user.name;\n        }\n\n        const quoteDate = DateFormatter.formatByTemplate(message.date, DateTemplate.notification);\n\n        const quoteText = Parser.prepareQuote(message, text);\n\n        let quoteContext = '';\n        const dialog: ImModelDialog = Core.getStore().getters['dialogues/getByChatId'](message.chatId);\n        if (dialog && dialog.type === DialogType.user)\n        {\n            quoteContext = `#${dialog.dialogId}:${Core.getUserId()}/${message.id}`;\n        }\n        else\n        {\n            quoteContext = `#${dialog.dialogId}/${message.id}`;\n        }\n\n        return `${QUOTE_DELIMITER}\\n`\n            + `${quoteTitle} [${quoteDate}] ${quoteContext}\\n`\n            + `${quoteText}\\n`\n            + `${QUOTE_DELIMITER}\\n`\n            ;\n    },\n};\n"],"names":["QUOTE_DELIMITER","repeat","QuoteManager","sendQuoteEvent","message","text","EventEmitter","emit","EventType","textarea","insertText","prepareQuoteText","withNewLine","replace","quoteTitle","Loc","getMessage","authorId","user","Core","getStore","getters","name","quoteDate","DateFormatter","formatByTemplate","date","DateTemplate","notification","quoteText","Parser","prepareQuote","quoteContext","dialog","chatId","type","DialogType","dialogId","getUserId","id"],"mappings":";;;;;;;IAUA,MAAMA,eAAe,GAAG,GAAG,CAACC,MAAM,CAAC,EAAE,CAAC;AAEtC,UAAaC,YAAY,GAAG;MACxBC,cAAc,CAACC,OAAuB,EAAEC,IAAY,EACpD;QACIC,6BAAY,CAACC,IAAI,CAACC,qBAAS,CAACC,QAAQ,CAACC,UAAU,EAAE;UAC7CL,IAAI,EAAE,IAAI,CAACM,gBAAgB,CAACP,OAAO,EAAEC,IAAI,CAAC;UAC1CO,WAAW,EAAE,IAAI;UACjBC,OAAO,EAAE;SACZ,CAAC;OACL;MACDF,gBAAgB,CAACP,OAAuB,EAAEC,IAAY,EACtD;QACI,IAAIS,UAAU,GAAGC,aAAG,CAACC,UAAU,CAAC,oCAAoC,CAAC;QACrE,IAAIZ,OAAO,CAACa,QAAQ,EACpB;UACI,MAAMC,IAAiB,GAAGC,2BAAI,CAACC,QAAQ,EAAE,CAACC,OAAO,CAAC,WAAW,CAAC,CAACjB,OAAO,CAACa,QAAQ,CAAC;UAChFH,UAAU,GAAGI,IAAI,CAACI,IAAI;;QAG1B,MAAMC,SAAS,GAAGC,qCAAa,CAACC,gBAAgB,CAACrB,OAAO,CAACsB,IAAI,EAAEC,oCAAY,CAACC,YAAY,CAAC;QAEzF,MAAMC,SAAS,GAAGC,uBAAM,CAACC,YAAY,CAAC3B,OAAO,EAAEC,IAAI,CAAC;QAEpD,IAAI2B,YAAY,GAAG,EAAE;QACrB,MAAMC,MAAqB,GAAGd,2BAAI,CAACC,QAAQ,EAAE,CAACC,OAAO,CAAC,uBAAuB,CAAC,CAACjB,OAAO,CAAC8B,MAAM,CAAC;QAC9F,IAAID,MAAM,IAAIA,MAAM,CAACE,IAAI,KAAKC,sBAAU,CAAClB,IAAI,EAC7C;UACIc,YAAY,GAAI,IAAGC,MAAM,CAACI,QAAS,IAAGlB,2BAAI,CAACmB,SAAS,EAAG,IAAGlC,OAAO,CAACmC,EAAG,EAAC;SACzE,MAED;UACIP,YAAY,GAAI,IAAGC,MAAM,CAACI,QAAS,IAAGjC,OAAO,CAACmC,EAAG,EAAC;;QAGtD,OAAQ,GAAEvC,eAAgB,IAAG,GACtB,GAAEc,UAAW,KAAIS,SAAU,KAAIS,YAAa,IAAG,GAC/C,GAAEH,SAAU,IAAG,GACf,GAAE7B,eAAgB,IAAG;;IAGpC,CAAC;;;;;;;;"}