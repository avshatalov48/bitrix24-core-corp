this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};(function(t,e,i,s,n){"use strict";const a={XS:"XS",S:"S",M:"M",L:"L",XL:"XL",XXL:"XXL"};const r={name:"Avatar",props:{dialogId:{type:String,default:"0"},size:{type:String,default:a.M},withAvatarLetters:{type:Boolean,default:true},withStatus:{type:Boolean,default:true},withCounter:{type:Boolean,default:false},withBirthday:{type:Boolean,default:false},withTyping:{type:Boolean,default:false}},computed:{dialog(){return this.$store.getters["dialogues/get"](this.dialogId,true)},user(){return this.$store.getters["users/get"](this.dialogId,true)},isUser(){return this.dialog.type===s.DialogType.user},isBot(){if(this.isUser){return this.user.bot}return false},isActiveInvitation(){const t=this.$store.getters["recent/get"](this.dialogId);if(!t){return false}return t.invitation.isActive},chatAvatarStyle(){return{backgroundImage:`url('${this.dialog.avatar}')`}},avatarText(){if(![s.DialogType.user,s.DialogType.open,s.DialogType.chat].includes(this.dialog.type)){return""}return e.Utils.text.getFirstLetters(this.dialog.name)},chatTypeIconClasses(){const t=[];if(s.DialogType[this.dialog.type]){t.push(`bx-im-component-avatar-icon-${this.dialog.type}`)}else{t.push("bx-im-component-avatar-icon-default")}return t},userStatusIcon(){if(!this.isUser||this.isBot||this.user.id===this.currentUserId){return""}const t=this.$store.getters["users/getStatus"](this.dialogId);if(t){return t}return""},isSomeoneTyping(){return Object.keys(this.dialog.writingList).length>0},formattedCounter(){return this.dialog.counter>99?"99+":this.dialog.counter},isChatMuted(){if(this.isUser){return false}const t=this.dialog.muteList.find((t=>t===this.currentUserId));return!!t},showBirthdays(){return this.$store.getters["recent/getOption"](s.RecentSettings.showBirthday)},currentUserId(){return this.$store.state.application.common.userId}},template:`\n\t\t<div :title="dialog.name" :class="'bx-im-component-avatar-size-' + size.toLowerCase()" class="bx-im-component-avatar-wrap">\n\t\t\t<div v-if="isActiveInvitation" class="bx-im-component-avatar-content bx-im-component-avatar-invitation"></div>\n\t\t\t<div v-else-if="dialog.avatar" :style="chatAvatarStyle" class="bx-im-component-avatar-content bx-im-component-avatar-image"></div>\n\t\t\t<div v-else-if="withAvatarLetters && avatarText" :style="{backgroundColor: dialog.color}" class="bx-im-component-avatar-content bx-im-component-avatar-text">\n\t\t\t\t{{ avatarText }}\n\t\t\t</div>\n\t\t\t<div v-else :style="{backgroundColor: dialog.color}" :class="chatTypeIconClasses" class="bx-im-component-avatar-content bx-im-component-avatar-icon"></div>\n\t\t\t<div v-if="withTyping && isSomeoneTyping" class="bx-im-component-avatar-user-status-icon bx-im-component-avatar-user-status-icon-typing"></div>\n\t\t\t<div v-else-if="withBirthday && isUser && showBirthdays && user.isBirthday" class="bx-im-component-avatar-user-status-icon bx-im-component-avatar-user-status-icon-birthday"></div>\n\t\t\t<div v-else-if="withStatus && userStatusIcon" :class="'bx-im-component-avatar-user-status-icon bx-im-component-avatar-user-status-icon-' + userStatusIcon"></div>\n\t\t\t<div v-if="withCounter && dialog.counter > 0" :class="{'bx-im-component-avatar-counter-muted': isChatMuted}" class="bx-im-component-avatar-counter">\n\t\t\t\t{{ formattedCounter }}\n\t\t\t</div>\n\t\t</div>\n\t`};const o={bot:"bot",extranet:"extranet",network:"network",support24:"support24"};const c={absent:"absent",birthday:"birthday"};const l={name:"ChatTitle",props:{dialogId:{type:String,default:"0"},withMute:{type:Boolean,default:false}},computed:{dialog(){return this.$store.getters["dialogues/get"](this.dialogId,true)},user(){return this.$store.getters["users/get"](this.dialogId,true)},botType(){if(!this.isUser){return""}return this.$store.getters["users/getBotType"](this.dialogId)},isUser(){return this.dialog.type===s.DialogType.user},isSelfChat(){return this.isUser&&this.user.id===this.currentUserId},dialogSpecialType(){if(!this.isUser){if(this.isExtranet){return o.extranet}else if([s.DialogType.support24Notifier,s.DialogType.support24Question].includes(this.dialog.type)){return o.support24}return""}if(this.isBot){return this.botType}else if(this.isExtranet){return o.extranet}else if(this.isNetwork){return o.network}return""},leftIcon(){if(this.dialogSpecialType){return this.dialogSpecialType}if(!this.isUser){return""}if(this.showBirthdays&&this.user.isBirthday){return c.birthday}else if(this.user.isAbsent){return c.absent}return""},color(){return this.dialogSpecialType},isBot(){if(this.isUser){return this.user.bot}return false},isExtranet(){if(this.isUser){return this.user.extranet}return this.dialog.extranet},isNetwork(){if(this.isUser){return this.user.network}return false},isChatMuted(){if(this.isUser){return false}const t=this.dialog.muteList.find((t=>t===this.currentUserId));return!!t},currentUserId(){return this.$store.state.application.common.userId},tooltipText(){if(this.isSelfChat){return`${this.dialog.name} (${this.phrases["IM_RECENT_CHAT_SELF"]})`}return this.dialog.name},showBirthdays(){return this.$store.getters["recent/getOption"](s.RecentSettings.showBirthday)},isDarkTheme(){return this.$store.state.application.options.darkTheme},phrases(){return n.BitrixVue.getFilteredPhrases(this,"IM_RECENT_")}},template:`\n\t\t<div class="bx-im-component-chat-title-wrap">\n\t\t\t<div v-if="leftIcon" :class="'bx-im-component-chat-name-left-icon bx-im-component-chat-name-left-icon-' + leftIcon"></div>\n\t\t\t<span :class="'bx-im-component-chat-name-text-' + color" :title="tooltipText" class="bx-im-component-chat-name-text" >\n\t\t\t\t{{ dialog.name }}\n\t\t\t\t<strong v-if="isSelfChat">\n\t\t\t\t\t<span class="bx-im-component-chat-name-text-self">({{ phrases['IM_RECENT_CHAT_SELF'] }})</span>\n\t\t\t\t</strong>\n\t\t\t</span>\n\t\t\t<div v-if="withMute && isChatMuted" class="bx-im-component-chat-name-muted-icon"></div>\n\t\t</div>\n\t`};const d={name:"RecentLoadingState",props:{compactMode:{type:Boolean,default:false},itemsToShow:{type:Number,default:50}},methods:{isThreeLineVersion(){return Math.random()<.5}},template:`\n\t\t<div v-if="!compactMode" class="bx-im-component-recent-loading-state">\n\t\t\t<div v-for="index in itemsToShow" class="bx-im-component-recent-loading-state-item">\n\t\t\t\t<div class="bx-im-component-recent-loading-state-avatar-wrap">\n\t\t\t\t\t<div class="bx-im-component-recent-loading-state-avatar-placeholder"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-component-recent-loading-state-content">\n\t\t\t\t\t<div class="bx-im-component-recent-loading-state-line bx-im-component-recent-loading-state-line-long"></div>\n\t\t\t\t\t<div class="bx-im-component-recent-loading-state-line bx-im-component-recent-loading-state-line-short"></div>\n\t\t\t\t\t<div v-if="isThreeLineVersion()" class="bx-im-component-recent-loading-state-line bx-im-component-recent-loading-state-line-short"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div v-if="compactMode" class="bx-im-component-recent-loading-state bx-im-component-recent-loading-state-compact">\n\t\t\t<div v-for="index in itemsToShow" class="bx-im-component-recent-loading-state-item">\n\t\t\t\t<div class="bx-im-component-recent-loading-state-avatar-wrap">\n\t\t\t\t\t<div class="bx-im-component-recent-loading-state-avatar-placeholder"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};t.Avatar=r;t.AvatarSize=a;t.ChatTitle=l;t.RecentLoadingState=d})(this.BX.Messenger.v2.ComponentLegacy=this.BX.Messenger.v2.ComponentLegacy||{},BX.Messenger.v2.Lib,BX,BX.Messenger.v2.Const,BX.Vue3);
//# sourceMappingURL=registry.bundle.map.js