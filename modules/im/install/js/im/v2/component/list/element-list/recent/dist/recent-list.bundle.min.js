this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,i,s,n,r,a,o,c,l,d,h,u,m,g,v,p,_){"use strict";const C={name:"NewUserPopup",props:{title:{type:String,required:true},text:{type:String,required:true}},emits:["click","close"],mounted(){this.setCloseTimer(5e3);this.onClosePopupHandler=this.onClosePopup.bind(this);v.EventEmitter.subscribe(_.EventType.dialog.closePopup,this.onClosePopupHandler)},beforeUnmount(){v.EventEmitter.unsubscribe(_.EventType.dialog.closePopup,this.onClosePopupHandler)},methods:{onClick(){this.$emit("click");this.$emit("close")},onMouseOver(){clearTimeout(this.closeTimeout)},onMouseLeave(){this.setCloseTimer(2e3)},setCloseTimer(t){this.closeTimeout=setTimeout((()=>{this.$emit("close")}),t)},onClosePopup(){this.$emit("close")}},template:`\n\x3c!--\t\t<Transition name="bx-im-recent-new-user-popup">--\x3e\n\t\t\t<div @click="onClick" @mouseover="onMouseOver" @mouseleave="onMouseLeave" class="bx-im-new-user-popup__container">\n\t\t\t\t<div class="bx-im-new-user-popup__title">{{ title }}</div>\n\t\t\t\t<div class="bx-im-new-user-popup__text">{{ text }}</div>\n\t\t\t</div>\n\x3c!--\t\t</Transition>--\x3e\n\t`};const I={props:{item:{type:Object,required:true}},data(){return{}},computed:{recentItem(){return this.item},dialog(){return this.$store.getters["dialogues/get"](this.recentItem.dialogId,true)},user(){return this.$store.getters["users/get"](this.recentItem.dialogId,true)},needsBirthdayPlaceholder(){if(!this.isUser){return false}return this.$store.getters["recent/needsBirthdayPlaceholder"](this.recentItem.dialogId)},needsVacationPlaceholder(){if(!this.isUser){return false}return this.$store.getters["recent/needsVacationPlaceholder"](this.recentItem.dialogId)},showLastMessage(){return this.$store.getters["application/settings/get"](_.Settings.recent.showLastMessage)},hiddenMessageText(){if(this.isUser){return this.$store.getters["users/getPosition"](this.recentItem.dialogId)}return this.$Bitrix.Loc.getMessage("IM_LIST_RECENT_CHAT_TYPE_GROUP_V2")},isLastMessageAuthor(){if(!this.recentItem.message){return false}return this.recentItem.message.senderId===p.Core.getUserId()},lastMessageAuthorAvatar(){const t=this.$store.getters["dialogues/get"](this.recentItem.message.senderId);if(!t){return""}return t.avatar},lastMessageAuthorAvatarStyle(){return{backgroundImage:`url('${this.lastMessageAuthorAvatar}')`}},messageText(){const t=l.Parser.purifyRecent(this.recentItem);if(!t){return this.isUser?this.$store.getters["users/getPosition"](this.recentItem.dialogId):this.hiddenMessageText}return t},formattedMessageText(){const t=27;return g.Utils.text.insertUnseenWhitespace(this.messageText,t)},preparedDraftContent(){const t=this.loc("IM_LIST_RECENT_MESSAGE_DRAFT_2");const e="#TEXT#".length;const i=t.slice(0,-e);return`\n\t\t\t\t<span class="bx-im-list-recent-item__message_draft-prefix">${i}</span>\n\t\t\t\t<span class="bx-im-list-recent-item__message_text_content">${this.formattedDraftText}</span>\n\t\t\t`},formattedDraftText(){return l.Parser.purify({text:this.recentItem.draft.text,showIconIfEmptyText:false})},formattedVacationEndDate(){return c.DateTimeFormat.format("d.m.Y",this.user.absent)},isUser(){return this.dialog.type===_.DialogType.user},isChat(){return!this.isUser}},methods:{loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-list-recent-item__message_container">\n\t\t\t<span class="bx-im-list-recent-item__message_text">\n\t\t\t\t<span v-if="recentItem.draft.text && dialog.counter === 0" v-html="preparedDraftContent"></span>\n\t\t\t\t<div v-else-if="recentItem.invitation.isActive" class="bx-im-list-recent-item__balloon_container --invitation">\n\t\t\t\t\t<div class="bx-im-list-recent-item__balloon">{{ loc('IM_LIST_RECENT_INVITATION_NOT_ACCEPTED') }}</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-else-if="needsBirthdayPlaceholder" class="bx-im-list-recent-item__balloon_container --birthday">\n\t\t\t\t\t<div class="bx-im-list-recent-item__balloon">{{ loc('IM_LIST_RECENT_BIRTHDAY') }}</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-else-if="needsVacationPlaceholder" class="bx-im-list-recent-item__balloon_container --vacation">\n\t\t\t\t\t<div class="bx-im-list-recent-item__balloon">\n\t\t\t\t\t\t{{ loc('IM_LIST_RECENT_VACATION', {'#VACATION_END_DATE#': formattedVacationEndDate}) }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<template v-else-if="!showLastMessage">\n\t\t\t\t\t{{ hiddenMessageText }}\n\t\t\t\t</template>\n\t\t\t\t<template v-else>\n\t\t\t\t\t<span v-if="isLastMessageAuthor" class="bx-im-list-recent-item__message_author-icon --self"></span>\n\t\t\t\t\t<template v-else-if="isChat && recentItem.message.senderId">\n\t\t\t\t\t\t<span v-if="lastMessageAuthorAvatar" :style="lastMessageAuthorAvatarStyle" class="bx-im-list-recent-item__message_author-icon --user"></span>\n\t\t\t\t\t\t<span v-else class="bx-im-list-recent-item__message_author-icon --user --default"></span>\n\t\t\t\t\t</template>\n\t\t\t\t\t<span class="bx-im-list-recent-item__message_text_content">{{ formattedMessageText }}</span>\n\t\t\t\t</template>\n\t\t\t</span>\n\t\t</div>\n\t`};const f={none:"",like:"like",sending:"sending",sent:"sent",viewed:"viewed"};const M={props:{item:{type:Object,required:true}},data(){return{}},computed:{recentItem(){return this.item},user(){return this.$store.getters["users/get"](this.recentItem.dialogId,true)},dialog(){return this.$store.getters["dialogues/get"](this.recentItem.dialogId,true)},messageStatus(){if(this.recentItem.message.sending){return _.OwnMessageStatus.sending}if(this.recentItem.message.status===_.MessageStatus.delivered){return _.OwnMessageStatus.viewed}return _.OwnMessageStatus.sent},statusIcon(){if(!this.isLastMessageAuthor||this.isBot||this.needsBirthdayPlaceholder){return f.none}if(this.isSelfChat){return f.none}if(this.recentItem.liked){return f.like}return this.messageStatus},isLastMessageAuthor(){if(!this.recentItem.message){return false}return this.recentItem.message.senderId===p.Core.getUserId()},isSelfChat(){return this.isUser&&this.user.id===p.Core.getUserId()},isUser(){return this.dialog.type===_.DialogType.user},isBot(){if(this.isUser){return this.user.bot}return false},needsBirthdayPlaceholder(){if(!this.isUser){return false}return this.$store.getters["recent/needsBirthdayPlaceholder"](this.recentItem.dialogId)}},template:`\n\t\t<div class="bx-im-list-recent-item__status-icon" :class="'--' + statusIcon"></div>\n\t`};const b="im-new-user-popup";const x={name:"RecentItem",components:{Avatar:h.Avatar,ChatTitle:h.ChatTitle,NewUserPopup:C,MessageText:I,MessageStatus:M},props:{item:{type:Object,required:true},compactMode:{type:Boolean,default:false},isVisibleOnScreen:{type:Boolean,required:true}},data(){return{showNewUserPopup:false}},computed:{AvatarSize:()=>h.AvatarSize,recentItem(){return this.item},formattedDate(){if(this.needsBirthdayPlaceholder){return this.$Bitrix.Loc.getMessage("IM_LIST_RECENT_BIRTHDAY_DATE")}return this.formatDate(this.recentItem.message.date)},formattedCounter(){return this.dialog.counter>99?"99+":this.dialog.counter.toString()},user(){return this.$store.getters["users/get"](this.recentItem.dialogId,true)},dialog(){return this.$store.getters["dialogues/get"](this.recentItem.dialogId,true)},layout(){return this.$store.getters["application/getLayout"]},isUser(){return this.dialog.type===_.DialogType.user},isChat(){return!this.isUser},isSelfChat(){return this.isUser&&this.user.id===p.Core.getUserId()},isChatSelected(){if(this.layout.name!==_.Layout.chat.name){return false}return this.layout.entityId===this.recentItem.dialogId},isChatMuted(){if(this.isUser){return false}const t=this.dialog.muteList.find((t=>t===p.Core.getUserId()));return!!t},isSomeoneTyping(){return this.dialog.writingList.length>0},needsBirthdayPlaceholder(){if(!this.isUser){return false}return this.$store.getters["recent/needsBirthdayPlaceholder"](this.recentItem.dialogId)},showBirthdays(){return this.$store.getters["application/settings/get"](_.Settings.recent.showBirthday)},showLastMessage(){return this.$store.getters["application/settings/get"](_.Settings.recent.showLastMessage)},showCounterContainer(){return!this.needsBirthdayPlaceholder&&!this.invitation.isActive},showPinnedIcon(){return this.recentItem.pinned&&this.dialog.counter===0&&!this.recentItem.unread},showUnreadWithoutCounter(){return this.recentItem.unread&&this.dialog.counter===0},showUnreadWithCounter(){return this.recentItem.unread&&this.dialog.counter>0},showCounter(){return!this.recentItem.unread&&this.dialog.counter>0&&!this.isSelfChat},invitation(){return this.recentItem.invitation},newUserPopupContainer(){return`#popup-window-content-${b}-${this.recentItem.dialogId}`},wrapClasses(){return{"--pinned":this.recentItem.pinned,"--selected":!this.compactMode&&this.isChatSelected}},itemClasses(){return{"--no-text":!this.showLastMessage}},compactItemClasses(){return{"--no-counter":this.dialog.counter===0}}},watch:{invitation(t,e){if(!this.compactMode){return false}if(e.isActive===true&&t.isActive===false){this.openNewUserPopup()}}},methods:{openNewUserPopup(){if(!this.isVisibleOnScreen||a.MessengerSlider.getInstance().isOpened()){return false}this.newUserPopup=this.getNewUserPopup();this.newUserPopup.show();this.showNewUserPopup=true;this.$nextTick((()=>{this.newUserPopup.setOffset({offsetTop:-this.newUserPopup.popupContainer.offsetHeight+1,offsetLeft:-this.newUserPopup.popupContainer.offsetWidth+13});this.newUserPopup.adjustPosition()}))},getNewUserPopup(){return r.PopupManager.create({id:`${b}-${this.recentItem.dialogId}`,bindElement:this.$refs.container,bindOptions:{forceBindPosition:true},className:`bx-${b}`,cacheable:false,animation:{showClassName:"bx-im-new-user-popup__animation_show",closeClassName:"bx-im-new-user-popup__animation_hide",closeAnimationType:"animation"}})},onNewUserPopupClick(){o.Messenger.openChat(this.recentItem.dialogId)},onNewUserPopupClose(){this.newUserPopup.close();this.newUserPopup=null;this.showNewUserPopup=false},formatDate(t){return d.DateFormatter.formatByTemplate(t,d.DateTemplate.recent)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div :data-id="recentItem.dialogId" :class="wrapClasses" class="bx-im-list-recent-item__wrap">\n\t\t\t<div v-if="!compactMode" :class="itemClasses" class="bx-im-list-recent-item__container">\n\t\t\t\t<div class="bx-im-list-recent-item__avatar_container">\n\t\t\t\t\t<div v-if="invitation.isActive" class="bx-im-list-recent-item__avatar_invitation"></div>\n\t\t\t\t\t<div v-else class="bx-im-list-recent-item__avatar_content">\n\t\t\t\t\t\t<Avatar :dialogId="recentItem.dialogId" :size="AvatarSize.XL" :withStatus="!isSomeoneTyping" :withSpecialTypes="!isSomeoneTyping" />\n\t\t\t\t\t\t<div v-if="isSomeoneTyping" class="bx-im-list-recent-item__avatar_typing"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-list-recent-item__content_container">\n\t\t\t\t\t<div class="bx-im-list-recent-item__content_header">\n\t\t\t\t\t\t<ChatTitle :dialogId="recentItem.dialogId" :withMute="true" />\n\t\t\t\t\t\t<div class="bx-im-list-recent-item__date">\n\t\t\t\t\t\t\t<MessageStatus :item="item" />\n\t\t\t\t\t\t\t<span>{{ formattedDate }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-list-recent-item__content_bottom">\n\t\t\t\t\t\t<MessageText :item="recentItem" />\n\t\t\t\t\t\t<div v-if="showCounterContainer" :class="{'--extended': dialog.counter > 99, '--withUnread': recentItem.unread}" class="bx-im-list-recent-item__counter_wrap">\n\t\t\t\t\t\t\t<div class="bx-im-list-recent-item__counter_container">\n\t\t\t\t\t\t\t\t<div v-if="showPinnedIcon" class="bx-im-list-recent-item__pinned-icon"></div>\n\t\t\t\t\t\t\t\t<div v-else-if="showUnreadWithoutCounter" :class="{'--muted': isChatMuted}"  class="bx-im-list-recent-item__counter_number --no-counter"></div>\n\t\t\t\t\t\t\t\t<div v-else-if="showUnreadWithCounter" :class="{'--muted': isChatMuted}"  class="bx-im-list-recent-item__counter_number --with-counter">\n\t\t\t\t\t\t\t\t\t{{ formattedCounter }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div v-else-if="showCounter" :class="{'--muted': isChatMuted}" class="bx-im-list-recent-item__counter_number">\n\t\t\t\t\t\t\t\t\t{{ formattedCounter }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div v-if="compactMode" :class="compactItemClasses" class="bx-im-list-recent-item__container" ref="container">\n\t\t\t\t<div class="bx-im-list-recent-item__avatar_container">\n\t\t\t\t\t<div v-if="invitation.isActive" class="bx-im-list-recent-item__avatar_invitation"></div>\n\t\t\t\t\t<Avatar v-else :dialogId="recentItem.dialogId" :size="AvatarSize.M" :withStatus="false" :withSpecialTypes="false" />\n\t\t\t\t\t<div v-if="dialog.counter > 0" :class="{'--muted': isChatMuted}" class="bx-im-list-recent-item__avatar_counter">\n\t\t\t\t\t\t{{ formattedCounter }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Teleport v-if="showNewUserPopup" :to="newUserPopupContainer">\n\t\t\t\t\t<NewUserPopup\n\t\t\t\t\t\t:title="dialog.name"\n\t\t\t\t\t\t:text="loc('IM_LIST_RECENT_NEW_USER_POPUP_TEXT')"\n\t\t\t\t\t\t@click="onNewUserPopupClick"\n\t\t\t\t\t\t@close="onNewUserPopupClose"\n\t\t\t\t\t/>\n\t\t\t\t</Teleport>\n\t\t\t</div>\n\t\t</div>\n\t`};const T={name:"ActiveCall",components:{Avatar:h.Avatar,ChatTitle:h.ChatTitle,Button:h.Button},props:{item:{type:Object,required:true},compactMode:{type:Boolean,default:false}},emits:["click"],computed:{RecentCallStatus:()=>_.RecentCallStatus,AvatarSize:()=>h.AvatarSize,ButtonSize:()=>h.ButtonSize,ButtonColor:()=>h.ButtonColor,ButtonIcon:()=>h.ButtonIcon,activeCall(){return this.item},preparedName(){return m.Text.decode(this.activeCall.name)},anotherDeviceColorScheme(){return{backgroundColor:"transparent",borderColor:"#bbde4d",iconColor:"#525c69",textColor:"#525c69",hoverColor:"transparent"}},isTabWithActiveCall(){return!!this.getCallManager().hasCurrentCall()},hasJoined(){return this.activeCall.state===_.RecentCallStatus.joined}},methods:{onJoinClick(){this.getCallManager().joinCall(this.activeCall.call.id)},onLeaveCallClick(){this.getCallManager().leaveCurrentCall()},onClick(t){if(!this.isTabWithActiveCall){return}const e=this.$store.getters["recent/get"](this.activeCall.dialogId);if(!e){return}this.$emit("click",{item:e,$event:t})},returnToCall(){if(this.activeCall.state!==_.RecentCallStatus.joined){return}this.getCallManager().unfoldCurrentCall()},getCallManager(){return u.CallManager.getInstance()},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div :data-id="activeCall.dialogId" class="bx-im-list-recent-item__wrap">\n\t\t\t<div v-if="!compactMode" @click="onClick" class="bx-im-list-recent-item__container bx-im-list-recent-active-call__container">\n\t\t\t\t<div class="bx-im-list-recent-item__avatar_container">\n\t\t\t\t\t<Avatar :dialogId="activeCall.dialogId" :size="AvatarSize.XL" />\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-list-recent-item__content_container">\n\t\t\t\t\t<div class="bx-im-list-recent-active-call__title_container">\n\t\t\t\t\t\t<ChatTitle :text="preparedName" />\n\t\t\t\t\t\t<div class="bx-im-list-recent-active-call__title_icon"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if="!hasJoined" class="bx-im-list-recent-active-call__actions_container">\n\t\t\t\t\t\t<div class="bx-im-list-recent-active-call__actions_item --join">\n\t\t\t\t\t\t\t<Button @click.stop="onJoinClick" :size="ButtonSize.M" :color="ButtonColor.Success" :isRounded="true" :text="loc('IM_LIST_RECENT_ACTIVE_CALL_JOIN')" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else-if="hasJoined && isTabWithActiveCall" class="bx-im-list-recent-active-call__actions_container">\n\t\t\t\t\t\t<div class="bx-im-list-recent-active-call__actions_item --return">\n\t\t\t\t\t\t\t<Button @click.stop="returnToCall" :size="ButtonSize.M" :color="ButtonColor.Success" :isRounded="true" :text="loc('IM_LIST_RECENT_ACTIVE_CALL_RETURN')" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-list-recent-active-call__actions_item --end-call">\n\t\t\t\t\t\t\t<Button @click.stop="onLeaveCallClick" :size="ButtonSize.M" :color="ButtonColor.Danger" :isRounded="true" :icon="ButtonIcon.EndCall" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else-if="hasJoined && !isTabWithActiveCall" class="bx-im-list-recent-active-call__actions_container">\n\t\t\t\t\t\t<div class="bx-im-list-recent-active-call__actions_item --another-device">\n\t\t\t\t\t\t\t<Button :size="ButtonSize.M" :customColorScheme="anotherDeviceColorScheme" :isRounded="true" :text="loc('IM_LIST_RECENT_ACTIVE_CALL_ANOTHER_DEVICE')" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div v-if="compactMode" @click="onClick" class="bx-im-list-recent-item__container bx-im-list-recent-active-call__container">\n\t\t\t\t<div class="bx-im-list-recent-item__avatar_container">\n\t\t\t\t\t<Avatar :dialogId="activeCall.dialogId" :size="AvatarSize.M" :withStatus="false" :withSpecialTypes="false" />\n\t\t\t\t\t<div class="bx-im-list-recent-active-call__icon" :class="'--' + activeCall.state"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};class S extends v.EventEmitter{static getInstance(){if(!this.instance){this.instance=new this}return this.instance}constructor(){super();this.setEventNamespace(S.eventNamespace);this.init()}isSupported(){return!m.Type.isUndefined(window.BroadcastChannel)&&!g.Utils.platform.isBitrixDesktop()}init(){if(!this.isSupported()){return}this.channel=new BroadcastChannel(S.channelName);this.channel.addEventListener("message",(({data:{type:t,data:e}})=>{this.emit(t,e)}))}sendRecentList(t){if(!this.isSupported()){return}this.channel.postMessage({type:S.events.recentListUpdate,data:t})}}S.instance=null;S.channelName="im-recent";S.eventNamespace="BX.Messenger.v2.Recent.BroadcastManager";S.events={recentListUpdate:"recentListUpdate"};class w{constructor(){this.store=p.Core.getStore()}init(){this.onDialogInitedHandler=this.onDialogInited.bind(this);v.EventEmitter.subscribe(_.EventType.dialog.onDialogInited,this.onDialogInitedHandler)}destroy(){v.EventEmitter.unsubscribe(_.EventType.dialog.onDialogInited,this.onDialogInitedHandler)}onDialogInited(t){const{dialogId:e}=t.getData();const i=this.store.getters["recent/get"](e);if(!i||!i.liked){return}this.store.dispatch("recent/like",{id:e,liked:false})}}const B={name:"RecentList",components:{LoadingState:h.RecentLoadingState,RecentItem:x,ActiveCall:T},directives:{"recent-list-observer":{mounted(t,e){e.instance.observer.observe(t)}}},props:{compactMode:{type:Boolean,default:false},recentService:{type:Object,required:false,default:null}},emits:["chatClick"],data(){return{isLoading:false,visibleElements:new Set,listIsScrolled:false}},computed:{collection(){return this.getRecentService().getCollection()},preparedItems(){const t=this.collection.filter((t=>{if(!this.showBirthdays&&t.options.birthdayPlaceholder){return false}const e=this.$store.getters["dialogues/get"](t.dialogId,true);const i=e.type===_.DialogType.user;const s=i&&this.showBirthdays&&this.$store.getters["users/hasBirthday"](t.dialogId);if(!this.showInvited&&t.options.defaultUserRecord&&!s){return false}return true}));return[...t].sort(((t,e)=>{const i=this.$store.getters["recent/getMessageDate"](t.dialogId);const s=this.$store.getters["recent/getMessageDate"](e.dialogId);return s-i}))},activeCalls(){return this.$store.getters["recent/calls/get"]},pinnedItems(){return this.preparedItems.filter((t=>t.pinned===true))},generalItems(){return this.preparedItems.filter((t=>t.pinned===false))},showBirthdays(){return this.$store.getters["application/settings/get"](_.Settings.recent.showBirthday)},showInvited(){return this.$store.getters["application/settings/get"](_.Settings.recent.showInvited)},containerClasses(){return{"--compact":this.compactMode}}},created(){var t;this.service=(t=this.recentService)!=null?t:i.RecentService.getInstance();this.contextMenuManager=new s.RecentMenu;this.initBroadcastManager();this.initLikeManager();this.initObserver();this.initBirthdayCheck();this.managePreloadedList();this.isLoading=true;const e=!this.compactMode;this.getRecentService().loadFirstPage({ignorePreloadedItems:e}).then((()=>{this.isLoading=false;n.DraftManager.getInstance().initDraftHistory()}))},beforeUnmount(){this.contextMenuManager.destroy();this.clearBirthdayCheck();this.destroyBroadcastManager();this.destroyLikeManager()},methods:{onScroll(t){this.listIsScrolled=t.target.scrollTop>0;this.contextMenuManager.close();if(!this.oneScreenRemaining(t)||!this.getRecentService().hasMoreItemsToLoad){return false}this.isLoading=true;this.getRecentService().loadNextPage().then((()=>{this.isLoading=false}))},onClick(t){if(this.compactMode){o.Messenger.openChat(t.dialogId);return}this.$emit("chatClick",t.dialogId)},onRightClick(t,e){if(e.altKey&&e.shiftKey){return}const i=!this.compactMode||e.altKey?_.OpenTarget.current:_.OpenTarget.auto;const s={...t,compactMode:this.compactMode,target:i};this.contextMenuManager.openMenu(s,e.currentTarget);e.preventDefault()},onCallClick({item:t,$event:e}){this.onClick(t,e)},onCallRightClick({item:t,$event:e}){this.onRightClick(t,e)},oneScreenRemaining(t){return t.target.scrollTop+t.target.clientHeight>=t.target.scrollHeight-t.target.clientHeight},initObserver(){this.observer=new IntersectionObserver((t=>{t.forEach((t=>{if(t.isIntersecting&&t.intersectionRatio===1){this.visibleElements.add(t.target.dataset.id)}else if(!t.isIntersecting){this.visibleElements.delete(t.target.dataset.id)}}))}),{threshold:[0,1]})},initBroadcastManager(){this.onRecentListUpdate=t=>{this.getRecentService().setPreloadedData(t.data)};this.broadcastManager=S.getInstance();this.broadcastManager.subscribe(S.events.recentListUpdate,this.onRecentListUpdate)},destroyBroadcastManager(){this.broadcastManager=S.getInstance();this.broadcastManager.unsubscribe(S.events.recentListUpdate,this.onRecentListUpdate)},initLikeManager(){this.likeManager=new w;this.likeManager.init()},destroyLikeManager(){this.likeManager.destroy()},initBirthdayCheck(){const t=6e4*60*4;const e=6e4*60*24;this.birthdayCheckTimeout=setTimeout((()=>{this.getRecentService().loadFirstPage();this.birthdayCheckInterval=setInterval((()=>{this.getRecentService().loadFirstPage()}),e)}),g.Utils.date.getTimeToNextMidnight()+t)},clearBirthdayCheck(){clearTimeout(this.birthdayCheckTimeout);clearInterval(this.birthdayCheckInterval)},managePreloadedList(){const{preloadedList:t}=p.Core.getApplicationData();if(!t||!this.compactMode){return false}this.getRecentService().setPreloadedData(t);this.broadcastManager.sendRecentList(t)},getRecentService(){return this.service},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-list-recent__scope bx-im-list-recent__container" :class="containerClasses">\n\t\t\t<div v-if="activeCalls.length > 0" class="bx-im-list-recent__calls_container" :class="{'--with-shadow': listIsScrolled}">\n\t\t\t\t<ActiveCall\n\t\t\t\t\tv-for="activeCall in activeCalls"\n\t\t\t\t\t:key="activeCall.dialogId"\n\t\t\t\t\t:item="activeCall"\n\t\t\t\t\t:compactMode="compactMode"\n\t\t\t\t\t@click="onCallClick"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div @scroll="onScroll" class="bx-im-list-recent__scroll-container">\n\t\t\t\t<div v-if="pinnedItems.length > 0" class="bx-im-list-recent__pinned_scope bx-im-list-recent__pinned_container">\n\t\t\t\t\t<RecentItem\n\t\t\t\t\t\tv-for="item in pinnedItems"\n\t\t\t\t\t\t:key="item.dialogId"\n\t\t\t\t\t\t:item="item"\n\t\t\t\t\t\t:compactMode="compactMode"\n\t\t\t\t\t\t:isVisibleOnScreen="visibleElements.has(item.dialogId)"\n\t\t\t\t\t\tv-recent-list-observer\n\t\t\t\t\t\t@click="onClick(item, $event)"\n\t\t\t\t\t\t@click.right="onRightClick(item, $event)"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-list-recent__general_container">\n\t\t\t\t\t<RecentItem\n\t\t\t\t\t\tv-for="item in generalItems"\n\t\t\t\t\t\t:key="item.dialogId"\n\t\t\t\t\t\t:item="item"\n\t\t\t\t\t\t:compactMode="compactMode"\n\t\t\t\t\t\t:isVisibleOnScreen="visibleElements.has(item.dialogId)"\n\t\t\t\t\t\tv-recent-list-observer\n\t\t\t\t\t\t@click="onClick(item, $event)"\n\t\t\t\t\t\t@click.right="onRightClick(item, $event)"\n\t\t\t\t\t/>\n\t\t\t\t</div>\t\n\t\t\t\t<LoadingState v-if="isLoading" :compactMode="compactMode" />\n\t\t\t\t<div v-if="collection.length === 0" class="bx-im-list-recent__empty">\n\t\t\t\t\t{{ loc('IM_LIST_RECENT_EMPTY') }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};t.RecentList=B})(this.BX.Messenger.v2.Component.List=this.BX.Messenger.v2.Component.List||{},BX,BX.Messenger.v2.Provider.Service,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Main,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Main,BX.Messenger.v2.Lib,BX.Im.V2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Lib,BX,BX.Messenger.v2.Lib,BX.Event,BX.Messenger.v2.Application,BX.Messenger.v2.Const);
//# sourceMappingURL=recent-list.bundle.map.js