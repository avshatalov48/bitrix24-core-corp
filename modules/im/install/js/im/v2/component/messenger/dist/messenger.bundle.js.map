{"version":3,"file":"messenger.bundle.js","sources":["../src/messenger.js"],"sourcesContent":["import { EventEmitter, BaseEvent } from 'main.core.events';\n\nimport { MessengerNavigation } from 'im.v2.component.navigation';\nimport { RecentListContainer } from 'im.v2.component.list.container.recent';\nimport { OpenlineListContainer } from 'im.v2.component.list.container.openline';\nimport { ChatContent } from 'im.v2.component.content.chat';\nimport { CreateChatContent } from 'im.v2.component.content.create-chat';\nimport { OpenlinesContent } from 'im.v2.component.content.openlines';\nimport { NotificationContent } from 'im.v2.component.content.notification';\nimport { MarketContent } from 'im.v2.component.content.market';\nimport { SettingsContent } from 'im.v2.component.content.settings';\n\nimport { Logger } from 'im.v2.lib.logger';\nimport { InitManager } from 'im.v2.lib.init';\nimport { EventType, Layout } from 'im.v2.const';\nimport { CallManager } from 'im.v2.lib.call';\nimport { ThemeManager } from 'im.v2.lib.theme';\nimport { DesktopManager } from 'im.v2.lib.desktop';\n\nimport 'ui.fonts.opensans';\nimport './css/messenger.css';\nimport './css/tokens.css';\nimport './css/icons.css';\n\nimport type { ImModelDialog, ImModelLayout } from 'im.v2.model';\n\n// @vue/component\nexport const Messenger = {\n\tname: 'MessengerRoot',\n\tcomponents: {\n\t\tMessengerNavigation,\n\t\tRecentListContainer,\n\t\tOpenlineListContainer,\n\t\tChatContent,\n\t\tCreateChatContent,\n\t\tOpenlinesContent,\n\t\tNotificationContent,\n\t\tMarketContent,\n\t\tSettingsContent,\n\t},\n\tdata()\n\t{\n\t\treturn {\n\t\t\tcontextMessageId: 0,\n\t\t\topenlinesContentOpened: false,\n\t\t};\n\t},\n\tcomputed:\n\t{\n\t\tlayout(): ImModelLayout\n\t\t{\n\t\t\treturn this.$store.getters['application/getLayout'];\n\t\t},\n\t\tlayoutName(): string\n\t\t{\n\t\t\treturn this.layout?.name;\n\t\t},\n\t\tcurrentLayout(): {name: string, list: string, content: string}\n\t\t{\n\t\t\treturn Layout[this.layout.name];\n\t\t},\n\t\tentityId(): string\n\t\t{\n\t\t\treturn this.layout.entityId;\n\t\t},\n\t\tcurrentDialog(): ImModelDialog\n\t\t{\n\t\t\treturn this.$store.getters['dialogues/get'](this.entityId, true);\n\t\t},\n\t\tisChat(): boolean\n\t\t{\n\t\t\treturn this.layout.name === Layout.chat.name;\n\t\t},\n\t\tisNotification(): boolean\n\t\t{\n\t\t\treturn this.layout.name === Layout.notification.name;\n\t\t},\n\t\tisOpenline(): boolean\n\t\t{\n\t\t\treturn this.layout.name === Layout.openlines.name;\n\t\t},\n\t\tcontainerClasses(): string[]\n\t\t{\n\t\t\treturn {\n\t\t\t\t'--dark-theme': ThemeManager.isDarkTheme(),\n\t\t\t\t'--light-theme': ThemeManager.isLightTheme(),\n\t\t\t\t'--desktop': DesktopManager.isDesktop()\n\t\t\t};\n\t\t},\n\t\tcallContainerClass(): string[]\n\t\t{\n\t\t\treturn [CallManager.viewContainerClass];\n\t\t},\n\t},\n\twatch:\n\t{\n\t\tlayoutName:\n\t\t{\n\t\t\thandler(newLayoutName)\n\t\t\t{\n\t\t\t\tif (newLayoutName !== Layout.openlines.name)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.openlinesContentOpened = true;\n\t\t\t},\n\t\t\timmediate: true,\n\t\t},\n\t},\n\tcreated()\n\t{\n\t\tInitManager.start();\n\t\tLogger.warn('MessengerRoot created');\n\t},\n\tmounted()\n\t{\n\t\tEventEmitter.subscribe(EventType.dialog.goToMessageContext, this.onGoToMessageContext);\n\t},\n\tbeforeUnmount()\n\t{\n\t\tEventEmitter.unsubscribe(EventType.dialog.goToMessageContext, this.onGoToMessageContext);\n\t},\n\tmethods:\n\t{\n\t\tonNavigationClick({ layoutName, layoutEntityId }: {layoutName: string, layoutEntityId: string | number})\n\t\t{\n\t\t\tlet entityId = '';\n\t\t\tconst isChatNext = layoutName === Layout.chat.name;\n\t\t\tconst isMarketNext = layoutName === Layout.market.name;\n\n\t\t\tif (isChatNext)\n\t\t\t{\n\t\t\t\tentityId = this.previouslySelectedChat;\n\t\t\t}\n\t\t\telse if (isMarketNext)\n\t\t\t{\n\t\t\t\tentityId = layoutEntityId;\n\t\t\t}\n\n\t\t\tthis.$store.dispatch('application/setLayout', { layoutName, entityId });\n\t\t},\n\t\tonEntitySelect({ layoutName, entityId })\n\t\t{\n\t\t\tthis.saveLastOpenedChat(entityId);\n\t\t\tthis.$store.dispatch('application/setLayout', { layoutName, entityId });\n\t\t},\n\t\tonGoToMessageContext(event: BaseEvent)\n\t\t{\n\t\t\tconst { dialogId, messageId } = event.getData();\n\t\t\tif (this.currentDialog.dialogId === dialogId)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$store.dispatch('application/setLayout', {\n\t\t\t\tlayoutName: Layout.chat.name,\n\t\t\t\tentityId: dialogId,\n\t\t\t\tcontextId: messageId,\n\t\t\t});\n\t\t},\n\t\tsaveLastOpenedChat(dialogId: string)\n\t\t{\n\t\t\tthis.previouslySelectedChat = dialogId || '';\n\t\t},\n\t},\n\ttemplate: `\n\t\t<div class=\"bx-im-messenger__scope bx-im-messenger__container\" :class=\"containerClasses\">\n\t\t\t<div class=\"bx-im-messenger__navigation_container\">\n\t\t\t\t<MessengerNavigation :currentLayoutName=\"currentLayout.name\" @navigationClick=\"onNavigationClick\" />\n\t\t\t</div>\n\t\t\t<div class=\"bx-im-messenger__layout_container\">\n\t\t\t\t<div class=\"bx-im-messenger__layout_content\">\n\t\t\t\t\t<div v-if=\"currentLayout.list\" class=\"bx-im-messenger__list_container\">\n\t\t\t\t\t\t<KeepAlive>\n\t\t\t\t\t\t\t<component :is=\"currentLayout.list\" @selectEntity=\"onEntitySelect\" />\n\t\t\t\t\t\t</KeepAlive>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"bx-im-messenger__content_container\">\n\t\t\t\t\t\t<div v-if=\"openlinesContentOpened\" class=\"bx-im-messenger__openlines_container\" :class=\"{'--hidden': !isOpenline}\">\n\t\t\t\t\t\t\t<OpenlinesContent v-show=\"isOpenline\" :entityId=\"entityId\" :contextMessageId=\"contextMessageId\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<component v-if=\"!isOpenline\" :is=\"currentLayout.content\" :entityId=\"entityId\" :contextMessageId=\"contextMessageId\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div :class=\"callContainerClass\"></div>\n\t`,\n};\n"],"names":["Messenger","name","components","MessengerNavigation","RecentListContainer","OpenlineListContainer","ChatContent","CreateChatContent","OpenlinesContent","NotificationContent","MarketContent","SettingsContent","data","contextMessageId","openlinesContentOpened","computed","layout","$store","getters","layoutName","currentLayout","Layout","entityId","currentDialog","isChat","chat","isNotification","notification","isOpenline","openlines","containerClasses","ThemeManager","isDarkTheme","isLightTheme","DesktopManager","isDesktop","callContainerClass","CallManager","viewContainerClass","watch","handler","newLayoutName","immediate","created","InitManager","start","Logger","warn","mounted","EventEmitter","subscribe","EventType","dialog","goToMessageContext","onGoToMessageContext","beforeUnmount","unsubscribe","methods","onNavigationClick","layoutEntityId","isChatNext","isMarketNext","market","previouslySelectedChat","dispatch","onEntitySelect","saveLastOpenedChat","event","dialogId","messageId","getData","contextId","template"],"mappings":"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"}