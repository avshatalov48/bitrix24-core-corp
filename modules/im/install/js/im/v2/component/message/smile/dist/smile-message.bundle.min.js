this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(e,t,s,n){"use strict";const a={name:"MediaMessage",components:{BaseMessage:s.BaseMessage,MessageStatus:n.MessageStatus},props:{item:{type:Object,required:true},dialogId:{type:String,required:true}},emits:["contextMenuClick","quoteMessage"],computed:{message(){return this.item},formattedText(){return t.Parser.decodeMessage(this.message)}},template:`\n\t\t<BaseMessage\n\t\t\t:dialogId="dialogId"\n\t\t\t:item="item"\n\t\t\t:withMessageStatus="false"\n\t\t\t:withText="false"\n\t\t\t:withBackground="false"\n\t\t\t:withReactions="true"\n\t\t\treactionsSelectorSlot="content"\n\t\t\t@contextMenuClick="$emit('contextMenuClick', $event)"\n\t\t\t@quoteMessage="$emit('quoteMessage', $event)"\n\t\t>\n\t\t\t<div class="bx-im-message-base__text --emoji" v-html="formattedText"></div>\n\t\t\t<MessageStatus :item="message" :isOverlay="true" />\n\t\t</BaseMessage>\n\t`};e.SmileMessage=a})(this.BX.Messenger.v2.Component.Message=this.BX.Messenger.v2.Component.Message||{},BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Message,BX.Messenger.v2.Component.Message);
//# sourceMappingURL=smile-message.bundle.map.js