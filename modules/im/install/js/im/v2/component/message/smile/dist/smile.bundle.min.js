this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(e,t,s,n){"use strict";const i={name:"SmileMessage",components:{BaseMessage:t.BaseMessage,MessageStatus:s.MessageStatus,ReactionList:s.ReactionList,ReactionSelector:s.ReactionSelector,ContextMenu:s.ContextMenu},props:{item:{type:Object,required:true},dialogId:{type:String,required:true},menuIsActiveForId:{type:[String,Number],default:0}},computed:{message(){return this.item},text(){return n.Parser.decodeSmile(this.message.text,{ratioConfig:{Default:1,Big:3},enableBigSmile:true})}},template:`\n\t\t<BaseMessage\n\t\t\t:dialogId="dialogId"\n\t\t\t:item="item"\n\t\t\t:withBackground="false"\n\t\t\t:withDefaultContextMenu="false"\n\t\t>\n\t\t\t<div class="bx-im-message-smile__container bx-im-message-smile__scope">\n\t\t\t\t<div class="bx-im-message-smile__content-container">\n\t\t\t\t\t<span class="bx-im-message-smile__text" v-html="text"></span>\n\t\t\t\t\t<div class="bx-im-message-smile__message-status-container">\n\t\t\t\t\t\t<MessageStatus :item="message" :isOverlay="true" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<ReactionSelector :messageId="message.id" />\n\t\t\t\t</div>\n\t\t\t\t<ContextMenu :message="message" :menuIsActiveForId="menuIsActiveForId" />\n\t\t\t</div>\n\t\t\t<div class="bx-im-message-smile__reactions-container">\n\t\t\t\t<ReactionList :messageId="message.id" class="bx-im-message-smile__reactions" />\n\t\t\t</div>\n\t\t</BaseMessage>\n\t`};e.SmileMessage=i})(this.BX.Messenger.v2.Component.Message=this.BX.Messenger.v2.Component.Message||{},BX.Messenger.v2.Component.Message,BX.Messenger.v2.Component.Message,BX.Messenger.v2.Lib);
//# sourceMappingURL=smile.bundle.map.js