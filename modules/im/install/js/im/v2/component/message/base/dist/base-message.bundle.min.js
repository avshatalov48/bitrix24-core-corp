this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,s,i,n,a,o,r,m,l,d){"use strict";const g={name:"MediaComponent",components:{File:l.File,Image:l.Image,Audio:l.Audio,Video:l.Video},props:{item:{type:Object,required:true}},computed:{FileType:()=>r.FileType,message(){return this.item},messageFiles(){const t=[];if(this.message.files.length===0){return t}this.message.files.forEach((e=>{const s=this.$store.getters["files/get"](e,true);t.push(s)}));return t},messageType(){return this.$store.getters["messages/getMessageType"](this.message.id)}},template:`\n\t\t<div v-for="file in messageFiles" :key="file.id" class="bx-im-message-base__media-wrap">\n\t\t\t<Image v-if="file.type === FileType.image && file.image" :item="file" :messageId="message.id" />\n\t\t\t<Audio v-else-if="file.type === FileType.audio" :item="file" :messageType="messageType" :messageId="message.id" />\n\t\t\t<Video v-else-if="file.type === FileType.video" :item="file" :messageId="message.id" />\n\t\t\t<File v-else :item="file" :messageId="message.id" />\n\t\t</div>\n\t`};const c={props:{item:{type:Object,required:true}},data(){return{}},computed:{message(){return this.item},messageStatus(){if(this.message.sending){return r.OwnMessageStatus.sending}if(this.message.viewedByOthers){return r.OwnMessageStatus.viewed}return r.OwnMessageStatus.sent}},template:`\n\t\t<div :class="'--' + messageStatus" class="bx-im-message-base__message-status"></div>\n\t`};const u={props:{item:{type:Object,required:true}},data(){return{}},computed:{formattedText(){return m.Parser.decodeMessage(this.item)}},template:`\n\t\t<div class="bx-im-message-base__text" v-html="formattedText"></div>\n\t`};const h={methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-message-base__deleted_container">\n\t\t\t<div class="bx-im-message-base__deleted_icon"></div>\n\t\t\t<div class="bx-im-message-base__deleted_text">{{ loc('IM_MESSENGER_MESSAGE_DELETED') }}</div>\n\t\t</div>\n\t`};const v={methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-message-base__unsupported_container">\n\t\t\t<div class="bx-im-message-base__unsupported_icon"></div>\n\t\t\t<div class="bx-im-message-base__unsupported_text">{{ loc('IM_MESSENGER_MESSAGE_UNSUPPORTED_EXTENSION') }}</div>\n\t\t</div>\n\t`};const _="#00ace3";const p={name:"CallInviteExtension",components:{ButtonComponent:l.Button},props:{item:{type:Object,required:true}},data(){return{}},computed:{ButtonSize:()=>l.ButtonSize,ButtonIcon:()=>l.ButtonIcon,buttonColorScheme(){return{backgroundColor:"transparent",borderColor:_,iconColor:_,textColor:_,hoverColor:"transparent"}},message(){return this.item},extensionParams(){return this.item.extensionParams}},methods:{loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)},onCallButtonClick(){d.Utils.browser.openLink(this.extensionParams.link)}},template:`\n\t\t<div class="bx-im-message-base-call-invite__scope bx-im-message-base__extension">\n\t\t\t<div class="bx-im-message-base-call-invite__container">\n\t\t\t\t<div class="bx-im-message-base-call-invite__image"></div>\n\t\t\t\t<div class="bx-im-message-base-call-invite__content">\n\t\t\t\t\t<div class="bx-im-message-base-call-invite__title">{{ loc('IM_MESSENGER_MESSAGE_CALL_INVITE_TITLE') }}</div>\n\t\t\t\t\t<div class="bx-im-message-base-call-invite__description">{{ loc('IM_MESSENGER_MESSAGE_CALL_INVITE_DESCRIPTION') }}</div>\n\t\t\t\t\t<div class="bx-im-message-base-call-invite__buttons_container">\n\t\t\t\t\t\t<div class="bx-im-message-base-call-invite__buttons_item">\n\t\t\t\t\t\t\t<ButtonComponent\n\t\t\t\t\t\t\t\t:size="ButtonSize.L" \n\t\t\t\t\t\t\t\t:icon="ButtonIcon.Call" \n\t\t\t\t\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t\t\t\t:text="loc('IM_MESSENGER_MESSAGE_CALL_INVITE_BUTTON_JOIN')"\n\t\t\t\t\t\t\t\t@click="onCallButtonClick"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const b={name:"BaseMessage",components:{Attach:l.Attach,Avatar:l.Avatar,ChatTitle:l.ChatTitle,Reactions:i.Reactions,Media:g,OwnMessageStatus:c,ReactionSelector:a.ReactionSelector,ReactionList:a.ReactionList,TextExtension:u,DeletedExtension:h,UnsupportedExtension:v,CallInviteExtension:p},props:{item:{type:Object,required:true},withAvatar:{type:Boolean,required:true},withTitle:{type:Boolean,default:true},menuIsActiveForId:{type:Number,default:0},dialogId:{type:String,required:true}},emits:["contextMenuClick","quoteMessage"],data(){return{}},computed:{AvatarSize:()=>l.AvatarSize,message(){return this.item},dialog(){return this.$store.getters["dialogues/get"](this.dialogId,true)},user(){return this.$store.getters["users/get"](this.message.authorId,true)},dialogColor(){return this.dialog.type===r.DialogType.private?this.user.color:this.dialog.color},authorDialogId(){if(this.message.authorId){return this.message.authorId.toString()}return this.dialogId},isSystemMessage(){return this.message.authorId===0},isSelfMessage(){return this.message.authorId===n.Core.getUserId()},isOpponentMessage(){return!this.isSystemMessage&&!this.isSelfMessage},showTitle(){return this.withTitle&&!this.isSystemMessage&&!this.isSelfMessage},canSetReactions(){return e.Type.isNumber(this.message.id)},containerClasses(){return{"--system":this.isSystemMessage,"--self":this.isSelfMessage,"--opponent":this.isOpponentMessage,"--with-avatar":this.withAvatar}},formattedDate(){return o.DateFormatter.formatByCode(this.message.date,o.DateCode.shortTimeFormat)},menuTitle(){return this.loc("IM_MESSENGER_MESSAGE_MENU_TITLE",{"#SHORTCUT#":d.Utils.platform.isMac()?"CMD":"CTRL"})},extensionId(){const t=this.message.text.length===0&&this.message.files.length===0&&this.message.attach.length===0;if(this.message.isDeleted||t){return r.MessageExtension.deleted}return this.message.extensionId}},methods:{onMenuClick(t){if(d.Utils.key.isCmdOrCtrl(t)){const t={...this.message};const e=document.getSelection().toString();if(e.length>0){t.text=e}this.$emit("quoteMessage",{message:t});return}this.$emit("contextMenuClick",{message:this.message,$event:t})},onContainerClick(t){m.Parser.executeClickEvent(t)},onAuthorNameClick(){const t=Number.parseInt(this.authorDialogId,10);if(t===n.Core.getUserId()){return}s.EventEmitter.emit(r.EventType.textarea.insertMention,{mentionText:this.user.name,mentionReplacement:d.Utils.user.getMentionBbCode(this.user.id,this.user.name)})},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div :class="containerClasses" :data-id="message.id" class="bx-im-message-base__scope bx-im-message-base__container" @click="onContainerClick">\n\t\t\t<div class="bx-im-message-base__body">\n\t\t\t\t<div @click="onAuthorNameClick" v-if="showTitle" class="bx-im-message-base__name">\n\t\t\t\t\t<ChatTitle :dialogId="authorDialogId" :onlyFirstName="true" :showItsYou="false" :withColor="true" :withLeftIcon="false" />\n\t\t\t\t</div>\n\t\t\t\t<Media :item="message" />\n\t\t\t\t<component :is="extensionId" :item="message" />\n\t\t\t\t<div v-for="config in message.attach" :key="config.ID" class="bx-im-message-base__attach-wrap">\n\t\t\t\t\t<Attach :baseColor="dialogColor" :config="config"/>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div class="bx-im-message-base__bottom-container">\n\t\t\t\t\t<ReactionList v-if="canSetReactions" :messageId="message.id" />\n\t\t\t\t\t<div class="bx-im-message-base__bottom-container_right">\n\t\t\t\t\t\t<div v-if="message.isEdited && !message.isDeleted" class="bx-im-message-base__edit-mark">\n\t\t\t\t\t\t\t{{ loc('IM_MESSENGER_MESSAGE_EDITED') }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-message-base__date">{{ formattedDate }}</div>\n\t\t\t\t\t\t<OwnMessageStatus v-if="isSelfMessage" :item="message" />\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-message-base__reactions-container">\n\t\t\t\t\t<ReactionSelector v-if="canSetReactions" :messageId="message.id" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-message-base__actions">\n\t\t\t\t<div :title="menuTitle" @click="onMenuClick" :class="{'--active': menuIsActiveForId === message.id}" class="bx-im-message-base__menu"></div>\n\t\t\t</div>\n\t\t</div>\n\t`};t.BaseMessage=b})(this.BX.Messenger.v2.Component.Message=this.BX.Messenger.v2.Component.Message||{},BX,BX.Event,BX.Vue3.Components,BX.Messenger.v2.Application,BX.Messenger.v2.Component.Message,BX.Im.V2.Lib,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Lib);
//# sourceMappingURL=base-message.bundle.map.js