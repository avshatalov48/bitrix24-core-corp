this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};(function(t,e,s,i,n,o,r,a,c,u,l,p,d,g,m,v,_,h,S){"use strict";const x={components:{Button:u.Button},emits:["openProfile","logout"],data(){return{}},computed:{ButtonSize:()=>u.ButtonSize,ButtonColor:()=>u.ButtonColor},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-user-settings-popup__button-panel">\n\t\t\t<div class="bx-im-user-settings-popup__button-panel_button">\n\t\t\t\t<Button\n\t\t\t\t\t:color="ButtonColor.PrimaryBorder"\n\t\t\t\t\t:size="ButtonSize.M"\n\t\t\t\t\t:isUppercase="false"\n\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t:text="loc('IM_USER_SETTINGS_OPEN_PROFILE')"\n\t\t\t\t\t@click="$emit('openProfile')"\n\t\t\t\t/>\n\t\t\t</div>\n\x3c!--\t\t\t<div class="bx-im-user-settings-popup__button-panel_button">--\x3e\n\x3c!--\t\t\t\t<Button--\x3e\n\x3c!--\t\t\t\t\t:color="ButtonColor.DangerBorder"--\x3e\n\x3c!--\t\t\t\t\t:size="ButtonSize.M"--\x3e\n\x3c!--\t\t\t\t\t:isUppercase="false"--\x3e\n\x3c!--\t\t\t\t\t:isRounded="true"--\x3e\n\x3c!--\t\t\t\t\t:text="loc('IM_USER_SETTINGS_LOGOUT')"--\x3e\n\x3c!--\t\t\t\t\t@click="$emit('logout')"--\x3e\n\x3c!--\t\t\t\t/>--\x3e\n\x3c!--\t\t\t</div>--\x3e\n\t\t</div>\n\t`};class b{constructor(){this.store=null;this.restClient=null;this.store=_.Core.getStore();this.restClient=_.Core.getRestClient()}changeStatus(t){if(!h.UserStatus[t]){return false}p.Logger.warn(`StatusService: change current user status to ${t}`);this.store.dispatch("users/setStatus",{status:t});return this.restClient.callMethod(h.RestMethod.imUserStatusSet,{STATUS:t}).catch((t=>{console.error("StatusService: changeStatus error",t)}))}}const k={name:"UserStatusContent",components:{UserStatus:u.UserStatus},emits:["close"],computed:{UserStatusSize:()=>u.UserStatusSize,UserStatusType:()=>h.UserStatus,statusList(){return[h.UserStatus.online,h.UserStatus.break,h.UserStatus.away,h.UserStatus.dnd]}},methods:{onStatusClick(t){this.getStatusService().changeStatus(t);this.$emit("close")},getStatusService(){if(!this.statusService){this.statusService=new b}return this.statusService},getStatusText(t){return c.Utils.user.getStatusText(t)}},template:`\n\t\t<div class="bx-im-user-status-popup__scope bx-im-user-status-popup__container">\n\t\t\t<div\n\t\t\t\tv-for="status in statusList"\n\t\t\t\t:key="status"\n\t\t\t\t@click="onStatusClick(status)"\n\t\t\t\tclass="bx-im-user-status-popup__item"\n\t\t\t>\n\t\t\t\t<UserStatus :status="status" :size="UserStatusSize.M" />\n\t\t\t\t<div class="bx-im-user-status-popup__text">{{ getStatusText(status) }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const C="im-user-status-popup";const I={name:"UserStatusPopup",components:{MessengerPopup:u.MessengerPopup,UserStatusContent:k},props:{bindElement:{type:Object,required:true}},emits:["close"],computed:{POPUP_ID:()=>C,config(){return{width:190,bindElement:this.bindElement,offsetTop:4,padding:0}}},template:`\n\t\t<MessengerPopup\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<UserStatusContent @close="$emit('close')" />\n\t\t</MessengerPopup>\n\t`};const M={changeBackground(t){p.Logger.warn("Navigation: BackgroundService: changeBackground",t);const e=Number.parseInt(t,10);_.Core.getStore().dispatch("application/settings/set",{[h.Settings.dialog.background]:e});d.runAction(h.RestMethod.imV2SettingsGeneralUpdate,{data:{userId:_.Core.getUserId(),name:h.Settings.dialog.background,value:e}}).catch((t=>{console.error("Navigation: BackgroundService: error changing background",t)}))}};const f={name:"BackgroundContent",emits:["close"],computed:{currentBackgroundId(){return this.$store.getters["application/settings/get"](h.Settings.dialog.background).toString()},backgroundIdList(){return Object.keys(l.ThemeColorScheme)}},methods:{getBackgroundStyleById(t){return l.ThemeManager.getBackgroundStyleById(t)},onBackgroundClick(t){M.changeBackground(t)}},template:`\n\t\t<div class="bx-im-background-select-popup__container">\n\t\t\t\x3c!-- <div class="bx-im-background-select-popup__title">Chat background</div> --\x3e\n\t\t\t<div class="bx-im-background-select-popup__list">\n\t\t\t\t<div\n\t\t\t\t\tv-for="id in backgroundIdList"\n\t\t\t\t\t:key="id"\n\t\t\t\t\t:style="getBackgroundStyleById(id)"\n\t\t\t\t\tclass="bx-im-background-select-popup__item"\n\t\t\t\t\t:class="{'--active': id === currentBackgroundId}"\n\t\t\t\t\t@click="onBackgroundClick(id)"\n\t\t\t\t></div>\n\t\t\t</div>\n\t\t\t\x3c!-- <div @click="$emit('close')" class="bx-im-background-select-popup__close bx-im-messenger__cross-icon"></div> --\x3e\n\t\t</div>\n\t`};const B="im-background-select-popup";const U={name:"BackgroundPopup",components:{MessengerPopup:u.MessengerPopup,BackgroundContent:f},props:{bindElement:{type:Object,required:true}},emits:["close"],computed:{POPUP_ID:()=>B,config(){return{bindElement:this.bindElement,offsetTop:4,padding:0}}},template:`\n\t\t<MessengerPopup\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<BackgroundContent @close="$emit('close')" />\n\t\t</MessengerPopup>\n\t`};class P{constructor(){this.store=null;this.restClient=null;this.store=_.Core.getStore();this.restClient=_.Core.getRestClient()}disableBeta(){p.Logger.warn("VersionService: disable v2");return d.runAction(h.RestMethod.imV2BetaDisable).catch((t=>{p.Logger.error("VersionService: disable v2 error",t)}))}}const T={name:"UserSettingsContent",components:{Avatar:u.Avatar,UserStatus:u.UserStatus,ButtonPanel:x,UserStatusPopup:I,BackgroundPopup:U},emits:["closePopup","enableAutoHide","disableAutoHide"],data(){return{showStatusPopup:false,showBackgroundPopup:false,isChangingVersion:false}},computed:{AvatarSize:()=>u.AvatarSize,UserStatusSize:()=>u.UserStatusSize,currentUserId(){return _.Core.getUserId()},currentUser(){return this.$store.getters["users/get"](this.currentUserId,true)},currentUserPosition(){return this.$store.getters["users/getPosition"](this.currentUserId)},userStatus(){const t=this.$store.getters["users/get"](this.currentUserId,true);if(t){return t.status}return h.UserStatus.online},currentHost(){return location.hostname},userStatusText(){return c.Utils.user.getStatusText(this.currentUser.status)},profileUri(){return c.Utils.user.getProfileLink(this.currentUserId)}},methods:{onBackToOldChatClick(){this.isChangingVersion=true;this.getVersionService().disableBeta().then((()=>{if(a.DesktopManager.isDesktop()){window.location.reload()}else{window.location.replace("/online/")}})).catch((t=>{p.Logger.error("Error while switching version",t)}))},onStatusClick(){this.showStatusPopup=true;this.$emit("disableAutoHide")},onStatusPopupClose(){this.showStatusPopup=false;this.$emit("enableAutoHide")},onBackgroundSelectClick(){this.showBackgroundPopup=true;this.$emit("disableAutoHide")},onBackgroundPopupClose(){this.showBackgroundPopup=false;this.$emit("enableAutoHide")},onHelpClick(){var t;const e="17373696";(t=BX.Helper)==null?void 0:t.show(`redirect=detail&code=${e}`);this.$emit("closePopup")},onFeedbackClick(){BX.UI.Feedback.Form.open({id:"im-v2-feedback",forms:[{zones:["ru"],id:550,sec:"50my2x",lang:"ru"},{zones:["en"],id:560,sec:"621lbr",lang:"ru"}],presets:{sender_page:"profile"}});this.$emit("closePopup")},getVersionService(){if(!this.versionService){this.versionService=new P}return this.versionService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-user-settings-popup__scope bx-im-user-settings-popup__container">\n\t\t\t<div class="bx-im-user-settings-popup__header">\n\t\t\t\t<div class="bx-im-user-settings-popup__header_left">\n\t\t\t\t\t<Avatar :dialogId="currentUserId" :size="AvatarSize.XL" />\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-user-settings-popup__header_right">\n\t\t\t\t\t<div class="bx-im-user-settings-popup__domain">{{ currentHost }}</div>\n\t\t\t\t\t<div class="bx-im-user-settings-popup__user_name" :title="currentUser.name">{{ currentUser.name }}</div>\n\t\t\t\t\t<div class="bx-im-user-settings-popup__user_title" :title="currentUserPosition">{{ currentUserPosition }}</div>\n\t\t\t\t\t<a :href="profileUri" target="_blank" class="bx-im-user-settings-popup__user_link">\n\t\t\t\t\t\t<ButtonPanel @openProfile="$emit('closePopup')" />\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-user-settings-popup__list">\n\t\t\t\t<div class="bx-im-user-settings-popup__separator"></div>\n\t\t\t\t\x3c!-- Status select --\x3e\n\t\t\t\t<div @click="onStatusClick" class="bx-im-user-settings-popup__list-item --with-icon">\n\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_left">\n\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_status">\n\t\t\t\t\t\t\t<UserStatus :status="userStatus" :size="UserStatusSize.M" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_text">{{ userStatusText }}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_icon --chevron" ref="status-select"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-user-settings-popup__separator"></div>\n\t\t\t\t\x3c!-- Background select --\x3e\n\t\t\t\t<div @click="onBackgroundSelectClick" class="bx-im-user-settings-popup__list-item --with-icon">\n\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_left">\n\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_icon --background"></div>\n\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_text">{{ loc('IM_USER_SETTINGS_CHAT_BACKGROUND') }}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_icon --chevron" ref="background-select"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-user-settings-popup__separator"></div>\n\t\t\t\t\x3c!-- Help --\x3e\n\t\t\t\t<div @click="onHelpClick" class="bx-im-user-settings-popup__list-item">\n\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_left">\n\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_icon --help"></div>\n\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_text">{{ loc('IM_USER_SETTINGS_HELP') }}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-user-settings-popup__separator"></div>\n\t\t\t\t\x3c!-- Feedback --\x3e\n\t\t\t\t<div @click="onFeedbackClick" class="bx-im-user-settings-popup__list-item">\n\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_left">\n\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_icon --feedback"></div>\n\t\t\t\t\t\t<div class="bx-im-user-settings-popup__list-item_text">{{ loc('IM_USER_SETTINGS_FEEDBACK') }}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\x3c!-- Back to old chat --\x3e\n\t\t\t<div :class="{'--loading': isChangingVersion}" class="bx-im-user-settings-popup__old-chat">\n\t\t\t\t<div class="bx-im-user-settings-popup__list-item_icon --arrow-left"></div>\n\t\t\t\t<div @click="onBackToOldChatClick" class="bx-im-user-settings-popup__old-chat_text">\n\t\t\t\t\t{{ loc('IM_USER_SETTINGS_OLD_CHAT') }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<UserStatusPopup\n\t\t\tv-if="showStatusPopup"\n\t\t\t:bindElement="$refs['status-select'] || {}"\n\t\t\t@close="onStatusPopupClose"\n\t\t/>\n\t\t<BackgroundPopup\n\t\t\tv-if="showBackgroundPopup"\n\t\t\t:bindElement="$refs['background-select'] || {}"\n\t\t\t@close="onBackgroundPopupClose"\n\t\t/>\n\t`};const A="im-user-settings-popup";const N={name:"UserSettingsPopup",components:{MessengerPopup:u.MessengerPopup,UserSettingsContent:T},props:{bindElement:{type:Object,required:true}},emits:["close"],computed:{POPUP_ID:()=>A,config(){return{width:313,bindElement:this.bindElement,offsetTop:4,padding:0}}},template:`\n\t\t<MessengerPopup\n\t\t\tv-slot="{enableAutoHide, disableAutoHide}"\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<UserSettingsContent @closePopup="$emit('close')" @enableAutoHide="enableAutoHide" @disableAutoHide="disableAutoHide" />\n\t\t</MessengerPopup>\n\t`};const E={name:"UserSettings",components:{UserSettingsPopup:N,UserStatusPopup:I,Avatar:u.Avatar},data(){return{showSettingsPopup:false,showStatusPopup:false}},computed:{AvatarSize:()=>u.AvatarSize,currentUserId(){return _.Core.getUserId()},userStatus(){const t=this.$store.getters["users/get"](this.currentUserId,true);if(t){return t.status}return h.UserStatus.online}},methods:{onAvatarClick(){this.showSettingsPopup=true},onStatusClick(){this.showStatusPopup=true}},template:`\n\t\t<div class="bx-im-navigation__user">\n\t\t\t<div @click="onAvatarClick" class="bx-im-navigation__user_avatar" ref="avatar">\n\t\t\t\t<Avatar :dialogId="currentUserId.toString()" :size="AvatarSize.M" />\n\t\t\t\t<div @click.stop="onStatusClick" :class="'--' + userStatus" class="bx-im-navigation__user_status" ref="status"></div>\n\t\t\t</div>\n\t\t\t<UserStatusPopup\n\t\t\t\tv-if="showStatusPopup"\n\t\t\t\t:bindElement="$refs['status'] || {}"\n\t\t\t\t@close="showStatusPopup = false"\n\t\t\t/>\n\t\t\t<UserSettingsPopup\n\t\t\t\tv-if="showSettingsPopup"\n\t\t\t\t:bindElement="$refs['avatar'] || {}"\n\t\t\t\t@close="showSettingsPopup = false" \n\t\t\t/>\n\t\t</div>\n\t`};const w={name:"MarketApps",emits:["clickMarketItem"],computed:{marketMenuItems(){const t=S.MarketManager.getInstance().getAvailablePlacementsByType(h.PlacementType.navigation);return t.map((t=>({id:t.id,text:t.title,counter:0,active:true,iconName:t.options.iconName?t.options.iconName:"",loadConfiguration:t.loadConfiguration})))},layout(){return this.$store.getters["application/getLayout"]},canShowMarket(){return _.Core.isCloud()}},methods:{onMarketClick(){S.MarketManager.openMarketplace()},onMarketItemClick(t){this.$emit("clickMarketItem",{layoutName:h.Layout.market.name,layoutEntityId:t.id})},getMenuItemClasses(t){return{"--selected":this.isItemSelected(t.id),"--active":t.active}},isItemSelected(t){return this.layout.name===h.Layout.market.name&&this.layout.entityId===t},getIconClassNames(t){return t.iconName.toString()}},template:`\n\t\t<div\n\t\t\tv-if="canShowMarket"\n\t\t\t@click="onMarketClick"\n\t\t\tclass="bx-im-navigation__item_container"\n\t\t>\n\t\t\t<div class="bx-im-navigation__item --active">\n\t\t\t\t<div class="bx-im-navigation__item_icon --market"></div>\n\t\t\t\t<div class="bx-im-navigation__item_text" :title="$Bitrix.Loc.getMessage('IM_NAVIGATION_MARKET_TITLE')">\n\t\t\t\t\t{{ $Bitrix.Loc.getMessage('IM_NAVIGATION_MARKET_TITLE') }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div\n\t\t\tv-for="item in marketMenuItems"\n\t\t\t@click="onMarketItemClick(item)"\n\t\t\tclass="bx-im-navigation__item_container"\n\t\t>\n\t\t\t<div :class="getMenuItemClasses(item)" class="bx-im-navigation__item">\n\t\t\t\t<div class="bx-im-navigation__market-item_icon-container">\n\t\t\t\t\t<i \n\t\t\t\t\t\tclass="bx-im-navigation__market-item_icon fa" \n\t\t\t\t\t\t:class="getIconClassNames(item)" \n\t\t\t\t\t\taria-hidden="true"\n\t\t\t\t\t></i>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-navigation__item_text" :title="item.text">{{item.text}}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const L={name:"MessengerNavigation",directives:{hint:s.hint},components:{UserSettings:E,MarketApps:w},props:{currentLayoutName:{type:String,required:true}},emits:["navigationClick"],data(){return{needTopShadow:false,needBottomShadow:false}},computed:{menuItems(){const t=[{id:h.Layout.chat.name,text:this.prepareNavigationText("IM_NAVIGATION_CHATS"),counter:this.formatCounter(this.$store.getters["recent/getTotalCounter"]),active:true},{id:h.Layout.notification.name,text:this.prepareNavigationText("IM_NAVIGATION_NOTIFICATIONS"),counter:this.formatCounter(this.$store.getters["notifications/getCounter"]),active:true},{id:h.Layout.openline.name,text:this.prepareNavigationText("IM_NAVIGATION_OPENLINES"),counter:0,active:false},{id:h.Layout.call.name,text:this.prepareNavigationText("IM_NAVIGATION_CALLS"),counter:0,active:false},{id:"settings",text:this.prepareNavigationText("IM_NAVIGATION_SETTINGS"),counter:0,active:false}];if(this.isTimeManagerActive()){t.push({id:"timemanager",text:this.prepareNavigationText("IM_NAVIGATION_TIMEMANAGER"),counter:0,active:true,clickHandler:this.onTimeManagerClick})}return t},isDesktop(){return a.DesktopManager.isDesktop()}},created(){p.Logger.warn("Navigation created")},mounted(){const t=this.$refs.navigation;this.needBottomShadow=t.scrollTop+t.clientHeight!==t.scrollHeight},methods:{onMenuItemClick(t,s){if(!t.active){return}if(e.Type.isFunction(t.clickHandler)){t.clickHandler();return}this.$emit("navigationClick",{layoutName:t.id,layoutEntityId:""})},onMarketMenuItemClick({layoutName:t,layoutEntityId:e}){this.$emit("navigationClick",{layoutName:t,layoutEntityId:e})},closeSlider(){const t=r.CallManager.getInstance().hasCurrentCall();if(t){this.showExitConfirm();return}o.MessengerSlider.getInstance().getCurrent().close()},getMenuItemClasses(t){return{"--selected":t.id===this.currentLayoutName,"--with-counter":t.counter&&t.id!==this.currentLayoutName,"--active":t.active}},formatCounter(t){if(t===0){return""}return t>99?"99+":String(t)},getHintContent(t){if(t.active){return null}return{text:this.loc("IM_MESSENGER_NOT_AVAILABLE"),popupOptions:{angle:{position:"left"},targetContainer:document.body,offsetLeft:80,offsetTop:-54}}},prepareNavigationText(t){return this.loc(t,{"#BR#":"</br>"})},showExitConfirm(){i.MessageBox.show({message:this.loc("IM_NAVIGATION_ACTIVE_CALL_CONFIRM"),modal:true,buttons:i.MessageBoxButtons.OK_CANCEL,onOk:t=>{r.CallManager.getInstance().leaveCurrentCall();o.MessengerSlider.getInstance().getCurrent().close();t.close()},onCancel:t=>{t.close()}})},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)},onScroll(t){const e=Math.round(t.target.scrollTop+t.target.clientHeight);this.needBottomShadow=e!==t.target.scrollHeight;if(t.target.scrollTop===0){this.needTopShadow=false;return}this.needTopShadow=true},onClickScrollDown(){this.$refs.navigation.scrollTo({top:this.$refs.navigation.scrollHeight,behavior:"smooth"})},onClickScrollUp(){this.$refs.navigation.scrollTo({top:0,behavior:"smooth"})},isTimeManagerActive(){return Boolean(n.Monitor==null?void 0:n.Monitor.isEnabled())},onTimeManagerClick(){n.Monitor==null?void 0:n.Monitor.openReport()}},template:`\n\t\t<div class="bx-im-navigation__scope bx-im-navigation__container">\n\t\t\t<div v-if="needTopShadow" class="bx-im-navigation__shadow --top">\n\t\t\t\t<div class="bx-im-navigation__scroll-button" @click="onClickScrollUp"></div>\n\t\t\t</div>\n\t\t\t<div class="bx-im-navigation__top" @scroll="onScroll" ref="navigation">\n\t\t\t\t<template v-if="!isDesktop">\n\t\t\t\t\t\x3c!-- Close --\x3e\n\t\t\t\t\t<div class="bx-im-navigation__close_container" @click="closeSlider">\n\t\t\t\t\t\t<div class="bx-im-navigation__close"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\x3c!-- Separator --\x3e\n\t\t\t\t\t<div class="bx-im-navigation__separator_container">\n\t\t\t\t\t\t<div class="bx-im-navigation__close_separator"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t\t\x3c!-- Menu items --\x3e\n\t\t\t\t<div\n\t\t\t\t\tv-for="item in menuItems"\n\t\t\t\t\tv-hint="getHintContent(item)"\n\t\t\t\t\t@click="onMenuItemClick(item, $event)"\n\t\t\t\t\tclass="bx-im-navigation__item_container"\n\t\t\t\t>\n\t\t\t\t\t<div :class="getMenuItemClasses(item)" class="bx-im-navigation__item">\n\t\t\t\t\t\t<div :class="'--' + item.id" class="bx-im-navigation__item_icon"></div>\n\t\t\t\t\t\t<div class="bx-im-navigation__item_text" :title="item.text" v-html="item.text"></div>\n\t\t\t\t\t\t<div v-if="item.active && item.counter" class="bx-im-navigation__item_counter">\n\t\t\t\t\t\t\t<div class="bx-im-navigation__item_counter-text">\n\t\t\t\t\t\t\t\t{{ item.counter }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<MarketApps @clickMarketItem="onMarketMenuItemClick"/>\n\t\t\t</div>\n\t\t\t<div v-if="needBottomShadow" class="bx-im-navigation__shadow --bottom">\n\t\t\t\t<div class="bx-im-navigation__scroll-button --bottom" @click="onClickScrollDown"></div>\n\t\t\t</div>\n\t\t\t\x3c!-- Avatar --\x3e\n\t\t\t<div class="bx-im-navigation__user_container">\n\t\t\t\t<UserSettings />\n\t\t\t</div>\n\t\t</div>\n\t`};t.MessengerNavigation=L})(this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{},BX,BX.Vue3.Directives,BX.UI.Dialogs,BX.Timeman,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.UI,BX,BX,BX.Messenger.v2.Application,BX.Messenger.v2.Const,BX.Messenger.v2.Lib);
//# sourceMappingURL=navigation.bundle.map.js