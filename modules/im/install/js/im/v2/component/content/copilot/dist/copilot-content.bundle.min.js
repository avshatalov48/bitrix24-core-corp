this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,i,n,o,s,a,r,c,d,l,h,g,u,p,v,C){"use strict";const m={name:"ChatHeader",components:{EditableChatTitle:a.EditableChatTitle},props:{dialogId:{type:String,default:""}},data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},chatId(){return this.dialog.chatId}},methods:{onNewTitleSubmit(t){this.getChatService().renameChat(this.dialogId,t).catch((()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_HEADER_RENAME_ERROR")})}))},getChatService(){if(!this.chatService){this.chatService=new c.ChatService}return this.chatService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-copilot-header__container">\n\t\t\t<div class="bx-im-copilot-header__left">\n\t\t\t\t<div class="bx-im-copilot-header__avatar">\n\t\t\t\t\t<div class="bx-im-copilot-header__avatar_default"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-copilot-header__info">\n\t\t\t\t\t<EditableChatTitle :dialogId="dialogId" @newTitleSubmit="onNewTitleSubmit" />\n\t\t\t\t\t<div \n\t\t\t\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_MEMBERS')" \n\t\t\t\t\t\tclass="bx-im-copilot-header__subtitle"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ loc('IM_CONTENT_COPILOT_HEADER_SUBTITLE') }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const _="#fff";const b="#eee";const x="rgba(82, 92, 105, 0.9)";const M={name:"EmptyState",components:{ChatButton:a.Button},data(){return{isLoading:false}},computed:{ButtonSize:()=>a.ButtonSize,preparedText(){return this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_MESSAGE",{"#BR#":"\n"})},buttonColorScheme(){return{borderColor:r.Color.transparent,backgroundColor:_,iconColor:x,textColor:x,hoverColor:b}}},methods:{async onButtonClick(){this.isLoading=true;const t=await this.getCopilotService().createChat().catch((()=>{this.isLoading=false;this.showCreateChatError()}));this.isLoading=false;void s.Messenger.openCopilot(t)},showCreateChatError(){BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_EMPTY_STATE_ERROR_CREATING_CHAT")})},getCopilotService(){if(!this.copilotService){this.copilotService=new c.CopilotService}return this.copilotService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-content-copilot-empty-state__container">\n\t\t\t<div class="bx-im-content-copilot-empty-state__content">\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__icon"></div>\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__text">{{ preparedText }}</div>\n\t\t\t\t<div class="bx-im-content-copilot-empty-state__button">\n\t\t\t\t\t<ChatButton\n\t\t\t\t\t\tclass="--black-loader"\n\t\t\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t\t\t:text="loc('IM_CONTENT_COPILOT_EMPTY_STATE_ASK_QUESTION')"\n\t\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t\t:isLoading="isLoading"\n\t\t\t\t\t\t@click="onButtonClick"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const E={audioend:"audioend",audiostart:"audiostart",end:"end",error:"error",nomatch:"nomatch",result:"result",soundend:"soundend",soundstart:"soundstart",speechend:"speechend",speechstart:"speechstart",start:"start"};const S="BX.Messenger.v2.CopilotAudioManager";var T=babelHelpers.classPrivateFieldLooseKey("bindEvents");var y=babelHelpers.classPrivateFieldLooseKey("getRecognizedText");var I=babelHelpers.classPrivateFieldLooseKey("getNewText");var f=babelHelpers.classPrivateFieldLooseKey("initSettings");class A extends g.EventEmitter{static isAvailable(){if(u.DesktopApi.isDesktop()){return u.DesktopApi.getApiVersion()>74}return Boolean(window.SpeechRecognition||window.webkitSpeechRecognition)}constructor(){super();Object.defineProperty(this,f,{value:w});Object.defineProperty(this,I,{value:L});Object.defineProperty(this,y,{value:R});Object.defineProperty(this,T,{value:B});this.recognizer=null;this.setEventNamespace(S);this.recognizer=new(window.SpeechRecognition||window.webkitSpeechRecognition);babelHelpers.classPrivateFieldLooseBase(this,f)[f]();babelHelpers.classPrivateFieldLooseBase(this,T)[T]()}startRecognition(){this.recognizer.start()}stopRecognition(){this.recognizer.stop()}}function B(){h.Event.bind(this.recognizer,E.start,(()=>{this.lastRecognizedText="";this.emit(A.events.recognitionStart)}));h.Event.bind(this.recognizer,E.error,(t=>{this.emit(A.events.recognitionError,t.error);console.error("Copilot: AudioManager: error",t.error)}));h.Event.bind(this.recognizer,E.end,(()=>{this.lastRecognizedText="";this.emit(A.events.recognitionEnd)}));h.Event.bind(this.recognizer,E.result,(t=>{const e=babelHelpers.classPrivateFieldLooseBase(this,y)[y](t);const i=babelHelpers.classPrivateFieldLooseBase(this,I)[I](e);if(i!==""){this.emit(A.events.recognitionResult,i)}this.lastRecognizedText=e}))}function R(t){let e="";Object.values(t.results).forEach((t=>{if(t.isFinal){return}const[i]=t;const{transcript:n}=i;e+=n}));return e}function L(t){let e="";const i=this.lastRecognizedText.length;if(t.length>i){e=t.slice(i)}return e}function w(){this.recognizer.continuous=true;this.recognizer.interimResults=true}A.events={recognitionStart:"recognitionStart",recognitionError:"recognitionError",recognitionEnd:"recognitionEnd",recognitionResult:"recognitionResult"};const O={name:"AudioInput",props:{audioMode:{type:Boolean,required:true}},emits:["start","stop","inputStart","inputResult"],data(){return{}},watch:{audioMode(t,e){if(e===false&&t===true){this.startAudio()}if(e===true&&t===false){this.stopAudio()}}},methods:{onClick(){if(this.audioMode){this.$emit("stop");return}this.$emit("start")},startAudio(){this.getAudioManager().startRecognition();this.bindAudioEvents()},stopAudio(){this.getAudioManager().stopRecognition();this.unbindAudioEvents()},bindAudioEvents(){this.getAudioManager().subscribe(A.events.recognitionResult,(t=>{const e=t.getData();this.$emit("inputResult",e)}));this.getAudioManager().subscribe(A.events.recognitionStart,(()=>{this.$emit("inputStart")}));this.getAudioManager().subscribe(A.events.recognitionError,(()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_COPILOT_TEXTAREA_AUDIO_INPUT_ERROR")})}))},unbindAudioEvents(){this.getAudioManager().unsubscribeAll(A.events.recognitionResult);this.getAudioManager().unsubscribeAll(A.events.recognitionStart);this.getAudioManager().unsubscribeAll(A.events.recognitionEnd)},isAudioModeAvailable(){return A.isAvailable()},getAudioManager(){if(!this.audioManager){this.audioManager=new A}return this.audioManager},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\tv-if="isAudioModeAvailable()"\n\t\t\t@click="onClick"\n\t\t\tclass="bx-im-copilot-audio-input__container"\n\t\t\t:class="{'--active': audioMode}"\n\t\t></div>\n\t`};const N=v.BitrixVue.cloneComponent(l.ChatTextarea,{name:"CopilotTextarea",components:{AudioInput:O},data(){return{...this.parentData(),audioMode:false}},computed:{isEmptyText(){return this.text===""}},methods:{onAudioInputStart(){if(this.isEmptyText){return}this.text+=" "},onAudioInputResult(t){if(!this.audioMode){return}this.text+=t},openEditPanel(){},getDraftManager(){if(!this.draftManager){this.draftManager=d.CopilotDraftManager.getInstance()}return this.draftManager},sendMessage(){this.parentSendMessage();this.audioMode=false}},template:`\n\t\t<div class="bx-im-send-panel__scope bx-im-send-panel__container bx-im-copilot-send-panel__container">\n\t\t\t<div class="bx-im-textarea__container">\n\t\t\t\t<div @mousedown="onResizeStart" class="bx-im-textarea__drag-handle"></div>\n\t\t\t\t<div class="bx-im-textarea__content">\n\t\t\t\t\t<div class="bx-im-textarea__left">\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\tv-model="text"\n\t\t\t\t\t\t\t:style="textareaStyle"\n\t\t\t\t\t\t\t:placeholder="loc('IM_CONTENT_COPILOT_TEXTAREA_PLACEHOLDER')"\n\t\t\t\t\t\t\t:maxlength="textareaMaxLength"\n\t\t\t\t\t\t\t@keydown="onKeyDown"\n\t\t\t\t\t\t\t@paste="onPaste"\n\t\t\t\t\t\t\tclass="bx-im-textarea__element"\n\t\t\t\t\t\t\tref="textarea"\n\t\t\t\t\t\t\trows="1"\n\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t<AudioInput\n\t\t\t\t\t\t\t:audioMode="audioMode"\n\t\t\t\t\t\t\t@start="audioMode = true"\n\t\t\t\t\t\t\t@stop="audioMode = false"\n\t\t\t\t\t\t\t@inputStart="onAudioInputStart"\n\t\t\t\t\t\t\t@inputResult="onAudioInputResult"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<SendButton :editMode="editMode" :isDisabled="isDisabled" @click="sendMessage" />\n\t\t</div>\n\t`});const X={props:{dialogId:{required:true,type:String}},data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},typingStatus(){if(!this.dialog.inited||this.dialog.writingList.length===0){return""}return this.loc("IM_CONTENT_COPILOT_DIALOG_STATUS_TYPING")}},methods:{loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-dialog-copilot-status__container">\n\t\t\t<div v-if="typingStatus" class="bx-im-dialog-copilot-status__content">\n\t\t\t\t<div class="bx-im-dialog-copilot-status__icon --typing"></div>\n\t\t\t\t<div class="bx-im-dialog-copilot-status__text">{{ typingStatus }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const P=v.BitrixVue.cloneComponent(C.MessageList,{name:"CopilotMessageList",components:{DialogStatus:X},computed:{statusComponent(){return X}},methods:{initContextMenu(){},onMessageContextMenuClick(){},onAvatarClick(t,e){}}});const z=v.BitrixVue.cloneComponent(p.ChatDialog,{name:"CopilotDialog",computed:{messageListComponent(){return P}}});const $={name:"CopilotContent",components:{EmptyState:M,ChatHeader:m,CopilotDialog:z,CopilotTextarea:N},directives:{"textarea-observer":{mounted(t,e){e.instance.textareaResizeManager.observeTextarea(t)},beforeUnmount(t,e){e.instance.textareaResizeManager.unobserveTextarea(t)}}},props:{entityId:{type:String,default:""},contextMessageId:{type:Number,default:0}},data(){return{textareaHeight:0}},computed:{layout(){return this.$store.getters["application/getLayout"]},dialog(){return this.$store.getters["chats/get"](this.entityId,true)},containerClasses(){const t=this.$store.getters["application/settings/get"](r.Settings.appearance.alignment);return[`--${t}-align`]},backgroundStyle(){const t=4;return i.ThemeManager.getBackgroundStyleById(t)},dialogContainerStyle(){const t=64;return{height:`calc(100% - ${t}px - ${this.textareaHeight}px)`}}},watch:{entityId(t,i){e.Logger.warn(`CopilotContent: switching from ${i||"empty"} to ${t}`);this.onChatChange()}},created(){if(this.entityId){this.onChatChange()}this.initTextareaResizeManager()},methods:{async onChatChange(){if(this.entityId===""){return}if(this.dialog.inited){e.Logger.warn(`CopilotContent: chat ${this.entityId} is already loaded`);return}if(this.dialog.loading){e.Logger.warn(`CopilotContent: chat ${this.entityId} is loading`);return}if(this.layout.contextId){await this.loadChatWithContext();return}await this.loadChat()},loadChatWithContext(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId} with context - ${this.layout.contextId}`);return this.getChatService().loadChatWithContext(this.entityId,this.layout.contextId).then((()=>{e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded with context of ${this.layout.contextId}`)})).catch((t=>{if(t.code==="ACCESS_ERROR"){this.showNotification(this.loc("IM_CONTENT_CHAT_ACCESS_ERROR"))}e.Logger.error(t);s.Messenger.openCopilot()}))},loadChat(){e.Logger.warn(`CopilotContent: loading chat ${this.entityId}`);return this.getChatService().loadChatWithMessages(this.entityId).then((()=>{e.Logger.warn(`CopilotContent: chat ${this.entityId} is loaded`)})).catch((()=>{s.Messenger.openCopilot()}))},initTextareaResizeManager(){this.textareaResizeManager=new n.ResizeManager;this.textareaResizeManager.subscribe(n.ResizeManager.events.onHeightChange,(t=>{const{newHeight:e}=t.getData();this.textareaHeight=e}))},showNotification(t){BX.UI.Notification.Center.notify({content:t})},getChatService(){if(!this.chatService){this.chatService=new c.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__container bx-im-content-copilot__container" :class="containerClasses" :style="backgroundStyle">\n\t\t\t<div v-if="entityId" class="bx-im-content-copilot__content">\n\t\t\t\t<ChatHeader :dialogId="entityId" :key="entityId"/>\n\t\t\t\t<div :style="dialogContainerStyle" class="bx-im-content-copilot__dialog_container">\n\t\t\t\t\t<div class="bx-im-content-copilot__dialog_content">\n\t\t\t\t\t\t<CopilotDialog :dialogId="entityId" :key="entityId" :textareaHeight="textareaHeight" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-textarea-observer class="bx-im-content-copilot__textarea_container">\n\t\t\t\t\t<CopilotTextarea :dialogId="entityId" :key="entityId" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<EmptyState v-else />\n\t\t</div>\n\t`};t.CopilotContent=$})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Const,BX.Messenger.v2.Provider.Service,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX,BX.Event,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Dialog,BX.Vue3,BX.Messenger.v2.Component);
//# sourceMappingURL=copilot-content.bundle.map.js