this.BX=this.BX||{};(function(t,e,i,o,a,s,n){"use strict";e.Vue.component("bx-im-component-dialog",{props:{chatId:{default:0},userId:{default:0},dialogId:{default:0},enableGestureQuote:{default:true},enableGestureQuoteFromRight:{default:true},enableGestureMenu:{default:false},showMessageUserName:{default:true},showMessageAvatar:{default:true},listenEventScrollToBottom:{default:""},listenEventRequestHistory:{default:""},listenEventRequestUnread:{default:""},listenEventSendReadMessages:{default:""}},data:function t(){return{dialogState:"loading",dialogDiskFolderId:0,dialogChatId:0,scrollToBottomEvent:this.listenEventScrollToBottom,requestHistoryEvent:this.listenEventRequestHistory,requestUnreadEvent:this.listenEventRequestUnread,sendReadMessagesEvent:this.listenEventSendReadMessages}},created:function t(){if(!this.listenEventScrollToBottom){this.scrollToBottomEvent=a.EventType.dialog.scrollToBottom}if(!this.listenEventRequestHistory){this.requestHistoryEvent=a.EventType.dialog.requestHistoryResult}if(!this.listenEventRequestUnread){this.requestUnreadEvent=a.EventType.dialog.requestUnreadResult}if(!this.listenEventSendReadMessages){this.sendReadMessagesEvent=a.EventType.dialog.sendReadMessages}this.requestData()},watch:{dialogId:function t(){this.requestData()}},computed:babelHelpers.objectSpread({EventType:function t(){return a.EventType},localize:function t(){return Object.assign({},e.Vue.getFilteredPhrases("IM_DIALOG_",this.$root.$bitrixMessages),e.Vue.getFilteredPhrases("IM_UTILS_",this.$root.$bitrixMessages))},widgetClassName:function t(e){var i=["bx-mobilechat-wrapper"];if(this.showMessageDialog){i.push("bx-mobilechat-chat-start")}return i.join(" ")},quotePanelData:function t(){var e={id:0,title:"",description:"",color:""};if(!this.showMessageDialog||!this.dialog.quoteId){return e}var i=this.$store.getters["messages/getMessage"](this.dialog.chatId,this.dialog.quoteId);if(!i){return e}var o=this.$store.getters["users/get"](i.authorId);var a=this.$store.getters["files/getList"](this.dialog.chatId);return{id:this.dialog.quoteId,title:i.params.NAME?i.params.NAME:o?o.name:"",color:o?o.color:"",description:s.Utils.text.purify(i.text,i.params,a,this.localize)}},isDialog:function t(){return s.Utils.dialog.isChatId(this.dialog.dialogId)},isGestureQuoteSupported:function t(){return false},isDarkBackground:function t(){return this.application.options.darkBackground},showMessageDialog:function t(){var e=this.messageCollection&&this.messageCollection.length>0;if(e){this.dialogState="show"}else if(this.dialog&&this.dialog.init){this.dialogState="empty"}else{this.dialogState="loading"}return e},dialog:function t(){var t=this.$store.getters["dialogues/get"](this.application.dialog.dialogId);return t?t:this.$store.getters["dialogues/getBlank"]()},messageCollection:function t(){return this.$store.getters["messages/get"](this.application.dialog.chatId)}},i.Vuex.mapState({application:function t(e){return e.application}})),methods:{requestData:function t(){var e,i=this;console.log("4. requestData");var o=(e={},babelHelpers.defineProperty(e,a.RestMethodHandler.mobileBrowserConstGet,[a.RestMethod.mobileBrowserConstGet,{}]),babelHelpers.defineProperty(e,a.RestMethodHandler.imChatGet,[a.RestMethod.imChatGet,{dialog_id:this.dialogId}]),babelHelpers.defineProperty(e,a.RestMethodHandler.imDialogMessagesGetInit,[a.RestMethod.imDialogMessagesGet,{dialog_id:this.dialogId,limit:this.$root.$bitrixController.application.getRequestMessageLimit(),convert_text:"Y"}]),e);if(s.Utils.dialog.isChatId(this.dialogId)){o[a.RestMethodHandler.imUserGet]=[a.RestMethod.imUserGet,{}]}else{o[a.RestMethodHandler.imUserListGet]=[a.RestMethod.imUserListGet,{id:[this.userId,this.dialogId]}]}this.$root.$bitrixController.restClient.callBatch(o,function(t){if(!t){return false}var e=t[a.RestMethodHandler.mobileBrowserConstGet];if(e.error());else{i.$root.$bitrixController.executeRestAnswer(a.RestMethodHandler.mobileBrowserConstGet,e)}var o=t[a.RestMethodHandler.imUserGet];if(o&&!o.error()){i.$root.$bitrixController.executeRestAnswer(a.RestMethodHandler.imUserGet,o)}var s=t[a.RestMethodHandler.imUserListGet];if(s&&!s.error()){i.$root.$bitrixController.executeRestAnswer(a.RestMethodHandler.imUserListGet,s)}var n=t[a.RestMethodHandler.imChatGet];if(!n.error()){i.dialogChatId=n.data().id;i.dialogDiskFolderId=n.data().disk_folder_id}i.$root.$bitrixController.executeRestAnswer(a.RestMethodHandler.imChatGet,n);var r=t[a.RestMethodHandler.imDialogMessagesGetInit];if(r.error());else{if(i.$root.$bitrixController.pullCommandHandler);i.$root.$bitrixController.getStore().dispatch("application/set",{dialog:{enableReadMessages:true}}).then(function(){i.$root.$bitrixController.executeRestAnswer(a.RestMethodHandler.imDialogMessagesGetInit,r)})}},false,false,s.Utils.getLogTrackingParams({name:"im.dialog",dialog:this.$root.$bitrixController.application.getDialogData()}));return new Promise(function(t,e){return t()})},getDialogHistory:function t(e){var i=this;var o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.$root.$bitrixController.application.getRequestMessageLimit();this.$root.$bitrixController.restClient.callMethod(a.RestMethod.imDialogMessagesGet,{CHAT_ID:this.dialogChatId,LAST_ID:e,LIMIT:o,CONVERT_TEXT:"Y"}).then(function(t){i.$root.$bitrixController.executeRestAnswer(a.RestMethodHandler.imDialogMessagesGet,t);i.$root.$emit(a.EventType.dialog.requestHistoryResult,{count:t.data().messages.length})}).catch(function(t){i.$root.$emit(a.EventType.dialog.requestHistoryResult,{error:t.error().ex})})},getDialogUnread:function t(e){var i=this;var o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.$root.$bitrixController.application.getRequestMessageLimit();if(this.promiseGetDialogUnreadWait){return this.promiseGetDialogUnread}this.promiseGetDialogUnread=new BX.Promise;this.promiseGetDialogUnreadWait=true;if(!e){e=this.$root.$bitrixController.getStore().getters["messages/getLastId"](this.dialogChatId)}if(!e){this.$root.$emit(a.EventType.dialog.requestUnreadResult,{error:{error:"LAST_ID_EMPTY",error_description:"LastId is empty."}});this.promiseGetDialogUnread.reject();this.promiseGetDialogUnreadWait=false;return this.promiseGetDialogUnread}this.$root.$bitrixController.application.readMessage(e,true,true).then(function(){var t;var n=(t={},babelHelpers.defineProperty(t,a.RestMethodHandler.imDialogRead,[a.RestMethod.imDialogRead,{dialog_id:i.dialogId,message_id:e}]),babelHelpers.defineProperty(t,a.RestMethodHandler.imChatGet,[a.RestMethod.imChatGet,{dialog_id:i.dialogId}]),babelHelpers.defineProperty(t,a.RestMethodHandler.imDialogMessagesGetUnread,[a.RestMethod.imDialogMessagesGet,{chat_id:i.dialogChatId,first_id:e,limit:o,convert_text:"Y"}]),t);i.$root.$bitrixController.restClient.callBatch(n,function(t){if(!t){i.$root.$emit(a.EventType.dialog.requestUnreadResult,{error:{error:"EMPTY_RESPONSE",error_description:"Server returned an empty response."}});i.promiseGetDialogUnread.reject();i.promiseGetDialogUnreadWait=false;return false}var e=t[a.RestMethodHandler.imChatGet];if(!e.error()){i.$root.$bitrixController.executeRestAnswer(a.RestMethodHandler.imChatGet,e)}var o=t[a.RestMethodHandler.imDialogMessagesGetUnread];if(o.error()){i.$root.$emit(a.EventType.dialog.requestUnreadResult,{error:o.error().ex})}else{i.$root.$bitrixController.executeRestAnswer(a.RestMethodHandler.imDialogMessagesGetUnread,o);i.$root.$emit(a.EventType.dialog.requestUnreadResult,{firstMessageId:o.data().messages.length>0?o.data().messages[0].id:0,count:o.data().messages.length})}i.promiseGetDialogUnread.fulfill(t);i.promiseGetDialogUnreadWait=false},false,false,s.Utils.getLogTrackingParams({name:a.RestMethodHandler.imDialogMessagesGetUnread,dialog:i.$root.$bitrixController.application.getDialogData()}))});return this.promiseGetDialogUnread},logEvent:function t(e){for(var i=arguments.length,a=new Array(i>1?i-1:0),s=1;s<i;s++){a[s-1]=arguments[s]}o.Logger.info.apply(o.Logger,[e].concat(a))},onDialogRequestHistory:function t(e){this.getDialogHistory(e.lastId)},onDialogRequestUnread:function t(e){this.getDialogUnread(e.lastId)},onDialogMessageClickByUserName:function t(e){this.$root.$bitrixController.application.replyToUser(e.user.id,e.user)},onDialogMessageClickByUploadCancel:function t(e){this.$root.$bitrixController.application.cancelUploadFile(e.file.id)},onDialogMessageClickByCommand:function t(e){if(e.type==="put"){this.$root.$bitrixApplication.insertText({text:e.value+" "})}else if(e.type==="send"){this.$root.$bitrixApplication.addMessage(e.value)}else{o.Logger.warn("Unprocessed command",e)}},onDialogMessageClickByMention:function t(e){if(e.type==="USER"){this.$root.$bitrixController.application.openProfile(e.value)}else if(e.type==="CHAT"){this.$root.$bitrixController.application.openDialog(e.value)}else if(e.type==="CALL"){this.$root.$bitrixController.application.openPhoneMenu(e.value)}},onDialogMessageMenuClick:function t(e){o.Logger.warn("Message menu:",e);this.$root.$bitrixController.application.openMessageMenu(e.message)},onDialogMessageRetryClick:function t(e){o.Logger.warn("Message retry:",e);this.$root.$bitrixController.application.retrySendMessage(e.message)},onDialogReadMessage:function t(e){this.$root.$bitrixController.application.readMessage(e.id)},onDialogReadedListClick:function t(e){this.$root.$bitrixController.application.openReadedList(e.list)},onDialogQuoteMessage:function t(e){this.$root.$bitrixController.application.quoteMessage(e.message.id)},onDialogMessageReactionSet:function t(e){this.$root.$bitrixController.application.reactMessage(e.message.id,e.reaction)},onDialogMessageReactionListOpen:function t(e){this.$root.$bitrixController.application.openMessageReactionList(e.message.id,e.values)},onDialogMessageClickByChatTeaser:function t(e){var i=this;this.$root.$bitrixController.application.joinParentChat(data.message.id,"chat"+data.message.params.CHAT_ID).then(function(t){i.openDialog(t)}).catch(function(){});return true},onDialogMessageClickByKeyboardButton:function t(e){var i=this;if(e.action==="ACTION"){var o=e.params,s=o.dialogId,r=o.messageId,l=o.botId,d=o.action,g=o.value;if(d==="SEND"){this.$root.$bitrixApplication.addMessage(g);setTimeout(function(){return i.$root.$bitrixController.application.emit(a.EventType.dialog.scrollToBottom,{duration:300,cancelIfScrollChange:false})},300)}else if(d==="PUT"){this.$root.$bitrixApplication.insertText({text:g+" "})}else if(d==="CALL");else if(d==="COPY"){n.Clipboard.copy(g);BX.UI.Notification.Center.notify({content:this.localize.IM_DIALOG_CLIPBOARD_COPY_SUCCESS,autoHideDelay:4e3})}return true}if(e.action==="COMMAND"){var c=e.params,h=c.dialogId,u=c.messageId,m=c.botId,p=c.command,M=c.params;this.$root.$bitrixController.restClient.callMethod(a.RestMethod.imMessageCommand,{MESSAGE_ID:u,DIALOG_ID:h,BOT_ID:m,COMMAND:p,COMMAND_PARAMS:M});return true}return false},onDialogClick:function t(e){},onQuotePanelClose:function t(){this.$root.$bitrixController.quoteMessageClear()}},template:'\n\t\t<div :class="widgetClassName">\n\t\t\t<div :class="[\'bx-mobilechat-box\', {\'bx-mobilechat-box-dark-background\': isDarkBackground}]">\n\t\t\t\t<template v-if="application.error.active">\n\t\t\t\t\t<div class="bx-mobilechat-body">\n\t\t\t\t\t\t<div class="bx-mobilechat-warning-window">\n\t\t\t\t\t\t\t<div class="bx-mobilechat-warning-icon"></div>\n\t\t\t\t\t\t\t<template v-if="application.error.description"> \n\t\t\t\t\t\t\t\t<div class="bx-mobilechat-help-title bx-mobilechat-help-title-sm bx-mobilechat-warning-msg" v-html="application.error.description"></div>\n\t\t\t\t\t\t\t</template> \n\t\t\t\t\t\t\t<template v-else>\n\t\t\t\t\t\t\t\t<div class="bx-mobilechat-help-title bx-mobilechat-help-title-md bx-mobilechat-warning-msg">{{localize.IM_DIALOG_ERROR_TITLE}}</div>\n\t\t\t\t\t\t\t\t<div class="bx-mobilechat-help-title bx-mobilechat-help-title-sm bx-mobilechat-warning-msg">{{localize.IM_DIALOG_ERROR_DESC}}</div>\n\t\t\t\t\t\t\t</template> \n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\t\t\t\n\t\t\t\t<template v-else>\n\t\t\t\t\t<div :class="[\'bx-mobilechat-body\', {\'bx-mobilechat-body-with-message\': dialogState == \'show\'}]" key="with-message">\n\t\t\t\t\t\t<template v-if="dialogState == \'loading\'">\n\t\t\t\t\t\t\t<div class="bx-mobilechat-loading-window">\n\t\t\t\t\t\t\t\t<svg class="bx-mobilechat-loading-circular" viewBox="25 25 50 50">\n\t\t\t\t\t\t\t\t\t<circle class="bx-mobilechat-loading-path" cx="50" cy="50" r="20" fill="none" stroke-miterlimit="10"/>\n\t\t\t\t\t\t\t\t\t<circle class="bx-mobilechat-loading-inner-path" cx="50" cy="50" r="20" fill="none" stroke-miterlimit="10"/>\n\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t\t<h3 class="bx-mobilechat-help-title bx-mobilechat-help-title-md bx-mobilechat-loading-msg">{{localize.IM_DIALOG_LOADING}}</h3>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t<template v-else-if="dialogState == \'empty\'">\n\t\t\t\t\t\t\t<div class="bx-mobilechat-loading-window">\n\t\t\t\t\t\t\t\t<h3 class="bx-mobilechat-help-title bx-mobilechat-help-title-md bx-mobilechat-loading-msg">{{localize.IM_DIALOG_EMPTY}}</h3>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t\t<template v-else>\n\t\t\t\t\t\t\t<div class="bx-mobilechat-dialog">\n\t\t\t\t\t\t\t\t<bx-im-view-dialog\n\t\t\t\t\t\t\t\t\t:userId="userId" \n\t\t\t\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t\t\t\t:chatId="dialogChatId"\n\t\t\t\t\t\t\t\t\t:messageLimit="application.dialog.messageLimit"\n\t\t\t\t\t\t\t\t\t:messageExtraCount="application.dialog.messageExtraCount"\n\t\t\t\t\t\t\t\t\t:enableReadMessages="application.dialog.enableReadMessages"\n\t\t\t\t\t\t\t\t\t:enableReactions="true"\n\t\t\t\t\t\t\t\t\t:enableDateActions="false"\n\t\t\t\t\t\t\t\t\t:enableCreateContent="false"\n\t\t\t\t\t\t\t\t\t:enableGestureQuote="enableGestureQuote"\n\t\t\t\t\t\t\t\t\t:enableGestureQuoteFromRight="enableGestureQuoteFromRight"\n\t\t\t\t\t\t\t\t\t:enableGestureMenu="enableGestureMenu"\n\t\t\t\t\t\t\t\t\t:showMessageUserName="showMessageUserName"\n\t\t\t\t\t\t\t\t\t:showMessageAvatar="showMessageAvatar"\n\t\t\t\t\t\t\t\t\t:showMessageMenu="false"\n\t\t\t\t\t\t\t\t\t:listenEventScrollToBottom="scrollToBottomEvent"\n\t\t\t\t\t\t\t\t\t:listenEventRequestHistory="listenEventRequestHistory"\n\t\t\t\t\t\t\t\t\t:listenEventRequestUnread="listenEventRequestUnread"\n\t\t\t\t\t\t\t\t\t:listenEventSendReadMessages="listenEventSendReadMessages"\n\t\t\t\t\t\t\t\t\t@readMessage="onDialogReadMessage"\n\t\t\t\t\t\t\t\t\t@quoteMessage="onDialogQuoteMessage"\n\t\t\t\t\t\t\t\t\t@requestHistory="onDialogRequestHistory"\n\t\t\t\t\t\t\t\t\t@requestUnread="onDialogRequestUnread"\n\t\t\t\t\t\t\t\t\t@clickByCommand="onDialogMessageClickByCommand"\n\t\t\t\t\t\t\t\t\t@clickByMention="onDialogMessageClickByMention"\n\t\t\t\t\t\t\t\t\t@clickByUserName="onDialogMessageClickByUserName"\n\t\t\t\t\t\t\t\t\t@clickByMessageMenu="onDialogMessageMenuClick"\n\t\t\t\t\t\t\t\t\t@clickByMessageRetry="onDialogMessageRetryClick"\n\t\t\t\t\t\t\t\t\t@clickByUploadCancel="onDialogMessageClickByUploadCancel"\n\t\t\t\t\t\t\t\t\t@clickByReadedList="onDialogReadedListClick"\n\t\t\t\t\t\t\t\t\t@setMessageReaction="onDialogMessageReactionSet"\n\t\t\t\t\t\t\t\t\t@openMessageReactionList="onDialogMessageReactionListOpen"\n\t\t\t\t\t\t\t\t\t@clickByKeyboardButton="onDialogMessageClickByKeyboardButton"\n\t\t\t\t\t\t\t\t\t@clickByChatTeaser="onDialogMessageClickByChatTeaser"\n\t\t\t\t\t\t\t\t\t@click="onDialogClick"\n\t\t\t\t\t\t\t\t />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<bx-im-view-quote-panel :id="quotePanelData.id" :title="quotePanelData.title" :description="quotePanelData.description" :color="quotePanelData.color" @close="onQuotePanelClose"/>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t</div>\n\t'})})(this.BX.Messenger=this.BX.Messenger||{},BX,BX,BX.Messenger.Lib,BX.Messenger.Const,BX.Messenger.Lib,BX.Messenger.Lib);
//# sourceMappingURL=dialog.bundle.map.js