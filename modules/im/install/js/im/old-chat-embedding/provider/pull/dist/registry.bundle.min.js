this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.Embedding=this.BX.Messenger.Embedding||{};this.BX.Messenger.Embedding.Provider=this.BX.Messenger.Embedding.Provider||{};(function(e,s,t,a,d,i,r){"use strict";class n{constructor(){this.store=a.Core.getStore();this.userManager=new i.UserManager}getModuleId(){return"im"}getSubscriptionType(){return s.PullClient.SubscriptionType.Server}handleMessage(e,s){this.handleMessageAdd(e,s)}handleMessageChat(e,s){this.handleMessageAdd(e,s)}handleMessageAdd(e,s){d.Logger.warn("handleMessageAdd",e);if(e.lines){return false}if(e!=null&&e.chat[e.chatId]){const s={...e.chat[e.chatId],dialogId:e.dialogId};this.store.dispatch("dialogues/set",s)}if(e.users){this.userManager.setUsersToModel(Object.values(e.users))}this.store.dispatch("dialogues/stopWriting",{dialogId:e.dialogId,userId:e.message.senderId});if(e.message.senderId!==a.Core.getUserId()){this.store.dispatch("dialogues/update",{dialogId:e.dialogId,fields:{counter:e.counter}})}}handleMessageUpdate(e,s,t){this.execMessageUpdateOrDelete(e,s,t)}handleMessageDelete(e,s,t){this.execMessageUpdateOrDelete(e,s,t)}handleMessageDeleteComplete(e,s){this.execMessageUpdateOrDelete(e);this.store.dispatch("dialogues/update",{dialogId:e.dialogId,fields:{counter:e.counter}})}execMessageUpdateOrDelete(e){this.store.dispatch("dialogues/stopWriting",{dialogId:e.dialogId,userId:e.senderId})}handleChatOwner(e,s){this.store.dispatch("dialogues/update",{dialogId:e.dialogId,fields:{ownerId:e.userId}})}handleChatManagers(e,s){this.store.dispatch("dialogues/update",{dialogId:e.dialogId,fields:{managerList:e.list}})}handleChatUpdateParams(e,s){this.store.dispatch("dialogues/update",{dialogId:e.dialogId,fields:e.params})}handleChatUserAdd(e,s){if(e.users){this.userManager.setUsersToModel(e.users)}this.store.dispatch("dialogues/update",{dialogId:e.dialogId,fields:{userCounter:e.userCount}})}handleChatUserLeave(e,s){this.handleChatUserAdd(e,s)}handleStartWriting(e,s){const{dialogId:t,userId:a,userName:d}=e;this.store.dispatch("dialogues/startWriting",{dialogId:t,userId:a,userName:d})}handleReadMessage(e,s){d.Logger.warn("handleReadMessage",e);this.store.dispatch("dialogues/update",{dialogId:e.dialogId,fields:{counter:e.counter}})}handleReadMessageChat(e,s){this.handleReadMessage(e,s)}handleUnreadMessage(e,s){this.store.dispatch("dialogues/update",{dialogId:e.dialogId,fields:{counter:e.counter}})}handleUnreadMessageChat(e,s){this.handleUnreadMessage(e,s)}handleUnreadMessageOpponent(e,s){this.execUnreadMessageOpponent(e,s)}handleUnreadMessageChatOpponent(e,s){this.execUnreadMessageOpponent(e,s)}execUnreadMessageOpponent(e,s){this.store.dispatch("dialogues/removeFromReadList",{dialogId:e.dialogId,userId:e.userId})}handleReadAllChats(){d.Logger.warn("BasePullHandler: handleReadAllChats");this.store.dispatch("dialogues/clearCounters");this.store.dispatch("recent/clearUnread")}handleChatMuteNotify(e){if(e.muted){this.store.dispatch("dialogues/mute",{dialogId:e.dialogId});return true}this.store.dispatch("dialogues/unmute",{dialogId:e.dialogId})}handleUserInvite(e){if(!e.invited){this.store.dispatch("users/update",{id:e.userId,fields:e.user})}}handleChatRename(e){const s=this.store.getters["dialogues/getByChatId"](e.chatId);if(!s){return false}this.store.dispatch("dialogues/update",{dialogId:s.dialogId,fields:{name:e.name}})}handleChatAvatar(e){const s=this.store.getters["dialogues/getByChatId"](e.chatId);if(!s){return false}this.store.dispatch("dialogues/update",{dialogId:s.dialogId,fields:{avatar:e.avatar}})}}class l{constructor(){this.store=a.Core.getStore();this.userManager=new i.UserManager}getModuleId(){return"im"}handleMessage(e){this.handleMessageAdd(e)}handleMessageChat(e){this.handleMessageAdd(e)}handleMessageAdd(e){if(e.lines){return false}const s=this.store.state.application.common.userId;if(s&&e.userInChat[e.chatId]&&!e.userInChat[e.chatId].includes(s)){return false}let a=false;if(t.Type.isArray(e.message.params["ATTACH"])){a=e.message.params["ATTACH"]}let i=false;if(t.Type.isArray(e.message.params["FILE_ID"])){i=e.files[e.message.params["FILE_ID"][0]]}d.Logger.warn("RecentPullHandler: handleMessageAdd",e);const r={id:e.dialogId,message:{id:e.message.id,text:e.message.text,date:e.message.date,senderId:e.message.senderId,attach:a,file:i}};const n=this.store.getters["recent/get"](e.dialogId);if(n){r.options={birthdayPlaceholder:false};this.store.dispatch("recent/like",{id:e.dialogId,liked:false})}const{senderId:l}=e.message;const g=this.store.state.users;if(g!=null&&g.botList[l]&&g.botList[l].type==="human"){const{text:s}=e.message;setTimeout((()=>{this.store.dispatch("recent/setRecent",r)}),this.getWaitTimeForHumanBot(s));return}this.store.dispatch("recent/setRecent",r)}handleMessageUpdate(e,s,a){const i=this.store.getters["recent/get"](e.dialogId);if(!i||i.message.id!==e.id){return false}d.Logger.warn("RecentPullHandler: handleMessageUpdate",e,a);let r=e.text;if(a==="messageDelete"){r=t.Loc.getMessage("IM_EMBED_PULL_RECENT_MESSAGE_DELETED")}this.store.dispatch("recent/update",{id:e.dialogId,fields:{message:{id:e.id,text:r,date:i.message.date,status:i.message.status,senderId:e.senderId,params:{withFile:false,withAttach:false}}}})}handleMessageDelete(e,s,t){this.handleMessageUpdate(e,s,t)}handleMessageDeleteComplete(e,s){const t=Boolean(e.newLastMessage);if(t){this.store.dispatch("recent/update",{id:e.dialogId,fields:{message:e.newLastMessage}})}}handleReadMessageOpponent(e){d.Logger.warn("RecentPullHandler: handleReadMessageOpponent",e);const s=this.store.getters["recent/get"](e.dialogId);const t=Number.parseInt(e.lastId,10);if(!s||s.message.id!==t){return false}this.store.dispatch("recent/update",{id:e.dialogId,fields:{message:{...s.message,status:r.MessageStatus.delivered}}})}handleReadMessageChatOpponent(e){this.handleReadMessageOpponent(e)}handleUnreadMessageOpponent(e){d.Logger.warn("RecentPullHandler: handleUnreadMessageOpponent",e);const s=this.store.getters["recent/get"](e.dialogId);if(!s){return false}this.store.dispatch("recent/update",{id:e.dialogId,fields:{message:{...s.message,status:r.MessageStatus.received}}})}handleUnreadMessageChatOpponent(e){d.Logger.warn("RecentPullHandler: handleUnreadMessageChatOpponent",e);const s=this.store.getters["recent/get"](e.dialogId);if(!s){return false}this.store.dispatch("recent/update",{id:e.dialogId,fields:{message:{...s.message,status:e.chatMessageStatus}}})}handleMessageLike(e){d.Logger.warn("RecentPullHandler: handleMessageLike",e);const s=this.store.getters["recent/get"](e.dialogId);if(!s){return false}if(t.Type.isUndefined(BX.MessengerProxy)){return}const i=BX.MessengerProxy.getCurrentDialogId();if(i===e.dialogId){return false}const r=a.Core.getUserId();const n=r===e.senderId;const l=s.message.senderId===r;if(n||!l){return false}this.store.dispatch("recent/like",{id:e.dialogId,messageId:e.id,liked:e.set})}handleChatPin(e){d.Logger.warn("RecentPullHandler: handleChatPin",e);const s=this.store.getters["recent/get"](e.dialogId);if(!s){return false}this.store.dispatch("recent/pin",{id:e.dialogId,action:e.active})}handleChatUnread(e){d.Logger.warn("RecentPullHandler: handleChatUnread",e);const s=this.store.getters["recent/get"](e.dialogId);if(!s){return false}this.store.dispatch("recent/unread",{id:e.dialogId,action:e.active})}handleChatHide(e){d.Logger.warn("RecentPullHandler: handleChatHide",e);const s=this.store.getters["recent/get"](e.dialogId);if(!s){return false}this.store.dispatch("recent/delete",{id:e.dialogId})}handleChatUserLeave(e){d.Logger.warn("RecentPullHandler: handleChatUserLeave",e);const s=this.store.getters["recent/get"](e.dialogId);if(!s){return false}const t=this.store.state.application.common.userId;if(t!==e.userId){return false}this.store.dispatch("recent/delete",{id:e.dialogId})}handleUserInvite(e){var s;d.Logger.warn("RecentPullHandler: handleUserInvite",e);this.store.dispatch("recent/setRecent",{id:e.user.id,invited:(s=e.invited)!=null?s:false});this.userManager.setUsersToModel([e.user])}getWaitTimeForHumanBot(e){const s=1e3;const t=300;const a=5e3;let d=e.split(" ").length*t+s;if(d>a){d=a}return d}}e.BasePullHandler=n;e.RecentPullHandler=l})(this.BX.Messenger.Embedding.Provider.Pull=this.BX.Messenger.Embedding.Provider.Pull||{},BX,BX,BX.Messenger.Embedding.Application,BX.Messenger.Embedding.Lib,BX.Messenger.Embedding.Lib,BX.Messenger.Embedding.Const);
//# sourceMappingURL=registry.bundle.map.js