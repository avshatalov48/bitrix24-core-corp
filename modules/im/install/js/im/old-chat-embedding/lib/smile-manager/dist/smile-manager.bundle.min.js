this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.Embedding=this.BX.Messenger.Embedding||{};(function(e,s,a,t,i,l,r){"use strict";const o=["id","parentId","name","type","image","selected"].join(",");const c=["id","setId","name","image","typing","width","height","definition","alternative"].join(",");const b=4;var n=babelHelpers.classPrivateFieldLooseKey("instance");var d=babelHelpers.classPrivateFieldLooseKey("smileList");var v=babelHelpers.classPrivateFieldLooseKey("db");var p=babelHelpers.classPrivateFieldLooseKey("restClient");var h=babelHelpers.classPrivateFieldLooseKey("localStorageManager");var L=babelHelpers.classPrivateFieldLooseKey("lastUpdateTime");var P=babelHelpers.classPrivateFieldLooseKey("recentEmoji");var m=babelHelpers.classPrivateFieldLooseKey("fetchDataFromServer");var F=babelHelpers.classPrivateFieldLooseKey("fetchDataFromStorage");var B=babelHelpers.classPrivateFieldLooseKey("fillStorage");var H=babelHelpers.classPrivateFieldLooseKey("shouldRequestFromServer");var u=babelHelpers.classPrivateFieldLooseKey("loadRecentEmoji");class g{static getInstance(){var e;babelHelpers.classPrivateFieldLooseBase(g,n)[n]=(e=babelHelpers.classPrivateFieldLooseBase(g,n)[n])!=null?e:new g;return babelHelpers.classPrivateFieldLooseBase(g,n)[n]}static init(){g.getInstance().initSmileList()}constructor(){Object.defineProperty(this,u,{value:S});Object.defineProperty(this,H,{value:j});Object.defineProperty(this,B,{value:w});Object.defineProperty(this,F,{value:f});Object.defineProperty(this,m,{value:y});Object.defineProperty(this,d,{writable:true,value:void 0});Object.defineProperty(this,v,{writable:true,value:void 0});Object.defineProperty(this,p,{writable:true,value:void 0});Object.defineProperty(this,h,{writable:true,value:void 0});Object.defineProperty(this,L,{writable:true,value:void 0});Object.defineProperty(this,P,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,v)[v]=new a.Dexie("bx-im-smiles");babelHelpers.classPrivateFieldLooseBase(this,v)[v].version(2).stores({sets:o,smiles:c,recentEmoji:",symbols"});babelHelpers.classPrivateFieldLooseBase(this,p)[p]=i.Core.getRestClient();babelHelpers.classPrivateFieldLooseBase(this,h)[h]=r.LocalStorageManager.getInstance();const{lastUpdate:e}=s.Extension.getSettings("im.old-chat-embedding.lib.smile-manager");babelHelpers.classPrivateFieldLooseBase(this,L)[L]=Date.parse(e)+b;babelHelpers.classPrivateFieldLooseBase(this,P)[P]=new Set}async initSmileList(){try{const e=babelHelpers.classPrivateFieldLooseBase(this,H)[H]();if(e){babelHelpers.classPrivateFieldLooseBase(this,d)[d]=await babelHelpers.classPrivateFieldLooseBase(this,m)[m]();await babelHelpers.classPrivateFieldLooseBase(this,B)[B](babelHelpers.classPrivateFieldLooseBase(this,d)[d]);babelHelpers.classPrivateFieldLooseBase(this,h)[h].set(l.LocalStorageKey.smileLastUpdateTime,babelHelpers.classPrivateFieldLooseBase(this,L)[L])}else{babelHelpers.classPrivateFieldLooseBase(this,d)[d]=await babelHelpers.classPrivateFieldLooseBase(this,F)[F]()}await babelHelpers.classPrivateFieldLooseBase(this,u)[u]()}catch(e){console.error("Smile Manager data fetch error:",e);babelHelpers.classPrivateFieldLooseBase(this,h)[h].remove(l.LocalStorageKey.smileLastUpdateTime)}}async updateSelectedSet(e){const s=babelHelpers.classPrivateFieldLooseBase(this,v)[v].sets;await s.toCollection().modify((s=>{s.selected=s.id===e?1:0}));const a=babelHelpers.classPrivateFieldLooseBase(this,d)[d].sets;babelHelpers.classPrivateFieldLooseBase(this,d)[d].sets=a.map((s=>{if(s.id===e){return{...s,selected:1}}return{...s,selected:0}}))}async updateRecentEmoji(e){await babelHelpers.classPrivateFieldLooseBase(this,v)[v].recentEmoji.put({symbols:e},0);babelHelpers.classPrivateFieldLooseBase(this,P)[P]=e}get smileList(){return babelHelpers.classPrivateFieldLooseBase(this,d)[d]}get recentEmoji(){return babelHelpers.classPrivateFieldLooseBase(this,P)[P]}}async function y(){const e=await babelHelpers.classPrivateFieldLooseBase(this,p)[p].callMethod(l.RestMethod.imSmilesGet,{FULL_TYPINGS:"Y"});const s=e.data();const a=[];s.smiles.forEach((e=>{const s=e.typing.split(" ");let t=true;s.forEach((s=>{a.push({...e,typing:s,id:a.length,alternative:t});t=false}))}));const t=s.sets.map((e=>{const s=a.find((s=>s.setId===e.id));const{image:t}=s;return{...e,image:t}}));return{sets:t,smiles:a}}async function f(){const{sets:e,smiles:s}=babelHelpers.classPrivateFieldLooseBase(this,v)[v];const a=await babelHelpers.classPrivateFieldLooseBase(this,v)[v].transaction("r",e,s,(async()=>{const[a,t]=await Promise.all([e.toArray(),s.toArray()]);return{sets:a,smiles:t}}));return a}async function w(e){const{sets:s,smiles:a}=e;const t=s.map((e=>({...e,selected:0})));t[0].selected=1;await Promise.all([babelHelpers.classPrivateFieldLooseBase(this,v)[v].smiles.clear(),babelHelpers.classPrivateFieldLooseBase(this,v)[v].sets.clear()]);await Promise.all([babelHelpers.classPrivateFieldLooseBase(this,v)[v].sets.bulkAdd(t),babelHelpers.classPrivateFieldLooseBase(this,v)[v].smiles.bulkAdd(a)]);babelHelpers.classPrivateFieldLooseBase(this,d)[d]={...babelHelpers.classPrivateFieldLooseBase(this,d)[d],sets:t}}function j(){const e=babelHelpers.classPrivateFieldLooseBase(this,h)[h].get(l.LocalStorageKey.smileLastUpdateTime);const s=babelHelpers.classPrivateFieldLooseBase(this,L)[L]!==e;return s}async function S(){var e;const s=await babelHelpers.classPrivateFieldLooseBase(this,v)[v].recentEmoji.get(0);babelHelpers.classPrivateFieldLooseBase(this,P)[P]=(e=s==null?void 0:s.symbols)!=null?e:babelHelpers.classPrivateFieldLooseBase(this,P)[P]}Object.defineProperty(g,n,{writable:true,value:void 0});e.SmileManager=g})(this.BX.Messenger.Embedding.Lib=this.BX.Messenger.Embedding.Lib||{},BX,BX.Dexie3,BX,BX.Messenger.Embedding.Application,BX.Messenger.Embedding.Const,BX.Messenger.Embedding.Lib);
//# sourceMappingURL=smile-manager.bundle.map.js