{"version":3,"file":"smile-manager.bundle.js","sources":["../src/smile-manager.js"],"sourcesContent":["import {Extension} from 'main.core';\nimport {Dexie} from 'ui.dexie';\nimport {RestClient} from 'rest.client';\n\nimport {Core} from 'im.old-chat-embedding.application.core';\nimport {RestMethod, LocalStorageKey} from 'im.old-chat-embedding.const';\nimport {LocalStorageManager} from 'im.old-chat-embedding.lib.local-storage';\n\nexport type Set = {\n\tid: string;\n\tparentId: string;\n\tname: string;\n\ttype: string;\n\timage: string;\n};\nexport type Smile = {\n\tid: string;\n\tsetId: string;\n\tname: string;\n\timage: string;\n\ttyping: string;\n\talternative: boolean;\n\twidth: number;\n\theight: number;\n\tdefinition: string;\n};\ntype SmileList = {\n\tsets: Array<Set>;\n\tsmiles: Array<Smile>;\n};\n\nconst sets = [\n\t'id',\n\t'parentId',\n\t'name',\n\t'type',\n\t'image',\n\t'selected'\n].join(',');\n\nconst smiles = [\n\t'id',\n\t'setId',\n\t'name',\n\t'image',\n\t'typing',\n\t'width',\n\t'height',\n\t'definition',\n\t'alternative'\n].join(',');\n\nconst CACHE_VERSION = 4;\n\nexport class SmileManager\n{\n\tstatic #instance: SmileManager;\n\n\t#smileList: Array<SmileList>;\n\t#db: Dexie;\n\t#restClient: RestClient;\n\t#localStorageManager: LocalStorageManager;\n\t#lastUpdateTime: number;\n\t#recentEmoji: Set<String>;\n\n\tstatic getInstance(): SmileManager\n\t{\n\t\tSmileManager.#instance = SmileManager.#instance ?? new SmileManager();\n\n\t\treturn SmileManager.#instance;\n\t}\n\n\tstatic init()\n\t{\n\t\tSmileManager.getInstance().initSmileList();\n\t}\n\n\tconstructor()\n\t{\n\t\tthis.#db = new Dexie('bx-im-smiles');\n\t\tthis.#db.version(2).stores({sets, smiles, recentEmoji: ',symbols'});\n\t\tthis.#restClient = Core.getRestClient();\n\t\tthis.#localStorageManager = LocalStorageManager.getInstance();\n\t\tconst {lastUpdate} = Extension.getSettings('im.old-chat-embedding.lib.smile-manager');\n\t\tthis.#lastUpdateTime = Date.parse(lastUpdate) + CACHE_VERSION;\n\t\t// for debug purpose only\n\t\t// this.#lastUpdateTime = Date.now();\n\t\tthis.#recentEmoji = new Set();\n\t}\n\n\tasync #fetchDataFromServer(): Promise<SmileList>\n\t{\n\t\tconst result = await this.#restClient.callMethod(RestMethod.imSmilesGet, {FULL_TYPINGS: 'Y'});\n\t\tconst data = result.data();\n\n\t\tconst smileList = [];\n\t\tdata.smiles.forEach(smile => {\n\t\t\tconst list = smile.typing.split(' ');\n\t\t\tlet alternative = true;\n\t\t\tlist.forEach(code => {\n\t\t\t\tsmileList.push({...smile, typing: code, id: smileList.length, alternative});\n\t\t\t\talternative = false;\n\t\t\t});\n\t\t});\n\n\t\tconst setList = data.sets.map(set => {\n\t\t\tconst firstSmileInSet = smileList.find(smile => smile.setId === set.id);\n\t\t\tconst {image} = firstSmileInSet;\n\t\t\treturn {...set, image};\n\t\t});\n\n\t\treturn {sets: setList, smiles: smileList};\n\t}\n\n\tasync #fetchDataFromStorage(): Promise<SmileList>\n\t{\n\t\tconst {sets: setsTbl, smiles: smilesTbl} = this.#db;\n\t\tconst data = await this.#db.transaction('r', setsTbl, smilesTbl, async () => {\n\t\t\tconst [sets, smiles] = await Promise.all([\n\t\t\t\tsetsTbl.toArray(),\n\t\t\t\tsmilesTbl.toArray()\n\t\t\t]);\n\n\t\t\treturn {sets, smiles};\n\t\t});\n\n\t\treturn data;\n\t}\n\n\tasync #fillStorage(smileList)\n\t{\n\t\tconst {sets, smiles} = smileList;\n\t\tconst setsToSave = sets.map((set) => ({...set, selected: 0}));\n\t\tsetsToSave[0].selected = 1;\n\t\tawait Promise.all([\n\t\t\tthis.#db.smiles.clear(),\n\t\t\tthis.#db.sets.clear()\n\t\t]);\n\t\tawait Promise.all([\n\t\t\tthis.#db.sets.bulkAdd(setsToSave),\n\t\t\tthis.#db.smiles.bulkAdd(smiles)\n\t\t]);\n\t\tthis.#smileList = {\n\t\t\t...this.#smileList,\n\t\t\tsets: setsToSave\n\t\t};\n\t}\n\n\t#shouldRequestFromServer(): boolean\n\t{\n\t\tconst lastUpdateTimeFromStorage = this.#localStorageManager.get(LocalStorageKey.smileLastUpdateTime);\n\t\tconst shouldRequestFromServer = this.#lastUpdateTime !== lastUpdateTimeFromStorage;\n\n\t\treturn shouldRequestFromServer;\n\t}\n\n\tasync #loadRecentEmoji()\n\t{\n\t\tconst storageData = await this.#db.recentEmoji.get(0);\n\t\tthis.#recentEmoji = storageData?.symbols ?? this.#recentEmoji;\n\t}\n\n\tasync initSmileList()\n\t{\n\t\ttry {\n\t\t\tconst shouldRequestFromServer = this.#shouldRequestFromServer();\n\t\t\tif (shouldRequestFromServer)\n\t\t\t{\n\t\t\t\tthis.#smileList = await this.#fetchDataFromServer();\n\t\t\t\tawait this.#fillStorage(this.#smileList);\n\t\t\t\tthis.#localStorageManager.set(LocalStorageKey.smileLastUpdateTime, this.#lastUpdateTime);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.#smileList = await this.#fetchDataFromStorage();\n\t\t\t}\n\n\t\t\tawait this.#loadRecentEmoji();\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\tconsole.error('Smile Manager data fetch error:', err);\n\t\t\tthis.#localStorageManager.remove(LocalStorageKey.smileLastUpdateTime);\n\t\t}\n\t}\n\n\tasync updateSelectedSet(selectedSetId: string)\n\t{\n\t\tconst setsDB = this.#db.sets;\n\t\tawait setsDB.toCollection().modify((set) => {\n\t\t\tset.selected = set.id === selectedSetId ? 1 : 0;\n\t\t});\n\t\tconst sets = this.#smileList.sets;\n\t\tthis.#smileList.sets = sets.map((set) => {\n\t\t\tif (set.id === selectedSetId) {\n\t\t\t\treturn {...set, selected: 1};\n\t\t\t}\n\n\t\t\treturn {...set, selected: 0};\n\t\t});\n\t}\n\n\tasync updateRecentEmoji(symbols: Set<String>)\n\t{\n\t\tawait this.#db.recentEmoji.put({symbols}, 0);\n\t\tthis.#recentEmoji = symbols;\n\t}\n\n\tget smileList(): SmileList\n\t{\n\t\treturn this.#smileList;\n\t}\n\n\tget recentEmoji(): Set<String>\n\t{\n\t\treturn this.#recentEmoji;\n\t}\n}"],"names":["sets","join","smiles","CACHE_VERSION","SmileManager","getInstance","init","initSmileList","constructor","Dexie","version","stores","recentEmoji","Core","getRestClient","LocalStorageManager","lastUpdate","Extension","getSettings","Date","parse","Set","shouldRequestFromServer","set","LocalStorageKey","smileLastUpdateTime","err","console","error","remove","updateSelectedSet","selectedSetId","setsDB","toCollection","modify","selected","id","map","updateRecentEmoji","symbols","put","smileList","result","callMethod","RestMethod","imSmilesGet","FULL_TYPINGS","data","forEach","smile","list","typing","split","alternative","code","push","length","setList","firstSmileInSet","find","setId","image","setsTbl","smilesTbl","transaction","Promise","all","toArray","setsToSave","clear","bulkAdd","lastUpdateTimeFromStorage","get","storageData"],"mappings":";;;;;;;CA+BA,MAAMA,IAAI,GAAG,CACZ,IAAI,EACJ,UAAU,EACV,MAAM,EACN,MAAM,EACN,OAAO,EACP,UAAU,CACV,CAACC,IAAI,CAAC,GAAG,CAAC;CAEX,MAAMC,MAAM,GAAG,CACd,IAAI,EACJ,OAAO,EACP,MAAM,EACN,OAAO,EACP,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,YAAY,EACZ,aAAa,CACb,CAACD,IAAI,CAAC,GAAG,CAAC;CAEX,MAAME,aAAa,GAAG,CAAC;CAAC;CAAA;CAAA;CAAA;CAAA;CAAA;CAAA;CAAA;CAAA;CAAA;CAAA;CAAA;AAExB,CAAO,MAAMC,YAAY,CACzB;GAUC,OAAOC,WAAW,GAClB;KAAA;KACC,wCAAAD,YAAY,2FAAaA,YAAY,2DAAc,IAAIA,YAAY,EAAE;KAErE,+CAAOA,YAAY;;GAGpB,OAAOE,IAAI,GACX;KACCF,YAAY,CAACC,WAAW,EAAE,CAACE,aAAa,EAAE;;GAG3CC,WAAW,GACX;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KACC,4CAAI,cAAO,IAAIC,cAAK,CAAC,cAAc,CAAC;KACpC,4CAAI,YAAKC,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC;OAACX,IAAI;OAAEE,MAAM;OAAEU,WAAW,EAAE;MAAW,CAAC;KACnE,4CAAI,8BAAeC,yCAAI,CAACC,aAAa,EAAE;KACvC,4CAAI,gDAAwBC,wDAAmB,CAACV,WAAW,EAAE;KAC7D,MAAM;OAACW;MAAW,GAAGC,mBAAS,CAACC,WAAW,CAAC,yCAAyC,CAAC;KACrF,4CAAI,sCAAmBC,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAGb,aAAa;;;KAG7D,4CAAI,gCAAgB,IAAIkB,GAAG,EAAE;;GA2E9B,MAAMd,aAAa,GACnB;KACC,IAAI;OACH,MAAMe,uBAAuB,2CAAG,IAAI,uDAA2B;OAC/D,IAAIA,uBAAuB,EAC3B;SACC,4CAAI,4BAAc,8CAAM,IAAI,+CAAuB;SACnD,8CAAM,IAAI,sEAAc,IAAI,0BAAY;SACxC,4CAAI,8CAAsBC,GAAG,CAACC,yCAAe,CAACC,mBAAmB,0CAAE,IAAI,oCAAiB;QACxF,MAED;SACC,4CAAI,4BAAc,8CAAM,IAAI,iDAAwB;;OAGrD,8CAAM,IAAI,uCAAmB;MAC7B,CACD,OAAOC,GAAG,EACV;OACCC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,GAAG,CAAC;OACrD,4CAAI,8CAAsBG,MAAM,CAACL,yCAAe,CAACC,mBAAmB,CAAC;;;GAIvE,MAAMK,iBAAiB,CAACC,aAAqB,EAC7C;KACC,MAAMC,MAAM,GAAG,4CAAI,YAAKhC,IAAI;KAC5B,MAAMgC,MAAM,CAACC,YAAY,EAAE,CAACC,MAAM,CAAEX,GAAG,IAAK;OAC3CA,GAAG,CAACY,QAAQ,GAAGZ,GAAG,CAACa,EAAE,KAAKL,aAAa,GAAG,CAAC,GAAG,CAAC;MAC/C,CAAC;KACF,MAAM/B,IAAI,GAAG,4CAAI,0BAAYA,IAAI;KACjC,4CAAI,0BAAYA,IAAI,GAAGA,IAAI,CAACqC,GAAG,CAAEd,GAAG,IAAK;OACxC,IAAIA,GAAG,CAACa,EAAE,KAAKL,aAAa,EAAE;SAC7B,OAAO;WAAC,GAAGR,GAAG;WAAEY,QAAQ,EAAE;UAAE;;OAG7B,OAAO;SAAC,GAAGZ,GAAG;SAAEY,QAAQ,EAAE;QAAE;MAC5B,CAAC;;GAGH,MAAMG,iBAAiB,CAACC,OAAoB,EAC5C;KACC,MAAM,4CAAI,YAAK3B,WAAW,CAAC4B,GAAG,CAAC;OAACD;MAAQ,EAAE,CAAC,CAAC;KAC5C,4CAAI,gCAAgBA,OAAO;;GAG5B,IAAIE,SAAS,GACb;KACC,+CAAO,IAAI;;GAGZ,IAAI7B,WAAW,GACf;KACC,+CAAO,IAAI;;CAEb;CAAC,uCA9HA;GACC,MAAM8B,MAAM,GAAG,MAAM,4CAAI,4BAAaC,UAAU,CAACC,oCAAU,CAACC,WAAW,EAAE;KAACC,YAAY,EAAE;IAAI,CAAC;GAC7F,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAAI,EAAE;GAE1B,MAAMN,SAAS,GAAG,EAAE;GACpBM,IAAI,CAAC7C,MAAM,CAAC8C,OAAO,CAACC,KAAK,IAAI;KAC5B,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;KACpC,IAAIC,WAAW,GAAG,IAAI;KACtBH,IAAI,CAACF,OAAO,CAACM,IAAI,IAAI;OACpBb,SAAS,CAACc,IAAI,CAAC;SAAC,GAAGN,KAAK;SAAEE,MAAM,EAAEG,IAAI;SAAElB,EAAE,EAAEK,SAAS,CAACe,MAAM;SAAEH;QAAY,CAAC;OAC3EA,WAAW,GAAG,KAAK;MACnB,CAAC;IACF,CAAC;GAEF,MAAMI,OAAO,GAAGV,IAAI,CAAC/C,IAAI,CAACqC,GAAG,CAACd,GAAG,IAAI;KACpC,MAAMmC,eAAe,GAAGjB,SAAS,CAACkB,IAAI,CAACV,KAAK,IAAIA,KAAK,CAACW,KAAK,KAAKrC,GAAG,CAACa,EAAE,CAAC;KACvE,MAAM;OAACyB;MAAM,GAAGH,eAAe;KAC/B,OAAO;OAAC,GAAGnC,GAAG;OAAEsC;MAAM;IACtB,CAAC;GAEF,OAAO;KAAC7D,IAAI,EAAEyD,OAAO;KAAEvD,MAAM,EAAEuC;IAAU;CAC1C;CAAC,wCAGD;GACC,MAAM;KAACzC,IAAI,EAAE8D,OAAO;KAAE5D,MAAM,EAAE6D;IAAU,2CAAG,IAAI,WAAI;GACnD,MAAMhB,IAAI,GAAG,MAAM,4CAAI,YAAKiB,WAAW,CAAC,GAAG,EAAEF,OAAO,EAAEC,SAAS,EAAE,YAAY;KAC5E,MAAM,CAAC/D,IAAI,EAAEE,MAAM,CAAC,GAAG,MAAM+D,OAAO,CAACC,GAAG,CAAC,CACxCJ,OAAO,CAACK,OAAO,EAAE,EACjBJ,SAAS,CAACI,OAAO,EAAE,CACnB,CAAC;KAEF,OAAO;OAACnE,IAAI;OAAEE;MAAO;IACrB,CAAC;GAEF,OAAO6C,IAAI;CACZ;CAAC,6BAEkBN,SAAS,EAC5B;GACC,MAAM;KAACzC,IAAI;KAAEE;IAAO,GAAGuC,SAAS;GAChC,MAAM2B,UAAU,GAAGpE,IAAI,CAACqC,GAAG,CAAEd,GAAG,KAAM;KAAC,GAAGA,GAAG;KAAEY,QAAQ,EAAE;IAAE,CAAC,CAAC;GAC7DiC,UAAU,CAAC,CAAC,CAAC,CAACjC,QAAQ,GAAG,CAAC;GAC1B,MAAM8B,OAAO,CAACC,GAAG,CAAC,CACjB,4CAAI,YAAKhE,MAAM,CAACmE,KAAK,EAAE,EACvB,4CAAI,YAAKrE,IAAI,CAACqE,KAAK,EAAE,CACrB,CAAC;GACF,MAAMJ,OAAO,CAACC,GAAG,CAAC,CACjB,4CAAI,YAAKlE,IAAI,CAACsE,OAAO,CAACF,UAAU,CAAC,EACjC,4CAAI,YAAKlE,MAAM,CAACoE,OAAO,CAACpE,MAAM,CAAC,CAC/B,CAAC;GACF,4CAAI,4BAAc;KACjB,2CAAG,IAAI,yBAAW;KAClBF,IAAI,EAAEoE;IACN;CACF;CAAC,qCAGD;GACC,MAAMG,yBAAyB,GAAG,4CAAI,8CAAsBC,GAAG,CAAChD,yCAAe,CAACC,mBAAmB,CAAC;GACpG,MAAMH,uBAAuB,GAAG,4CAAI,wCAAqBiD,yBAAyB;GAElF,OAAOjD,uBAAuB;CAC/B;CAAC,mCAGD;GAAA;GACC,MAAMmD,WAAW,GAAG,MAAM,4CAAI,YAAK7D,WAAW,CAAC4D,GAAG,CAAC,CAAC,CAAC;GACrD,4CAAI,wDAAgBC,WAAW,oBAAXA,WAAW,CAAElC,OAAO,2EAAI,IAAI,6BAAa;CAC9D;CAAC,sBA1GWnC,YAAY;GAAA;GAAA;CAAA;;;;;;;;"}