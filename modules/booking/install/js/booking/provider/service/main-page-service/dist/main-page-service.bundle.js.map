{"version":3,"file":"main-page-service.bundle.js","sources":["../src/main-page-data-extractor.js","../src/counters-extractor.js","../src/main-page-service.js"],"sourcesContent":["import { CrmEntity } from 'booking.const';\nimport { BookingMappers } from 'booking.provider.service.booking-service';\nimport { ClientMappers } from 'booking.provider.service.client-service';\nimport { ResourceMappers } from 'booking.provider.service.resources-service';\nimport { ResourceTypeMappers } from 'booking.provider.service.resources-type-service';\n\nimport type { BookingModel } from 'booking.model.bookings';\nimport type { BookingDto } from 'booking.provider.service.booking-service';\nimport type { CountersModel } from 'booking.model.counters';\nimport type { ClientModel } from 'booking.model.clients';\nimport type { ClientDto } from 'booking.provider.service.client-service';\nimport type { ResourceModel } from 'booking.model.resources';\nimport type { ResourceDto } from 'booking.provider.service.resources-service';\nimport type { ResourceTypeModel } from 'booking.model.resource-types';\nimport type { ResourceTypeDto } from 'booking.provider.service.resources-type-service';\n\nimport type { MainPageGetResponse } from './types';\n\nexport class MainPageDataExtractor\n{\n\t#response: MainPageGetResponse;\n\n\tconstructor(response: MainPageGetResponse)\n\t{\n\t\tthis.#response = response;\n\t}\n\n\tgetFavoriteIds(): number[]\n\t{\n\t\treturn this.#response.favorites.resources.map((resource: ResourceDto) => resource.id);\n\t}\n\n\tgetBookings(): BookingModel[]\n\t{\n\t\treturn this.#response.bookings.map((booking: BookingDto): BookingModel => {\n\t\t\treturn BookingMappers.mapDtoToModel(booking);\n\t\t});\n\t}\n\n\tgetClientsProviderModuleId(): string\n\t{\n\t\treturn this.#response.clients.providerModuleId;\n\t}\n\n\tgetClients(): ClientModel[]\n\t{\n\t\treturn [\n\t\t\t...this.#extractClients(CrmEntity.Contact),\n\t\t\t...this.#extractClients(CrmEntity.Company),\n\t\t\t...this.#extractClientsFromBookings(),\n\t\t];\n\t}\n\n\t#extractClients(code: string): ClientModel[]\n\t{\n\t\tconst module = this.#response.clients.providerModuleId;\n\t\tif (!module)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\n\t\treturn Object.values(this.#response.clients.recent[code]).map((client): ClientModel => ({\n\t\t\t...client,\n\t\t\ttype: { module, code },\n\t\t}));\n\t}\n\n\t#extractClientsFromBookings(): ClientModel[]\n\t{\n\t\treturn this.#response.bookings\n\t\t\t.flatMap(({ clients }) => clients.map((client: ClientDto): ClientModel => {\n\t\t\t\treturn ClientMappers.mapDtoToModel(client);\n\t\t\t}));\n\t}\n\n\tgetCounters(): CountersModel\n\t{\n\t\treturn this.#response.counters;\n\t}\n\n\tgetResources(): ResourceModel[]\n\t{\n\t\tconst resourcesIds: Set<number> = new Set();\n\t\tconst resourcesModels: ResourceModel[] = (this.#response.favorites?.resources ?? [])\n\t\t\t.map((resourceDto: ResourceDto) => {\n\t\t\t\tresourcesIds.add(resourceDto.id);\n\n\t\t\t\treturn ResourceMappers.mapDtoToModel(resourceDto);\n\t\t\t});\n\n\t\tthis.#response.bookings\n\t\t\t.flatMap(({ resources }: BookingDto) => resources)\n\t\t\t.forEach((resourceDto: ResourceDto) => {\n\t\t\t\tif (resourcesIds.has(resourceDto.id))\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresourcesIds.add(resourceDto.id);\n\t\t\t\tresourcesModels.push(ResourceMappers.mapDtoToModel(resourceDto));\n\t\t\t});\n\n\t\treturn resourcesModels;\n\t}\n\n\tgetResourceTypes(): ResourceTypeModel[]\n\t{\n\t\treturn this.#response.resourceTypes.map((resourceTypeDto: ResourceTypeDto): ResourceTypeModel => {\n\t\t\treturn ResourceTypeMappers.mapDtoToModel(resourceTypeDto);\n\t\t});\n\t}\n\n\tgetIntersectionMode(): boolean\n\t{\n\t\treturn this.#response.isIntersectionForAll;\n\t}\n\n\tgetIsCurrentSenderAvailable(): boolean\n\t{\n\t\treturn this.#response.isCurrentSenderAvailable;\n\t}\n}\n","import type { CountersModel } from 'booking.model.counters';\nimport type { MainPageGetCountersResponse, MoneyStatisticsDto } from './types';\n\nexport class CountersExtractor\n{\n\t#response: MainPageGetCountersResponse;\n\n\tconstructor(response: MainPageGetCountersResponse)\n\t{\n\t\tthis.#response = response;\n\t}\n\n\tgetCounters(): CountersModel\n\t{\n\t\treturn this.#response.counters;\n\t}\n\n\tgetTotalClients(): number\n\t{\n\t\treturn this.#response.clientStatistics.total;\n\t}\n\n\tgetTotalNewClientsToday(): number\n\t{\n\t\treturn this.#response.clientStatistics.totalToday;\n\t}\n\n\tgetMoneyStatistics(): MoneyStatisticsDto\n\t{\n\t\treturn this.#response.moneyStatistics;\n\t}\n}\n","import { Core } from 'booking.core';\nimport { Model } from 'booking.const';\nimport { resourcesDateCache } from 'booking.lib.resources-date-cache';\nimport { ApiClient } from 'booking.lib.api-client';\nimport type { BookingModel } from 'booking.model.bookings';\n\nimport { MainPageDataExtractor } from './main-page-data-extractor';\nimport { CountersExtractor } from './counters-extractor';\n\nclass MainPageService\n{\n\t#dateCache: number[] = [];\n\n\tclearCache(ids: number[]): void\n\t{\n\t\tthis.#dateCache = this.#dateCache.filter((date: number) => resourcesDateCache.isDateLoaded(date, ids));\n\t}\n\n\tasync fetchData(dateTs: number): Promise<void>\n\t{\n\t\tif (this.#dateCache.includes(dateTs))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#dateCache.push(dateTs);\n\n\t\tawait this.loadData(dateTs);\n\t}\n\n\tasync loadData(dateTs: number): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (Core.getStore().getters[`${Model.Interface}/isEditingBookingMode`])\n\t\t\t{\n\t\t\t\tawait this.#requestDataForBooking(dateTs);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tawait this.#requestData(dateTs);\n\t\t\t}\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('BookingMainPageGetRequest: error', error);\n\t\t}\n\t}\n\n\tasync #requestData(dateTs: number): Promise<void>\n\t{\n\t\tconst data = await new ApiClient().get('MainPage.get', { dateTs });\n\t\tconst extractor = new MainPageDataExtractor(data);\n\n\t\tresourcesDateCache.upsertIds(dateTs, extractor.getResources().map((it) => it.id));\n\n\t\tawait Promise.all([\n\t\t\tCore.getStore().dispatch(`${Model.Favorites}/set`, extractor.getFavoriteIds()),\n\t\t\tCore.getStore().dispatch(`${Model.Interface}/setResourcesIds`, extractor.getFavoriteIds()),\n\t\t\tCore.getStore().dispatch(`${Model.Interface}/setIntersectionMode`, extractor.getIntersectionMode()),\n\t\t\tCore.getStore().dispatch(`${Model.Resources}/upsertMany`, extractor.getResources()),\n\t\t\tCore.getStore().dispatch(`${Model.ResourceTypes}/upsertMany`, extractor.getResourceTypes()),\n\t\t\tCore.getStore().dispatch(`${Model.Counters}/set`, extractor.getCounters()),\n\t\t\tCore.getStore().dispatch(`${Model.Bookings}/upsertMany`, extractor.getBookings()),\n\t\t\tCore.getStore().dispatch(`${Model.Clients}/upsertMany`, extractor.getClients()),\n\t\t\tCore.getStore().dispatch(`${Model.Clients}/setProviderModuleId`, extractor.getClientsProviderModuleId()),\n\t\t\tCore.getStore().dispatch(`${Model.Interface}/setIsCurrentSenderAvailable`, extractor.getIsCurrentSenderAvailable()),\n\t\t]);\n\t}\n\n\tasync #requestDataForBooking(dateTs: number): Promise<void>\n\t{\n\t\tconst bookingId = Core.getParams().editingBookingId;\n\t\tconst timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\t\tconst resourcesIds = Core.getStore().getters[`${Model.Favorites}/get`];\n\n\t\tconst data = await new ApiClient().get('MainPage.getForBooking', { dateTs, bookingId, timezone, resourcesIds });\n\n\t\tconst extractor = new MainPageDataExtractor(data);\n\n\t\tconst promises = [\n\t\t\tCore.getStore().dispatch(`${Model.Interface}/setIntersectionMode`, extractor.getIntersectionMode()),\n\t\t\tCore.getStore().dispatch(`${Model.Resources}/upsertMany`, extractor.getResources()),\n\t\t\tCore.getStore().dispatch(`${Model.ResourceTypes}/upsertMany`, extractor.getResourceTypes()),\n\t\t\tCore.getStore().dispatch(`${Model.Counters}/set`, extractor.getCounters()),\n\t\t\tCore.getStore().dispatch(`${Model.Bookings}/upsertMany`, extractor.getBookings()),\n\t\t\tCore.getStore().dispatch(`${Model.Clients}/upsertMany`, extractor.getClients()),\n\t\t\tCore.getStore().dispatch(`${Model.Clients}/setProviderModuleId`, extractor.getClientsProviderModuleId()),\n\t\t\tCore.getStore().dispatch(`${Model.Interface}/setIsCurrentSenderAvailable`, extractor.getIsCurrentSenderAvailable()),\n\t\t];\n\n\t\tconst editingBooking = extractor.getBookings()\n\t\t\t.find((booking: BookingModel) => booking.id === bookingId)\n\t\t;\n\n\t\tif (!editingBooking && dateTs === 0)\n\t\t{\n\t\t\tpromises.push(\n\t\t\t\tCore.getStore().dispatch(`${Model.Interface}/setEditingBookingId`, 0),\n\t\t\t);\n\t\t}\n\n\t\tlet selectedDate = new Date(dateTs * 1000);\n\t\tif (editingBooking && dateTs === 0)\n\t\t{\n\t\t\tconst dateFrom = new Date(editingBooking.dateFromTs);\n\t\t\tselectedDate = new Date(dateFrom.getFullYear(), dateFrom.getMonth(), dateFrom.getDate());\n\n\t\t\tpromises.push(\n\t\t\t\tCore.getStore().dispatch(`${Model.Interface}/setSelectedDateTs`, selectedDate.getTime()),\n\t\t\t);\n\n\t\t\tthis.#dateCache.push(selectedDate.getTime() / 1000);\n\t\t}\n\n\t\tlet selectedResourcesIds = resourcesIds;\n\t\tif (editingBooking && resourcesIds.length === 0)\n\t\t{\n\t\t\tselectedResourcesIds = [editingBooking.resourcesIds[0]];\n\n\t\t\tpromises.push(\n\t\t\t\tCore.getStore().dispatch(`${Model.Favorites}/set`, [editingBooking.resourcesIds[0]]),\n\t\t\t\tCore.getStore().dispatch(`${Model.Interface}/setResourcesIds`, [editingBooking.resourcesIds[0]]),\n\t\t\t);\n\t\t}\n\n\t\tresourcesDateCache.upsertIds(selectedDate.getTime() / 1000, selectedResourcesIds);\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tasync fetchCounters(): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst data = await new ApiClient().get('MainPage.getCounters');\n\n\t\t\tconst extractor = new CountersExtractor(data);\n\n\t\t\tawait Promise.all([\n\t\t\t\tCore.getStore().dispatch(`${Model.Interface}/setTotalClients`, extractor.getTotalClients()),\n\t\t\t\tCore.getStore().dispatch(`${Model.Interface}/setTotalNewClientsToday`, extractor.getTotalNewClientsToday()),\n\t\t\t\tCore.getStore().dispatch(`${Model.Interface}/setMoneyStatistics`, extractor.getMoneyStatistics()),\n\t\t\t\tCore.getStore().dispatch(`${Model.Counters}/set`, extractor.getCounters()),\n\t\t\t]);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('BookingMainPageGetCountersRequest: error', error);\n\t\t}\n\t}\n\n\tasync activateDemo(): Promise<boolean>\n\t{\n\t\ttry\n\t\t{\n\t\t\treturn await new ApiClient().get('MainPage.activateDemo');\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('BookingMainPageActivateDemoRequest: error', error);\n\t\t}\n\n\t\treturn Promise.resolve(false);\n\t}\n}\n\nexport const mainPageService = new MainPageService();\n"],"names":["MainPageDataExtractor","constructor","response","getFavoriteIds","favorites","resources","map","resource","id","getBookings","bookings","booking","BookingMappers","mapDtoToModel","getClientsProviderModuleId","clients","providerModuleId","getClients","CrmEntity","Contact","Company","getCounters","counters","getResources","resourcesIds","Set","resourcesModels","resourceDto","add","ResourceMappers","flatMap","forEach","has","push","getResourceTypes","resourceTypes","resourceTypeDto","ResourceTypeMappers","getIntersectionMode","isIntersectionForAll","getIsCurrentSenderAvailable","isCurrentSenderAvailable","code","module","Object","values","recent","client","type","ClientMappers","CountersExtractor","getTotalClients","clientStatistics","total","getTotalNewClientsToday","totalToday","getMoneyStatistics","moneyStatistics","MainPageService","clearCache","ids","filter","date","resourcesDateCache","isDateLoaded","fetchData","dateTs","includes","loadData","Core","getStore","getters","Model","Interface","error","console","fetchCounters","data","ApiClient","get","extractor","Promise","all","dispatch","Counters","activateDemo","resolve","upsertIds","it","Favorites","Resources","ResourceTypes","Bookings","Clients","bookingId","getParams","editingBookingId","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","promises","editingBooking","find","selectedDate","Date","dateFrom","dateFromTs","getFullYear","getMonth","getDate","getTime","selectedResourcesIds","length","mainPageService"],"mappings":"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"}