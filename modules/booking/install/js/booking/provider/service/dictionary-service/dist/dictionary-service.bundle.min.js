this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};this.BX.Booking.Provider=this.BX.Booking.Provider||{};(function(e,t,i){"use strict";var o=babelHelpers.classPrivateFieldLooseKey("response");class s{constructor(e){Object.defineProperty(this,o,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,o)[o]=e}getCounters(){return babelHelpers.classPrivateFieldLooseBase(this,o)[o].counters}getNotifications(){return babelHelpers.classPrivateFieldLooseBase(this,o)[o].notifications}getNotificationTemplates(){return babelHelpers.classPrivateFieldLooseBase(this,o)[o].notificationTemplateTypes}getPushCommands(){return babelHelpers.classPrivateFieldLooseBase(this,o)[o].pushCommands}getBookings(){return babelHelpers.classPrivateFieldLooseBase(this,o)[o].bookings}}class r{async fetchData(){try{const e=await(new i.ApiClient).get("Dictionary.get",{});const o=new s(e);return Promise.all([t.Core.getStore().dispatch("dictionary/setCounters",o.getCounters()),t.Core.getStore().dispatch("dictionary/setNotifications",o.getNotifications()),t.Core.getStore().dispatch("dictionary/setNotificationTemplates",o.getNotificationTemplates()),t.Core.getStore().dispatch("dictionary/setPushCommands",o.getPushCommands()),t.Core.getStore().dispatch("dictionary/setBookings",o.getBookings())])}catch(e){console.error("BookingDictionaryGetRequest: error",e)}}}const a=new r;e.dictionaryService=a})(this.BX.Booking.Provider.Service=this.BX.Booking.Provider.Service||{},BX.Booking,BX.Booking.Lib);
//# sourceMappingURL=dictionary-service.bundle.map.js