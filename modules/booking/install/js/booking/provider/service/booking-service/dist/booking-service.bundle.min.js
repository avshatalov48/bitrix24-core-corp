this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};this.BX.Booking.Provider=this.BX.Booking.Provider||{};(function(e,t,o,i,r,s,a,n,l){"use strict";function d(e){const t={id:()=>Number(e.id)||0,resources:()=>e.resourcesIds.map((e=>({id:e}))),primaryClient:()=>{var t;return(t=e.clients)==null?void 0:t[0]},clients:()=>e.clients,name:()=>e.name,datePeriod:()=>({from:{timestamp:e.dateFromTs/1e3,timezone:e.timezoneFrom},to:{timestamp:e.dateToTs/1e3,timezone:e.timezoneTo}}),isConfirmed:()=>e.isConfirmed,rrule:()=>e.rrule,note:()=>e.note,visitStatus:()=>e.visitStatus,externalData:()=>e.externalData};const o=new Map([["resources",["resourcesIds"]],["datePeriod",["dateFromTs","dateToTs"]]]);return Object.keys(t).reduce(((i,r)=>{const s=o.get(r);const a=s?s.every((t=>t in e)):true;if(a&&(r in e||s)){const e=t[r]();if(e!==undefined){i[r]=e}}return i}),{})}function c(e){const o=e.clients.filter((e=>t.Type.isArrayFilled(Object.values(e.data))));return{id:e.id,updatedAt:e.updatedAt,resourcesIds:e.resources.map((({id:e})=>e)),primaryClient:o==null?void 0:o[0],clients:o,counter:e.counter,counters:e.counters,name:e.name,dateFromTs:e.datePeriod.from.timestamp*1e3,timezoneFrom:e.datePeriod.from.timezone,dateToTs:e.datePeriod.to.timestamp*1e3,timezoneTo:e.datePeriod.to.timezone,isConfirmed:e.isConfirmed,rrule:e.rrule,note:e.note,visitStatus:e.visitStatus,externalData:e.externalData}}var g=babelHelpers.classPrivateFieldLooseKey("response");class p{constructor(e){Object.defineProperty(this,g,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,g)[g]=e}getBookings(){return babelHelpers.classPrivateFieldLooseBase(this,g)[g].map((e=>c(e)))}getBookingsIds(){return babelHelpers.classPrivateFieldLooseBase(this,g)[g].map((({id:e})=>e))}getClients(){return babelHelpers.classPrivateFieldLooseBase(this,g)[g].flatMap((({clients:e})=>e)).map((e=>n.ClientMappers.mapDtoToModel(e)))}getResources(){return babelHelpers.classPrivateFieldLooseBase(this,g)[g].flatMap((({resources:e})=>e)).map((e=>l.ResourceMappers.mapDtoToModel(e)))}}var u=babelHelpers.classPrivateFieldLooseKey("filterRequests");var B=babelHelpers.classPrivateFieldLooseKey("lastFilterRequest");var v=babelHelpers.classPrivateFieldLooseKey("onAfterDelete");var b=babelHelpers.classPrivateFieldLooseKey("extractFilterData");var h=babelHelpers.classPrivateFieldLooseKey("requestFilter");class k{constructor(){Object.defineProperty(this,h,{value:y});Object.defineProperty(this,b,{value:C});Object.defineProperty(this,v,{value:m});Object.defineProperty(this,u,{writable:true,value:{}});Object.defineProperty(this,B,{writable:true,value:void 0})}async add(e){const t=e.id;try{await o.Core.getStore().dispatch(`${i.Model.Interface}/addQuickFilterIgnoredBookingId`,t);await o.Core.getStore().dispatch(`${i.Model.Bookings}/add`,e);const s=d(e);const n=await(new r.ApiClient).post("Booking.add",{booking:s});const l=c(n);await o.Core.getStore().dispatch(`${i.Model.Interface}/addQuickFilterIgnoredBookingId`,l.id);void o.Core.getStore().dispatch(`${i.Model.Bookings}/update`,{id:t,booking:l});void a.mainPageService.fetchCounters()}catch(e){void o.Core.getStore().dispatch(`${i.Model.Bookings}/delete`,t);console.error("BookingService: add error",e)}}async addList(e){try{const t=e.map((e=>d(e)));const s=new r.ApiClient;const n=await s.post("Booking.addList",{bookingList:t});const l=n.map((e=>c(e)));await o.Core.getStore().dispatch(`${i.Model.Bookings}/upsertMany`,l);void a.mainPageService.fetchCounters();return l}catch(e){console.error("BookingService: add list error",e);return[]}}async update(e){const t=e.id;const s={...o.Core.getStore().getters[`${i.Model.Bookings}/getById`](t)};try{if(e.clients){var n;(n=e.primaryClient)!=null?n:e.primaryClient=e.clients[0]}await o.Core.getStore().dispatch(`${i.Model.Bookings}/update`,{id:t,booking:e});const s=d(e);const l=await(new r.ApiClient).post("Booking.update",{booking:s});const g=c(l);void o.Core.getStore().dispatch(`${i.Model.Bookings}/update`,{id:t,booking:g});const u=new p([l]).getClients();void o.Core.getStore().dispatch("clients/upsertMany",u);void a.mainPageService.fetchCounters()}catch(e){void o.Core.getStore().dispatch(`${i.Model.Bookings}/update`,{id:t,booking:s});console.error("BookingService: update error",e)}}async delete(e){const t={...o.Core.getStore().getters[`${i.Model.Bookings}/getById`](e)};try{void o.Core.getStore().dispatch(`${i.Model.Bookings}/delete`,e);await(new r.ApiClient).post("Booking.delete",{id:e});await babelHelpers.classPrivateFieldLooseBase(this,v)[v](e)}catch(e){void o.Core.getStore().dispatch(`${i.Model.Bookings}/upsert`,t);console.error("BookingService: delete error",e)}}async deleteList(e){try{void o.Core.getStore().dispatch(`${i.Model.Bookings}/deleteMany`,e);await(new r.ApiClient).post("Booking.deleteList",{ids:e});await Promise.all(e.map((e=>babelHelpers.classPrivateFieldLooseBase(this,v)[v](e))))}catch(e){console.error("BookingService: delete list error",e)}}clearFilterCache(){babelHelpers.classPrivateFieldLooseBase(this,u)[u]={}}async filter(e){try{var t,o;const i=s.bookingFilter.prepareFilter(e);const r=JSON.stringify(i);(o=(t=babelHelpers.classPrivateFieldLooseBase(this,u)[u])[r])!=null?o:t[r]=babelHelpers.classPrivateFieldLooseBase(this,h)[h](i);babelHelpers.classPrivateFieldLooseBase(this,B)[B]=babelHelpers.classPrivateFieldLooseBase(this,u)[u][r];const a=await babelHelpers.classPrivateFieldLooseBase(this,u)[u][r];void babelHelpers.classPrivateFieldLooseBase(this,b)[b]({data:a,key:r})}catch(e){console.error("BookingService: filter error",e)}}async getById(e){try{const t=await babelHelpers.classPrivateFieldLooseBase(this,h)[h]({ID:[e]});const r=new p(t);await Promise.all([o.Core.getStore().dispatch(`${i.Model.Resources}/upsertMany`,r.getResources()),o.Core.getStore().dispatch(`${i.Model.Bookings}/upsertMany`,r.getBookings()),o.Core.getStore().dispatch(`${i.Model.Clients}/upsertMany`,r.getClients())])}catch(e){console.error("BookingService: getById error",e)}}}async function m(e){const t=o.Core.getStore().getters[`${i.Model.Interface}/editingBookingId`];if(e===t){await o.Core.getStore().dispatch(`${i.Model.Interface}/setEditingBookingId`,0);const e=o.Core.getStore().getters[`${i.Model.Interface}/selectedDateTs`];await a.mainPageService.loadData(e/1e3);const t=o.Core.getStore().getters[`${i.Model.Interface}/resourcesIds`];a.mainPageService.clearCache(t)}void o.Core.getStore().dispatch(`${i.Model.Interface}/addDeletingBooking`,e)}async function C({data:e,key:t}){const r=new p(e);await Promise.all([o.Core.getStore().dispatch(`${i.Model.Resources}/insertMany`,r.getResources()),o.Core.getStore().dispatch(`${i.Model.Bookings}/insertMany`,r.getBookings()),o.Core.getStore().dispatch(`${i.Model.Clients}/insertMany`,r.getClients())]);if(babelHelpers.classPrivateFieldLooseBase(this,u)[u][t]!==babelHelpers.classPrivateFieldLooseBase(this,B)[B]){return}void o.Core.getStore().dispatch(`${i.Model.Interface}/setFilteredBookingsIds`,r.getBookingsIds())}async function y(e){return(new r.ApiClient).post("Booking.list",{filter:e,select:["RESOURCES","CLIENTS","EXTERNAL_DATA","NOTE"],withCounters:true,withClientData:true,withExternalData:true})}const S=new k;const P={mapModelToDto:d,mapDtoToModel:c};e.BookingMappers=P;e.bookingService=S})(this.BX.Booking.Provider.Service=this.BX.Booking.Provider.Service||{},BX,BX.Booking,BX.Booking.Const,BX.Booking.Lib,BX.Booking.Lib,BX.Booking.Provider.Service,BX.Booking.Provider.Service,BX.Booking.Provider.Service);
//# sourceMappingURL=booking-service.bundle.map.js