{"version":3,"file":"booking-service.bundle.js","sources":["../src/mappers.js","../src/booking-data-extractor.js","../src/booking-service.js","../src/index.js"],"sourcesContent":["import { Type } from 'main.core';\nimport type { BookingModel } from 'booking.model.bookings';\nimport type { BookingDto } from './types';\n\nexport function mapModelToDto(booking: BookingModel): BookingDto\n{\n\tconst mappings = {\n\t\tid: () => Number(booking.id) || 0,\n\t\tresources: () => booking.resourcesIds.map((id) => ({ id })),\n\t\tprimaryClient: () => booking.clients?.[0],\n\t\tclients: () => booking.clients,\n\t\tname: () => booking.name,\n\t\tdatePeriod: () => ({\n\t\t\tfrom: {\n\t\t\t\ttimestamp: booking.dateFromTs / 1000,\n\t\t\t\ttimezone: booking.timezoneFrom,\n\t\t\t},\n\t\t\tto: {\n\t\t\t\ttimestamp: booking.dateToTs / 1000,\n\t\t\t\ttimezone: booking.timezoneTo,\n\t\t\t},\n\t\t}),\n\t\tisConfirmed: () => booking.isConfirmed,\n\t\trrule: () => booking.rrule,\n\t\tnote: () => booking.note,\n\t\tvisitStatus: () => booking.visitStatus,\n\t\texternalData: () => booking.externalData,\n\t};\n\n\tconst dependentFields = new Map([\n\t\t['resources', ['resourcesIds']],\n\t\t['datePeriod', ['dateFromTs', 'dateToTs']],\n\t]);\n\n\treturn Object.keys(mappings).reduce((result, field) => {\n\t\tconst dependencies = dependentFields.get(field);\n\t\tconst hasDependencies = dependencies ? dependencies.every((dep) => dep in booking) : true;\n\n\t\tif (hasDependencies && (field in booking || dependencies))\n\t\t{\n\t\t\tconst value = mappings[field]();\n\t\t\tif (value !== undefined)\n\t\t\t{\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tresult[field] = value;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}, {});\n}\n\nexport function mapDtoToModel(bookingDto: BookingDto): BookingModel\n{\n\tconst clients = bookingDto.clients.filter((client) => Type.isArrayFilled(Object.values(client.data)));\n\n\treturn {\n\t\tid: bookingDto.id,\n\t\tupdatedAt: bookingDto.updatedAt,\n\t\tresourcesIds: bookingDto.resources.map(({ id }) => id),\n\t\tprimaryClient: clients?.[0],\n\t\tclients,\n\t\tcounter: bookingDto.counter,\n\t\tcounters: bookingDto.counters,\n\t\tname: bookingDto.name,\n\t\tdateFromTs: bookingDto.datePeriod.from.timestamp * 1000,\n\t\ttimezoneFrom: bookingDto.datePeriod.from.timezone,\n\t\tdateToTs: bookingDto.datePeriod.to.timestamp * 1000,\n\t\ttimezoneTo: bookingDto.datePeriod.to.timezone,\n\t\tisConfirmed: bookingDto.isConfirmed,\n\t\trrule: bookingDto.rrule,\n\t\tnote: bookingDto.note,\n\t\tvisitStatus: bookingDto.visitStatus,\n\t\texternalData: bookingDto.externalData,\n\t};\n}\n","import { ClientMappers } from 'booking.provider.service.client-service';\nimport { ResourceMappers } from 'booking.provider.service.resources-service';\nimport type { BookingModel } from 'booking.model.bookings';\nimport type { ClientModel } from 'booking.model.clients';\nimport type { ClientDto } from 'booking.provider.service.client-service';\nimport type { ResourceModel } from 'booking.model.resources';\nimport type { ResourceDto } from 'booking.provider.service.resources-service';\n\nimport { mapDtoToModel } from './mappers';\nimport type { BookingDto } from './types';\n\nexport class BookingDataExtractor\n{\n\t#response: BookingDto[];\n\n\tconstructor(response: BookingDto[])\n\t{\n\t\tthis.#response = response;\n\t}\n\n\tgetBookings(): BookingModel[]\n\t{\n\t\treturn this.#response.map((bookingDto: BookingDto): BookingModel => mapDtoToModel(bookingDto));\n\t}\n\n\tgetBookingsIds(): number[]\n\t{\n\t\treturn this.#response.map(({ id }) => id);\n\t}\n\n\tgetClients(): ClientModel[]\n\t{\n\t\treturn this.#response\n\t\t\t.flatMap(({ clients }) => clients)\n\t\t\t.map((clientDto: ClientDto): ClientModel => {\n\t\t\t\treturn ClientMappers.mapDtoToModel(clientDto);\n\t\t\t})\n\t\t;\n\t}\n\n\tgetResources(): ResourceModel[]\n\t{\n\t\treturn this.#response\n\t\t\t.flatMap(({ resources }) => resources)\n\t\t\t.map((resourceDto: ResourceDto): ResourceModel => {\n\t\t\t\treturn ResourceMappers.mapDtoToModel(resourceDto);\n\t\t\t})\n\t\t;\n\t}\n}\n","import { Core } from 'booking.core';\nimport { Model } from 'booking.const';\nimport { ApiClient } from 'booking.lib.api-client';\nimport { bookingFilter } from 'booking.lib.booking-filter';\nimport { mainPageService } from 'booking.provider.service.main-page-service';\nimport type { BookingModel } from 'booking.model.bookings';\nimport type { BookingUIFilter, BookingListFilter } from 'booking.lib.booking-filter';\n\nimport { BookingDataExtractor } from './booking-data-extractor';\nimport { mapModelToDto, mapDtoToModel } from './mappers';\nimport type { BookingDto } from './types';\n\nclass BookingService\n{\n\t#filterRequests: { [key: string]: Promise } = {};\n\t#lastFilterRequest: Promise;\n\n\tasync add(booking: BookingModel): Promise<void>\n\t{\n\t\tconst id = booking.id;\n\n\t\ttry\n\t\t{\n\t\t\tawait Core.getStore().dispatch(`${Model.Bookings}/add`, booking);\n\n\t\t\tconst bookingDto = mapModelToDto(booking);\n\t\t\tconst data = await (new ApiClient()).post('Booking.add', { booking: bookingDto });\n\t\t\tconst createdBooking = mapDtoToModel(data);\n\n\t\t\tvoid Core.getStore().dispatch(`${Model.Bookings}/update`, {\n\t\t\t\tid,\n\t\t\t\tbooking: createdBooking,\n\t\t\t});\n\n\t\t\tvoid mainPageService.fetchCounters();\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tvoid Core.getStore().dispatch(`${Model.Bookings}/delete`, id);\n\n\t\t\tconsole.error('BookingService: add error', error);\n\t\t}\n\t}\n\n\tasync addList(bookings: BookingModel[]): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst bookingList = bookings.map((booking) => mapModelToDto(booking));\n\n\t\t\tconst api = new ApiClient();\n\t\t\tconst data = await api.post('Booking.addList', { bookingList });\n\t\t\tconst createdBookings = data.map((d) => mapDtoToModel(d));\n\n\t\t\tawait Core.getStore().dispatch(`${Model.Bookings}/upsertMany`, createdBookings);\n\n\t\t\tvoid mainPageService.fetchCounters();\n\n\t\t\treturn createdBookings;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('BookingService: add list error', error);\n\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tasync update(booking: BookingModel): Promise<void>\n\t{\n\t\tconst id = booking.id;\n\t\tconst bookingBeforeUpdate = { ...Core.getStore().getters[`${Model.Bookings}/getById`](id) };\n\n\t\ttry\n\t\t{\n\t\t\tif (booking.clients)\n\t\t\t{\n\t\t\t\tbooking.primaryClient ??= booking.clients[0];\n\t\t\t}\n\n\t\t\tawait Core.getStore().dispatch(`${Model.Bookings}/update`, { id, booking });\n\n\t\t\tconst bookingDto = mapModelToDto(booking);\n\t\t\tconst data = await (new ApiClient()).post('Booking.update', { booking: bookingDto });\n\t\t\tconst updatedBooking = mapDtoToModel(data);\n\n\t\t\tvoid Core.getStore().dispatch(`${Model.Bookings}/update`, {\n\t\t\t\tid,\n\t\t\t\tbooking: updatedBooking,\n\t\t\t});\n\n\t\t\tconst clients = new BookingDataExtractor([data]).getClients();\n\n\t\t\tvoid Core.getStore().dispatch('clients/upsertMany', clients);\n\n\t\t\tvoid mainPageService.fetchCounters();\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tvoid Core.getStore().dispatch(`${Model.Bookings}/update`, {\n\t\t\t\tid,\n\t\t\t\tbooking: bookingBeforeUpdate,\n\t\t\t});\n\n\t\t\tconsole.error('BookingService: update error', error);\n\t\t}\n\t}\n\n\tasync delete(id: number): Promise<void>\n\t{\n\t\tconst bookingBeforeDelete = { ...Core.getStore().getters[`${Model.Bookings}/getById`](id) };\n\n\t\ttry\n\t\t{\n\t\t\tvoid Core.getStore().dispatch(`${Model.Bookings}/delete`, id);\n\n\t\t\tawait (new ApiClient()).post('Booking.delete', { id });\n\n\t\t\tawait this.#onAfterDelete(id);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tvoid Core.getStore().dispatch(`${Model.Bookings}/upsert`, bookingBeforeDelete);\n\n\t\t\tconsole.error('BookingService: delete error', error);\n\t\t}\n\t}\n\n\tasync deleteList(ids: number[]): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tvoid Core.getStore().dispatch(`${Model.Bookings}/deleteMany`, ids);\n\n\t\t\tawait (new ApiClient()).post('Booking.deleteList', { ids });\n\n\t\t\tawait Promise.all(ids.map((id: number) => this.#onAfterDelete(id)));\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('BookingService: delete list error', error);\n\t\t}\n\t}\n\n\tasync #onAfterDelete(id: number): Promise<void>\n\t{\n\t\tconst editingBookingId = Core.getStore().getters[`${Model.Interface}/editingBookingId`];\n\t\tif (id === editingBookingId)\n\t\t{\n\t\t\tawait Core.getStore().dispatch(`${Model.Interface}/setEditingBookingId`, 0);\n\n\t\t\tconst selectedDateTs = Core.getStore().getters[`${Model.Interface}/selectedDateTs`];\n\n\t\t\tawait mainPageService.loadData(selectedDateTs / 1000);\n\n\t\t\tconst resourcesIds = Core.getStore().getters[`${Model.Interface}/resourcesIds`];\n\n\t\t\tmainPageService.clearCache(resourcesIds);\n\t\t}\n\n\t\tvoid Core.getStore().dispatch(`${Model.Interface}/addDeletingBooking`, id);\n\t}\n\n\tclearFilterCache(): void\n\t{\n\t\tthis.#filterRequests = {};\n\t}\n\n\tasync filter(fields: BookingUIFilter): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst filter = bookingFilter.prepareFilter(fields);\n\n\t\t\tconst key = JSON.stringify(filter);\n\t\t\tthis.#filterRequests[key] ??= this.#requestFilter(filter);\n\t\t\tthis.#lastFilterRequest = this.#filterRequests[key];\n\n\t\t\tconst data: BookingDto[] = await this.#filterRequests[key];\n\n\t\t\tvoid this.#extractFilterData({ data, key });\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('BookingService: filter error', error);\n\t\t}\n\t}\n\n\tasync getById(id: number): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst data: BookingDto[] = await this.#requestFilter({ ID: [id] });\n\t\t\tconst extractor = new BookingDataExtractor(data);\n\t\t\tawait Promise.all([\n\t\t\t\tCore.getStore().dispatch(`${Model.Resources}/upsertMany`, extractor.getResources()),\n\t\t\t\tCore.getStore().dispatch(`${Model.Bookings}/upsertMany`, extractor.getBookings()),\n\t\t\t\tCore.getStore().dispatch(`${Model.Clients}/upsertMany`, extractor.getClients()),\n\t\t\t]);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('BookingService: getById error', error);\n\t\t}\n\t}\n\n\tasync #extractFilterData({ data, key }: {data: BookingDto[], key: string, date: Date}): Promise<void>\n\t{\n\t\tconst extractor = new BookingDataExtractor(data);\n\n\t\tawait Promise.all([\n\t\t\tCore.getStore().dispatch(`${Model.Resources}/insertMany`, extractor.getResources()),\n\t\t\tCore.getStore().dispatch(`${Model.Bookings}/insertMany`, extractor.getBookings()),\n\t\t\tCore.getStore().dispatch(`${Model.Clients}/insertMany`, extractor.getClients()),\n\t\t]);\n\n\t\tif (this.#filterRequests[key] !== this.#lastFilterRequest)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tvoid Core.getStore().dispatch(`${Model.Interface}/setFilteredBookingsIds`, extractor.getBookingsIds());\n\t}\n\n\tasync #requestFilter(filter: BookingListFilter): Promise<BookingDto[]>\n\t{\n\t\treturn new ApiClient().post('Booking.list', {\n\t\t\tfilter,\n\t\t\tselect: [\n\t\t\t\t'RESOURCES',\n\t\t\t\t'CLIENTS',\n\t\t\t\t'EXTERNAL_DATA',\n\t\t\t\t'NOTE',\n\t\t\t],\n\t\t\twithCounters: true,\n\t\t\twithClientData: true,\n\t\t\twithExternalData: true,\n\t\t});\n\t}\n}\n\nexport const bookingService = new BookingService();\n","import { mapModelToDto, mapDtoToModel } from './mappers';\n\nexport { bookingService } from './booking-service';\nexport const BookingMappers = { mapModelToDto, mapDtoToModel };\nexport type { BookingDto } from './types';\n"],"names":["mapModelToDto","booking","mappings","id","Number","resources","resourcesIds","map","primaryClient","clients","name","datePeriod","from","timestamp","dateFromTs","timezone","timezoneFrom","to","dateToTs","timezoneTo","isConfirmed","rrule","note","visitStatus","externalData","dependentFields","Map","Object","keys","reduce","result","field","dependencies","get","hasDependencies","every","dep","value","undefined","mapDtoToModel","bookingDto","filter","client","Type","isArrayFilled","values","data","updatedAt","counter","counters","BookingDataExtractor","constructor","response","getBookings","getBookingsIds","getClients","flatMap","clientDto","ClientMappers","getResources","resourceDto","ResourceMappers","BookingService","add","Core","getStore","dispatch","Model","Bookings","ApiClient","post","createdBooking","mainPageService","fetchCounters","error","console","addList","bookings","bookingList","api","createdBookings","d","update","bookingBeforeUpdate","getters","updatedBooking","delete","bookingBeforeDelete","deleteList","ids","Promise","all","clearFilterCache","fields","bookingFilter","prepareFilter","key","JSON","stringify","getById","ID","extractor","Resources","Clients","editingBookingId","Interface","selectedDateTs","loadData","clearCache","select","withCounters","withClientData","withExternalData","bookingService","BookingMappers"],"mappings":"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"}