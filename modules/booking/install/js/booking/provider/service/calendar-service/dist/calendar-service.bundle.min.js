this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};this.BX.Booking.Provider=this.BX.Booking.Provider||{};(function(e,s,t,a,r,o){"use strict";var i=babelHelpers.classPrivateFieldLooseKey("filterMarksRequests");var l=babelHelpers.classPrivateFieldLooseKey("lastFilterMarksRequest");var n=babelHelpers.classPrivateFieldLooseKey("freeMarksRequests");var c=babelHelpers.classPrivateFieldLooseKey("lastFreeMarksRequest");var d=babelHelpers.classPrivateFieldLooseKey("counterMarksRequests");var b=babelHelpers.classPrivateFieldLooseKey("requestLoadMarks");var v=babelHelpers.classPrivateFieldLooseKey("requestFilterMarks");var h=babelHelpers.classPrivateFieldLooseKey("requestCounterMarks");var p=babelHelpers.classPrivateFieldLooseKey("offset");var u=babelHelpers.classPrivateFieldLooseKey("timezone");class B{constructor(){Object.defineProperty(this,u,{get:L,set:void 0});Object.defineProperty(this,p,{get:H,set:void 0});Object.defineProperty(this,h,{value:f});Object.defineProperty(this,v,{value:P});Object.defineProperty(this,b,{value:F});Object.defineProperty(this,i,{writable:true,value:{}});Object.defineProperty(this,l,{writable:true,value:void 0});Object.defineProperty(this,n,{writable:true,value:{}});Object.defineProperty(this,c,{writable:true,value:void 0});Object.defineProperty(this,d,{writable:true,value:{}})}clearCache(e,s){Object.keys(babelHelpers.classPrivateFieldLooseBase(this,i)[i]).forEach((t=>{const{dateTs:a,sortedResources:r}=JSON.parse(t);if(e===a){delete babelHelpers.classPrivateFieldLooseBase(this,i)[i][t]}for(const e of r){if(e.includes(s)){delete babelHelpers.classPrivateFieldLooseBase(this,i)[i][t];break}}}))}clearFilterCache(){babelHelpers.classPrivateFieldLooseBase(this,i)[i]={}}async loadMarks(e,r){try{var o,i;if(!s.Type.isArrayFilled(r)){return}const l=r.map((e=>e.sort(((e,s)=>e-s)))).sort(((e,s)=>e[0]-s[0]));const d=JSON.stringify({dateTs:e,sortedResources:l});(i=(o=babelHelpers.classPrivateFieldLooseBase(this,n)[n])[d])!=null?i:o[d]=babelHelpers.classPrivateFieldLooseBase(this,b)[b](e,r);babelHelpers.classPrivateFieldLooseBase(this,c)[c]=babelHelpers.classPrivateFieldLooseBase(this,n)[n][d];const v=await babelHelpers.classPrivateFieldLooseBase(this,n)[n][d];if(babelHelpers.classPrivateFieldLooseBase(this,n)[n][d]!==babelHelpers.classPrivateFieldLooseBase(this,c)[c]){return}await t.Core.getStore().dispatch(`${a.Model.Interface}/setFreeMarks`,v)}catch(e){console.error("BookingService: loadMarks error",e)}}async loadFilterMarks(e){try{var s,r;const n=o.bookingFilter.prepareFilter(e,true);const c=JSON.stringify(n);(r=(s=babelHelpers.classPrivateFieldLooseBase(this,i)[i])[c])!=null?r:s[c]=babelHelpers.classPrivateFieldLooseBase(this,v)[v](n);babelHelpers.classPrivateFieldLooseBase(this,l)[l]=babelHelpers.classPrivateFieldLooseBase(this,i)[i][c];const{foundDates:d,foundDatesWithCounters:b}=await babelHelpers.classPrivateFieldLooseBase(this,i)[i][c];if(babelHelpers.classPrivateFieldLooseBase(this,i)[i][c]!==babelHelpers.classPrivateFieldLooseBase(this,l)[l]){return}await Promise.all([t.Core.getStore().dispatch(`${a.Model.Interface}/setFilteredMarks`,d),t.Core.getStore().dispatch(`${a.Model.Interface}/setCounterMarks`,b)])}catch(e){console.error("BookingService: loadFilterMarks error",e)}}async loadCounterMarks(e,s=false){try{const i=e.toString();if(s){babelHelpers.classPrivateFieldLooseBase(this,d)[d][i]=babelHelpers.classPrivateFieldLooseBase(this,h)[h](e)}else{var r,o;(o=(r=babelHelpers.classPrivateFieldLooseBase(this,d)[d])[i])!=null?o:r[i]=babelHelpers.classPrivateFieldLooseBase(this,h)[h](e)}const l=await babelHelpers.classPrivateFieldLooseBase(this,d)[d][i];await t.Core.getStore().dispatch(`${a.Model.Interface}/setCounterMarks`,l)}catch(e){console.error("CalendarService: loadCounterMarks error",e)}}}async function F(e,s){const t=new Date;const a=new Date(t.getFullYear(),t.getMonth(),t.getDate());const o=a.getTime()+babelHelpers.classPrivateFieldLooseBase(this,p)[p];const i=Math.max(o,e)/1e3;const l=new Date(e).setMonth(new Date(e).getMonth()+1)/1e3;if(l<o/1e3){return[]}const{freeDates:n}=await(new r.ApiClient).post("Calendar.getResourceOccupation",{timezone:babelHelpers.classPrivateFieldLooseBase(this,u)[u],dateFromTs:i,dateToTs:l,resources:s});return n}function P(e){return(new r.ApiClient).post("Calendar.getBookingsDates",{timezone:babelHelpers.classPrivateFieldLooseBase(this,u)[u],dateFromTs:e.WITHIN.DATE_FROM,dateToTs:e.WITHIN.DATE_TO,filter:e})}async function f(e){const s=e/1e3;const t=new Date(e).setMonth(new Date(e).getMonth()+1)/1e3;const{foundDatesWithCounters:a}=await(new r.ApiClient).post("Calendar.getBookingsDates",{timezone:babelHelpers.classPrivateFieldLooseBase(this,u)[u],dateFromTs:s,dateToTs:t,filter:{HAS_COUNTERS_USER_ID:1}});return a}function H(){return t.Core.getStore().getters[`${a.Model.Interface}/offset`]}function L(){return t.Core.getStore().getters[`${a.Model.Interface}/timezone`]}const g=new B;e.calendarService=g})(this.BX.Booking.Provider.Service=this.BX.Booking.Provider.Service||{},BX,BX.Booking,BX.Booking.Const,BX.Booking.Lib,BX.Booking.Lib);
//# sourceMappingURL=calendar-service.bundle.map.js