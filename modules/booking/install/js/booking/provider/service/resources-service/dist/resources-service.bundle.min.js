this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};this.BX.Booking.Provider=this.BX.Booking.Provider||{};(function(e,t,o,i){"use strict";function r(e){return{id:e.id,typeId:e.type.id,name:e.name,description:e.description,slotRanges:e.slotRanges.map((e=>({...e,weekDays:Object.values(e.weekDays)}))),counter:e.counter,isMain:e.isMain,isConfirmationNotificationOn:e.isConfirmationNotificationOn,isFeedbackNotificationOn:e.isFeedbackNotificationOn,isInfoNotificationOn:e.isInfoNotificationOn,isDelayedNotificationOn:e.isDelayedNotificationOn,isReminderNotificationOn:e.isReminderNotificationOn,templateTypeConfirmation:e.templateTypeConfirmation,templateTypeFeedback:e.templateTypeFeedback,templateTypeInfo:e.templateTypeInfo,templateTypeDelayed:e.templateTypeDelayed,templateTypeReminder:e.templateTypeReminder,createdBy:e.createdBy,createdAt:e.createdAt,updatedAt:e.updatedAt}}function a(e){return{id:e.id,type:{id:e.typeId},name:e.name,description:e.description,slotRanges:e.slotRanges,counter:null,isMain:e.isMain,isConfirmationNotificationOn:e.isConfirmationNotificationOn,isFeedbackNotificationOn:e.isFeedbackNotificationOn,isInfoNotificationOn:e.isInfoNotificationOn,isDelayedNotificationOn:e.isDelayedNotificationOn,isReminderNotificationOn:e.isReminderNotificationOn,templateTypeConfirmation:e.templateTypeConfirmation,templateTypeFeedback:e.templateTypeFeedback,templateTypeInfo:e.templateTypeInfo,templateTypeDelayed:e.templateTypeDelayed,templateTypeReminder:e.templateTypeReminder,createdBy:null,createdAt:null,updatedAt:null}}var n=babelHelpers.classPrivateFieldLooseKey("updateResourcesFromFavorites");var s=babelHelpers.classPrivateFieldLooseKey("turnOnTrial");class c{constructor(){Object.defineProperty(this,s,{value:l});Object.defineProperty(this,n,{value:d})}async add(e){try{const c=a(e);const d=await(new o.ApiClient).post("Resource.add",{resource:c});const l=r(d);t.Core.getStore().commit("resources/upsert",l);if(l.isMain){await t.Core.getStore().dispatch(`${i.Model.Favorites}/add`,l.id)}if(t.Core.getStore().getters[`${i.Model.Interface}/canTurnOnTrial`]){void babelHelpers.classPrivateFieldLooseBase(this,s)[s]()}babelHelpers.classPrivateFieldLooseBase(this,n)[n]();return d}catch(e){console.error("ResourceService: add error",e);return e}}async update(e){const s=e.id;const c={...t.Core.getStore().getters["resources/getById"](s)};try{const d=a(e);const l=await(new o.ApiClient).post("Resource.update",{resource:d});const p=r(l);t.Core.getStore().commit("resources/upsert",p);if(c.isMain&&!p.isMain){await t.Core.getStore().dispatch(`${i.Model.Favorites}/delete`,s)}babelHelpers.classPrivateFieldLooseBase(this,n)[n]();return l}catch(e){console.error("ResourceService: update error",e);return e}}async delete(e){try{await(new o.ApiClient).post("Resource.delete",{id:e});await Promise.all([t.Core.getStore().dispatch(`${i.Model.Resources}/delete`,e),t.Core.getStore().dispatch(`${i.Model.Favorites}/delete`,e),t.Core.getStore().dispatch(`${i.Model.Interface}/deleteResourceId`,e)])}catch(e){console.error("ResourceService: delete error",e)}}async hasBookings(e){try{return(new o.ApiClient).post("Resource.hasBookings",{resourceId:e})}catch(e){console.error("ResourceService: hasBookings error",e)}return Promise.resolve()}}function d(){const e=t.Core.getStore().getters[`${i.Model.Interface}/isFilterMode`];if(e){return}const o=t.Core.getStore().getters[`${i.Model.Favorites}/get`];void t.Core.getStore().dispatch(`${i.Model.Interface}/setResourcesIds`,o)}async function l(){await Promise.all([t.Core.getStore().dispatch(`${i.Model.Interface}/setCanTurnOnTrial`,false),t.Core.getStore().dispatch(`${i.Model.Interface}/setIsFeatureEnabled`,true)]);await new Promise((e=>setTimeout(e,2e3)));await t.Core.getStore().dispatch(`${i.Model.Interface}/setIsShownTrialPopup`,true)}const p=new c;const u={mapModelToDto:a,mapDtoToModel:r};e.ResourceMappers=u;e.resourceService=p})(this.BX.Booking.Provider.Service=this.BX.Booking.Provider.Service||{},BX.Booking,BX.Booking.Lib,BX.Booking.Const);
//# sourceMappingURL=resources-service.bundle.map.js