{"version":3,"file":"client-service.bundle.js","sources":["../src/mappers.js","../src/client-service.js","../src/index.js"],"sourcesContent":["import { Type } from 'main.core';\nimport type { ClientModel } from 'booking.model.clients';\nimport type { ClientDto } from './types';\n\nexport function mapDtoToModel(clientDto: ClientDto): ClientModel | null\n{\n\tif (!Type.isArrayFilled(Object.values(clientDto.data)))\n\t{\n\t\treturn null;\n\t}\n\n\treturn {\n\t\tid: clientDto.id,\n\t\tname: clientDto.data.name,\n\t\timage: clientDto.data.image,\n\t\ttype: clientDto.type,\n\t\tphones: clientDto.data.phones,\n\t\temails: clientDto.data.emails,\n\t\tisReturning: clientDto.isReturning,\n\t};\n}\n","import { Tag, Type } from 'main.core';\nimport { CrmEntity, Module } from 'booking.const';\nimport { Core } from 'booking.core';\nimport type { ClientData, ClientModel } from 'booking.model.clients';\n\ntype RestMethods = {\n\t[methodName: string]: { method: string, params: any } | [string, any],\n};\n\nconst VALUE_TYPE = 'WORK';\n\nconst MethodName = Object.freeze({\n\tAddFormattedName: 'crm.controller.integration.booking.contact.addFormattedName',\n\tParseFormattedName: 'crm.controller.integration.booking.contact.parseFormattedName',\n\tCompanyAdd: 'crm.company.add',\n\tContactAdd: 'crm.contact.add',\n\tCompanyGet: 'crm.company.get',\n\tContactGet: 'crm.contact.get',\n\tGetCompanyContacts: 'crm.company.contact.items.get',\n\tCompanyUpdate: 'crm.company.update',\n\tContactUpdate: 'crm.contact.update',\n});\n\nconst RequestKey = Object.freeze({\n\tAddFormattedName: 'add_formatted_name',\n\tParseName: 'parse_name_#id#',\n\tCompanyAdd: 'company_add_#id#',\n\tContactAdd: 'contact_add_#id#',\n\tCompanyGet: 'company_get_#id#',\n\tContactGet: 'contact_get_#id#',\n\tGetCompanyContacts: 'get_company_contacts',\n\tCompanyUpdate: 'company_update_#id#',\n\tContactUpdate: 'contact_update_#id#',\n});\n\nclass ClientService\n{\n\tasync saveMany(clients: ClientModel[]): Promise<{clients: ClientData[], error: Error}>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst data = await this.#requestSaveMany(clients);\n\n\t\t\tawait Core.getStore().dispatch('clients/upsertMany', data);\n\n\t\t\treturn {\n\t\t\t\tclients: data.map(({ id, type }: ClientModel): ClientData => ({ id, type })),\n\t\t\t};\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('ClientService: saveMany error', error);\n\n\t\t\treturn { error };\n\t\t}\n\t}\n\n\tasync getLinkedContactByCompany(companyData: ClientData): Promise<ClientModel | undefined>\n\t{\n\t\tconst company = Core.getStore().getters['clients/getByClientData'](companyData);\n\n\t\tcompany.contactId ??= await this.#requestLinkedContactId(companyData);\n\n\t\tawait Core.getStore().dispatch('clients/update', { id: company.id, client: company });\n\n\t\treturn Core.getStore().getters['clients/getByClientData']({\n\t\t\tid: company.contactId,\n\t\t\ttype: {\n\t\t\t\tmodule: Module.Crm,\n\t\t\t\tcode: CrmEntity.Contact,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync #requestSaveMany(clients: ClientModel[]): Promise<ClientModel[]>\n\t{\n\t\tconst companies = clients.filter((client) => client.type.code === CrmEntity.Company);\n\t\tconst contacts = clients.filter((client) => client.type.code === CrmEntity.Contact);\n\t\tconst companiesToAdd = companies.filter((client) => !client.id);\n\t\tconst companiesToUpdate = companies.filter((client) => this.#isClientToUpdate(client));\n\t\tconst contactsToAdd = contacts.filter((client) => !client.id);\n\t\tconst contactsToUpdate = contacts.filter((client) => this.#isClientToUpdate(client));\n\t\tconst clientsToRequest = [...companiesToAdd, ...companiesToUpdate, ...contactsToAdd, ...contactsToUpdate];\n\n\t\tclientsToRequest.forEach((client, index) => {\n\t\t\tclient.index = index;\n\t\t});\n\n\t\tconst restMethods = {\n\t\t\t...this.#getParseNameMethods([...contactsToAdd, ...contactsToUpdate]),\n\t\t\t...this.#getCompanyAddMethods(companiesToAdd),\n\t\t\t...this.#getContactAddMethods(contactsToAdd, companies),\n\t\t\t...this.#getCompanyGetMethods(companiesToUpdate),\n\t\t\t...this.#getCompanyUpdateMethods(companiesToUpdate),\n\t\t\t...this.#getContactGetMethods(contactsToUpdate),\n\t\t\t...this.#getContactUpdateMethods(contactsToUpdate),\n\t\t};\n\n\t\tconst result = await new Promise((resolve) => {\n\t\t\tif (Object.keys(restMethods).length === 0)\n\t\t\t{\n\t\t\t\tresolve([]);\n\t\t\t}\n\n\t\t\tBX.rest.callBatch(restMethods, (batchResult) => resolve(batchResult));\n\t\t});\n\n\t\tconst errors = Object.values(result)\n\t\t\t.map((ajaxResult) => ajaxResult.answer.error?.error_description)\n\t\t\t.filter((error) => error)\n\t\t;\n\n\t\tif (Type.isArrayFilled(errors))\n\t\t{\n\t\t\tthrow new Error(Tag.render`<span>${errors[0]}</span>`.textContent);\n\t\t}\n\n\t\tcompaniesToAdd.forEach((client) => {\n\t\t\tclient.id = result[this.#getRequestKey(RequestKey.CompanyAdd, client.index)].data();\n\t\t});\n\n\t\tcontactsToAdd.forEach((client) => {\n\t\t\tclient.id = result[this.#getRequestKey(RequestKey.ContactAdd, client.index)].data();\n\t\t});\n\n\t\treturn clients;\n\t}\n\n\t#isClientToUpdate(client: ClientModel): boolean\n\t{\n\t\tif (!client.id)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tconst currentClient = Core.getStore().getters['clients/getByClientData'](client);\n\n\t\treturn client.name !== currentClient.name\n\t\t\t|| client.phones[0] !== currentClient.phones[0]\n\t\t\t|| client.emails[0] !== currentClient.emails[0]\n\t\t;\n\t}\n\n\t#getParseNameMethods(contacts: ClientModel[]): RestMethods\n\t{\n\t\treturn contacts.reduce((methods, client) => ({\n\t\t\t...methods,\n\t\t\t[this.#getRequestKey(RequestKey.ParseName, client.index)]: {\n\t\t\t\tmethod: MethodName.ParseFormattedName,\n\t\t\t\tparams: {\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tFORMATTED_NAME: client.name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}), {});\n\t}\n\n\t#getCompanyAddMethods(companiesToAdd: ClientModel[]): RestMethods\n\t{\n\t\treturn companiesToAdd.reduce((methods, client) => ({\n\t\t\t...methods,\n\t\t\t[this.#getRequestKey(RequestKey.CompanyAdd, client.index)]: {\n\t\t\t\tmethod: MethodName.CompanyAdd,\n\t\t\t\tparams: {\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tTITLE: client.name,\n\t\t\t\t\t\tPHONE: client.phones.map((VALUE) => ({ VALUE, VALUE_TYPE })),\n\t\t\t\t\t\tEMAIL: client.emails.map((VALUE) => ({ VALUE, VALUE_TYPE })),\n\t\t\t\t\t},\n\t\t\t\t\tparams: { REGISTER_SONET_EVENT: 'Y' },\n\t\t\t\t},\n\t\t\t},\n\t\t}), {});\n\t}\n\n\t#getContactAddMethods(contactsToAdd: ClientModel[], companies: ClientModel[]): RestMethods\n\t{\n\t\treturn contactsToAdd.reduce((methods, client) => {\n\t\t\tconst COMPANY_ID = companies[0]?.id ?? `$result[${this.#getRequestKey(RequestKey.CompanyAdd)}]`;\n\n\t\t\treturn {\n\t\t\t\t...methods,\n\t\t\t\t[this.#getRequestKey(RequestKey.ContactAdd, client.index)]: {\n\t\t\t\t\tmethod: MethodName.ContactAdd,\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tCOMPANY_ID: companies.length > 0 ? COMPANY_ID : undefined,\n\t\t\t\t\t\t\t...this.#prepareContactNameFields(client.index),\n\t\t\t\t\t\t\tPHONE: client.phones.map((VALUE) => ({ VALUE, VALUE_TYPE })),\n\t\t\t\t\t\t\tEMAIL: client.emails.map((VALUE) => ({ VALUE, VALUE_TYPE })),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparams: { REGISTER_SONET_EVENT: 'Y' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t}, {});\n\t}\n\n\t#getCompanyGetMethods(companies: ClientModel[]): RestMethods\n\t{\n\t\treturn companies.reduce((methods, { id }) => ({\n\t\t\t...methods,\n\t\t\t[this.#getRequestKey(RequestKey.CompanyGet, id)]: [MethodName.CompanyGet, { id }],\n\t\t}), {});\n\t}\n\n\t#getContactGetMethods(contacts: ClientModel[]): RestMethods\n\t{\n\t\treturn contacts.reduce((methods, { id }) => ({\n\t\t\t...methods,\n\t\t\t[this.#getRequestKey(RequestKey.ContactGet, id)]: [MethodName.ContactGet, { id }],\n\t\t}), {});\n\t}\n\n\t#getCompanyUpdateMethods(companiesToUpdate: ClientModel[]): RestMethods\n\t{\n\t\treturn companiesToUpdate.reduce((methods, client) => ({\n\t\t\t...methods,\n\t\t\t[this.#getRequestKey(RequestKey.CompanyUpdate, client.id)]: {\n\t\t\t\tmethod: MethodName.CompanyUpdate,\n\t\t\t\tparams: {\n\t\t\t\t\tid: client.id,\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tTITLE: client.name,\n\t\t\t\t\t\t...this.#prepareCommunicationsForUpdate(client),\n\t\t\t\t\t},\n\t\t\t\t\tparams: { REGISTER_SONET_EVENT: 'Y' },\n\t\t\t\t},\n\t\t\t},\n\t\t}), {});\n\t}\n\n\t#getContactUpdateMethods(contactsToUpdate: ClientModel[]): RestMethods\n\t{\n\t\treturn contactsToUpdate.reduce((methods, client) => ({\n\t\t\t...methods,\n\t\t\t[this.#getRequestKey(RequestKey.ContactUpdate, client.id)]: {\n\t\t\t\tmethod: MethodName.ContactUpdate,\n\t\t\t\tparams: {\n\t\t\t\t\tid: client.id,\n\t\t\t\t\tfields: {\n\t\t\t\t\t\t...this.#prepareContactNameFields(client.index),\n\t\t\t\t\t\t...this.#prepareCommunicationsForUpdate(client),\n\t\t\t\t\t},\n\t\t\t\t\tparams: { REGISTER_SONET_EVENT: 'Y' },\n\t\t\t\t},\n\t\t\t},\n\t\t}), {});\n\t}\n\n\t#prepareContactNameFields(index: number): Object\n\t{\n\t\treturn {\n\t\t\tNAME: `$result[${this.#getRequestKey(RequestKey.ParseName, index)}][NAME]`,\n\t\t\tSECOND_NAME: `$result[${this.#getRequestKey(RequestKey.ParseName, index)}][SECOND_NAME]`,\n\t\t\tLAST_NAME: `$result[${this.#getRequestKey(RequestKey.ParseName, index)}][LAST_NAME]`,\n\t\t};\n\t}\n\n\t#prepareCommunicationsForUpdate(client: ClientModel): Object\n\t{\n\t\tconst currentClient = Core.getStore().getters['clients/getByClientData'](client);\n\t\tconst requestKey = client.type.code === CrmEntity.Company\n\t\t\t? this.#getRequestKey(RequestKey.CompanyGet, client.id)\n\t\t\t: this.#getRequestKey(RequestKey.ContactGet, client.id)\n\t\t;\n\n\t\tconst PHONE = [{\n\t\t\tID: currentClient.phones[0] ? `$result[${requestKey}][PHONE][0][ID]` : undefined,\n\t\t\tVALUE: client.phones[0],\n\t\t\tVALUE_TYPE,\n\t\t}];\n\n\t\tconst EMAIL = [{\n\t\t\tID: currentClient.emails[0] ? `$result[${requestKey}][EMAIL][0][ID]` : undefined,\n\t\t\tVALUE: client.emails[0],\n\t\t\tVALUE_TYPE,\n\t\t}];\n\n\t\treturn {\n\t\t\tPHONE: client.phones.length > 0 ? PHONE : undefined,\n\t\t\tEMAIL: client.emails.length > 0 ? EMAIL : undefined,\n\t\t};\n\t}\n\n\tasync #requestLinkedContactId(company: ClientData): Promise<number>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst id = company.id;\n\t\t\tconst client = await new Promise((resolve) => {\n\t\t\t\tBX.rest.callBatch({\n\t\t\t\t\t[this.#getRequestKey(RequestKey.GetCompanyContacts)]: [MethodName.GetCompanyContacts, { id }],\n\t\t\t\t\t[this.#getRequestKey(RequestKey.ContactGet)]: {\n\t\t\t\t\t\tmethod: MethodName.ContactGet,\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tid: `$result[${this.#getRequestKey(RequestKey.GetCompanyContacts)}][0][CONTACT_ID]`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t[this.#getRequestKey(RequestKey.AddFormattedName)]: {\n\t\t\t\t\t\tmethod: MethodName.AddFormattedName,\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tfields: `$result[${this.#getRequestKey(RequestKey.ContactGet)}]`,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}, (result) => {\n\t\t\t\t\tconst data = result[this.#getRequestKey(RequestKey.AddFormattedName)].data();\n\t\t\t\t\tif (!data?.ID)\n\t\t\t\t\t{\n\t\t\t\t\t\tresolve(null);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tid: Number(data.ID),\n\t\t\t\t\t\tname: data.FORMATTED_NAME,\n\t\t\t\t\t\timage: data.PHOTO?.showUrl,\n\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\tmodule: Module.Crm,\n\t\t\t\t\t\t\tcode: CrmEntity.Contact,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tphones: data.PHONE?.map(({ VALUE }) => VALUE) ?? [],\n\t\t\t\t\t\temails: data.EMAIL?.map(({ VALUE }) => VALUE) ?? [],\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (client === null)\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tawait Core.getStore().dispatch('clients/upsert', client);\n\n\t\t\treturn client.id;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('ClientService: loadLinkedContactByCompany error', error);\n\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t#getRequestKey(template: string, id: number = 0): string\n\t{\n\t\treturn template.replace('#id#', id);\n\t}\n}\n\nexport const clientService = new ClientService();\n","import { mapDtoToModel } from './mappers';\n\nexport { clientService } from './client-service';\nexport const ClientMappers = { mapDtoToModel };\nexport type { ClientDto } from './types';\n"],"names":["mapDtoToModel","clientDto","Type","isArrayFilled","Object","values","data","id","name","image","type","phones","emails","isReturning","VALUE_TYPE","MethodName","freeze","AddFormattedName","ParseFormattedName","CompanyAdd","ContactAdd","CompanyGet","ContactGet","GetCompanyContacts","CompanyUpdate","ContactUpdate","RequestKey","ParseName","ClientService","saveMany","clients","Core","getStore","dispatch","map","error","console","getLinkedContactByCompany","companyData","company","getters","contactId","client","module","Module","Crm","code","CrmEntity","Contact","companies","filter","Company","contacts","companiesToAdd","companiesToUpdate","contactsToAdd","contactsToUpdate","clientsToRequest","forEach","index","restMethods","result","Promise","resolve","keys","length","BX","rest","callBatch","batchResult","errors","ajaxResult","answer","error_description","Error","Tag","render","textContent","currentClient","reduce","methods","method","params","fields","FORMATTED_NAME","TITLE","PHONE","VALUE","EMAIL","REGISTER_SONET_EVENT","COMPANY_ID","undefined","NAME","SECOND_NAME","LAST_NAME","requestKey","ID","Number","PHOTO","showUrl","template","replace","clientService","ClientMappers"],"mappings":"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"}