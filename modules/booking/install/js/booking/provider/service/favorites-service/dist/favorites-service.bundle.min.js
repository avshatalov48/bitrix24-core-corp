this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};this.BX.Booking.Provider=this.BX.Booking.Provider||{};(function(e,i,r,o,t){"use strict";class s{async set(e){const t=o.Core.getStore().getters["favorites/get"];const s=e.filter((e=>!t.includes(e)));const n=t.filter((i=>!e.includes(i)));void o.Core.getStore().dispatch(`${i.Model.Favorites}/set`,e);if(r.Type.isArrayFilled(s)){await a.add(s)}if(r.Type.isArrayFilled(n)){await a.delete(n)}}async add(e){if(!r.Type.isArrayFilled(e)){return}try{await(new t.ApiClient).post("Favorites.add",{resourcesIds:e})}catch(e){console.error("FavoritesService: add error",e)}}async delete(e){if(!r.Type.isArrayFilled(e)){return}try{await(new t.ApiClient).post("Favorites.delete",{resourcesIds:e})}catch(e){console.error("FavoritesService: delete error",e)}}}const a=new s;e.favoritesService=a})(this.BX.Booking.Provider.Service=this.BX.Booking.Provider.Service||{},BX.Booking.Const,BX,BX.Booking,BX.Booking.Lib);
//# sourceMappingURL=favorites-service.bundle.map.js