this.BX=this.BX||{};this.BX.Booking=this.BX.Booking||{};(function(e,t,o){"use strict";function n(e){const t=e;const o=new Date(e).setDate(new Date(e).getDate()+1);return[t,o]}class i extends t.BuilderModel{getName(){return o.Model.Bookings}getState(){return{collection:{}}}getElementState(){return{id:0,resourcesIds:[],clientId:0,counter:0,name:"",dateFromTs:0,dateToTs:0,timezoneFrom:Intl.DateTimeFormat().resolvedOptions().timeZone,timezoneTo:Intl.DateTimeFormat().resolvedOptions().timeZone,rrule:"",isConfirmed:false,visitStatus:"unknown"}}getGetters(){return{get:(e,t,n,i)=>{const l=i[`${o.Model.Interface}/deletingBookings`];return Object.values(e.collection).filter((({id:e})=>!l[e]))},getById:e=>t=>e.collection[t],getByIds:(e,t)=>e=>t.get.filter((t=>e.includes(t.id))),getByDateAndResources:(e,t)=>(e,o)=>t.getByDate(e).filter((e=>o.some((t=>e.resourcesIds.includes(t))))),getByDateAndIds:(e,t)=>(e,o)=>t.getByDate(e).filter((e=>o.includes(e.id))),getByDate:(e,t)=>e=>{const[o,i]=n(e);return t.get.filter((({dateToTs:e,dateFromTs:t})=>e>o&&i>t))}}}getActions(){return{add:(e,t)=>{e.commit("add",t)},insertMany:(e,t)=>{t.forEach((t=>e.commit("insert",t)))},upsert:(e,t)=>{e.commit("upsert",t)},upsertMany:(e,t)=>{t.forEach((t=>e.commit("upsert",t)))},update:(e,t)=>{e.commit("update",t)},delete:(e,t)=>{e.commit("delete",t)},deleteMany:(e,t)=>{e.commit("deleteMany",t)}}}getMutations(){return{add:(e,t)=>{e.collection[t.id]=t},insert:(e,t)=>{var o,n,i;(i=(o=e.collection)[n=t.id])!=null?i:o[n]=t},upsert:(e,t)=>{var o,n,i;(i=(o=e.collection)[n=t.id])!=null?i:o[n]=t;Object.assign(e.collection[t.id],t)},update:(e,{id:t,booking:o})=>{const n={...e.collection[t],...o};delete e.collection[t];e.collection[o.id]=n},delete:(e,t)=>{delete e.collection[t]},deleteMany:(e,t)=>{for(const o of t){delete e.collection[o]}}}}}e.Bookings=i})(this.BX.Booking.Model=this.BX.Booking.Model||{},BX.Vue3.Vuex,BX.Booking.Const);
//# sourceMappingURL=bookings.bundle.map.js