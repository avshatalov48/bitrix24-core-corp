{"version":3,"file":"parser.bundle.js","sources":["../src/parser.js"],"sourcesContent":["import { Type } from 'main.core';\nimport {\n\tModelFactory,\n\tTag,\n\tText,\n\ttypeof RootNode,\n\ttypeof ElementNode,\n\ttypeof TextNode,\n\ttype ContentNode,\n\ttype SpecialCharNode,\n} from 'ui.bbcode.model';\n\nconst TAG_REGEX: RegExp = /\\[(\\/)?(\\w+|\\*)([\\s\\w./:=]+)?]/gs;\n\nclass Parser\n{\n\tfactory: ModelFactory;\n\n\tconstructor(options: { factory: ModelFactory } = {})\n\t{\n\t\tif (options.factory)\n\t\t{\n\t\t\tthis.setFactory(options.factory);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setFactory(new ModelFactory());\n\t\t}\n\t}\n\n\tsetFactory(factory: ModelFactory)\n\t{\n\t\tthis.factory = factory;\n\t}\n\n\tgetFactory(): ModelFactory\n\t{\n\t\treturn this.factory;\n\t}\n\n\tstatic toLowerCase(value: string): string\n\t{\n\t\tif (Type.isStringFilled(value))\n\t\t{\n\t\t\treturn value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tparseText(text: string): Array<TextNode | SpecialCharNode>\n\t{\n\t\tconst factory: ModelFactory = this.getFactory();\n\n\t\tif (Type.isStringFilled(text))\n\t\t{\n\t\t\treturn [...text]\n\t\t\t\t.reduce((acc: Array<TextNode | SpecialCharNode>, symbol: string) => {\n\t\t\t\t\tif (Text.isSpecialCharContent(symbol))\n\t\t\t\t\t{\n\t\t\t\t\t\tacc.push(symbol);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tconst lastItem: string = acc.at(-1);\n\t\t\t\t\t\tif (Text.isSpecialCharContent(lastItem) || Type.isNil(lastItem))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tacc.push(symbol);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tacc[acc.length - 1] += symbol;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn acc;\n\t\t\t\t}, [])\n\t\t\t\t.map((fragment: string) => {\n\t\t\t\t\tif (Text.isNewLineContent(fragment))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn factory.createNewLineNode();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Text.isTabContent(fragment))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn factory.createTabNode();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn factory.createTextNode({ content: fragment });\n\t\t\t\t});\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tstatic findNextTagIndex(bbcode: string, startIndex = 0): number\n\t{\n\t\tconst nextContent: string = bbcode.slice(startIndex);\n\t\tconst [nextTag: ?string] = nextContent.match(new RegExp(TAG_REGEX)) || [];\n\t\tif (nextTag)\n\t\t{\n\t\t\treturn bbcode.indexOf(nextTag, startIndex);\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tparseAttributes(sourceAttributes: string): { value: ?string, attributes: Array<[string, string]> }\n\t{\n\t\tconst result: {value: string, attributes: Array<Array<string, string>>} = { value: '', attributes: [] };\n\n\t\tif (Type.isStringFilled(sourceAttributes))\n\t\t{\n\t\t\treturn sourceAttributes\n\t\t\t\t.trim()\n\t\t\t\t.split(' ')\n\t\t\t\t.filter(Boolean)\n\t\t\t\t.reduce((acc: typeof result, item: string) => {\n\t\t\t\t\tif (item.startsWith('='))\n\t\t\t\t\t{\n\t\t\t\t\t\tacc.value = item.slice(1);\n\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst [key: string, value: string = ''] = item.split('=');\n\t\t\t\t\tacc.attributes.push([Parser.toLowerCase(key), value]);\n\n\t\t\t\t\treturn acc;\n\t\t\t\t}, result);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tparse(bbcode: string): RootNode\n\t{\n\t\tconst factory: ModelFactory = this.getFactory();\n\t\tconst result: RootNode = factory.createRootNode();\n\t\tconst stack: Array<ElementNode> = [];\n\t\tlet current: ?ElementNode = null;\n\t\tlet level: number = -1;\n\n\t\tconst firstTagIndex: number = Parser.findNextTagIndex(bbcode);\n\t\tif (firstTagIndex !== 0)\n\t\t{\n\t\t\tconst textBeforeFirstTag: string = firstTagIndex === -1 ? bbcode : bbcode.slice(0, firstTagIndex);\n\t\t\tresult.appendChild(\n\t\t\t\t...this.parseText(textBeforeFirstTag),\n\t\t\t);\n\t\t}\n\n\t\tbbcode.replace(TAG_REGEX, (fullTag: string, slash: ?string, tagName: string, attrs: ?string, index: number) => {\n\t\t\tconst isOpenTag: boolean = Boolean(slash) === false;\n\t\t\tconst startIndex: number = fullTag.length + index;\n\t\t\tconst nextContent: string = bbcode.slice(startIndex);\n\t\t\tconst attributes = this.parseAttributes(attrs);\n\t\t\tconst lowerCaseTagName: string = Parser.toLowerCase(tagName);\n\t\t\tlet parent: ?(RootNode | ElementNode) = null;\n\n\t\t\tif (isOpenTag)\n\t\t\t{\n\t\t\t\tlevel++;\n\n\t\t\t\tif (\n\t\t\t\t\tnextContent.includes(`[/${tagName}]`)\n\t\t\t\t\t|| Tag.isListItem(lowerCaseTagName)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tcurrent = factory.createElementNode({\n\t\t\t\t\t\tname: lowerCaseTagName,\n\t\t\t\t\t\tvalue: attributes.value,\n\t\t\t\t\t\tattributes: Object.fromEntries(attributes.attributes),\n\t\t\t\t\t});\n\n\t\t\t\t\tconst nextTagIndex: number = Parser.findNextTagIndex(bbcode, startIndex);\n\t\t\t\t\tif (nextTagIndex !== 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst content: string = nextTagIndex === -1 ? nextContent : bbcode.slice(startIndex, nextTagIndex);\n\t\t\t\t\t\tcurrent.appendChild(\n\t\t\t\t\t\t\t...this.parseText(content),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcurrent = factory.createElementNode({\n\t\t\t\t\t\tname: lowerCaseTagName,\n\t\t\t\t\t\tvalue: attributes.value,\n\t\t\t\t\t\tattributes: Object.fromEntries(attributes.attributes),\n\t\t\t\t\t\tvoid: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (level === 0)\n\t\t\t\t{\n\t\t\t\t\tresult.appendChild(current);\n\t\t\t\t}\n\n\t\t\t\tparent = stack[level - 1];\n\n\t\t\t\tif (Tag.isList(current.getName()))\n\t\t\t\t{\n\t\t\t\t\tif (parent && Tag.isList(parent.getName()))\n\t\t\t\t\t{\n\t\t\t\t\t\tstack[level].appendChild(current);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (\n\t\t\t\t\tparent\n\t\t\t\t\t&& Tag.isList(parent.getName())\n\t\t\t\t\t&& !Tag.isListItem(current.getName())\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tconst lastItem: ?ContentNode = parent.getChildren().at(-1);\n\t\t\t\t\tif (lastItem)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastItem.appendChild(current);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (parent)\n\t\t\t\t{\n\t\t\t\t\tparent.appendChild(current);\n\t\t\t\t}\n\n\t\t\t\tstack[level] = current;\n\n\t\t\t\tif (Tag.isListItem(lowerCaseTagName) && level > -1)\n\t\t\t\t{\n\t\t\t\t\tlevel--;\n\t\t\t\t\tcurrent = level === -1 ? result : stack[level];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isOpenTag || current.isVoid())\n\t\t\t{\n\t\t\t\tif (level > -1 && current.getName() === lowerCaseTagName)\n\t\t\t\t{\n\t\t\t\t\tlevel--;\n\t\t\t\t\tcurrent = level === -1 ? result : stack[level];\n\t\t\t\t}\n\n\t\t\t\tconst nextTagIndex: number = Parser.findNextTagIndex(bbcode, startIndex);\n\t\t\t\tif (nextTagIndex !== startIndex)\n\t\t\t\t{\n\t\t\t\t\tparent = level === -1 ? result : stack[level];\n\n\t\t\t\t\tconst content: ?string = bbcode.slice(startIndex, nextTagIndex === -1 ? undefined : nextTagIndex);\n\t\t\t\t\tif (Tag.isList(parent.getName()))\n\t\t\t\t\t{\n\t\t\t\t\t\tconst lastItem: ?ContentNode = parent.getChildren().at(-1);\n\t\t\t\t\t\tif (lastItem)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlastItem.appendChild(\n\t\t\t\t\t\t\t\t...this.parseText(content),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tparent.appendChild(\n\t\t\t\t\t\t\t...this.parseText(content),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\nexport {\n\tParser,\n};\n"],"names":["TAG_REGEX","Parser","constructor","options","factory","setFactory","ModelFactory","getFactory","toLowerCase","value","Type","isStringFilled","parseText","text","reduce","acc","symbol","Text","isSpecialCharContent","push","lastItem","at","isNil","length","map","fragment","isNewLineContent","createNewLineNode","isTabContent","createTabNode","createTextNode","content","findNextTagIndex","bbcode","startIndex","nextContent","slice","nextTag","match","RegExp","indexOf","parseAttributes","sourceAttributes","result","attributes","trim","split","filter","Boolean","item","startsWith","key","parse","createRootNode","stack","current","level","firstTagIndex","textBeforeFirstTag","appendChild","replace","fullTag","slash","tagName","attrs","index","isOpenTag","lowerCaseTagName","parent","includes","Tag","isListItem","createElementNode","name","Object","fromEntries","nextTagIndex","void","isList","getName","getChildren","isVoid","undefined"],"mappings":"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"}