{"version":3,"file":"model.bundle.js","sources":["../src/nodes/node.js","../src/reference/tag.js","../src/reference/text.js","../src/scheme/child-filters/child-filters.js","../src/nodes/text-node.js","../src/scheme/child-converters/child-converters.js","../src/scheme/scheme.js","../src/nodes/element-node.js","../src/nodes/root-node.js","../src/nodes/fragment-node.js","../src/nodes/new-line-node.js","../src/nodes/tab-node.js","../src/factory/factory.js"],"sourcesContent":["import { Type } from 'main.core';\nimport { typeof ElementNode } from './element-node';\nimport { typeof TextNode } from './text-node';\nimport { typeof NewLineNode } from './new-line-node';\nimport { typeof TabNode } from './tab-node';\nimport { typeof RootNode } from './root-node';\nimport { typeof FragmentNode } from './fragment-node';\nimport { typeof BBCodeScheme } from '../scheme/scheme';\n\nexport type SpecialCharNode = NewLineNode | TabNode;\nexport type ContentNode = ElementNode | TextNode | SpecialCharNode;\nexport type ParentNode = RootNode | ElementNode | FragmentNode;\n\nexport type NodeOptions = {\n\tname?: string,\n\tparent?: ParentNode | null,\n\tchildren?: Array<ContentNode | FragmentNode>,\n\tscheme: BBCodeScheme,\n};\n\nexport type SerializedNode = {\n\tname: string,\n\tchildren: Array<SerializedNode>,\n};\n\nexport const privateMap: WeakMap<Node | ContentNode | RootNode | FragmentNode, {[key: string]: any}> = new WeakMap();\nexport const nameSymbol = Symbol('name');\n\nexport class Node\n{\n\t[nameSymbol]: string = 'unknown';\n\tchildren: Array<ContentNode | FragmentNode> = [];\n\n\tconstructor(options: NodeOptions = {})\n\t{\n\t\tprivateMap.set(this, {\n\t\t\tdelayedChildren: [],\n\t\t});\n\n\t\tthis.setScheme(options.scheme);\n\t\tthis.setParent(options.parent);\n\t\tthis.setName(options.name);\n\t\tthis.setChildren(options.children);\n\t}\n\n\tstatic get ELEMENT_NODE(): number\n\t{\n\t\treturn 1;\n\t}\n\n\tstatic get TEXT_NODE(): number\n\t{\n\t\treturn 2;\n\t}\n\n\tstatic get ROOT_NODE(): number\n\t{\n\t\treturn 3;\n\t}\n\n\tstatic get FRAGMENT_NODE(): number\n\t{\n\t\treturn 4;\n\t}\n\n\tstatic freezeProperty(node: Node, property: string, value: any, enumerable: boolean = true)\n\t{\n\t\tObject.defineProperty(node, property, {\n\t\t\tvalue,\n\t\t\twritable: false,\n\t\t\tconfigurable: false,\n\t\t\tenumerable,\n\t\t});\n\t}\n\n\tstatic makeNonEnumerableProperty(node: Node, property: string)\n\t{\n\t\tObject.defineProperty(node, property, {\n\t\t\twritable: false,\n\t\t\tenumerable: false,\n\t\t\tconfigurable: false,\n\t\t});\n\t}\n\n\tstatic flattenChildren(children: Array<ContentNode | FragmentNode>): Array<ContentNode>\n\t{\n\t\tif (Type.isArrayFilled(children))\n\t\t{\n\t\t\treturn children.flatMap((node: ContentNode | FragmentNode) => {\n\t\t\t\tif (node.getType() === Node.FRAGMENT_NODE)\n\t\t\t\t{\n\t\t\t\t\treturn node.getChildren();\n\t\t\t\t}\n\n\t\t\t\treturn node;\n\t\t\t});\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tsetScheme(scheme: BBCodeScheme)\n\t{\n\t\tprivateMap.get(this).scheme = scheme;\n\t}\n\n\tgetScheme(): BBCodeScheme\n\t{\n\t\treturn privateMap.get(this).scheme;\n\t}\n\n\tprepareCase(value: string): string\n\t{\n\t\tconst scheme: BBCodeScheme = this.getScheme();\n\t\tconst currentCase = scheme.getTagCase();\n\t\tif (currentCase === 'upperCase')\n\t\t{\n\t\t\treturn value.toUpperCase();\n\t\t}\n\n\t\treturn value.toLowerCase();\n\t}\n\n\tsetName(name: string)\n\t{\n\t\tif (Type.isString(name))\n\t\t{\n\t\t\tthis[nameSymbol] = name.toLowerCase();\n\t\t}\n\t}\n\n\tgetName(): string\n\t{\n\t\treturn this[nameSymbol];\n\t}\n\n\tgetDisplayedName(): string\n\t{\n\t\treturn this.prepareCase(this.getName());\n\t}\n\n\tsetParent(parent: ParentNode | null = null)\n\t{\n\t\tconst mounted = !this.hasParent() && parent;\n\t\tprivateMap.get(this).parent = parent;\n\n\t\tif (mounted)\n\t\t{\n\t\t\tthis.onNodeDidMount();\n\t\t}\n\t}\n\n\tgetParent(): ParentNode | null\n\t{\n\t\treturn privateMap.get(this).parent;\n\t}\n\n\tgetType(): number\n\t{\n\t\treturn privateMap.get(this).type;\n\t}\n\n\thasParent(): boolean\n\t{\n\t\treturn Boolean(privateMap.get(this).parent);\n\t}\n\n\tremove()\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tthis.getParent().removeChild(this);\n\t\t}\n\t}\n\n\tsetChildren(children: Array<ContentNode | FragmentNode>)\n\t{\n\t\tif (Type.isArray(children))\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.appendChild(...children);\n\t\t}\n\t}\n\n\tgetChildren(): Array<ContentNode>\n\t{\n\t\treturn [...this.children];\n\t}\n\n\tgetLastChild(): ?ContentNode\n\t{\n\t\treturn this.getChildren().at(-1);\n\t}\n\n\tgetLastChildOfType(type: number): ?ContentNode\n\t{\n\t\treturn this.getChildren().reverse().find((node: ContentNode) => {\n\t\t\treturn node.getType() === type;\n\t\t});\n\t}\n\n\tgetLastChildOfName(name: string): ?ContentNode\n\t{\n\t\treturn this.getChildren().reverse().find((node: ContentNode) => {\n\t\t\treturn node.getType() === Node.ELEMENT_NODE && node.getName() === name;\n\t\t});\n\t}\n\n\tgetFirstChild(): ?ContentNode\n\t{\n\t\treturn this.getChildren().at(0);\n\t}\n\n\tgetFirstChildOfType(type: number): ?ContentNode\n\t{\n\t\treturn this.getChildren().find((node: ContentNode) => {\n\t\t\treturn node.getType() === type;\n\t\t});\n\t}\n\n\tgetFirstChildOfName(name: string): ?ContentNode\n\t{\n\t\treturn this.getChildren().find((node: ContentNode) => {\n\t\t\treturn node.getType() === Node.ELEMENT_NODE && node.getName() === name;\n\t\t});\n\t}\n\n\tgetPreviewsSibling(): ?ContentNode\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parentChildren: Array<ContentNode> = this.getParent().getChildren();\n\t\t\tconst currentIndex: number = parentChildren.indexOf(this);\n\t\t\tif (currentIndex > 0)\n\t\t\t{\n\t\t\t\treturn parentChildren.at(currentIndex - 1);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetNextSibling(): ?ContentNode\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parentChildren: Array<ContentNode> = this.getParent().getChildren();\n\t\t\tconst currentIndex: number = parentChildren.indexOf(this);\n\t\t\tif (currentIndex !== -1 && currentIndex !== parentChildren.length)\n\t\t\t{\n\t\t\t\treturn parentChildren.at(currentIndex + 1);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetChildrenCount(): number\n\t{\n\t\treturn this.children.length;\n\t}\n\n\thasChildren(): boolean\n\t{\n\t\treturn this.getChildrenCount() > 0;\n\t}\n\n\tsetDelayedChildren(children: Array<ContentNode>)\n\t{\n\t\tif (Type.isArray(children))\n\t\t{\n\t\t\tprivateMap.get(this).delayedChildren = children;\n\t\t}\n\t}\n\n\taddDelayedChildren(children: Array<ContentNode>)\n\t{\n\t\tif (Type.isArrayFilled(children))\n\t\t{\n\t\t\tthis.setDelayedChildren([\n\t\t\t\t...this.getDelayedChildren(),\n\t\t\t\t...children,\n\t\t\t]);\n\t\t}\n\t}\n\n\thasDelayedChildren(): boolean\n\t{\n\t\treturn privateMap.get(this).delayedChildren.length > 0;\n\t}\n\n\tgetDelayedChildren(): Array<ContentNode>\n\t{\n\t\treturn [...privateMap.get(this).delayedChildren];\n\t}\n\n\tappendChild(...children: Array<ContentNode | FragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<ContentNode> = Node.flattenChildren(children);\n\n\t\tflattenedChildren.forEach((node: ContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.push(node);\n\t\t});\n\t}\n\n\tprependChild(...children: Array<ContentNode | FragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<ContentNode> = Node.flattenChildren(children);\n\n\t\tflattenedChildren.forEach((node: ContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.unshift(node);\n\t\t});\n\t}\n\n\tpropagateChild(...children: Array<ContentNode>)\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tthis.getParent().prependChild(\n\t\t\t\t...children.filter((node: ContentNode) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tnode.getType() === Node.ELEMENT_NODE\n\t\t\t\t\t\t|| node.getName() === '#text'\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addDelayedChildren(children);\n\t\t}\n\t}\n\n\tonNodeDidMount()\n\t{\n\t\tconst delayedChildren = this.getDelayedChildren();\n\t\tif (Type.isArrayFilled(delayedChildren))\n\t\t{\n\t\t\tthis.propagateChild(...delayedChildren);\n\t\t\tthis.setDelayedChildren([]);\n\t\t}\n\t}\n\n\tremoveChild(...children: Array<ContentNode>)\n\t{\n\t\tthis.children = this.children.reduce((acc: Array<ContentNode>, node: ContentNode) => {\n\t\t\tif (children.includes(node))\n\t\t\t{\n\t\t\t\tnode.setParent(null);\n\n\t\t\t\treturn acc;\n\t\t\t}\n\n\t\t\treturn [...acc, node];\n\t\t}, []);\n\t}\n\n\treplaceChild(targetNode: ContentNode, ...children: Array<ContentNode | FragmentNode>)\n\t{\n\t\tthis.children = this.children.flatMap((node: ContentNode) => {\n\t\t\tif (node === targetNode)\n\t\t\t{\n\t\t\t\tnode.setParent(null);\n\n\t\t\t\tconst flattenedChildren: Array<ContentNode> = Node.flattenChildren(children);\n\n\t\t\t\treturn flattenedChildren.map((child: ContentNode) => {\n\t\t\t\t\tchild.remove();\n\t\t\t\t\tchild.setParent(this);\n\n\t\t\t\t\treturn child;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn node;\n\t\t});\n\t}\n\n\treplace(...children: Array<ContentNode | FragmentNode>)\n\t{\n\t\tif (this.hasParent())\n\t\t{\n\t\t\tconst parent = this.getParent();\n\t\t\tparent.replaceChild(this, ...children);\n\t\t}\n\t}\n\n\tclone(options: { deep: boolean } = {}): Node\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn new Node({\n\t\t\tname: this.getName(),\n\t\t\tscheme: this.getScheme(),\n\t\t\tparent: this.getParent(),\n\t\t\tchildren,\n\t\t});\n\t}\n\n\ttoJSON(): SerializedNode\n\t{\n\t\treturn {\n\t\t\tname: this.getName(),\n\t\t\tchildren: this.getChildren().map((child: ContentNode) => {\n\t\t\t\treturn child.toJSON();\n\t\t\t}),\n\t\t};\n\t}\n}\n","import { Type } from 'main.core';\n\nconst toLowerCase = (value: string): string => {\n\tif (Type.isString(value))\n\t{\n\t\treturn value.toLowerCase();\n\t}\n\n\treturn value;\n};\n\nexport class Tag\n{\n\tstatic BOLD: string = 'b';\n\tstatic ITALIC: string = 'i';\n\tstatic STRIKE: string = 's';\n\tstatic UNDERLINE: string = 'u';\n\tstatic SIZE: string = 'size';\n\tstatic COLOR: string = 'color';\n\tstatic CENTER: string = 'center';\n\tstatic LEFT: string = 'left';\n\tstatic RIGHT: string = 'right';\n\tstatic URL: string = 'url';\n\tstatic IMG: string = 'img';\n\n\tstatic PARAGRAPH: string = 'p';\n\tstatic LIST: string = 'list';\n\tstatic LIST_UL: string = 'ul';\n\tstatic LIST_OL: string = 'ol';\n\tstatic LIST_ITEM: string = '*';\n\tstatic LIST_ITEM_LI: string = 'li';\n\tstatic TABLE: string = 'table';\n\tstatic TABLE_ROW: string = 'tr';\n\tstatic TABLE_CELL: string = 'td';\n\tstatic TABLE_HEAD_CELL: string = 'th';\n\tstatic QUOTE: string = 'quote';\n\tstatic CODE: string = 'code';\n\tstatic SPOILER: string = 'spoiler';\n\n\tstatic INLINE_TAGS: Set<string> = new Set([\n\t\tTag.BOLD,\n\t\tTag.ITALIC,\n\t\tTag.STRIKE,\n\t\tTag.UNDERLINE,\n\t\tTag.SIZE,\n\t\tTag.COLOR,\n\t\tTag.CENTER,\n\t\tTag.LEFT,\n\t\tTag.RIGHT,\n\t\tTag.URL,\n\t\tTag.IMG,\n\t\tTag.LIST_ITEM,\n\t\tTag.LIST_ITEM_LI,\n\t]);\n\n\tstatic BLOCK_TAGS: Set<string> = new Set([\n\t\tTag.PARAGRAPH,\n\t\tTag.LIST,\n\t\tTag.LIST_UL,\n\t\tTag.LIST_OL,\n\t\tTag.TABLE,\n\t\tTag.TABLE_ROW,\n\t\tTag.TABLE_HEAD_CELL,\n\t\tTag.TABLE_CELL,\n\t\tTag.QUOTE,\n\t\tTag.CODE,\n\t\tTag.SPOILER,\n\t]);\n\n\tstatic LIST_TAGS: Set<string> = new Set([\n\t\tTag.LIST,\n\t\tTag.LIST_UL,\n\t\tTag.LIST_OL,\n\t]);\n\n\tstatic LIST_ITEM_TAGS: Set<string> = new Set([\n\t\tTag.LIST_ITEM,\n\t\tTag.LIST_ITEM_LI,\n\t]);\n\n\tstatic isInline(tagName: string): boolean\n\t{\n\t\treturn Tag.INLINE_TAGS.has(toLowerCase(tagName));\n\t}\n\n\tstatic isBlock(tagName: string): boolean\n\t{\n\t\treturn Tag.BLOCK_TAGS.has(toLowerCase(tagName));\n\t}\n\n\tstatic isList(tagName: string): boolean\n\t{\n\t\treturn Tag.LIST_TAGS.has(toLowerCase(tagName));\n\t}\n\n\tstatic isListItem(tagName: string): boolean\n\t{\n\t\treturn Tag.LIST_ITEM_TAGS.has(toLowerCase(tagName));\n\t}\n}\n","import { type ContentNode } from '../nodes/node';\n\nexport class Text\n{\n\tstatic TAB_CONTENT: string = '\\t';\n\tstatic NEW_LINE_CONTENT: string = '\\n';\n\n\tstatic SPECIAL_CHARS_CONTENT: Set<string> = new Set([\n\t\tText.TAB_CONTENT,\n\t\tText.NEW_LINE_CONTENT,\n\t]);\n\n\tstatic TEXT_NAME: string = '#text';\n\tstatic NEW_LINE_NAME: string = '#linebreak';\n\tstatic TAB_NAME: string = '#tab';\n\n\tstatic TEXT_NAMES: Set<string> = new Set([\n\t\tText.TEXT_NAME,\n\t\tText.NEW_LINE_NAME,\n\t\tText.TAB_NAME,\n\t]);\n\n\tstatic isAnyTextNode(node: ContentNode): boolean\n\t{\n\t\treturn node && Text.TEXT_NAMES.has(node.getName());\n\t}\n\n\tstatic isPlainTextNode(node: ContentNode): boolean\n\t{\n\t\treturn node && node.getName() === Text.TEXT_NAME;\n\t}\n\n\tstatic isNewLineNode(node: ContentNode): boolean\n\t{\n\t\treturn node && node.getName() === Text.NEW_LINE_NAME;\n\t}\n\n\tstatic isTabNode(node: ContentNode): boolean\n\t{\n\t\treturn node && node.getName() === Text.TAB_NAME;\n\t}\n\n\tstatic isNewLineContent(content: string): boolean\n\t{\n\t\treturn content === Text.NEW_LINE_CONTENT;\n\t}\n\n\tstatic isTabContent(content: string): boolean\n\t{\n\t\treturn content === Text.TAB_CONTENT;\n\t}\n\n\tstatic isSpecialCharContent(content: string): boolean\n\t{\n\t\treturn Text.SPECIAL_CHARS_CONTENT.has(content);\n\t}\n}\n","import { Tag } from '../../reference/tag';\nimport { Text } from '../../reference/text';\nimport { type ContentNode } from '../../nodes/node';\n\nexport const childFilters = {\n\t[Tag.LIST]: (node: ContentNode) => {\n\t\treturn node.getName() === Tag.LIST_ITEM;\n\t},\n\t[Tag.LIST_OL]: (node: ContentNode) => {\n\t\treturn node.getName() === Tag.LIST_ITEM_LI;\n\t},\n\t[Tag.LIST_UL]: (node: ContentNode) => {\n\t\treturn node.getName() === Tag.LIST_ITEM_LI;\n\t},\n\t[Tag.LIST_ITEM]: (node: ContentNode) => {\n\t\treturn (\n\t\t\tnode\n\t\t\t&& (\n\t\t\t\tTag.isList(node.getName())\n\t\t\t\t|| Text.isPlainTextNode(node)\n\t\t\t\t|| Text.isNewLineNode(node)\n\t\t\t\t|| (\n\t\t\t\t\tTag.isInline(node.getName()) && !Tag.isListItem(node.getName())\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t},\n\t[Tag.LIST_ITEM_LI]: (node: ContentNode) => {\n\t\treturn (\n\t\t\tTag.isListItem(node.getName())\n\t\t\t|| Text.isPlainTextNode(node)\n\t\t\t|| Text.isNewLineNode(node)\n\t\t\t|| (\n\t\t\t\tnode.isInline() && !Tag.isListItem(node.getName())\n\t\t\t)\n\t\t);\n\t},\n\t[Tag.TABLE]: (node: ContentNode) => {\n\t\treturn node.getName() === Tag.TABLE_ROW;\n\t},\n\t[Tag.TABLE_ROW]: (node: ContentNode) => {\n\t\treturn node.getName() === Tag.TABLE_CELL || node.getName() === Tag.TABLE_HEAD_CELL;\n\t},\n\t[Tag.TABLE_CELL]: (node: ContentNode) => {\n\t\treturn (\n\t\t\tTag.isInline(node.getName())\n\t\t\t|| Text.isPlainTextNode(node)\n\t\t\t|| Text.isNewLineNode(node)\n\t\t);\n\t},\n\t[Tag.TABLE_HEAD_CELL]: (node: ContentNode) => {\n\t\treturn (\n\t\t\tTag.isInline(node.getName())\n\t\t\t|| Text.isPlainTextNode(node)\n\t\t\t|| Text.isNewLineNode(node)\n\t\t);\n\t},\n\t[Tag.PARAGRAPH]: (node: ContentNode) => {\n\t\treturn (\n\t\t\tTag.isInline(node.getName())\n\t\t\t|| Text.isPlainTextNode(node)\n\t\t\t|| Text.isNewLineNode(node)\n\t\t);\n\t},\n\t'#inline': (node: ContentNode) => {\n\t\treturn (\n\t\t\tTag.isInline(node.getName())\n\t\t\t|| Text.isPlainTextNode(node)\n\t\t\t|| Text.isNewLineNode(node)\n\t\t);\n\t},\n};\n","import { Type } from 'main.core';\nimport { Node, privateMap, nameSymbol, type NodeOptions } from './node';\nimport { Text } from '../reference/text';\n\nexport const contentSymbol = Symbol('content');\n\nexport type TextNodeContent = string | number;\n\nexport type TextNodeOptions = TextNodeContent | NodeOptions & {\n\tcontent?: string,\n};\n\nexport type SerializedTextNode = {\n\tname: string,\n\tcontent: TextNodeContent,\n};\n\nexport class TextNode extends Node\n{\n\t[nameSymbol]: string = Text.TEXT_NAME;\n\t[contentSymbol]: string = '';\n\n\tconstructor(options: TextNodeOptions = {})\n\t{\n\t\tconst nodeOptions: TextNodeOptions = Type.isString(options) ? { content: options } : options;\n\t\tsuper(nodeOptions);\n\t\tprivateMap.get(this).type = Node.TEXT_NODE;\n\t\tthis.setContent(nodeOptions.content);\n\t\tNode.makeNonEnumerableProperty(this, 'children');\n\t}\n\n\tstatic isTextNodeContent(value: any): boolean\n\t{\n\t\treturn Type.isString(value) || Type.isNumber(value);\n\t}\n\n\tstatic decodeSpecialChars(content: TextNodeContent): TextNodeContent\n\t{\n\t\tif (TextNode.isTextNodeContent(content))\n\t\t{\n\t\t\treturn content\n\t\t\t\t.replaceAll('&#91;', '[')\n\t\t\t\t.replaceAll('&#93;', ']');\n\t\t}\n\n\t\treturn content;\n\t}\n\n\tsetName(name: string)\n\t{}\n\n\tsetContent(content: TextNodeContent)\n\t{\n\t\tif (TextNode.isTextNodeContent(content))\n\t\t{\n\t\t\tthis[contentSymbol] = TextNode.decodeSpecialChars(content);\n\t\t}\n\t}\n\n\tgetContent(): TextNodeContent\n\t{\n\t\treturn TextNode.decodeSpecialChars(this[contentSymbol]);\n\t}\n\n\tgetLength():number\n\t{\n\t\treturn String(this[contentSymbol]).length;\n\t}\n\n\tclone(options): TextNode\n\t{\n\t\tconst Constructor = this.constructor;\n\n\t\treturn new Constructor({\n\t\t\tcontent: this.getContent(),\n\t\t\tscheme: this.getScheme(),\n\t\t});\n\t}\n\n\tsplitText(offset: number): Array<TextNode | null>\n\t{\n\t\tif (!Type.isNumber(offset))\n\t\t{\n\t\t\tthrow new TypeError('offset is not a number');\n\t\t}\n\n\t\tconst contentLength = this.getLength();\n\t\tif (offset < 0 || offset > contentLength)\n\t\t{\n\t\t\tthrow new TypeError(`offset '${offset}' is out of range ${0}-${contentLength}`);\n\t\t}\n\n\t\tconst content = this.getContent();\n\t\tconst rightContent = content.slice(offset, contentLength);\n\n\t\tconst leftNode = (() => {\n\t\t\tif (offset === contentLength)\n\t\t\t{\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (offset === 0)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn new TextNode({\n\t\t\t\tcontent: content.slice(0, offset),\n\t\t\t\tscheme: this.getScheme(),\n\t\t\t});\n\t\t})();\n\n\t\tconst rightNode = (() => {\n\t\t\tif (offset === 0)\n\t\t\t{\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (offset === contentLength)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn new TextNode({\n\t\t\t\tcontent: rightContent,\n\t\t\t\tscheme: this.getScheme(),\n\t\t\t});\n\t\t})();\n\n\t\tif (leftNode && rightNode)\n\t\t{\n\t\t\tthis.replace(leftNode, rightNode);\n\t\t}\n\n\t\treturn [leftNode, rightNode];\n\t}\n\n\ttoString(): string\n\t{\n\t\treturn this.getContent();\n\t}\n\n\ttoJSON(): SerializedTextNode\n\t{\n\t\treturn {\n\t\t\tname: this.getName(),\n\t\t\tcontent: this.toString(),\n\t\t};\n\t}\n}\n","import { type ContentNode } from '../../nodes/node';\nimport { TextNode } from '../../nodes/text-node';\nimport { Tag } from '../../reference/tag';\n\nexport const childConverters = {\n\t[Tag.CODE]: (node: ContentNode): ContentNode => {\n\t\tif (node.getName() === '#text')\n\t\t{\n\t\t\treturn node;\n\t\t}\n\n\t\treturn new TextNode({ content: node.toString() });\n\t},\n};\n","import { Type } from 'main.core';\nimport { typeof Node } from '../nodes/node';\nimport { childFilters } from './child-filters/child-filters';\nimport { childConverters } from './child-converters/child-converters';\n\nexport type ChildFilter = (Node) => boolean;\nexport type ChildConverter = (Node) => Node | null;\nexport type AllowedCase = 'lowerCase' | 'upperCase';\n\nexport type BBCodeSchemeOptions = {\n\tallowedTags?: Array<string>,\n\tchildFilters?: { [tagName: string]: ChildFilter },\n\tchildConverters?: { [tagName: string]: ChildConverter },\n\tpropagateUnresolvedNodes?: boolean,\n\ttagCase?: AllowedCase,\n\tnewLineBeforeBlockOpeningTag?: boolean,\n\tnewLineAfterBlockOpeningTag?: boolean,\n\tnewLineBeforeBlockClosingTag?: boolean,\n\tnewLineAfterBlockClosingTag?: boolean,\n\tnewLineAfterListItem?: boolean,\n};\n\nexport class BBCodeScheme\n{\n\tstatic LOWER_CASE: string = 'lowerCase';\n\tstatic UPPER_CASE: string = 'upperCase';\n\n\tstatic allowedCases: Set<string> = new Set([\n\t\tBBCodeScheme.LOWER_CASE,\n\t\tBBCodeScheme.UPPER_CASE,\n\t]);\n\n\t/** @private */\n\tchildFilters: Map<string, ChildFilter> = new Map();\n\n\t/** @private */\n\tchildConverters: Map<string, ChildConverter> = new Map();\n\n\t/** @private */\n\tallowedTags: Set<string> = new Set();\n\n\t/** @private */\n\tpropagateUnresolvedNodes: boolean = true;\n\n\t/** @private */\n\ttagCase: AllowedCase = BBCodeScheme.LOWER_CASE;\n\n\t/** @private */\n\tallowNewLineBeforeBlockOpeningTag: boolean = true;\n\n\t/** @private */\n\tallowNewLineAfterBlockOpeningTag: boolean = true;\n\n\t/** @private */\n\tallowNewLineBeforeBlockClosingTag: boolean = true;\n\n\t/** @private */\n\tallowNewLineAfterBlockClosingTag: boolean = true;\n\n\t/** @private */\n\tallowNewLineAfterListItem: boolean = true;\n\n\tconstructor(options: BBCodeSchemeOptions = {})\n\t{\n\t\tthis.setChildFilters(childFilters);\n\t\tthis.setChildConverters(childConverters);\n\n\t\tif (Type.isPlainObject(options))\n\t\t{\n\t\t\tthis.setAllowedTags(options.allowedTags);\n\t\t\tthis.setChildFilters(options.childFilters);\n\t\t\tthis.setChildConverters(options.childConverters);\n\t\t\tthis.setPropagateUnresolvedNodes(options.propagateUnresolvedNodes);\n\t\t\tthis.setTagCase(options.tagCase);\n\t\t\tthis.setAllowNewLineBeforeBlockOpeningTag(options.newLineBeforeBlockOpeningTag);\n\t\t\tthis.setAllowNewLineAfterBlockOpeningTag(options.newLineAfterBlockOpeningTag);\n\t\t\tthis.setAllowNewLineBeforeBlockClosingTag(options.newLineBeforeBlockClosingTag);\n\t\t\tthis.setAllowNewLineAfterBlockClosingTag(options.newLineAfterBlockClosingTag);\n\t\t\tthis.setAllowNewLineAfterListItem(options.newLineAfterListItem);\n\t\t}\n\t}\n\n\tsetAllowedTags(allowedTags: Array<string>)\n\t{\n\t\tif (Type.isArray(allowedTags))\n\t\t{\n\t\t\tthis.allowedTags = new Set(allowedTags);\n\t\t}\n\t}\n\n\taddAllowedTag(tag)\n\t{\n\t\tif (Type.isStringFilled(tag))\n\t\t{\n\t\t\tthis.getAllowedTags().add(tag);\n\t\t}\n\t}\n\n\tgetAllowedTags(): Set<string>\n\t{\n\t\treturn this.allowedTags;\n\t}\n\n\tgetChildFilters(): Map<string, ChildFilter>\n\t{\n\t\treturn this.childFilters;\n\t}\n\n\tgetChildFilter(tagName: string): ChildFilter\n\t{\n\t\treturn this.getChildFilters().get(tagName);\n\t}\n\n\tsetChildFilters(filters: { [tagName: string]: ChildFilter })\n\t{\n\t\tif (Type.isPlainObject(filters))\n\t\t{\n\t\t\tconst childFiltersMap = this.getChildFilters();\n\t\t\tObject.entries(filters).forEach(([tagName, filter]) => {\n\t\t\t\tchildFiltersMap.set(tagName, filter);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetChildConverters(): Map<string, ChildConverter>\n\t{\n\t\treturn this.childConverters;\n\t}\n\n\tgetChildConverter(tagName: string): ChildConverter\n\t{\n\t\treturn this.getChildConverters().get(tagName);\n\t}\n\n\tsetChildConverters(converters: { [tagName: string]: ChildConverter })\n\t{\n\t\tif (Type.isPlainObject(converters))\n\t\t{\n\t\t\tconst convertersMap = this.getChildConverters();\n\t\t\tObject.entries(converters).forEach(([tagName, converter]) => {\n\t\t\t\tconvertersMap.set(tagName, converter);\n\t\t\t});\n\t\t}\n\t}\n\n\tsetPropagateUnresolvedNodes(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis.propagateUnresolvedNodes = value;\n\t\t}\n\t}\n\n\tisPropagateUnresolvedNodes(): boolean\n\t{\n\t\treturn this.propagateUnresolvedNodes;\n\t}\n\n\tsetTagCase(tagCase: AllowedCase)\n\t{\n\t\tif (BBCodeScheme.allowedCases.has(tagCase))\n\t\t{\n\t\t\tthis.tagCase = tagCase;\n\t\t}\n\t}\n\n\tgetTagCase(): AllowedCase\n\t{\n\t\treturn this.tagCase;\n\t}\n\n\tsetAllowNewLineBeforeBlockOpeningTag(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis.allowNewLineBeforeBlockOpeningTag = value;\n\t\t}\n\t}\n\n\tisAllowNewLineBeforeBlockOpeningTag(): boolean\n\t{\n\t\treturn this.allowNewLineBeforeBlockOpeningTag;\n\t}\n\n\tsetAllowNewLineAfterBlockOpeningTag(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis.allowNewLineAfterBlockOpeningTag = value;\n\t\t}\n\t}\n\n\tisAllowNewLineAfterBlockOpeningTag(): boolean\n\t{\n\t\treturn this.allowNewLineAfterBlockOpeningTag;\n\t}\n\n\tsetAllowNewLineBeforeBlockClosingTag(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis.allowNewLineBeforeBlockClosingTag = value;\n\t\t}\n\t}\n\n\tisAllowNewLineBeforeBlockClosingTag(): boolean\n\t{\n\t\treturn this.allowNewLineBeforeBlockClosingTag;\n\t}\n\n\tsetAllowNewLineAfterBlockClosingTag(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis.allowNewLineAfterBlockClosingTag = value;\n\t\t}\n\t}\n\n\tisAllowNewLineAfterBlockClosingTag(): boolean\n\t{\n\t\treturn this.allowNewLineAfterBlockClosingTag;\n\t}\n\n\tsetAllowNewLineAfterListItem(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis.allowNewLineAfterListItem = value;\n\t\t}\n\t}\n\n\tisAllowNewLineAfterListItem(): boolean\n\t{\n\t\treturn this.allowNewLineAfterListItem;\n\t}\n}\n","import { Type, type JsonObject, type JsonValue } from 'main.core';\nimport { Node, type NodeOptions, type ContentNode, type SerializedNode, privateMap } from './node';\nimport { typeof FragmentNode } from './fragment-node';\nimport { Tag } from '../reference/tag';\nimport { BBCodeScheme } from '../scheme/scheme';\nimport { Text } from '../reference/text';\n\nexport type ElementNodeValue = string | number | boolean;\n\nexport type ElementNodeOptions = NodeOptions & {\n\tattributes?: JsonObject,\n\tvalue?: ElementNodeValue,\n\tvoid?: boolean,\n\tinline?: boolean,\n};\n\nexport type SerializedElementNode = SerializedNode & {\n\tattributes: JsonObject,\n\tvalue: ElementNodeValue,\n\tvoid: boolean,\n\tinline: boolean,\n};\n\nexport type FilteredChildren = {\n\tresolved: Array<ContentNode>,\n\tunresolved: Array<ContentNode>,\n};\n\nexport class ElementNode extends Node\n{\n\tattributes: JsonObject = {};\n\tvalue: JsonValue = '';\n\tvoid: boolean = false;\n\tinline: boolean = false;\n\n\tconstructor(options: ElementNodeOptions = {})\n\t{\n\t\tsuper(options);\n\t\tprivateMap.get(this).type = Node.ELEMENT_NODE;\n\n\t\tconst preparedOptions = {\n\t\t\tinline: Tag.isInline(this.getName()),\n\t\t\t...options,\n\t\t};\n\t\tthis.setInline(preparedOptions.inline);\n\t\tthis.setValue(preparedOptions.value);\n\t\tthis.setVoid(preparedOptions.void);\n\t\tthis.setAttributes(preparedOptions.attributes);\n\t}\n\n\tfilterChildren(children: Array<ContentNode>): FilteredChildren\n\t{\n\t\tconst filteredChildren = { resolved: [], unresolved: [] };\n\t\tconst byTagFilter = this.getScheme().getChildFilter(this.getName());\n\t\tif (byTagFilter)\n\t\t{\n\t\t\treturn children.reduce((acc: typeof filteredChildren, child: ContentNode) => {\n\t\t\t\tconst isAllowed = byTagFilter(child);\n\t\t\t\tif (isAllowed)\n\t\t\t\t{\n\t\t\t\t\tacc.resolved.push(child);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tacc.unresolved.push(child);\n\t\t\t\t}\n\n\t\t\t\treturn acc;\n\t\t\t}, filteredChildren);\n\t\t}\n\n\t\tif (this.isInline())\n\t\t{\n\t\t\tconst inlineChildFilter = this.getScheme().getChildFilter('#inline');\n\n\t\t\treturn children.reduce((acc, child: ContentNode) => {\n\t\t\t\tconst isAllowed = inlineChildFilter(child);\n\t\t\t\tif (isAllowed)\n\t\t\t\t{\n\t\t\t\t\tacc.resolved.push(child);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tacc.unresolved.push(child);\n\t\t\t\t}\n\n\t\t\t\treturn acc;\n\t\t\t}, { resolved: [], unresolved: [] });\n\t\t}\n\n\t\tfilteredChildren.resolved = children;\n\n\t\treturn filteredChildren;\n\t}\n\n\tconvertChildren(children: Array<ContentNode>): Array<ContentNode>\n\t{\n\t\tconst childConverter = this.getScheme().getChildConverter(this.getName());\n\t\tif (childConverter)\n\t\t{\n\t\t\treturn children.map((child: Node) => {\n\t\t\t\treturn childConverter(child);\n\t\t\t});\n\t\t}\n\n\t\treturn children;\n\t}\n\n\tsetValue(value: ElementNodeValue)\n\t{\n\t\tif (Type.isString(value) || Type.isNumber(value) || Type.isBoolean(value))\n\t\t{\n\t\t\tthis.value = value;\n\t\t}\n\t}\n\n\tgetValue(): ElementNodeValue\n\t{\n\t\treturn this.value;\n\t}\n\n\tsetVoid(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis.void = value;\n\t\t}\n\t}\n\n\tisVoid(): boolean\n\t{\n\t\treturn this.void;\n\t}\n\n\tsetInline(value: boolean)\n\t{\n\t\tif (Type.isBoolean(value))\n\t\t{\n\t\t\tthis.inline = value;\n\t\t}\n\t}\n\n\tisInline(): boolean\n\t{\n\t\treturn this.inline;\n\t}\n\n\tsetAttributes(attributes: JsonObject)\n\t{\n\t\tif (Type.isPlainObject(attributes))\n\t\t{\n\t\t\tconst entries = Object.entries(attributes).map(([key, value]) => {\n\t\t\t\treturn [key.toLowerCase(), value];\n\t\t\t});\n\n\t\t\tthis.attributes = Object.fromEntries(entries);\n\t\t}\n\t}\n\n\tsetAttribute(name: string, value: any)\n\t{\n\t\tif (Type.isStringFilled(name))\n\t\t{\n\t\t\tconst preparedName: string = name.toLowerCase();\n\t\t\tif (Type.isNil(value))\n\t\t\t{\n\t\t\t\tdelete this.attributes[preparedName];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.attributes[preparedName] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetAttribute(name: string): string | number | null\n\t{\n\t\tif (Type.isString(name))\n\t\t{\n\t\t\treturn this.attributes[name.toLowerCase()];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetAttributes(): JsonObject\n\t{\n\t\treturn { ...this.attributes };\n\t}\n\n\tappendChild(...children: Array<ContentNode | FragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<ContentNode> = Node.flattenChildren(children);\n\t\tconst filteredChildren: FilteredChildren = this.filterChildren(flattenedChildren);\n\t\tconst convertedChildren: Array<ContentNode> = this.convertChildren(filteredChildren.resolved);\n\n\t\tconvertedChildren.forEach((node: ContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.push(node);\n\t\t});\n\n\t\tif (Type.isArrayFilled(filteredChildren.unresolved))\n\t\t{\n\t\t\tthis.propagateChild(...filteredChildren.unresolved);\n\t\t}\n\t}\n\n\tprependChild(...children: Array<ContentNode | FragmentNode>)\n\t{\n\t\tconst flattenedChildren: Array<ContentNode> = Node.flattenChildren(children);\n\t\tconst filteredChildren: FilteredChildren = this.filterChildren(flattenedChildren);\n\t\tconst convertedChildren: Array<ContentNode> = this.convertChildren(filteredChildren.resolved);\n\n\t\tconvertedChildren.forEach((node: ContentNode) => {\n\t\t\tnode.remove();\n\t\t\tnode.setParent(this);\n\t\t\tthis.children.unshift(node);\n\t\t});\n\n\t\tif (Type.isArrayFilled(filteredChildren.unresolved))\n\t\t{\n\t\t\tthis.propagateChild(...filteredChildren.unresolved);\n\t\t}\n\t}\n\n\treplaceChild(targetNode: ContentNode, ...children: Array<ContentNode | FragmentNode>)\n\t{\n\t\tthis.children = this.children.flatMap((node: ContentNode) => {\n\t\t\tif (node === targetNode)\n\t\t\t{\n\t\t\t\tnode.setParent(null);\n\n\t\t\t\tconst flattenedChildren: Array<ContentNode> = Node.flattenChildren(children);\n\t\t\t\tconst filteredChildren: FilteredChildren = this.filterChildren(flattenedChildren);\n\t\t\t\tconst convertedChildren: Array<ContentNode> = this.convertChildren(filteredChildren.resolved);\n\n\t\t\t\treturn convertedChildren.map((child: ContentNode) => {\n\t\t\t\t\tchild.remove();\n\t\t\t\t\tchild.setParent(this);\n\n\t\t\t\t\treturn child;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn node;\n\t\t});\n\t}\n\n\ttoStringValue(): string\n\t{\n\t\tconst value: ElementNodeValue = this.getValue();\n\n\t\treturn value ? `=${value}` : '';\n\t}\n\n\ttoStringAttributes(): string\n\t{\n\t\treturn Object\n\t\t\t.entries(this.getAttributes())\n\t\t\t.map(([key: string, attrValue: string]) => {\n\t\t\t\tconst preparedKey: string = this.prepareCase(key);\n\n\t\t\t\treturn attrValue ? `${preparedKey}=${attrValue}` : preparedKey;\n\t\t\t})\n\t\t\t.join(' ');\n\t}\n\n\tgetNewLineAfterOpeningTag(): string\n\t{\n\t\tif (\n\t\t\t!this.isInline()\n\t\t\t&& this.getScheme().isAllowNewLineAfterBlockOpeningTag()\n\t\t)\n\t\t{\n\t\t\tconst firstChild: ?ContentNode = this.getFirstChild();\n\t\t\tif (firstChild && firstChild.getName() !== '#linebreak')\n\t\t\t{\n\t\t\t\treturn '\\n';\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tgetNewLineBeforeClosingTag(): string\n\t{\n\t\tconst scheme: BBCodeScheme = this.getScheme();\n\t\tif (scheme.isAllowNewLineBeforeBlockClosingTag())\n\t\t{\n\t\t\tif (!this.isInline())\n\t\t\t{\n\t\t\t\tconst lastChild: ?ContentNode = this.getLastChild();\n\t\t\t\tif (lastChild && lastChild.getName() !== '#linebreak')\n\t\t\t\t{\n\t\t\t\t\treturn '\\n';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tTag.isListItem(this.getName())\n\t\t\t\t&& scheme.isAllowNewLineAfterListItem()\n\t\t\t)\n\t\t\t{\n\t\t\t\tconst lastChild: ContentNode = this.getParent().getLastChild();\n\t\t\t\tif (lastChild !== this)\n\t\t\t\t{\n\t\t\t\t\treturn '\\n';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tgetNewLineBeforeOpeningTag(): string\n\t{\n\t\tif (\n\t\t\t!this.isInline()\n\t\t\t&& this.hasParent()\n\t\t\t&& this.getScheme().isAllowNewLineBeforeBlockOpeningTag()\n\t\t)\n\t\t{\n\t\t\tconst previewsSibling: ContentNode = this.getPreviewsSibling();\n\t\t\tif (\n\t\t\t\tpreviewsSibling\n\t\t\t\t&& (\n\t\t\t\t\tText.isPlainTextNode(previewsSibling)\n\t\t\t\t\t|| Tag.isInline(previewsSibling.getName())\n\t\t\t\t)\n\t\t\t)\n\t\t\t{\n\t\t\t\treturn '\\n';\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tgetNewLineAfterClosingTag(): string\n\t{\n\t\tif (\n\t\t\t!this.isInline()\n\t\t\t&& this.hasParent()\n\t\t\t&& this.getScheme().isAllowNewLineAfterBlockClosingTag()\n\t\t)\n\t\t{\n\t\t\tconst nextSibling: ContentNode = this.getNextSibling();\n\t\t\tif (nextSibling && nextSibling.getName() !== '#linebreak')\n\t\t\t{\n\t\t\t\treturn '\\n';\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tgetContent(): string\n\t{\n\t\tif (Tag.isListItem(this.getName()))\n\t\t{\n\t\t\treturn this.getChildren()\n\t\t\t\t.reduceRight((acc: Array<ContentNode>, node: ContentNode) => {\n\t\t\t\t\tif (!Type.isArrayFilled(acc) && (node.getName() === '#linebreak' || node.getName() === '#tab'))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [node.toString(), ...acc];\n\t\t\t\t}, []);\n\t\t}\n\n\t\treturn this.getChildren()\n\t\t\t.map((child: ContentNode) => {\n\t\t\t\treturn child.toString();\n\t\t\t})\n\t\t\t.join('');\n\t}\n\n\tgetOpeningTag(): string\n\t{\n\t\tconst displayedName: string = this.getDisplayedName();\n\t\tconst tagValue: ElementNodeValue = this.toStringValue();\n\t\tconst attributes: JsonObject = this.toStringAttributes();\n\t\tconst formattedAttributes: string = Type.isStringFilled(attributes) ? ` ${attributes}` : '';\n\n\t\treturn `[${displayedName}${tagValue}${formattedAttributes}]`;\n\t}\n\n\tgetClosingTag(): string\n\t{\n\t\treturn `[/${this.getDisplayedName()}]`;\n\t}\n\n\tclone(options: { deep: boolean } = {}): ElementNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn new ElementNode({\n\t\t\tname: this.getName(),\n\t\t\tvoid: this.isVoid(),\n\t\t\tinline: this.isInline(),\n\t\t\tvalue: this.getValue(),\n\t\t\tattributes: { ...this.getAttributes() },\n\t\t\tscheme: this.getScheme(),\n\t\t\tchildren,\n\t\t});\n\t}\n\n\ttoString(): string\n\t{\n\t\tconst openingTag: string = this.getOpeningTag();\n\n\t\tif (this.isVoid())\n\t\t{\n\t\t\treturn openingTag;\n\t\t}\n\n\t\tif (Tag.isListItem(this.getName()))\n\t\t{\n\t\t\treturn `${openingTag}${this.getContent()}${this.getNewLineBeforeClosingTag()}`;\n\t\t}\n\n\t\tif (this.isInline())\n\t\t{\n\t\t\treturn `${openingTag}${this.getContent()}${this.getClosingTag()}`;\n\t\t}\n\n\t\treturn [\n\t\t\tthis.getNewLineBeforeOpeningTag(),\n\t\t\topeningTag,\n\t\t\tthis.getNewLineAfterOpeningTag(),\n\t\t\tthis.getContent(),\n\t\t\tthis.getNewLineBeforeClosingTag(),\n\t\t\tthis.getClosingTag(),\n\t\t\tthis.getNewLineAfterClosingTag(),\n\t\t].join('');\n\t}\n\n\ttoJSON(): SerializedElementNode\n\t{\n\t\treturn {\n\t\t\t...super.toJSON(),\n\t\t\tvalue: this.getValue(),\n\t\t\tattributes: this.getAttributes(),\n\t\t\tvoid: this.isVoid(),\n\t\t\tinline: this.isInline(),\n\t\t};\n\t}\n}\n","import { Node, privateMap, nameSymbol, type ContentNode } from './node';\nimport { ElementNode } from './element-node';\n\nexport type RootNodeOptions = {\n\tchildren: Array<Node>,\n};\n\nexport class RootNode extends ElementNode\n{\n\t[nameSymbol] = '#root';\n\n\tconstructor(options: RootNodeOptions)\n\t{\n\t\tsuper(options);\n\t\tprivateMap.get(this).type = Node.ROOT_NODE;\n\t\tRootNode.makeNonEnumerableProperty(this, 'value');\n\t\tRootNode.makeNonEnumerableProperty(this, 'void');\n\t\tRootNode.makeNonEnumerableProperty(this, 'inline');\n\t\tRootNode.makeNonEnumerableProperty(this, 'attributes');\n\t}\n\n\tgetParent(): null\n\t{\n\t\treturn null;\n\t}\n\n\tsetName(name: string)\n\t{}\n\n\tclone(options: { deep: boolean } = {}): RootNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn new RootNode({\n\t\t\tchildren,\n\t\t});\n\t}\n\n\ttoString(): string\n\t{\n\t\treturn this.getChildren()\n\t\t\t.map((child: ContentNode) => {\n\t\t\t\treturn child.toString();\n\t\t\t})\n\t\t\t.join('');\n\t}\n\n\ttoJSON(): any\n\t{\n\t\treturn this.getChildren().map((node: Node) => {\n\t\t\treturn node.toJSON();\n\t\t});\n\t}\n}\n","import { Node, nameSymbol, privateMap } from './node';\nimport { ElementNode } from './element-node';\n\nexport type FragmentNodeOptions = {\n\tchildren: Array<Node>,\n};\n\nexport class FragmentNode extends ElementNode\n{\n\t[nameSymbol]: string = '#fragment';\n\n\tconstructor(options: FragmentNodeOptions)\n\t{\n\t\tsuper(options);\n\t\tprivateMap.get(this).type = Node.FRAGMENT_NODE;\n\t\tFragmentNode.makeNonEnumerableProperty(this, 'value');\n\t\tFragmentNode.makeNonEnumerableProperty(this, 'void');\n\t\tFragmentNode.makeNonEnumerableProperty(this, 'inline');\n\t\tFragmentNode.makeNonEnumerableProperty(this, 'attributes');\n\t}\n\n\tsetName()\n\t{}\n\n\tclone(options: { deep: boolean } = {}): FragmentNode\n\t{\n\t\tconst children = (() => {\n\t\t\tif (options.deep)\n\t\t\t{\n\t\t\t\treturn this.getChildren().map((child) => {\n\t\t\t\t\treturn child.clone(options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn [];\n\t\t})();\n\n\t\treturn new FragmentNode({\n\t\t\tchildren,\n\t\t\tscheme: this.getScheme(),\n\t\t});\n\t}\n}\n","import { nameSymbol } from './node';\nimport { TextNode, contentSymbol, type TextNodeContent, type TextNodeOptions } from './text-node';\nimport { Text } from '../reference/text';\n\nexport class NewLineNode extends TextNode\n{\n\t[nameSymbol]: string = Text.NEW_LINE_NAME;\n\t[contentSymbol]: string = Text.NEW_LINE_CONTENT;\n\n\tconstructor(options: TextNodeOptions = {})\n\t{\n\t\tsuper(options);\n\t}\n\n\tsetContent(options: TextNodeContent)\n\t{}\n}\n","import { nameSymbol } from './node';\nimport { TextNode, contentSymbol, type TextNodeContent, type TextNodeOptions } from './text-node';\nimport { Text } from '../reference/text';\n\nexport class TabNode extends TextNode\n{\n\t[nameSymbol]: string = Text.TAB_NAME;\n\t[contentSymbol]: string = Text.TAB_CONTENT;\n\n\tconstructor(options: TextNodeOptions = {})\n\t{\n\t\tsuper(options);\n\t}\n\n\tsetContent(options: TextNodeContent)\n\t{}\n}\n","import { Type } from 'main.core';\nimport { RootNode, type RootNodeOptions } from '../nodes/root-node';\nimport { ElementNode, type ElementNodeOptions } from '../nodes/element-node';\nimport { FragmentNode, type FragmentNodeOptions } from '../nodes/fragment-node';\nimport { NewLineNode } from '../nodes/new-line-node';\nimport { TabNode } from '../nodes/tab-node';\nimport { TextNode, type TextNodeOptions } from '../nodes/text-node';\nimport { Node, type NodeOptions } from '../nodes/node';\nimport { BBCodeScheme } from '../scheme/scheme';\n\nexport type ModelFactoryOptions = {\n\tscheme: BBCodeScheme,\n};\n\nexport class ModelFactory\n{\n\t/** @private */\n\tscheme: BBCodeScheme;\n\n\tconstructor(options: ModelFactoryOptions = {})\n\t{\n\t\tif (Type.isObject(options.scheme))\n\t\t{\n\t\t\tthis.setScheme(options.scheme);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setScheme(new BBCodeScheme());\n\t\t}\n\t}\n\n\tsetScheme(scheme: BBCodeScheme)\n\t{\n\t\tthis.scheme = scheme;\n\t}\n\n\tgetScheme(): BBCodeScheme\n\t{\n\t\treturn this.scheme;\n\t}\n\n\tcreateRootNode(options: RootNodeOptions = {}): RootNode\n\t{\n\t\treturn new RootNode({ ...options, scheme: this.getScheme() });\n\t}\n\n\tcreateElementNode(options: ElementNodeOptions = {}): ElementNode\n\t{\n\t\treturn new ElementNode({ ...options, scheme: this.getScheme() });\n\t}\n\n\tcreateTextNode(options: TextNodeOptions = {}): TextNode\n\t{\n\t\tconst preparedOptions = Type.isString(options) ? { content: options } : options;\n\n\t\treturn new TextNode({ ...preparedOptions, scheme: this.getScheme() });\n\t}\n\n\tcreateNewLineNode(options: TextNodeOptions = {}): NewLineNode\n\t{\n\t\tconst preparedOptions = Type.isString(options) ? { content: options } : options;\n\n\t\treturn new NewLineNode({ ...preparedOptions, scheme: this.getScheme() });\n\t}\n\n\tcreateTabNode(options: TextNodeOptions = {}): TabNode\n\t{\n\t\tconst preparedOptions = Type.isString(options) ? { content: options } : options;\n\n\t\treturn new TabNode({ ...preparedOptions, scheme: this.getScheme() });\n\t}\n\n\tcreateFragmentNode(options: FragmentNodeOptions = {}): FragmentNode\n\t{\n\t\treturn new FragmentNode({ ...options, scheme: this.getScheme() });\n\t}\n\n\tcreateNode(options: NodeOptions = {}): Node\n\t{\n\t\treturn new Node({ ...options, scheme: this.getScheme() });\n\t}\n}\n"],"names":["privateMap","WeakMap","nameSymbol","Symbol","Node","constructor","options","children","set","delayedChildren","setScheme","scheme","setParent","parent","setName","name","setChildren","ELEMENT_NODE","TEXT_NODE","ROOT_NODE","FRAGMENT_NODE","freezeProperty","node","property","value","enumerable","Object","defineProperty","writable","configurable","makeNonEnumerableProperty","flattenChildren","Type","isArrayFilled","flatMap","getType","getChildren","get","getScheme","prepareCase","currentCase","getTagCase","toUpperCase","toLowerCase","isString","getName","getDisplayedName","mounted","hasParent","onNodeDidMount","getParent","type","Boolean","remove","removeChild","isArray","appendChild","getLastChild","at","getLastChildOfType","reverse","find","getLastChildOfName","getFirstChild","getFirstChildOfType","getFirstChildOfName","getPreviewsSibling","parentChildren","currentIndex","indexOf","getNextSibling","length","getChildrenCount","hasChildren","setDelayedChildren","addDelayedChildren","getDelayedChildren","hasDelayedChildren","flattenedChildren","forEach","push","prependChild","unshift","propagateChild","filter","reduce","acc","includes","replaceChild","targetNode","map","child","replace","clone","deep","toJSON","Tag","isInline","tagName","INLINE_TAGS","has","isBlock","BLOCK_TAGS","isList","LIST_TAGS","isListItem","LIST_ITEM_TAGS","BOLD","ITALIC","STRIKE","UNDERLINE","SIZE","COLOR","CENTER","LEFT","RIGHT","URL","IMG","PARAGRAPH","LIST","LIST_UL","LIST_OL","LIST_ITEM","LIST_ITEM_LI","TABLE","TABLE_ROW","TABLE_CELL","TABLE_HEAD_CELL","QUOTE","CODE","SPOILER","Set","Text","isAnyTextNode","TEXT_NAMES","isPlainTextNode","TEXT_NAME","isNewLineNode","NEW_LINE_NAME","isTabNode","TAB_NAME","isNewLineContent","content","NEW_LINE_CONTENT","isTabContent","TAB_CONTENT","isSpecialCharContent","SPECIAL_CHARS_CONTENT","childFilters","contentSymbol","TextNode","nodeOptions","setContent","isTextNodeContent","isNumber","decodeSpecialChars","replaceAll","getContent","getLength","String","Constructor","splitText","offset","TypeError","contentLength","rightContent","slice","leftNode","rightNode","toString","childConverters","BBCodeScheme","Map","allowedTags","propagateUnresolvedNodes","tagCase","LOWER_CASE","allowNewLineBeforeBlockOpeningTag","allowNewLineAfterBlockOpeningTag","allowNewLineBeforeBlockClosingTag","allowNewLineAfterBlockClosingTag","allowNewLineAfterListItem","setChildFilters","setChildConverters","isPlainObject","setAllowedTags","setPropagateUnresolvedNodes","setTagCase","setAllowNewLineBeforeBlockOpeningTag","newLineBeforeBlockOpeningTag","setAllowNewLineAfterBlockOpeningTag","newLineAfterBlockOpeningTag","setAllowNewLineBeforeBlockClosingTag","newLineBeforeBlockClosingTag","setAllowNewLineAfterBlockClosingTag","newLineAfterBlockClosingTag","setAllowNewLineAfterListItem","newLineAfterListItem","addAllowedTag","tag","isStringFilled","getAllowedTags","add","getChildFilters","getChildFilter","filters","childFiltersMap","entries","getChildConverters","getChildConverter","converters","convertersMap","converter","isBoolean","isPropagateUnresolvedNodes","allowedCases","isAllowNewLineBeforeBlockOpeningTag","isAllowNewLineAfterBlockOpeningTag","isAllowNewLineBeforeBlockClosingTag","isAllowNewLineAfterBlockClosingTag","isAllowNewLineAfterListItem","UPPER_CASE","ElementNode","attributes","void","inline","preparedOptions","setInline","setValue","setVoid","setAttributes","filterChildren","filteredChildren","resolved","unresolved","byTagFilter","isAllowed","inlineChildFilter","convertChildren","childConverter","getValue","isVoid","key","fromEntries","setAttribute","preparedName","isNil","getAttribute","getAttributes","convertedChildren","toStringValue","toStringAttributes","attrValue","preparedKey","join","getNewLineAfterOpeningTag","firstChild","getNewLineBeforeClosingTag","lastChild","getNewLineBeforeOpeningTag","previewsSibling","getNewLineAfterClosingTag","nextSibling","reduceRight","getOpeningTag","displayedName","tagValue","formattedAttributes","getClosingTag","openingTag","RootNode","FragmentNode","NewLineNode","TabNode","ModelFactory","isObject","createRootNode","createElementNode","createTextNode","createNewLineNode","createTabNode","createFragmentNode","createNode"],"mappings":"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"}