this.BX=this.BX||{};this.BX.UI=this.BX.UI||{};(function(t,e,i,r,o,n,s,a){"use strict";const l=r.BitrixVue.localComponent("drop-area",{mounted(){this.$root.getUploader().assignBrowse(this.$refs.dropArea)},template:`\n\t\t<div class="ui-tile-uploader-drop-area" ref="dropArea">\n\t\t\t<div class="ui-tile-uploader-drop-box">\n\t\t\t\t<label class="ui-tile-uploader-drop-label">{{\n\t\t\t\t\t$Bitrix.Loc.getMessage('TILE_UPLOADER_DROP_FILES_HERE')\n\t\t\t\t}}</label>\n\t\t\t\t\x3c!--<div class="ui-tile-uploader-settings"></div>--\x3e\n\t\t\t</div>\n\t\t</div>\n\t`});const p=r.BitrixVue.localComponent("tile-uploader.uploader-loader",{props:{progress:{type:Number,default:0},width:{type:Number,default:45},lineSize:{type:Number,default:3},colorTrack:{type:String,default:"#eeeff0"},colorBar:{type:String,default:"#2fc6f6"},rotation:{type:Boolean,default:true}},data(){return{loader:null}},mounted(){this.createProgressbar()},watch:{progress(){this.updateProgressbar()}},methods:{createProgressbar(){this.loader=new e.ProgressRound({width:this.width,lineSize:this.lineSize,colorBar:this.colorBar,colorTrack:this.colorTrack,rotation:this.rotation,value:this.progress,color:e.ProgressRound.Color.SUCCESS});this.loader.renderTo(this.$refs.container)},updateProgressbar(){if(!this.loader){this.createProgressbar()}this.loader.update(this.progress)}},template:`<span ref="container"></span>`});const u=r.BitrixVue.localComponent("ui.uploader.error-popup",{props:{error:{type:[Object,String]},alignArrow:{type:Boolean,default:true},popupOptions:{type:Object,default(){return{}}}},data(){return{errorPopup:null}},watch:{error(t){if(this.errorPopup){this.errorPopup.destroy()}this.errorPopup=this.createPopup(t);this.errorPopup.show()}},mounted(){if(this.error){this.errorPopup=this.createPopup(this.error);this.errorPopup.show()}},beforeDestroy(){if(this.errorPopup){this.errorPopup.destroy();this.errorPopup=null}},methods:{createContent(t){if(n.Type.isStringFilled(t)){return t}else if(n.Type.isObject(t)){return t.getMessage()+"<br>"+t.getDescription()}return""},createPopup(t){const e=this.createContent(t);let r;if(this.alignArrow&&n.Type.isElementNode(this.popupOptions.bindElement)){const o=this.popupOptions.bindElement;const n=o.offsetWidth;r={cacheable:false,animation:"fading-slide",content:e,events:{onDestroy:()=>{this.$emit("onDestroy",t);this.errorPopup=null},onShow:function(t){const e=t.getTarget();e.getPopupContainer().style.display="block";const r=e.getPopupContainer().offsetWidth;const o=n/2-r/2;const s=i.Popup.getOption("angleLeftOffset")-i.Popup.getOption("angleMinTop");e.setAngle({offset:r/2-s});e.setOffset({offsetLeft:o+i.Popup.getOption("angleLeftOffset")})}}}}else{r={cacheable:false,animation:"fading-slide",content:e,events:{onDestroy:()=>{this.$emit("onDestroy",t);this.errorPopup=null}}}}const o=Object.assign({},r,this.popupOptions);return new i.Popup(o)}},template:"<span></span>"});const d=r.BitrixVue.localComponent("ui.uploader.file-icon",{props:{name:{type:String},type:{type:String},color:{type:String},size:{type:Number,default:36}},mounted(){const t=new o.FileIcon({name:this.name,fileType:this.type,color:this.color,size:this.size});t.renderTo(this.$el)},template:"<span></span>"});const m=r.BitrixVue.localComponent("tile",{components:{UploadLoader:p,ErrorPopup:u,FileIconComponent:d},props:{item:{type:Object,default:{}}},data(){return{tileId:"tile-uploader-"+n.Text.getRandom().toLowerCase(),menu:null,showError:false}},computed:{FileStatus:()=>a.FileStatus,status(){if(this.item.status===a.FileStatus.UPLOADING){return this.item.progress+"%"}else if(this.item.status===a.FileStatus.LOAD_FAILED||this.item.status===a.FileStatus.UPLOAD_FAILED){return n.Loc.getMessage("TILE_UPLOADER_ERROR_STATUS")}else{return n.Loc.getMessage("TILE_UPLOADER_WAITING_STATUS")}},fileSize(){if([a.FileStatus.LOADING,a.FileStatus.LOAD_FAILED].includes(this.item.status)&&this.item.origin===a.FileOrigin.SERVER){return""}return this.item.sizeFormatted},errorPopupOptions(){const t=this.$refs.container;const e=t.offsetWidth;return{bindElement:t,darkMode:true,offsetTop:6,minWidth:e,maxWidth:500}},clampedFileName(){const t=this.item.originalName.split(".");if(t.length>1){t.pop()}const e=t.join(".");if(e.length>27){return e.substr(0,20)+"..."+e.substr(-5)}return e}},beforeDestroy(){if(this.menu){this.menu.destroy();this.menu=null}},methods:{remove(){const t=this.$root.getWidget();t.remove(this.item.id)},handleMouseEnter(t){if(t.error){this.showError=true}},handleMouseLeave(){this.showError=false},showMenu(){if(this.menu){this.menu.destroy()}this.menu=i.MenuManager.create({id:this.tileId,bindElement:this.$refs.menu,angle:true,offsetLeft:13,minWidth:100,cacheable:false,items:[{text:n.Loc.getMessage("TILE_UPLOADER_MENU_DOWNLOAD"),href:this.item.downloadUrl},{text:n.Loc.getMessage("TILE_UPLOADER_MENU_REMOVE"),onclick:()=>{this.remove()}}],events:{onDestroy:()=>this.menu=null}});this.menu.show()}},template:`\n\t<transition name="ui-tile-uploader-item">\n\t\t<div\n\t\t\tclass="ui-tile-uploader-item"\n\t\t\t:class="['ui-tile-uploader-item--' + item.status, { '--image': item.isImage } ]"\n\t\t\tref="container"\n\t\t>\n\t\t\t<ErrorPopup v-if="item.error && showError" :error="item.error" :popup-options="errorPopupOptions"/>\n\t\t\t<div \n\t\t\t\tclass="ui-tile-uploader-item-content"\n\t\t\t\t@mouseenter="handleMouseEnter(item)" \n\t\t\t\t@mouseleave="handleMouseLeave(item)"\n\t\t\t>\n\t\t\t\t<div v-if="item.status !== FileStatus.COMPLETE" class="ui-tile-uploader-item-state">\n\t\t\t\t\t<div class="ui-tile-uploader-item-loader" v-if="item.status === FileStatus.UPLOADING">\n\t\t\t\t\t\t<UploadLoader :progress="item.progress" :width="20" colorTrack="#73d8f8" colorBar="#fff" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-else class="ui-tile-uploader-item-state-icon"></div>\n\t\t\t\t\t<div class="ui-tile-uploader-item-status">\n\t\t\t\t\t\t<div class="ui-tile-uploader-item-status-name">{{status}}</div>\n\t\t\t\t\t\t<div v-if="fileSize" class="ui-tile-uploader-item-state-desc">{{fileSize}}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="ui-tile-uploader-item-state-remove" @click="remove" key="aaa"></div>\n\t\t\t\t</div>\n\t\t\t\t<template v-else>\n\t\t\t\t\t<div class="ui-tile-uploader-item-remove" @click="remove" key="remove"></div>\n\t\t\t\t\t<div class="ui-tile-uploader-item-actions" key="actions">\n\t\t\t\t\t\t<div class="ui-tile-uploader-item-menu" @click="showMenu" ref="menu"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t\t<div class="ui-tile-uploader-item-preview">\n\t\t\t\t\t<div\n\t\t\t\t\t\tv-if="item.isImage"\n\t\t\t\t\t\tclass="ui-tile-uploader-item-image"\n\t\t\t\t\t\t:class="{ 'ui-tile-uploader-item-image-default': item.previewUrl === null }"\n\t\t\t\t\t\t:style="{ backgroundImage: item.previewUrl !== null ? 'url(' + item.previewUrl + ')' : '' }">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div \n\t\t\t\t\t\tv-else-if="item.name && item.status !== FileStatus.LOADING" \n\t\t\t\t\t\tclass="ui-tile-uploader-item-file-icon"\n\t\t\t\t\t>\n\t\t\t\t\t\t<FileIconComponent :name="item.extension" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div \n\t\t\t\t\t\tv-else \n\t\t\t\t\t\tclass="ui-tile-uploader-item-file-default"\n\t\t\t\t\t>\n\t\t\t\t\t\t<FileIconComponent :name="item.extension ? item.extension : '...'" :size="36" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div v-if="item.originalName" class="ui-tile-uploader-item-name-box" :title="item.originalName">\n\t\t\t\t\t<div class="ui-tile-uploader-item-name">\n\t\t\t\t\t\t<span class="ui-tile-uploader-item-name-title">{{clampedFileName}}</span>\x3c!--\n\t\t\t\t\t\t--\x3e<span v-if="item.extension" class="ui-tile-uploader-item-name-extension">.{{item.extension}}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</transition>\n\t`});const c=r.BitrixVue.localComponent("tile-list",{components:{TileItem:m},props:{items:{type:Array,default:[]}},template:`\n\t\t<div class="ui-tile-uploader-items">\n\t\t\t<TileItem v-for="item in items" :key="item.id" :item="item" />\n\t\t</div>\n\t`});const h={directives:{drop:{bind(t,e,i){function r(){i.context.dragOver=true;t.classList.add("--drag-over")}function o(){i.context.dragOver=false;t.classList.remove("--drag-over")}let s=null;n.Event.bind(t,"dragenter",(t=>{t.preventDefault();t.stopPropagation();s=t.target;r()}));n.Event.bind(t,"dragleave",(t=>{t.preventDefault();t.stopPropagation();if(s===t.target){o()}}));n.Event.bind(t,"drop",(t=>{o()}))},unbind(t,e,i){i.context.dragOver=false;n.Event.unbindAll(t,"dragenter");n.Event.unbindAll(t,"dragleave");n.Event.unbindAll(t,"drop")}}},data(){return{dragOver:false}}};const f=r.BitrixVue.localComponent("tile-uploader",{components:{DropArea:l,TileList:c,ErrorPopup:u},mixins:[h],props:{items:{type:Array,default:[]}},data(){return{uploaderError:null}},computed:{errorPopupOptions(){return{bindElement:this.$refs.container,closeIcon:true,padding:20,offsetLeft:45,angle:true,darkMode:true,bindOptions:{position:"top",forceTop:true}}}},created(){this.$Bitrix.eventEmitter.subscribe("Uploader:onError",(t=>{this.uploaderError=t.getData().error}));this.$Bitrix.eventEmitter.subscribe("Item:onAdd",(t=>{this.uploaderError=null}));this.$Bitrix.eventEmitter.subscribe("Item:onRemove",(t=>{this.uploaderError=null}))},mounted(){this.$root.getUploader().assignDropzone(this.$refs.container)},template:`\n\t\t<div class="ui-tile-uploader" ref="container" v-drop>\n\t\t\t<ErrorPopup \n\t\t\t\tv-if="uploaderError"\n\t\t\t\t:alignArrow="false"\n\t\t\t\t:error="uploaderError"\n\t\t\t\t:popup-options="errorPopupOptions" \n\t\t\t\t@onDestroy="uploaderError = null" \n\t\t\t/>\n\t\t\t<template v-if="items.length === 0">\n\t\t\t\t<DropArea />\n\t\t\t</template>\n\t\t\t<template v-else>\n\t\t\t\t<TileList :items="items"></TileList>\n\t\t\t\t<DropArea />\n\t\t\t</template>\n\t\t</div>\n\t`});class v extends a.VueUploader{constructor(t,e){super(t);const i=n.Type.isPlainObject(e)?Object.assign({},e):{}}getRootComponentId(){return f}}t.TileWidget=v;t.TileList=c;t.FileIcon=d;t.ErrorPopup=u;t.UploadLoader=p;t.DragOverMixin=h})(this.BX.UI.Uploader=this.BX.UI.Uploader||{},BX.UI,BX.Main,BX,BX.UI.Icons.Generator,BX,BX.Event,BX.UI.Uploader);
//# sourceMappingURL=ui.uploader.tile-widget.bundle.map.js