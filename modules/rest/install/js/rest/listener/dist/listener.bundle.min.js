this.BX=this.BX||{};(function(e,t){"use strict";function i(e,t){a(e,t);t.add(e)}function s(e,t,i){a(e,t);t.set(e,i)}function a(e,t){if(t.has(e)){throw new TypeError("Cannot initialize the same private elements twice on an object")}}function l(e,t,i){if(!t.has(e)){throw new TypeError("attempted to get private field on non-instance")}return i}var r=new WeakMap;var n=new WeakMap;var b=new WeakMap;var c=new WeakSet;var p=function(e){babelHelpers.inherits(t,e);function t(e,a){var l;babelHelpers.classCallCheck(this,t);l=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(t).call(this));i(babelHelpers.assertThisInitialized(l),c);s(babelHelpers.assertThisInitialized(l),r,{writable:true,value:void 0});s(babelHelpers.assertThisInitialized(l),n,{writable:true,value:void 0});s(babelHelpers.assertThisInitialized(l),b,{writable:true,value:false});l.setEventNamespace("BX.Rest.Listener");babelHelpers.classPrivateFieldSet(babelHelpers.assertThisInitialized(l),r,e);babelHelpers.classPrivateFieldSet(babelHelpers.assertThisInitialized(l),n,a);return l}babelHelpers.createClass(t,[{key:"listen",value:function e(){var t=this;if(babelHelpers.classPrivateFieldGet(this,b)){return}BX.PULL.subscribe({type:BX.PullClient.SubscriptionType.Server,moduleId:"rest",callback:function e(i){l(t,c,o).call(t,i)}});babelHelpers.classPrivateFieldSet(this,b,true)}}]);return t}(t.EventEmitter);function o(e){if(e.command===babelHelpers.classPrivateFieldGet(this,r)){this.emit("pull");babelHelpers.classPrivateFieldGet(this,n).call(this,e)}}e.Listener=p})(this.BX.Rest=this.BX.Rest||{},BX.Event);
//# sourceMappingURL=listener.bundle.map.js