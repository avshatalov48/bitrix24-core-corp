jn.define("stafftrack/data-managers/shift-manager",((t,s,e)=>{const{Type:i}=t("type");const{EventEmitter:a}=t("event-emitter");const{ShiftAjax:n,DepartmentStatisticsAjax:h}=t("stafftrack/ajax");const{OptionManager:r}=t("stafftrack/data-managers/option-manager");const{SettingsManager:o}=t("stafftrack/data-managers/settings-manager");const{DateHelper:d}=t("stafftrack/date-helper");const{ShiftModel:f,PullCommandEnum:c}=t("stafftrack/model/shift");class m extends a{constructor(){super();this.setUid("Stafftrack.ShiftManager");this.mainData=null;this.usersShifts={};this.departments={};this.departmentMonths={};this.pullSubscribe()}pullSubscribe(){BX.PULL.subscribe({moduleId:"stafftrack",callback:t=>{const s=BX.prop.getString(t,"command","");const e=BX.prop.getObject(t,"params",{});if(s===c.SHIFT_ADD.getValue()){this.addShiftToCache(e.shift,e.departmentIds)}if(s===c.SHIFT_UPDATE.getValue()){this.updateShiftCache(e.shift,e.departmentIds)}if(s===c.SHIFT_DELETE.getValue()){this.deleteShiftFromCache(new f(e.shift).getId())}this.emit("updated")}})}async getMain(t){if(!this.mainData){this.mainData=await this.loadMain(t);r.setOptions(this.mainData.options);o.setEnabledBySettings(this.mainData.config.enabledBySettings);o.setGeoEnabled(this.mainData.config.isCheckInGeoEnabled);o.setTimemanAvailable(this.mainData.config.timemanAvailable)}return this.mainData}async loadMain(t){this.loadMainPromise??=n.loadMain(d.getCurrentDayCode());const{data:s}=await this.loadMainPromise;return s}async addShift(t,s){this.mainData.currentShift=t;const{data:e}=await n.add(t);this.addShiftToCache(e.shift,s.map((t=>t.id)));return e}addShiftToCache(t,s){const e=new f(t);if(e.getUserId()===this.mainData?.userInfo.id){this.mainData.currentShift=t}if(this.getCachedShiftById(e.getId())){return}const i=e.getUserId();const a=d.getMonthCode(e.getShiftDate());if(this.usersShifts[i]?.[a]){this.usersShifts[i][a].push(e)}for(const t of s){if(this.departments[t]){this.departments[t].shifts.push(e)}if(this.departmentMonths[t]?.[a]){const s=this.departmentMonths[t][a];s.find((t=>t.userId===i)).checkinCount++}}}async updateShift(t,s){const e=s.map((t=>t.id));this.updateShiftCache(t,e);const{data:i}=await n.update(t.id,t);this.updateShiftCache(i.shift,e);return i}updateShiftCache(t,s){const e=new f(t);if(this.mainData?.currentShift&&this.mainData.currentShift.id===e.getId()){this.mainData.currentShift=t}if(!this.getCachedShiftById(e.getId())){return}const i=e.getUserId();const a=d.getMonthCode(e.getShiftDate());if(this.usersShifts[i]?.[a]){this.usersShifts[i][a]=this.usersShifts[i][a].map((t=>t.getId()===e.getId()?e:t))}for(const t of s){if(this.departments[t]){this.departments[t].shifts=this.departments[t].shifts.map((t=>t.getId()===e.getId()?e:t))}}}async deleteShift(t){const s=await n.delete(t);this.deleteShiftFromCache(t);return s}deleteShiftFromCache(t){const s=this.getCachedShiftById(t);if(!s){return}const e=s.getUserId();const i=d.getMonthCode(s.getShiftDate());if(this.usersShifts[e]?.[i]){const t=this.usersShifts[e][i];this.usersShifts[e][i]=t.filter((t=>t.getId()!==s.getId()))}for(const s of Object.keys(this.departments)){const e=this.departments[s].shifts;this.departments[s].shifts=e.filter((s=>s.getId()!==t))}for(const t of Object.keys(this.departmentMonths)){const s=this.departmentMonths[t][i];s.find((t=>t.userId===e)).checkinCount--}}getCachedShiftById(t){for(const s of Object.keys(this.usersShifts)){for(const e of Object.keys(this.usersShifts[s])){const i=this.usersShifts[s][e].find((s=>s.getId()===t));if(i){return i}}}for(const s of Object.keys(this.departments)){const e=this.departments[s].shifts.find((s=>s.getId()===t));if(e){return e}}return null}hasUserShiftsForMonth(t,s){return!i.isNil(this.getCachedUserShiftsForMonth(t,s))}getCachedUserShiftsForMonth(t,s){return this.usersShifts[t]?.[s]}async getUserShiftsForMonth(t,s){this.usersShifts[t]??={};this.usersShifts[t][s]??=await this.loadUserShiftsForMonth(t,s);return this.usersShifts[t][s]}async loadUserShiftsForMonth(t,s){const e=d.getDateFromMonthCode(s);const i=new Date(e.getFullYear(),e.getMonth(),1);const a=new Date(e.getFullYear(),e.getMonth()+1,0);this.usersShiftPromises??={};this.usersShiftPromises[t]??={};this.usersShiftPromises[t][s]??=n.list({DATE_FROM:d.getDayCode(i),DATE_TO:d.getDayCode(a),USER_ID:t});const{data:h}=await this.usersShiftPromises[t][s];return h.shiftList.map((t=>new f(t)))}hasDepartmentMonthStatistics(t,s){return!i.isNil(this.departmentMonths[t])&&!i.isNil(this.departmentMonths[t][s])}hasDepartmentStatistics(t){return!i.isNil(this.departments[t])}async getDepartmentMonthStatistics(t,s){this.departmentMonths[t]??={};this.departmentMonths[t][s]??=await this.loadDepartmentMonthStatistics(t,s);return this.departmentMonths[t][s]}async loadDepartmentMonthStatistics(t,s){this.departmentMonthsPromises??={};this.departmentMonthsPromises[t]??={};this.departmentMonthsPromises[t][s]??=h.getForMonth(t,s);const{data:e}=await this.departmentMonthsPromises[t][s];return e.statistics.map((t=>({userId:parseInt(t.id,10),checkinCount:parseInt(t.checkinCount,10)})))}async getDepartmentStatistics(t){this.departments[t]??=await this.loadDepartmentStatistics(t);return this.departments[t]}async loadDepartmentStatistics(t){this.departmentPromises??={};this.departmentPromises[t]??=h.get(t,d.getCurrentDayCode());const{data:s}=await this.departmentPromises[t];return{users:s.users.map((t=>({...t,id:parseInt(t.id,10)}))),shifts:s.shifts.map((t=>new f(t)))}}}e.exports={ShiftManager:new m}}));
//# sourceMappingURL=extension.map.js