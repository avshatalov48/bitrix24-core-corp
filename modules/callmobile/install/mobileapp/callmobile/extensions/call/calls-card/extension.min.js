jn.define("call/calls-card",((e,t,i)=>{const{CardContent:s}=e("call/calls-card/card-content");const{AudioPlayer:a}=e("native/media");const{CallsCardType:r,TelephonyUiEvent:o}=e("call/calls-card/card-content/enum");const{numberpad:n}=e("native/calls");class d{constructor(e){this.props=e;this.rootWidget=null;this.player=new a;this.cardContentRef=null;this.startTime=null;this.startPauseTime=null;this.pauseTime=null;this.indicatorTimer=null;this.viewPromise=null;this.expandHandler=this.expand.bind(this);this.rollUpHandler=this.rollUp.bind(this);this.onUiEventHandler=this.onUiEvent.bind(this);this.onCloseCardViewHandler=this.closeCardView.bind(this);this.onPauseChangedHandler=this.onPauseChanged.bind(this);this.onNumpadVoiceCharClickHandler=this.onNumpadVoiceCharClick.bind(this);n.on("voiceChar",this.onNumpadVoiceCharClickHandler);n.on("call",(e=>{BX.postComponentEvent("onPhoneTo",[{number:e}],"calls")}))}show(e){this.updateCardProps(e);if(this.viewPromise){return this.viewPromise}this.viewPromise=new Promise(((t,i)=>{this.openWidgetLayer().then((()=>{this.rootWidget.showComponent(new s({ref:e=>this.cardContentRef=e,layoutWidget:this.rootWidget,crmContactName:e.crmContactName,crmCompanyName:e.crmCompanyName,phoneNumber:e.phoneNumber,status:e.status,statusColor:e.statusColor,avatarUrl:e.avatarUrl,type:e.type,crmData:e.crmData,recordText:e.recordText,crmStatus:e.crmStatus,showName:e.showName,onClose:this.onCloseCardViewHandler,onUiEvent:this.onUiEventHandler,startTime:this.startTime,onPauseChanged:this.onPauseChangedHandler,onRollUp:this.rollUpHandler,isNumberHidden:e.isNumberHidden}));this.viewPromise=null})).catch((e=>{this.viewPromise=null;return i(e)}))}));return this.viewPromise}onUiEvent(e){if(e.eventName===o.onNumpadOpen){this.showNumpadShortForm()}else if(this.props.onUiEvent){this.props.onUiEvent(e)}}prepareWidgetLayer(){return new Promise(((e,t)=>{if(uicomponent.widgetLayer()&&this.rootWidget){return e(this.rootWidget)}uicomponent.createWidgetLayer("layout",{backdrop:{}}).then((t=>e(t))).catch((e=>t(e)))}))}openWidgetLayer(){return new Promise(((e,t)=>{this.prepareWidgetLayer().then((e=>{this.rootWidget=e;return uicomponent.widgetLayer().show()})).then((()=>e())).catch((e=>t(e)))}))}update(e){this.updateCardProps(e);if(this.cardContentRef){this.cardContentRef.update(e)}}closeCardView(){return uicomponent.widgetLayer().close().then((()=>{this.rootWidget=null}))}close(){if(this.indicatorView){this.closeIndicator()}else{this.closeCardView()}}rollUp(){device.setProximitySensorEnabled(false);this.hideCardView().then((()=>{this.showIndicator()}))}hideCardView(){return uicomponent.widgetLayer().hide()}showCardView(){return uicomponent.widgetLayer().show()}showNumpad(){this.showNumpadFullForm()}closeNumpad(){}playSound({soundId:e}){this.player.playSound(e)}stopSound(){this.player.stop()}startTimer(){this.startTime=new Date;if(this.cardContentRef){this.cardContentRef.setStartTime(this.startTime);if(this.indicatorView){this.updateIndicator()}}}onPauseChanged(e){this.paused=e.selected;if(this.paused){this.startPauseTime=new Date}else{this.pauseTime=this.pauseTime+(new Date-this.startPauseTime)}this.cardContentRef.updateTimerData({paused:this.paused,pauseTime:this.pauseTime})}pauseTimer(){this.startTime=null;this.pauseTime=null;this.startPauseTime=null;this.update({startTime:this.startTime,pauseTime:this.pauseTime,startPauseTime:this.startPauseTime})}expand(){device.setProximitySensorEnabled(true);this.closeIndicator();this.showCardView()}cancelDelayedClosing(){}showIndicator(){this.indicatorView=callInterface.getIndicator(CallUI.IndicatorCode.EXTERNAL);this.indicatorView.on("tap",this.expandHandler);this.updateIndicator();this.indicatorView.show()}updateIndicator(){if(this.props.avatarUrl){this.indicatorView.imageUrl=this.props.avatarUrl}this.indicatorView.setMode(this.props.type===r.incoming?"incoming":"outgoing");this.indicatorView.hold(this.paused);if(this.startTime===null){this.indicatorView.setTime("00:00")}else{this.indicatorView.setTime(this.getTimerValue());if(!this.paused){this.setIndicatorTimer()}}}setIndicatorTimer(){this.indicatorTimer=setInterval((()=>{this.indicatorView.setTime(this.getTimerValue())}),500)}getTimerValue(){if(this.paused){return CallUtil.formatSeconds((this.startPauseTime-this.startTime-this.pauseTime)/1e3)}return CallUtil.formatSeconds(((new Date).getTime()-this.startTime-this.pauseTime)/1e3)}setUiMicEnabled(){}updateCardProps(e){if(e){this.props={...this.props,...e}}}onNumpadVoiceCharClick(e){this.onUiEvent({eventName:o.onNumpadButtonClicked,params:e})}showNumpadShortForm(){n.showShortForm()}showNumpadFullForm(){n.showFullForm()}closeIndicator(){this.indicatorView.close();this.indicatorView=null;clearInterval(this.indicatorTimer)}updateHeader(e){}updateMiddle(e){}updateFooter(e){}}i.exports={CallsCardController:d,CardContent:s}}));
//# sourceMappingURL=extension.map.js