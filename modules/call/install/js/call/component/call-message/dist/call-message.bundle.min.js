this.BX=this.BX||{};this.BX.Call=this.BX.Call||{};(function(t,e,s,a,n,i,l,o,r,c){"use strict";const g={start:"START",finish:"FINISH",declined:"DECLINED",busy:"BUSY",missed:"MISSED"};const d={name:"CallMessage",components:{BaseMessage:n.BaseMessage,MessageHeader:a.MessageHeader},directives:{hint:e.hint},props:{item:{type:Object,required:true},dialogId:{type:String,required:true},withTitle:{type:Boolean,default:true}},data(){return{showHint:false}},created(){this.hintTimeout=null},computed:{message(){return this.item},componentParams(){return this.item.componentParams},messageIconClasses(){const t=["bx-call-message__icon"];switch(this.componentParams.messageType){case g.start:t.push("bx-call-message__icon--secondary");break;case g.finish:t.push("bx-call-message__icon--primary");break;case g.declined:case g.busy:case g.missed:t.push("bx-call-message__icon--danger");break;default:t.push("bx-call-message__icon--secondary");break}return t},messageText(){return this.componentParams.messageText},formattedDate(){return i.DateFormatter.formatByCode(this.message.date,i.DateCode.shortTimeFormat)},currentCall(){return l.CallManager.getInstance().getCurrentCall()},hasActiveCurrentCall(){return l.CallManager.getInstance().hasActiveCurrentCall(this.dialogId)},hasActiveAnotherCall(){return l.CallManager.getInstance().hasActiveAnotherCall(this.dialogId)},dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isConference(){return this.dialog.type===r.ChatType.videoconf},hintContent(){if(!this.showHint){return null}return{text:this.loc("CALL_MESSAGE_HAS_ACTIVE_CALL_HINT"),popupOptions:{bindOptions:{position:"top"},angle:{position:"bottom"},targetContainer:document.body,offsetLeft:65,offsetTop:0}}}},methods:{loc(t,e={}){return s.Loc.getMessage(t,e)},onMessageClick(){if(this.hasActiveAnotherCall){this.showHint=true;clearTimeout(this.hintTimeout);this.hintTimeout=setTimeout((()=>this.showHint=false),1e4);return}this.componentParams.messageType===g.start?c.Analytics.getInstance().onStartCallMessageClick({dialog:this.dialog}):c.Analytics.getInstance().onFinishCallMessageClick({dialog:this.dialog});this.isConference?o.Messenger.openConference({code:this.dialog.public.code}):o.Messenger.startVideoCall(this.dialogId)}},template:`\n\t\t<BaseMessage\n\t\t\t:dialogId="dialogId"\n\t\t\t:item="item"\n\t\t\t:withContextMenu="false"\n\t\t\t:withBackground="true"\n\t\t\t:withReactions="false"\n\t\t\tclass="bx-call-message__scope"\n\t\t>\n\t\t\t<div class="bx-call-message__container">\n\t\t\t\t<div class="bx-call-message__content-wrapper">\n\t\t\t\t\t<MessageHeader :withTitle="withTitle" :item="item" />\n\t\t\t\t\t<div :key="showHint" class="bx-call-message__content" v-hint="hintContent" @click="onMessageClick">\n\t\t\t\t\t\t<div :class="messageIconClasses"></div>\n\t\t\t\t\t\t<div class="bx-call-message__text-container">\n\t\t\t\t\t\t\t<div class="bx-call-message__text">{{ messageText }}</div>\n\t\t\t\t\t\t\t<div class="bx-im-message-status__date bx-call-message__date">\n\t\t\t\t\t\t\t\t{{ formattedDate }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</BaseMessage>\n\t`};t.CallMessage=d})(this.BX.Call.Component=this.BX.Call.Component||{},BX.Vue3.Directives,BX,BX.Messenger.v2.Component.Message,BX.Messenger.v2.Component.Message,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Const,BX.Call.Lib);
//# sourceMappingURL=call-message.bundle.map.js