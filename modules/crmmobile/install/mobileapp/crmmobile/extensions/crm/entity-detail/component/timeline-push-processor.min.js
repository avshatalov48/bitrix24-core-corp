jn.define("crm/entity-detail/component/timeline-push-processor",((t,n,e)=>{const{debounce:o}=t("utils/function");const i="timeline_item_action";let s=null;const a=(t,n,e)=>{if(t!=="main"){return}const{timelinePushTag:o}=e.getComponentParams();if(!o){return}e.customEventEmitter.on("DetailCard::onBeforeUnmount",(()=>s&&s()));c(o,e)};const c=(t,n)=>{s=BX.PULL.subscribe({moduleId:"crm",callback:e=>{const o=BX.prop.getString(e,"command","");const s=BX.prop.getObject(e,"params",{});const a=BX.prop.getString(s,"TAG","");if(o===i&&a===t){r(s,n)}}})};const r=(t,n)=>{const e=n.getTab("timeline");if(e&&e.isReady()){e.processPushMessage(t)}else{m(n);if(t.stream==="scheduled"){l(n)}}};const m=o((t=>t.loadTabCounters()),500,this);const d=t=>{if(!t.hasEntityModel()){return}const{entityTypeId:n,entityId:e,categoryId:o}=t.getComponentParams();const i={json:{entityTypeId:n,entityId:e,categoryId:o}};BX.ajax.runAction(t.getActionEndpoint("loadToDoNotificationParams"),i).then((({data:n})=>{if(n){t.setComponentParams({todoNotificationParams:n})}})).catch((t=>{console.warn("Unable to load ToDo notification params",t)}))};const l=o((t=>d(t)),500,this);e.exports={listenTimelinePush:a}}));
//# sourceMappingURL=timeline-push-processor.map.js