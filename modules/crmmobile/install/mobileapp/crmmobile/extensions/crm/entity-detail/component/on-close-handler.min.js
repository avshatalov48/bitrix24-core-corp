jn.define("crm/entity-detail/component/on-close-handler",((e,t,n)=>{const{CategoryStorage:o}=e("crm/storage/category");const{TimelineScheduler:r}=e("crm/timeline/scheduler");const{Haptics:i}=e("haptics");const s=e=>{if(e.isNewEntity()||e.isReadonly()||!e.hasEntityModel()){return Promise.resolve()}const{todoNotificationParams:t}=e.getComponentParams();if(!t){return Promise.resolve()}const{isSkipped:n,plannedActivityCounter:o}=t;if(n||o>0){return Promise.resolve()}if(c(e)){return Promise.resolve()}return a(e)};const c=e=>{const{entityTypeId:t,categoryId:n}=e.getComponentParams();const r=o.getCategory(t,n);if(!r){return true}const i=e.getFieldFromModel("STAGE_ID");if(!i){return true}return[...r.successStages||[],...r.failureStages||[]].some((({id:e})=>e===i))};const a=e=>{const{entityTypeId:t,entityId:n,categoryId:o}=e.getComponentParams();return new Promise((e=>{const s=new r({entity:{id:n,typeId:t,categoryId:o},onActivityCreate:e,onSkip:e,onCancel:e});s.openActivityReminder();i.notifyWarning()}))};n.exports={onCloseHandler:s}}));
//# sourceMappingURL=on-close-handler.map.js