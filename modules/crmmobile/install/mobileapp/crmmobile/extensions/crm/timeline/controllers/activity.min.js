jn.define("crm/timeline/controllers/activity",((e,t,i)=>{const{Loc:c}=e("loc");const{TimelineBaseController:r}=e("crm/controllers/base");const{ActivityViewer:n}=e("crm/timeline/services/activity-viewer");const{Alert:o,ButtonType:s}=e("alert");const a={DELETE:"Activity:Delete",VIEW:"Activity:View"};class l extends r{static getSupportedActions(){return Object.values(a)}onItemAction({action:e,actionParams:t={}}){switch(e){case a.DELETE:return this.deleteActivity(t);case a.VIEW:return this.viewActivity(t);default:return}}deleteActivity({activityId:e,ownerId:t,ownerTypeId:i,confirmationText:r}){if(!e){return}const n={activityId:e,ownerTypeId:i,ownerId:t};if(r){o.confirm("",r,[{text:c.getMessage("CRM_TIMELINE_CONFIRM_REMOVE"),type:s.DESTRUCTIVE,onPress:()=>this.executeDeleteAction(n)},{type:s.CANCEL}])}else{this.executeDeleteAction(n)}}viewActivity({activityId:e}){if(!e){return}const t=new n({activityId:e,entity:this.entity});t.open()}executeDeleteAction(e={}){const t="crm.timeline.activity.delete";this.item.showLoader();BX.ajax.runAction(t,{data:e}).catch((e=>{this.item.hideLoader();void ErrorNotifier.showError(e.errors[0].message)}))}}i.exports={TimelineActivityController:l}}));
//# sourceMappingURL=activity.map.js