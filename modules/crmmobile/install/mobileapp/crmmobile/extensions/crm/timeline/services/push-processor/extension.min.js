jn.define("crm/timeline/services/push-processor",((e,t,s)=>{const{TimelineStreamScheduled:r}=e("crm/timeline/stream");const i={PINNED:"pinned",PINNED_ALIAS:"fixedHistory",SCHEDULED:"scheduled",HISTORY:"history"};class a{constructor({timeline:e,onStreamChanged:t}){this.timelineInstance=e;this.onStreamChangedHandler=t;this.queue=[];this.queueProcessingInProgress=false}handleMessage(e){this.queue.push(e);if(this.queueProcessingInProgress)return;this.processNextQueueItem()}processNextQueueItem(){if(!this.queue.length){this.queueProcessingInProgress=false;return}this.queueProcessingInProgress=true;const e=this.queue.shift();const t=[];switch(e.action){case"add":t.push(this.addItem(e.id,e.item,e.stream));break;case"update":t.push(this.updateItem(e.id,e.item,e.stream));if(e.stream===i.HISTORY){t.push(this.updateItem(e.id,e.item,i.PINNED))}break;case"delete":t.push(this.deleteItem(e.id,e.stream));if(e.stream===i.HISTORY){t.push(this.deleteItem(e.id,i.PINNED))}break;case"move":const s={itemId:e.params.fromId,streamName:e.params.fromStream};const r={itemId:e.id,streamName:e.stream,itemData:e.item};t.push(this.moveItem(s,r));break;case"changePinned":if(e.params.fromStream===i.HISTORY){t.push(this.pinItem(e.id,e.item))}else{t.push(this.unpinItem(e.id,e.item))}break}Promise.all(t).catch((e=>console.error(e))).finally((()=>this.processNextQueueItem()))}addItem(e,t,s){return this.withStream(s,(s=>{if(s.hasItem(e)){return Promise.resolve()}return s.addItem(t).then((()=>{this.onStreamChanged({stream:s,itemId:e})}))}))}updateItem(e,t,s,r=true){return this.withStream(s,(s=>s.updateItem(e,t,r).then((()=>{this.onStreamChanged({stream:s,itemId:e})}))))}deleteItem(e,t){return this.withStream(t,(t=>t.deleteItem(e).then((()=>{this.onStreamChanged({stream:t,itemId:e})}))))}moveItem(e,t){return this.deleteItem(e.itemId,e.streamName).then((()=>this.addItem(t.itemId,t.itemData,t.streamName)))}pinItem(e,t){return this.withStream(i.PINNED,(s=>{if(s.hasItem(e)){return Promise.resolve()}return this.updateItem(e,t,i.HISTORY,false).then((()=>this.addItem(e,t,i.PINNED)))}))}unpinItem(e,t){return this.deleteItem(e,i.PINNED).then((()=>this.updateItem(e,t,i.HISTORY,false)))}getStream(e){switch(e){case i.HISTORY:return this.timelineInstance.historyStream;case i.SCHEDULED:return this.timelineInstance.scheduledStream;case i.PINNED:case i.PINNED_ALIAS:return this.timelineInstance.pinnedStream;default:throw new Error(`Unknown stream ${e}`)}}withStream(e,t){const s=this.getStream(e);return s?t(s):Promise.resolve()}onStreamChanged({stream:e,itemId:t}){if(e instanceof r){this.timelineInstance.emitTabCounterChange()}if(this.onStreamChangedHandler){this.onStreamChangedHandler({stream:e,itemId:t})}}}s.exports={TimelinePushProcessor:a}}));
//# sourceMappingURL=extension.map.js