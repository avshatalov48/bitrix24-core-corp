jn.define("crm/product-calculator/tax-for-price-strategy",((t,e,i)=>{const{DiscountType:s}=t("crm/product-calculator/discount-type");const{ProductRow:c}=t("crm/product-calculator/product-row");class u{constructor(t){this.calculator=t}getProductRow(){return this.calculator.getProductRow()}getPricePrecision(){return this.calculator.getPricePrecision()}getCommonPrecision(){return this.calculator.getCommonPrecision()}getQuantityPrecision(){return this.calculator.getQuantityPrecision()}calculateBasePrice(t){if(t<0){throw new Error("Price must be equal or greater than zero.")}const e=this.getProductRow();e.setField("BASE_PRICE",t);if(e.isTaxIncluded()){e.setField("PRICE_BRUTTO",t)}else{e.setField("PRICE_NETTO",t)}this.updatePrice(e);this.activateCustomized(e);return e.getFields()}calculatePrice(t){if(t<0){throw new Error("Price must be equal or greater than zero.")}const e=this.getProductRow();if(t>=e.getBasePrice()){return this.calculateBasePrice(t)}this.clearResultPrices(e);if(e.isTaxIncluded()){return this.calculateRowSum(t*e.getQuantity())}const i=e.getBasePrice()-t;e.setField("DISCOUNT_TYPE_ID",s.MONETARY);return this.calculateDiscount(i,e)}calculateQuantity(t){if(t<0){throw new Error("Quantity must be equal or greater than zero.")}const e=this.getProductRow();e.setField("QUANTITY",t);this.updateRowDiscount(e);this.updateTax(e);this.updateSum(e);return e.getFields()}calculateDiscount(t,e=null){if(!e){e=this.getProductRow()}if(t===0){this.clearResultPrices(e)}else if(e.isDiscountPercentage()){e.setField("DISCOUNT_RATE",t);this.updateResultPrices(e);e.setField("DISCOUNT_SUM",e.getPriceNetto()-e.getPriceExclusive())}else if(e.isDiscountMonetary()){e.setField("DISCOUNT_SUM",t);this.updateResultPrices(e);e.setField("DISCOUNT_RATE",this.calculateDiscountRate(e.getPriceNetto(),e.getPriceExclusive()))}this.updateRowDiscount(e);this.updateTax(e);this.updateSum(e);this.activateCustomized(e);return e.getFields()}calculateDiscountType(t){const e=this.getProductRow();e.setField("DISCOUNT_TYPE_ID",t);this.updateResultPrices(e);this.updateDiscount(e);this.updateRowDiscount(e);this.updateTax(e);this.updateSum(e);this.activateCustomized(e);return e.getFields()}calculateRowDiscount(t){const e=this.getProductRow();e.setField("DISCOUNT_ROW",t);if(t!==0&&e.getQuantity()===0){e.setField("QUANTITY",1)}e.setField("DISCOUNT_TYPE_ID",s.MONETARY);if(t===0||e.getQuantity()===0){e.setField("DISCOUNT_SUM",0)}else{e.setField("DISCOUNT_SUM",e.getDiscountRow()/e.getQuantity())}this.updateResultPrices(e);this.updateDiscount(e);this.updateRowDiscount(e);this.updateTax(e);this.updateSum(e);this.activateCustomized(e);return e.getFields()}calculateTax(t){const e=this.getProductRow();e.setField("TAX_RATE",t);this.updateBasePrices(e);this.updateResultPrices(e);if(e.isTaxIncluded()){this.updateDiscount(e);this.updateRowDiscount(e)}this.updateTax(e);this.updateSum(e);this.activateCustomized(e);return e.getFields()}calculateTaxIncluded(t){const e=this.getProductRow();if(e.getTaxIncluded()!==t){e.setField("TAX_INCLUDED",t);if(e.isTaxIncluded()){e.setField("PRICE_BRUTTO",e.getPriceNetto())}else{e.setField("PRICE_NETTO",e.getPriceBrutto())}}this.updatePrice(e);this.activateCustomized(e);return e.getFields()}calculateRowSum(t){const e=this.getProductRow();e.setField("SUM",t);if(e.getQuantity()===0){e.setField("QUANTITY",1)}const i=e.getPriceNetto()-e.getSum()/(e.getQuantity()*(1+e.getTaxRate()/100));e.setField("DISCOUNT_SUM",i);e.setField("DISCOUNT_TYPE_ID",s.MONETARY);if(e.isEmptyDiscount()){this.clearResultPrices(e)}else if(e.isDiscountHandmade()){this.updateResultPrices(e)}this.updateDiscount(e);this.updateRowDiscount(e);this.updateTax(e);this.activateCustomized(e);return e.getFields()}updatePrice(t){this.updateBasePrices(t);if(t.isEmptyDiscount()){this.clearResultPrices(t)}else if(t.isDiscountHandmade()){this.updateResultPrices(t)}this.updateDiscount(t);this.updateRowDiscount(t);this.updateTax(t);this.updateSum(t)}clearResultPrices(t){t.setField("PRICE_EXCLUSIVE",t.getPriceNetto());t.setField("PRICE",t.getPriceBrutto());t.setField("DISCOUNT_RATE",0);t.setField("DISCOUNT_SUM",0)}calculatePriceWithoutDiscount(t,e,i){let c=0;switch(i){case s.PERCENTAGE:c=t-t*e/100;break;case s.MONETARY:c=t-e;break}return c}updateBasePrices(t){if(t.isTaxIncluded()){t.setField("BASE_PRICE",t.getPriceBrutto());t.setField("PRICE_NETTO",this.calculatePriceWithoutTax(t.getPriceBrutto(),t.getTaxRate()))}else{t.setField("BASE_PRICE",t.getPriceNetto());t.setField("PRICE_BRUTTO",this.calculatePriceWithTax(t.getPriceNetto(),t.getTaxRate()))}}updateResultPrices(t){let e;if(t.isDiscountPercentage()){e=this.calculatePriceWithoutDiscount(t.getPriceNetto(),t.getDiscountRate(),s.PERCENTAGE)}else if(t.isDiscountMonetary()){e=this.calculatePriceWithoutDiscount(t.getPriceNetto(),t.getDiscountSum(),s.MONETARY)}else{e=t.getPriceExclusive()}t.setField("PRICE_EXCLUSIVE",e);t.setField("PRICE",this.calculatePriceWithTax(e,t.getTaxRate()))}activateCustomized(t){t.setField("CUSTOMIZED","Y")}updateDiscount(t){if(t.isEmptyDiscount()){this.clearResultPrices(t)}else if(t.isDiscountPercentage()){t.setField("DISCOUNT_SUM",t.getPriceNetto()-t.getPriceExclusive())}else if(t.isDiscountMonetary()){t.setField("DISCOUNT_RATE",this.calculateDiscountRate(t.getPriceNetto(),t.getPriceNetto()-t.getDiscountSum()))}}updateRowDiscount(t){t.setField("DISCOUNT_ROW",t.getDiscountSum()*t.getQuantity())}updateTax(t){let e;if(t.isTaxIncluded()){e=t.getPrice()*t.getQuantity()*(1-1/(1+t.getTaxRate()/100))}else{e=t.getPriceExclusive()*t.getQuantity()*(t.getTaxRate()/100)}t.setField("TAX_SUM",e)}updateSum(t){let e;if(t.isTaxIncluded()){e=t.getPrice()*t.getQuantity()}else{e=this.calculatePriceWithTax(t.getPriceExclusive()*t.getQuantity(),t.getTaxRate())}t.setField("SUM",e)}calculateDiscountRate(t,e){if(t===0){return 0}if(e===0){return t>0?100:-100}return(t-e)/t*100}calculatePriceWithoutTax(t,e){return t/(1+e/100)}calculatePriceWithTax(t,e){return t+t*e/100}}i.exports={TaxForPriceStrategy:u}}));
//# sourceMappingURL=tax-for-price-strategy.map.js