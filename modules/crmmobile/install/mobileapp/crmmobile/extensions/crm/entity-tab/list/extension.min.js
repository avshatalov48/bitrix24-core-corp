jn.define("crm/entity-tab/list",((t,e,i)=>{const{EntityTab:n}=t("crm/entity-tab");const{Filter:s}=t("crm/entity-tab/filter");class r extends n{componentWillReceiveProps(t){super.componentWillReceiveProps(t);this.entityTypeName=t.entityTypeName}render(){return View(this.getViewConfig(),this.renderStatefulList())}renderStatefulList(){const t=`LIST_${this.props.entityTypeName}`.toUpperCase();return new StatefulList({testId:t,actions:this.props.actions||{},actionParams:this.prepareActionParams(),itemLayoutOptions:this.getItemLayoutOptions(),itemActions:this.getItemActions(),itemParams:this.props.itemParams,getItemCustomStyles:this.getItemCustomStyles,emptyListText:BX.message("M_CRM_LIST_EMPTY_LIST_TEXT"),emptySearchText:BX.message("M_CRM_LIST_EMPTY_SEARCH_TEXT"),layout:this.props.layout,layoutOptions:this.getLayoutOptions(),menuButtons:this.getMenuButtons(),cacheName:this.props.cacheName,layoutMenuActions:this.getMenuActions(),itemDetailOpenHandler:this.handleItemDetailOpen.bind(this),itemCounterLongClickHandler:this.getCounterLongClickHandler(),onDetailCardUpdateHandler:this.onDetailCardUpdate.bind(this),onDetailCardCreateHandler:this.onDetailCardCreate.bind(this),onPanListHandler:this.props.onPanList||null,isShowFloatingButton:this.isShowFloatingButton(),floatingButtonClickHandler:this.handleFloatingButtonClick.bind(this),floatingButtonLongClickHandler:this.handleFloatingButtonLongClick.bind(this),getEmptyListComponent:this.getEmptyListComponent.bind(this),itemType:"Kanban",pull:this.getPullConfig(),ref:t=>this.viewComponent=t})}getItemCustomStyles(t,e,i){if(i!==0){return{}}return{wrapper:{paddingTop:12}}}deleteItem(t){const e={eventId:this.pullManager.registerRandomEventId()};const{actions:i}=this.props;return new Promise(((n,s)=>{BX.ajax.runAction(i.deleteItem,{data:{id:t,entityType:this.props.entityTypeName,params:e}}).then((e=>{if(e.errors.length){s({errors:e.errors,showErrors:true})}n({action:"delete",id:t})})).catch((t=>{console.error(t.errors);s({errors:t.errors,showErrors:true})}))}))}getPullCommand(t){const{entityTypeName:e}=this.props;return`${t}_${e}`}getCurrentStatefulList(){return this.viewComponent}isCurrentSlideName(t){return true}isNeedProcessPull(t,e){return!this.pullManager.hasEvent(t.params.eventId)}onDetailCardUpdate(t){if(this.props.entityTypeId===t.entityTypeId){this.getCurrentStatefulList().updateItems([t.entityId])}}onDetailCardCreate(t){if(this.props.entityTypeId===t.entityTypeId){this.reload()}}reload(t={}){if(t.clearFilter){this.filter=new s;this.state.searchButtonBackgroundColor=null}this.setState({},(()=>{const t=!(Boolean(this.filter.currentFilterId)||Boolean(this.filter.search));this.getViewComponent().reload({},{useCache:t})}))}prepareActionParams(){const t=super.prepareActionParams();t.loadItems.extra=t.loadItems.extra||{};const e=this.getCurrentEntityType();const{presetId:i}=e.data;this.filter.prepareActionParams(t,i);return t}scrollToTop(){const t=this.getViewComponent().getSimpleList();this.scrollSimpleListToTop(t)}}i.exports={ListTab:r}}));
//# sourceMappingURL=extension.map.js