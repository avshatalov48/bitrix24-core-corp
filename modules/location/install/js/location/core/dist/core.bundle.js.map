{"version":3,"file":"core.bundle.js","sources":["../src/entity/generic/field.js","../src/entity/generic/fieldcollection.js","../src/entity/address/addressfield.js","../src/entity/address/addressfieldcollection.js","../src/entity/address/addresslink.js","../src/entity/address/addresslinkcollection.js","../src/entity/format/formatfield.js","../src/entity/format/formatfieldcollection.js","../src/entity/format.js","../src/entity/location/locationtype.js","../src/entity/address/addresstype.js","../src/entity/address/converter/stringconverter.js","../src/entity/address/converter/jsonconverter.js","../src/entity/address.js","../src/entity/location/locationfield.js","../src/entity/location/locationfieldcollection.js","../src/entity/location/locationobjectconverter.js","../src/entity/location/locationjsonconverter.js","../src/entity/location.js","../src/repository/actionrunner.js","../src/repository/baserepository.js","../src/repository/locationrepository.js","../src/repository/addressrepository.js","../src/repository/formatrepository.js","../src/repository/sourcerepository.js","../src/base/autocompleteservicebase.js","../src/base/photoservicebase.js","../src/base/mapbase.js","../src/base/sourcebase.js","../src/base/geocodingservicebase.js","../src/common/controlmode.js","../src/entity/location/locationfieldtype.js","../src/common/error.js","../src/common/errorpublisher.js","../src/common/limit.js"],"sourcesContent":["export default class Field\n{\n\t#type;\n\n\tconstructor(props)\n\t{\n\t\tif(typeof props.type === 'undefined')\n\t\t{\n\t\t\tthrow new Error('Field type must be defined');\n\t\t}\n\n\t\tthis.#type = parseInt(props.type);\n\t}\n\n\tget type()\n\t{\n\t\treturn this.#type;\n\t}\n}","import Field from './field';\n\nexport default class FieldCollection\n{\n\t#fields = {};\n\n\tconstructor(props = {})\n\t{\n\t\tthis.fields = props.fields ? props.fields : [];\n\t}\n\n\tset fields(fields)\n\t{\n\t\tif(!Array.isArray(fields))\n\t\t{\n\t\t\tthrow new Error('Items must be array!');\n\t\t}\n\n\t\tfor(const field of fields)\n\t\t{\n\t\t\tthis.setField(field);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tget fields()\n\t{\n\t\treturn this.#fields;\n\t}\n\n\t/**\n\t * Checks if field already exist in collection\n\t * @param {int} type\n\t * @returns {boolean}\n\t */\n\tisFieldExists(type)\n\t{\n\t\treturn typeof this.#fields[type] !== 'undefined';\n\t}\n\n\tgetField(type)\n\t{\n\t\treturn this.isFieldExists(type) ? this.#fields[type] : null;\n\t}\n\n\tsetField(field)\n\t{\n\t\tif(!(field instanceof Field))\n\t\t{\n\t\t\tthrow new Error('Argument field must be instance of Field!');\n\t\t}\n\n\t\tthis.#fields[field.type] = field;\n\t\treturn this;\n\t}\n\n\tgetMaxFieldType()\n\t{\n\t\tconst types = Object.keys(this.#fields).sort((a, b) => {\n\t\t\treturn parseInt(a) - parseInt(b);\n\t\t});\n\n\t\tlet result = 0;\n\n\t\tif(types.length > 0)\n\t\t{\n\t\t\tresult = types[types.length - 1];\n\t\t}\n\n\t\treturn result;\n\t}\n}","import Field from \"../generic/field\";\n\nexport default class AddressField extends Field\n{\n\t#value;\n\n\t//todo: Fields validation\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.#value = props.value || '';\n\t}\n\n\tget value()\n\t{\n\t\treturn this.#value;\n\t}\n\n\tset value(value)\n\t{\n\t\tthis.#value = value;\n\t\treturn this;\n\t}\n}","import FieldCollection from '../generic/fieldcollection';\nimport AddressField from './addressfield';\n\nexport default class AddressFieldCollection extends FieldCollection\n{\n\tgetFieldValue(type)\n\t{\n\t\tlet result = null;\n\n\t\tif(this.isFieldExists(type))\n\t\t{\n\t\t\tconst field = this.getField(type);\n\n\t\t\tif(field)\n\t\t\t{\n\t\t\t\tresult = field.value;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tsetFieldValue(type, value)\n\t{\n\t\tthis.setField(\n\t\t\tnew AddressField({type, value})\n\t\t);\n\n\t\treturn this;\n\t}\n}","export default class AddressLink\n{\n\t#entityId;\n\t#entityType;\n\n\tconstructor(props)\n\t{\n\t\tthis.#entityId = props.entityId;\n\t\tthis.#entityType = props.entityType;\n\t}\n\n\tget entityId()\n\t{\n\t\treturn this.#entityId;\n\t}\n\n\tget entityType()\n\t{\n\t\treturn this.#entityType\n\t}\n}","import AddressLink from \"./addresslink\";\n\nexport default class AddressLinkCollection\n{\n\t#links = [];\n\n\tconstructor(props = {})\n\t{\n\t\tthis.links = !!props.links ? props.links : [];\n\t}\n\n\tset links(links: Array): void\n\t{\n\t\tif(!Array.isArray(links))\n\t\t{\n\t\t\tthrow new Error('links must be array!');\n\t\t}\n\n\t\tfor(let link of links)\n\t\t{\n\t\t\tthis.addLink(link);\n\t\t}\n\t}\n\n\tget links()\n\t{\n\t\treturn this.#links;\n\t}\n\n\taddLink(link: AddressLink)\n\t{\n\t\tif(!(link instanceof AddressLink))\n\t\t{\n\t\t\tthrow new Error('Argument link must be instance of Field!');\n\t\t}\n\n\t\tthis.#links.push(link);\n\t}\n\n\tclearLinks()\n\t{\n\t\tthis.#links = [];\n\t}\n}","import Field from \"../generic/field\";\n\nexport default class FormatField extends Field\n{\n\t#sort;\n\t#name;\n\t#description;\n\n\t// todo: Fields validation\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\n\t\tthis.#sort = parseInt(props.sort);\n\t\tthis.#name = props.name || '';\n\t\tthis.#description = props.description || '';\n\t}\n\n\tget sort()\n\t{\n\t\treturn this.#sort;\n\t}\n\n\tset sort(sort)\n\t{\n\t\tthis.#sort = sort;\n\t}\n\n\tget name()\n\t{\n\t\treturn this.#name;\n\t}\n\n\tset name(name)\n\t{\n\t\tthis.#name = name;\n\t}\n\n\tget description()\n\t{\n\t\treturn this.#description;\n\t}\n\n\tset description(description)\n\t{\n\t\tthis.#description = description;\n\t}\n}","import FieldCollection from '../generic/fieldcollection';\nimport FormatField from './formatfield';\n\nexport default class FormatFieldCollection extends FieldCollection\n{\n\tinitFields(fieldsData)\n\t{\n\t\tif(Array.isArray(fieldsData))\n\t\t{\n\t\t\tfieldsData.forEach((data) => {\n\n\t\t\t\tconst field = new FormatField(data);\n\n\t\t\t\tif(field)\n\t\t\t\t{\n\t\t\t\t\tthis.setField(field);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}","import {Type} from 'main.core';\nimport FormatFieldCollection from './format/formatfieldcollection';\nimport {AddressType} from \"../core\";\n\n/**\n * Class defines how the Address will look like\n */\nexport default class Format\n{\n\t#code;\n\t#name;\n\t#description;\n\t#languageId;\n\t#template;\n\t#fieldCollection;\n\t#delimiter;\n\t#fieldForUnRecognized;\n\n\tconstructor(props)\n\t{\n\t\tif(Type.isUndefined(props.languageId))\n\t\t{\n\t\t\tthrow new TypeError('LanguageId must be defined');\n\t\t}\n\n\t\tthis.#languageId = props.languageId;\n\t\tthis.#code = props.code || '';\n\t\tthis.#name = props.name || '';\n\t\tthis.#template = props.template || '';\n\t\tthis.#description = props.description || '';\n\t\tthis.#delimiter = props.delimiter || ', ';\n\t\tthis.#fieldForUnRecognized = props.fieldForUnRecognized || AddressType.UNKNOWN;\n\n\t\tthis.#fieldCollection = new FormatFieldCollection();\n\n\t\tif(Type.isObject(props.fieldCollection))\n\t\t{\n\t\t\tthis.#fieldCollection.initFields(props.fieldCollection);\n\t\t}\n\t}\n\n\tget languageId(): string\n\t{\n\t\treturn this.#languageId;\n\t}\n\n\tget name(): string\n\t{\n\t\treturn this.#name;\n\t}\n\n\tget description(): string\n\t{\n\t\treturn this.#description;\n\t}\n\n\tget code(): string\n\t{\n\t\treturn this.#code;\n\t}\n\n\tget fieldCollection(): FormatFieldCollection\n\t{\n\t\treturn this.#fieldCollection;\n\t}\n\n\tget template(): string\n\t{\n\t\treturn this.#template;\n\t}\n\n\tset template(template: string): void\n\t{\n\t\tthis.#template = template;\n\t}\n\n\tget delimiter(): string\n\t{\n\t\treturn this.#delimiter;\n\t}\n\n\tset delimiter(delimiter: string)\n\t{\n\t\tthis.#delimiter = delimiter;\n\t}\n\n\tget fieldForUnRecognized(): string\n\t{\n\t\treturn this.#fieldForUnRecognized;\n\t}\n\n\tset fieldForUnRecognized(fieldForUnRecognized: number)\n\t{\n\t\tthis.#fieldForUnRecognized = fieldForUnRecognized;\n\t}\n\n\tgetField(type)\n\t{\n\t\treturn this.#fieldCollection.getField(type);\n\t}\n\n\tisFieldExists(type)\n\t{\n\t\treturn this.#fieldCollection.isFieldExists(type);\n\t}\n}","export default class LocationType\n{\n\tstatic UNKNOWN = 0;\n\n\tstatic COUNTRY = 100;\n\n\tstatic ADM_LEVEL_1 = 200;\n\tstatic ADM_LEVEL_2 = 210;\n\tstatic ADM_LEVEL_3 = 220;\n\tstatic ADM_LEVEL_4 = 230;\n\n\tstatic LOCALITY = 300;\n\tstatic SUB_LOCALITY = 310;\n\tstatic SUB_LOCALITY_LEVEL_1 = 320;\n\tstatic SUB_LOCALITY_LEVEL_2 = 330;\n\tstatic STREET = 340;\n\n\tstatic BUILDING = 400;\n\tstatic ADDRESS_LINE_1 = 410;\n\n\tstatic FLOOR = 420;\n\tstatic ROOM = 430;\n}","import LocationType from '../location/locationtype';\n\nexport default class AddressType extends LocationType\n{\n\tstatic POSTAL_CODE = 50;\n\n\tstatic ADDRESS_LINE_2 = 600;\n\tstatic RECIPIENT_COMPANY = 700;\n\tstatic RECIPIENT = 710;\n\tstatic PO_BOX = 800;\n}","import {Type, Text} from 'main.core';\nimport Address from '../../address';\nimport Format from '../../format';\nimport AddressType from '../addresstype';\n\nexport default class StringConverter\n{\n\tstatic STRATEGY_TYPE_TEMPLATE = 'template';\n\tstatic STRATEGY_TYPE_FIELD_SORT = 'field_sort';\n\tstatic STRATEGY_TYPE_FIELD_TYPE = 'field_type';\n\n\tstatic CONTENT_TYPE_HTML = 'html';\n\tstatic CONTENT_TYPE_TEXT = 'text';\n\t/**\n\t * Convert address to string\n\t * @param {Address} address\n\t * @param {Format} format\n\t * @param {string} strategyType\n\t * @param {string} contentType\n\t * @returns {string}\n\t */\n\tstatic convertAddressToString(address: Address, format: Format, strategyType: string, contentType: string): string\n\t{\n\t\tlet result;\n\n\t\tif(strategyType === StringConverter.STRATEGY_TYPE_TEMPLATE)\n\t\t{\n\t\t\tresult = StringConverter.convertAddressToStringTemplate(address, format, contentType);\n\t\t}\n\t\telse if(strategyType === StringConverter.STRATEGY_TYPE_FIELD_SORT)\n\t\t{\n\t\t\tconst fieldSorter = (a, b) => { return a.sort - b.sort; };\n\t\t\tresult = StringConverter.convertAddressToStringByField(address, format, fieldSorter, contentType);\n\t\t}\n\t\telse if(strategyType === StringConverter.STRATEGY_TYPE_FIELD_TYPE)\n\t\t{\n\t\t\tconst fieldSorter = (a, b) => {\n\n\t\t\t\tlet sortResult;\n\n\t\t\t\t// We suggest that UNKNOWN must be the last\n\t\t\t\tif(a.type === 0)\n\t\t\t\t{\n\t\t\t\t\tsortResult = 1;\n\t\t\t\t}\n\t\t\t\telse if(b.type === 0)\n\t\t\t\t{\n\t\t\t\t\tsortResult = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsortResult = a.type - b.type;\n\t\t\t\t}\n\n\t\t\t\treturn sortResult;\n\t\t\t};\n\n\t\t\tresult = StringConverter.convertAddressToStringByField(address, format, fieldSorter, contentType);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow TypeError('Wrong strategyType');\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Convert address to string\n\t * @param {Address} address\n\t * @param {Format} format\n\t * @param {string} contentType\n\t * @returns {string}\n\t */\n\tstatic convertAddressToStringTemplate(address: Address, format: Format, contentType: string): string\n\t{\n\t\tlet result = format.template;\n\n\t\tif(contentType === StringConverter.CONTENT_TYPE_HTML)\n\t\t{\n\t\t\tresult = result.replace(/\\n/g, '<br/>');\n\t\t}\n\n\t\tconst components = result.match(/{{[^]*?}}/gm);\n\n\t\tif(!Type.isArray(components))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\t// find placeholders witch looks like {{ ... }}\n\t\tfor(const component of components)\n\t\t{\n\t\t\t// find placeholders wich looks like # ... #\n\t\t\tconst fields = component.match(/#([0-9A-Z_]*?)#/);\n\n\t\t\tif(!Type.isArray(fields) || Type.isUndefined(fields[1]))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(Type.isUndefined(AddressType[fields[1]]))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst type = AddressType[fields[1]];\n\t\t\tlet fieldValue = address.getFieldValue(type);\n\n\t\t\tif(fieldValue === null)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(contentType === StringConverter.CONTENT_TYPE_HTML)\n\t\t\t{\n\t\t\t\tfieldValue = Text.encode(fieldValue);\n\t\t\t}\n\n\t\t\tlet componentReplacer = component.replace(fields[0], fieldValue);\n\t\t\tcomponentReplacer = componentReplacer.replace('{{', '');\n\t\t\tcomponentReplacer = componentReplacer.replace('}}', '');\n\t\t\tresult = result.replace(component, componentReplacer);\n\t\t}\n\n\t\tresult = result.replace(/({{[^]*?}})/gm, '');\n\n\t\tif(contentType === StringConverter.CONTENT_TYPE_HTML)\n\t\t{\n\t\t\tresult = result.replace(/(<br\\/>)+/g, '<br/>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = result.replace(/(\\n)+/g, '\\n');\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Convert address to string\n\t * @param {Address} address\n\t * @param {Format} format\n\t * @param {Function} fieldSorter\n\t * @param {string} contentType\n\t * @returns {string}\n\t */\n\tstatic convertAddressToStringByField(address: Address, format: Format, fieldSorter: Function, contentType: string): string\n\t{\n\t\tif(!(format instanceof Format))\n\t\t{\n\t\t\tBX.debug('format must be instance of Format');\n\t\t}\n\n\t\tif(!(address instanceof Address))\n\t\t{\n\t\t\tBX.debug('address must be instance of Address');\n\t\t}\n\n\t\tconst fieldCollection = format.fieldCollection;\n\n\t\tif(!fieldCollection)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\tconst fields = Object.values(fieldCollection.fields);\n\n\t\t// todo: make only once or cache?\n\t\tfields.sort(fieldSorter);\n\n\t\tlet result = '';\n\n\t\tfor(const field of fields)\n\t\t{\n\t\t\tlet value = address.getFieldValue(field.type);\n\n\t\t\tif(value === null)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif(contentType === StringConverter.CONTENT_TYPE_HTML)\n\t\t\t{\n\t\t\t\tvalue = Text.encode(value);\n\t\t\t}\n\n\t\t\tif(result !== '')\n\t\t\t{\n\t\t\t\tresult += format.delimiter;\n\t\t\t}\n\n\t\t\tresult += value;\n\t\t}\n\n\t\treturn result;\n\t}\n}","import Address from '../../address';\nimport AddressFieldCollection from './../addressfieldcollection';\nimport AddressLinkCollection from './../addresslinkcollection';\n\nexport default class JsonConverter\n{\n\t/**\n\t * @param {Object} jsonData\n\t * @returns {Address}\n\t */\n\tstatic convertJsonToAddress(jsonData: Object): Address\n\t{\n\t\treturn new Address(jsonData);\n\t}\n\n\t/**\n\t * @param {Address} address\n\t * @returns {{languageId: string, location: ({\"'...'\"}|null), id: number, fieldCollection: {\"'...'\"}}} Json data\n\t */\n\tstatic convertAddressToJson(address: Address): Object\n\t{\n\t\tconst obj = {\n\t\t\tid: address.id,\n\t\t\tlanguageId: address.languageId,\n\t\t\tlatitude: address.latitude,\n\t\t\tlongitude: address.longitude,\n\t\t\tfieldCollection: JsonConverter.#objectifyFieldCollection(address.fieldCollection),\n\t\t\tlinks: JsonConverter.#objectifyLinks(address.links),\n\t\t\tlocation: null\n\t\t};\n\n\t\tif(address.location)\n\t\t{\n\t\t\tobj.location = JSON.parse(address.location.toJson());\n\t\t}\n\n\t\treturn JSON.stringify(obj);\n\t}\n\n\t/**\n\t * @param {AddressFieldCollection} fieldCollection\n\t * @returns {Object}\n\t */\n\tstatic #objectifyFieldCollection(fieldCollection: AddressFieldCollection): Object\n\t{\n\t\tlet result = {};\n\n\t\tObject.values(fieldCollection.fields).forEach((field) => {\n\t\t\tresult[field.type] = field.value;\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tstatic #objectifyLinks(links: AddressLinkCollection): Array<{entityId: string, entityType: string}>\n\t{\n\t\treturn links.map((link) => {\n\t\t\treturn {\n\t\t\t\tentityId: link.entityId,\n\t\t\t\tentityType: link.entityType\n\t\t\t};\n\t\t});\n\t}\n}","import {Type} from 'main.core';\nimport AddressFieldCollection from './address/addressfieldcollection';\nimport AddressLinkCollection from './address/addresslinkcollection';\nimport AddressLink from './address/addresslink';\nimport StringConverter from './address/converter/stringconverter';\nimport Format from './format';\nimport JsonConverter from './address/converter/jsonconverter';\nimport Location from './location';\n\nexport default class Address\n{\n\t#id;\n\t#languageId;\n\t#latitude;\n\t#longitude;\n\n\t#fieldCollection;\n\t#links;\n\n\t#location;\n\n\t/**\n\t * @param {{...}} props\n\t */\n\tconstructor(props)\n\t{\n\t\tif(Type.isUndefined(props.languageId))\n\t\t{\n\t\t\tthrow new TypeError('languageId must be defined');\n\t\t}\n\n\t\tthis.#languageId = props.languageId;\n\n\t\tthis.#id = props.id || 0;\n\t\tthis.#latitude = props.latitude || 0;\n\t\tthis.#longitude = props.longitude || 0;\n\t\tthis.#fieldCollection = new AddressFieldCollection();\n\n\t\tif(Type.isObject(props.fieldCollection))\n\t\t{\n\t\t\tfor(const [type, value] of Object.entries(props.fieldCollection))\n\t\t\t{\n\t\t\t\tthis.setFieldValue(type, value);\n\t\t\t}\n\t\t}\n\n\t\tthis.#links = new AddressLinkCollection();\n\n\t\tif(Type.isArray(props.links))\n\t\t{\n\t\t\tfor(const link of props.links)\n\t\t\t{\n\t\t\t\tthis.addLink(link.entityId, link.entityType);\n\t\t\t}\n\t\t}\n\n\t\tthis.#location = null;\n\n\t\tif(props.location)\n\t\t{\n\t\t\tif(props.location instanceof Location)\n\t\t\t{\n\t\t\t\tthis.#location = props.location;\n\t\t\t}\n\t\t\telse if(Type.isObject(props.location))\n\t\t\t{\n\t\t\t\tthis.#location = new Location(props.location);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tBX.debug('Wrong typeof props.location');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns {int}\n\t */\n\tget id(): number\n\t{\n\t\treturn this.#id;\n\t}\n\n\t/**\n\t * @returns {Location}\n\t */\n\tget location(): ?Location\n\t{\n\t\treturn this.#location;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tget languageId(): string\n\t{\n\t\treturn this.#languageId;\n\t}\n\n\t/**\n\t * @returns {AddressFieldCollection}\n\t */\n\tget fieldCollection(): AddressFieldCollection\n\t{\n\t\treturn this.#fieldCollection;\n\t}\n\n\t/**\n\t * @param {int} id\n\t */\n\tset id(id: number)\n\t{\n\t\tthis.#id = id;\n\t}\n\n\t/**\n\t * @param {Location} location\n\t */\n\tset location(location: ?Location)\n\t{\n\t\tthis.#location = location;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tget latitude(): string\n\t{\n\t\treturn this.#latitude;\n\t}\n\n\t/**\n\t * @param {string} latitude\n\t */\n\tset latitude(latitude: string): void\n\t{\n\t\tthis.#latitude = latitude;\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tget longitude(): string\n\t{\n\t\treturn this.#longitude;\n\t}\n\n\t/**\n\t * @param {string} longitude\n\t */\n\tset longitude(longitude: string): void\n\t{\n\t\tthis.#longitude = longitude;\n\t}\n\n\t/**\n\t * @returns {AddressLinkCollection}\n\t */\n\tget links(): AddressLinkCollection\n\t{\n\t\treturn this.#links.links;\n\t}\n\n\t/**\n\t * @param {number} type\n\t * @param {mixed} value\n\t */\n\tsetFieldValue(type: number, value: string): void\n\t{\n\t\tthis.#fieldCollection.setFieldValue(type, value);\n\t}\n\n\t/**\n\t * @param {number} type\n\t * @returns {?string}\n\t */\n\tgetFieldValue(type: number): ?string\n\t{\n\t\treturn this.#fieldCollection.getFieldValue(type);\n\t}\n\n\t/**\n\t * Check if field exist\n\t * @param type\n\t * @returns {boolean}\n\t */\n\tisFieldExists(type: number): boolean\n\t{\n\t\treturn this.#fieldCollection.isFieldExists(type);\n\t}\n\n\t/**\n\t * @return {string} JSON\n\t */\n\ttoJson(): string\n\t{\n\t\treturn JsonConverter.convertAddressToJson(this);\n\t}\n\n\t/**\n\t * @param {Format}format\n\t * @param {?string}strategyType\n\t * @param {?string}contentType\n\t * @return {string}\n\t */\n\ttoString(format: Format, strategyType: ?string, contentType: ?string): string\n\t{\n\t\tif(!(format instanceof Format))\n\t\t{\n\t\t\tthrow new TypeError('format must be instance of Format');\n\t\t}\n\n\t\tconst strategy = strategyType || StringConverter.STRATEGY_TYPE_TEMPLATE;\n\t\tconst type = contentType || StringConverter.CONTENT_TYPE_HTML;\n\t\tconst result = StringConverter.convertAddressToString(this, format, strategy, type);\n\t\treturn result;\n\t}\n\n\t/**\n\t * @returns {?Location}\n\t */\n\ttoLocation(): ?Location\n\t{\n\t\tlet result = null;\n\n\t\tif(this.location)\n\t\t{\n\t\t\tconst locationObj = JSON.parse(this.location.toJson());\n\t\t\tlocationObj.address = JSON.parse(this.toJson());\n\t\t\tresult = new Location(locationObj);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * @return {number}\n\t */\n\tgetType(): number\n\t{\n\t\treturn this.#fieldCollection.getMaxFieldType();\n\t}\n\n\t/**\n\t * @param {string} entityId\n\t * @param {string} entityType\n\t */\n\taddLink(entityId: number, entityType: string): void\n\t{\n\t\tthis.#links.addLink(new AddressLink({\n\t\t\tentityId: entityId,\n\t\t\tentityType: entityType\n\t\t}));\n\t}\n\n\tclearLinks(): void\n\t{\n\t\tthis.#links.clearLinks();\n\t}\n}","import Field from '../generic/field';\n\nexport default class LocationField extends Field\n{\n\t#value;\n\n\t// todo: Fields validation\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.#value = props.value || '';\n\t}\n\n\tget value(): string\n\t{\n\t\treturn this.#value;\n\t}\n\n\tset value(value: string)\n\t{\n\t\tthis.#value = value;\n\t}\n}","import FieldCollection from '../generic/fieldcollection';\nimport LocationField from './locationfield';\n\nexport default class LocationFieldCollection extends FieldCollection\n{\n\tgetFieldValue(type)\n\t{\n\t\tlet result = null;\n\n\t\tif(this.isFieldExists(type))\n\t\t{\n\t\t\tconst field = this.getField(type);\n\n\t\t\tif(field)\n\t\t\t{\n\t\t\t\tresult = field.value;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tsetFieldValue(type, value)\n\t{\n\t\tthis.setField(\n\t\t\tnew LocationField({type, value})\n\t\t);\n\n\t\treturn this;\n\t}\n}","import Location from '../location';\nimport LocationFieldCollection from './locationfieldcollection';\n\nexport default class LocationObjectConverter\n{\n\tstatic convertLocationToObject(location: Location): Object\n\t{\n\t\tif(!(location instanceof Location))\n\t\t{\n\t\t\tthrow new TypeError('location must be type of location');\n\t\t}\n\n\t\tconst obj = {\n\t\t\tid: location.id,\n\t\t\tcode: location.code,\n\t\t\texternalId: location.externalId,\n\t\t\tsourceCode: location.sourceCode,\n\t\t\ttype: location.type,\n\t\t\tname: location.name,\n\t\t\tlanguageId: location.languageId,\n\t\t\tlatitude: location.latitude,\n\t\t\tlongitude: location.longitude,\n\t\t\tfieldCollection: LocationObjectConverter.#objectifyFieldCollection(location.fieldCollection),\n\t\t\taddress: null\n\t\t};\n\n\t\tif(location.address)\n\t\t{\n\t\t\tobj.address = JSON.parse(location.address.toJson());\n\t\t}\n\n\t\treturn obj;\n\t}\n\n\tstatic #objectifyFieldCollection(fieldCollection: LocationObjectConverter): Object\n\t{\n\t\tlet result = {};\n\n\t\tObject.values(fieldCollection.fields).forEach((field) => {\n\t\t\tresult[field.type] = field.value;\n\t\t});\n\n\t\treturn result;\n\t}\n}","import Location from '../location';\nimport Address from '../address';\nimport LocationObjectConverter from './locationobjectconverter';\n\nexport default class LocationJsonConverter\n{\n\t/**\n\t * @param {{...}}jsonData\n\t * @returns {Location}\n\t */\n\tstatic convertJsonToLocation(jsonData)\n\t{\n\t\tconst initData = {...jsonData};\n\n\t\tif(jsonData.address)\n\t\t{\n\t\t\tinitData.address = new Address(jsonData.address);\n\t\t}\n\n\t\treturn new Location(initData);\n\t}\n\n\t/**\n\t * @param {Location} location\n\t * @returns {{...}}\n\t */\n\tstatic convertLocationToJson(location: Location)\n\t{\n\t\tif(!(location instanceof Location))\n\t\t{\n\t\t\tthrow new TypeError('location must be type of location');\n\t\t}\n\n\t\tconst obj = LocationObjectConverter.convertLocationToObject(location);\n\t\treturn obj ? JSON.stringify(obj) : '';\n\t}\n}","import {Type} from 'main.core';\nimport Address from './address';\nimport LocationJsonConverter from './location/locationjsonconverter';\nimport LocationFieldCollection from './location/locationfieldcollection';\n\nexport default class Location\n{\n\t#id;\n\t#code;\n\t#externalId;\n\t#sourceCode;\n\t#type;\n\t#name;\n\t#languageId;\n\t#latitude;\n\t#longitude;\n\t#address;\n\t#fieldCollection;\n\n\tconstructor(props = {})\n\t{\n\t\tthis.#id = parseInt(props.id) || 0;\n\t\tthis.#code = props.code || '';\n\t\tthis.#externalId = props.externalId || '';\n\t\tthis.#sourceCode = props.sourceCode || '';\n\t\tthis.#type = parseInt(props.type) || 0;\n\t\tthis.#name = props.name || '';\n\t\tthis.#languageId = props.languageId || '';\n\t\tthis.#latitude = props.latitude || '';\n\t\tthis.#longitude = props.longitude || '';\n\t\tthis.#fieldCollection = new LocationFieldCollection();\n\n\t\tif(Type.isObject(props.fieldCollection))\n\t\t{\n\t\t\tfor(const [type, value] of Object.entries(props.fieldCollection))\n\t\t\t{\n\t\t\t\tthis.setFieldValue(type, value);\n\t\t\t}\n\t\t}\n\n\t\tthis.#address = null;\n\n\t\tif(props.address)\n\t\t{\n\t\t\tif(props.address instanceof Address)\n\t\t\t{\n\t\t\t\tthis.#address = props.address;\n\t\t\t}\n\t\t\telse if(typeof props.address === 'object')\n\t\t\t{\n\t\t\t\tthis.#address = new Address(props.address);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tBX.debug('Wrong typeof props.address');\n\t\t\t}\n\t\t}\n\t}\n\n\tget id(): number\n\t{\n\t\treturn this.#id;\n\t}\n\n\tget code(): string\n\t{\n\t\treturn this.#code;\n\t}\n\n\tget externalId(): string\n\t{\n\t\treturn this.#externalId;\n\t}\n\n\tget sourceCode(): string\n\t{\n\t\treturn this.#sourceCode;\n\t}\n\n\tget type(): number\n\t{\n\t\treturn this.#type;\n\t}\n\n\tget name(): string\n\t{\n\t\treturn this.#name;\n\t}\n\n\tget languageId(): string\n\t{\n\t\treturn this.#languageId;\n\t}\n\n\tset id(value: number): void\n\t{\n\t\tthis.#id = value;\n\t}\n\n\tset code(code: string): void\n\t{\n\t\tthis.#code = code;\n\t}\n\n\tset externalId(value: string): void\n\t{\n\t\tthis.#externalId = value;\n\t}\n\n\tset sourceCode(value: string): void\n\t{\n\t\tthis.#sourceCode = value;\n\t}\n\n\tset type(value: number): void\n\t{\n\t\tthis.#type = value;\n\t}\n\n\tset name(value: string): void\n\t{\n\t\tthis.#name = value;\n\t}\n\n\tset languageId(value: string): void\n\t{\n\t\tthis.#languageId = value;\n\t}\n\n\tget latitude(): string\n\t{\n\t\treturn this.#latitude;\n\t}\n\n\tset latitude(latitude: string): void\n\t{\n\t\tthis.#latitude = latitude;\n\t}\n\n\tget longitude(): string\n\t{\n\t\treturn this.#longitude;\n\t}\n\n\tset longitude(longitude: string): void\n\t{\n\t\tthis.#longitude = longitude;\n\t}\n\n\tset address(address: Address): void\n\t{\n\t\tthis.#address = address;\n\t}\n\n\tget address(): ?Address\n\t{\n\t\treturn this.#address;\n\t}\n\n\ttoJson(): string\n\t{\n\t\treturn LocationJsonConverter.convertLocationToJson(this);\n\t}\n\n\ttoAddress(): ?Address\n\t{\n\t\tlet result = null;\n\n\t\tif(this.address)\n\t\t{\n\t\t\tconst addressObj = JSON.parse(this.address.toJson());\n\t\t\taddressObj.location = JSON.parse(this.toJson());\n\t\t\tresult = new Address(addressObj);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tget fieldCollection(): LocationFieldCollection\n\t{\n\t\treturn this.#fieldCollection;\n\t}\n\n\tsetFieldValue(type: number, value: string): void\n\t{\n\t\tthis.#fieldCollection.setFieldValue(type, value);\n\t}\n\n\tgetFieldValue(type: number): ?string\n\t{\n\t\treturn this.#fieldCollection.getFieldValue(type);\n\t}\n\n\tisFieldExists(type: number): boolean\n\t{\n\t\treturn this.#fieldCollection.isFieldExists(type);\n\t}\n}","export default class ActionRunner\n{\n\t#path = '';\n\n\tconstructor(props)\n\t{\n\t\tif(!props.path)\n\t\t{\n\t\t\tthrow new Error('props.path must not be empty!');\n\t\t}\n\n\t\tthis.#path = props.path;\n\t}\n\n\trun(action, data)\n\t{\n\t\tif(!action)\n\t\t{\n\t\t\tthrow new Error('action can not be empty!');\n\t\t}\n\n\t\treturn BX.ajax.runAction(`${this.#path}.${action}`, {data});\n\t}\n}","import ActionRunner from './actionrunner';\n\nexport default class BaseRepository\n{\n\t#actionRunner = null;\n\n\tconstructor(props = {})\n\t{\n\t\tthis._path = props.path;\n\n\t\tif(props.actionRunner && props.actionRunner instanceof ActionRunner)\n\t\t{\n\t\t\tthis.#actionRunner = props.actionRunner;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.#actionRunner = new ActionRunner({path: this._path});\n\t\t}\n\t}\n\n\tget path()\n\t{\n\t\treturn this._path;\n\t}\n\n\tget actionRunner()\n\t{\n\t\treturn this.#actionRunner;\n\t}\n\n\tprocessResponse(response: Object)\n\t{\n\t\tif(response.status !== 'success')\n\t\t{\n\t\t\tBX.debug('Request was not successful');\n\t\t\tlet message = '';\n\n\t\t\tif(Array.isArray(response.errors) && response.errors.length > 0)\n\t\t\t{\n\t\t\t\tfor(const error of response.errors)\n\t\t\t\t{\n\t\t\t\t\tif(typeof error.message === 'string' && error.message !== '')\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage += `${error}\\n`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(message);\n\t\t}\n\n\t\treturn response.data ? response.data : null;\n\t}\n}","import BaseRepository from './baserepository';\nimport LocationJsonConverter from '../entity/location/locationjsonconverter';\nimport Location from '../entity/location';\nimport LocationObjectConverter from '../entity/location/locationobjectconverter';\n\nexport default class LocationRepository extends BaseRepository\n{\n\tconstructor(props = {})\n\t{\n\t\tprops.path = props.path || 'location.api.location';\n\t\tsuper(props);\n\t}\n\n\tfindParents(location: Location): Promise\n\t{\n\t\tif(!(location instanceof Location))\n\t\t{\n\t\t\tthrow new TypeError('location must be type of Location');\n\t\t}\n\n\t\treturn this.actionRunner.run(\n\t\t\t'findParents',\n\t\t\t{\n\t\t\t\tlocation: LocationObjectConverter.convertLocationToObject(location)\n\t\t\t})\n\t\t\t.then(this.processResponse.bind(this))\n\t\t\t.then(this.#convertCollection.bind(this));\n\t}\n\n\tfindByExternalId(externalId: string, sourceCode: string, languageId: string): Promise\n\t{\n\t\tif(!externalId || !sourceCode || !languageId)\n\t\t{\n\t\t\tthrow new Error('externalId and sourceCode and languageId must be defined');\n\t\t}\n\n\t\treturn this.actionRunner.run(\n\t\t\t'findByExternalId',\n\t\t\t{\n\t\t\t\texternalId: externalId,\n\t\t\t\tsourceCode: sourceCode,\n\t\t\t\tlanguageId: languageId\n\t\t\t})\n\t\t\t.then(this.processResponse.bind(this))\n\t\t\t.then(this.#convertLocation.bind(this));\n\t}\n\n\tfindById(locationId: number, languageId: string)\n\t{\n\t\tif(!locationId || !languageId)\n\t\t{\n\t\t\tthrow new Error('locationId and languageId must be defined');\n\t\t}\n\n\t\treturn this.actionRunner.run(\n\t\t\t'findById',\n\t\t\t{\n\t\t\t\tid: locationId,\n\t\t\t\tlanguageId: languageId\n\t\t\t})\n\t\t\t.then(this.processResponse.bind(this))\n\t\t\t.then(this.#convertLocation.bind(this));\n\t}\n\n\t#convertCollection(collectionJsonData: Array): Array<Location>\n\t{\n\t\tif(!Array.isArray(collectionJsonData))\n\t\t{\n\t\t\tthrow new Error('Can\\'t convert location collection data');\n\t\t}\n\n\t\tconst result = [];\n\n\t\tcollectionJsonData.forEach((location) => {\n\t\t\tresult.push(\n\t\t\t\tthis.#convertLocation(location)\n\t\t\t);\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t#convertLocation(locationData)\n\t{\n\t\tif(!locationData)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tif(typeof locationData !== 'object')\n\t\t{\n\t\t\tthrow new Error('Can\\'t convert location data');\n\t\t}\n\n\t\treturn LocationJsonConverter.convertJsonToLocation(locationData);\n\t}\n}","import {Address} from 'location.core';\nimport BaseRepository from './baserepository';\n\nexport default class AddressRepository extends BaseRepository\n{\n\tconstructor(props = {})\n\t{\n\t\tprops.path = 'location.api.address';\n\t\tsuper(props);\n\t}\n\n\tfindById(addressId: number)\n\t{\n\t\tif(addressId <= 0)\n\t\t{\n\t\t\tthrow new Error('addressId must be more than zero');\n\t\t}\n\n\t\treturn this.actionRunner.run(\n\t\t\t'findById',\n\t\t\t{\n\t\t\t\taddressId: addressId,\n\t\t\t})\n\t\t\t.then(this.processResponse)\n\t\t\t.then((address) => { // address json data or null\n\t\t\t\tlet result = null;\n\n\t\t\t\tif(address)\n\t\t\t\t{\n\t\t\t\t\tresult = this.convertJsonToAddress(address);\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t});\n\t}\n\n\tsave(address)\n\t{\n\t\tif(!address)\n\t\t{\n\t\t\tthrow new Error('address must be defined');\n\t\t}\n\n\t\treturn this.actionRunner.run(\n\t\t\t'save',\n\t\t\t{\n\t\t\t\taddress: address,\n\t\t\t})\n\t\t\t.then(this.processResponse)\n\t\t\t.then((response) => {\t//Address json data\n\t\t\t\tlet result = null;\n\n\t\t\t\tif(typeof response === 'object')\n\t\t\t\t{\n\t\t\t\t\tresult = this.convertJsonToAddress(response);\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t});\n\t}\n\n\tconvertJsonToAddress(jsonData)\n\t{\n\t\treturn new Address(jsonData);\n\t}\n}\n\n","import BaseRepository from \"./baserepository\";\nimport Format from \"../entity/format\";\nimport {Type} from \"main.core\";\n\n/**\n * Class responsible for the addresses format obtaining.\n */\nexport default class FormatRepository extends BaseRepository\n{\n\tconstructor(props = {}) {\n\t\tprops.path = 'location.api.format';\n\t\tsuper(props);\n\t}\n\n\t/**\n\t * Find all available formats\n\t * @param {string} languageId\n\t * @returns {Promise}\n\t */\n\tfindAll(languageId: string): Promise\n\t{\n\t\tif(!Type.isString(languageId))\n\t\t{\n\t\t\tthrow new TypeError('languageId must be type of string');\n\t\t}\n\n\t\treturn this.actionRunner.run(\n\t\t\t'findAll',\n\t\t\t{\n\t\t\t\tlanguageId: languageId\n\t\t\t})\n\t\t\t.then(this.processResponse)\n\t\t\t.then(\n\t\t\t\t(data) => this.convertFormatCollection(data)\n\t\t\t);\n\t}\n\n\t/**\n\t * Find address format by its code\n\t * @param {string} formatCode\n\t * @param {string} languageId\n\t * @returns {Promise}\n\t */\n\tfindByCode(formatCode: string, languageId: string): Promise\n\t{\n\t\tif(!Type.isString(formatCode))\n\t\t{\n\t\t\tthrow new TypeError('formatCode must be type of string');\n\t\t}\n\n\t\tif(!Type.isString(languageId))\n\t\t{\n\t\t\tthrow new TypeError('languageId must be type of string');\n\t\t}\n\n\t\treturn this.actionRunner.run(\n\t\t\t'findByCode',\n\t\t\t{\n\t\t\t\tformatCode: formatCode,\n\t\t\t\tlanguageId: languageId\n\t\t\t})\n\t\t\t.then(this.processResponse)\n\t\t\t.then(this.convertFormatData);\n\t}\n\n\t/**\n\t * Find default address format\n\t * @param {string} languageId\n\t * @returns {Promise}\n\t */\n\tfindDefault(languageId: string): Promise\n\t{\n\t\tif(!Type.isString(languageId))\n\t\t{\n\t\t\tthrow new TypeError('languageId must be type of string');\n\t\t}\n\n\t\treturn this.actionRunner.run(\n\t\t\t'findDefault',\n\t\t\t{\n\t\t\t\tlanguageId: languageId\n\t\t\t})\n\t\t\t.then(this.processResponse)\n\t\t\t.then(this.convertFormatData);\n\t}\n\n\tconvertFormatCollection(formatDataCollection: Array): Array<Format>\n\t{\n\t\tif(!Type.isArray(formatDataCollection))\n\t\t{\n\t\t\tthrow new TypeError('Can\\'t convert format collection data');\n\t\t}\n\n\t\tlet result = [];\n\n\t\tformatDataCollection.forEach((format) => {\n\t\t\tresult.push(\n\t\t\t\tthis.convertFormatData(format)\n\t\t\t);\n\t\t});\n\t\t\n\t\treturn result;\n\t}\n\n\tconvertFormatData(formatData: {}): Format\n\t{\n\t\tif(!Type.isObject(formatData))\n\t\t{\n\t\t\tthrow new TypeError('Can\\'t convert format data');\n\t\t}\n\n\t\treturn new Format(formatData);\n\t}\n}\n","import BaseRepository from './baserepository';\n\nexport default class SourceRepository extends BaseRepository\n{\n\tconstructor(props = {}) {\n\t\tprops.path = 'location.api.source';\n\t\tsuper(props);\n\t}\n\n\tgetProps(): Promise\n\t{\n\t\treturn this.actionRunner.run('getProps', {})\n\t\t\t.then(this.processResponse);\n\t}\n}\n","/**\n * Base class for AutocompleteServices\n */\nexport default class AutocompleteServiceBase\n{\n\tautocomplete(text: string, params: Object): Promise\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n}","import {Location} from 'location.core';\n\nexport type BasePhotoServiceRequestPhotosPropsType = {\n\tlocation: Location,\n\tthumbnailHeight: number,\n\tthumbnailWidth: number,\n\tmaxPhotoCount: number\n}\n\nexport default class PhotoServiceBase\n{\n\trequestPhotos(props: BasePhotoServiceRequestPhotosPropsType): Promise\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n}","import {EventEmitter} from \"main.core.events\";\nimport {Location} from \"location.core\";\n\n/**\n * Base class for source maps\n */\nexport default class MapBase extends EventEmitter\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.setEventNamespace('BX.Location.Core.MapBase');\n\t}\n\n\trender(props: object): void\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n\n\tset location(location: Location): void\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n\n\tset mode(mode: string): void\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n\n\tset zoom(zoom: number): void\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n\n\tonLocationChangedEventSubscribe(listener: function): void\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n\n\tdestroy()\n\t{\n\n\t}\n}","import AutocompleteServiceBase from \"./autocompleteservicebase\";\nimport PhotoServiceBase from \"./photoservicebase\";\nimport MapBase from \"./mapbase\";\n\n/**\n * Base class for the sources\n */\nexport default class SourceBase\n{\n\tget sourceCode(): string\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n\n\tget map(): MapBase\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n\n\tget autocompleteService(): AutocompleteServiceBase\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n\n\tget photoService(): PhotoServiceBase\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n\n\tget geocodingService()\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n}","import {Location} from 'location.core';\n\nexport default class GeocodingServiceBase\n{\n\tgeocode(addressString: string): Promise<Array<Location>, Error>\n\t{\n\t\tthrow new Error('Must be implemented');\n\t}\n}","export default class ControlMode\n{\n\tstatic get edit()\n\t{\n\t\treturn 'edit';\n\t}\n\n\tstatic get view()\n\t{\n\t\treturn 'view';\n\t}\n\n\tstatic isValid(mode: string)\n\t{\n\t\treturn mode === ControlMode.edit || mode === ControlMode.view;\n\t}\n}","export default class LocationFieldType\n{\n\tstatic POSTAL_CODE = 50;\n\tstatic ISO_3166_1_ALPHA_2 = 1000;\n}","export class SourceCreationError extends Error\n{\n}\n\nexport class MethodNotImplemented extends Error\n{\n}\n","import {EventEmitter} from 'main.core.events';\n\nexport default class ErrorPublisher extends EventEmitter\n{\n\tstatic #instance = null;\n\tstatic #onErrorEvent = 'onError';\n\n\tstatic getInstance()\n\t{\n\t\tif(ErrorPublisher.#instance === null)\n\t\t{\n\t\t\tErrorPublisher.#instance = new ErrorPublisher();\n\t\t}\n\n\t\treturn ErrorPublisher.#instance;\n\t}\n\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.setEventNamespace('BX.Location.Core.ErrorPublisher');\n\t}\n\n\tnotify(errors: Error[])\n\t{\n\t\tthis.emit(ErrorPublisher.#onErrorEvent, {errors});\n\t}\n\n\tsubscribe(listener)\n\t{\n\t\tsuper.subscribe(ErrorPublisher.#onErrorEvent, listener);\n\t}\n}","export default class Limit\n{\n\tstatic isAddressLimitReached()\n\t{\n\t\treturn BX.message('LOCATION_IS_ADDRESS_LIMIT_REACHED');\n\t}\n}"],"names":["Field","props","type","Error","parseInt","FieldCollection","fields","isFieldExists","field","types","Object","keys","sort","a","b","result","length","Array","isArray","setField","AddressField","value","AddressFieldCollection","getField","AddressLink","entityId","entityType","AddressLinkCollection","links","link","push","addLink","FormatField","name","description","FormatFieldCollection","fieldsData","forEach","data","Format","Type","isUndefined","languageId","TypeError","code","template","delimiter","fieldForUnRecognized","AddressType","UNKNOWN","isObject","fieldCollection","initFields","LocationType","StringConverter","address","format","strategyType","contentType","STRATEGY_TYPE_TEMPLATE","convertAddressToStringTemplate","STRATEGY_TYPE_FIELD_SORT","fieldSorter","convertAddressToStringByField","STRATEGY_TYPE_FIELD_TYPE","sortResult","CONTENT_TYPE_HTML","replace","components","match","component","fieldValue","getFieldValue","Text","encode","componentReplacer","BX","debug","Address","values","JsonConverter","jsonData","obj","id","latitude","longitude","location","JSON","parse","toJson","stringify","map","entries","setFieldValue","Location","convertAddressToJson","strategy","convertAddressToString","locationObj","getMaxFieldType","clearLinks","LocationField","LocationFieldCollection","LocationObjectConverter","externalId","sourceCode","LocationJsonConverter","initData","convertLocationToObject","convertLocationToJson","addressObj","ActionRunner","path","action","ajax","runAction","BaseRepository","_path","actionRunner","response","status","message","errors","error","LocationRepository","run","then","processResponse","bind","locationId","collectionJsonData","locationData","convertJsonToLocation","AddressRepository","addressId","convertJsonToAddress","FormatRepository","isString","convertFormatCollection","formatCode","convertFormatData","formatDataCollection","formatData","SourceRepository","AutocompleteServiceBase","text","params","PhotoServiceBase","MapBase","setEventNamespace","listener","mode","zoom","EventEmitter","SourceBase","GeocodingServiceBase","addressString","ControlMode","edit","view","LocationFieldType","SourceCreationError","MethodNotImplemented","ErrorPublisher","emit","Limit"],"mappings":"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"}