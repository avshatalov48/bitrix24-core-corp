<?php

/* ORMENTITYANNOTATION:Bitrix\Crm\Activity\Entity\AppTypeTable:crm/lib/activity/entity/apptype.php:f9a44227662c2a418637291269502182 */
namespace Bitrix\Crm\Activity\Entity {
	/**
	 * EO_AppType
	 * @see \Bitrix\Crm\Activity\Entity\AppTypeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getAppId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType setAppId(\int|\Bitrix\Main\DB\SqlExpression $appId)
	 * @method bool hasAppId()
	 * @method bool isAppIdFilled()
	 * @method bool isAppIdChanged()
	 * @method \int remindActualAppId()
	 * @method \int requireAppId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType resetAppId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType unsetAppId()
	 * @method \int fillAppId()
	 * @method \string getTypeId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType setTypeId(\string|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string remindActualTypeId()
	 * @method \string requireTypeId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType resetTypeId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType unsetTypeId()
	 * @method \string fillTypeId()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType resetName()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType unsetName()
	 * @method \string fillName()
	 * @method \int getIconId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType setIconId(\int|\Bitrix\Main\DB\SqlExpression $iconId)
	 * @method bool hasIconId()
	 * @method bool isIconIdFilled()
	 * @method bool isIconIdChanged()
	 * @method \int remindActualIconId()
	 * @method \int requireIconId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType resetIconId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType unsetIconId()
	 * @method \int fillIconId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType set($fieldName, $value)
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType reset($fieldName)
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Activity\Entity\EO_AppType wakeUp($data)
	 */
	class EO_AppType {
		/* @var \Bitrix\Crm\Activity\Entity\AppTypeTable */
		static public $dataClass = '\Bitrix\Crm\Activity\Entity\AppTypeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Activity\Entity {
	/**
	 * EO_AppType_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getAppIdList()
	 * @method \int[] fillAppId()
	 * @method \string[] getTypeIdList()
	 * @method \string[] fillTypeId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getIconIdList()
	 * @method \int[] fillIconId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Activity\Entity\EO_AppType $object)
	 * @method bool has(\Bitrix\Crm\Activity\Entity\EO_AppType $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType getByPrimary($primary)
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType[] getAll()
	 * @method bool remove(\Bitrix\Crm\Activity\Entity\EO_AppType $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Activity\Entity\EO_AppType_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_AppType_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Activity\Entity\AppTypeTable */
		static public $dataClass = '\Bitrix\Crm\Activity\Entity\AppTypeTable';
	}
}
namespace Bitrix\Crm\Activity\Entity {
	/**
	 * @method static EO_AppType_Query query()
	 * @method static EO_AppType_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_AppType_Result getById($id)
	 * @method static EO_AppType_Result getList(array $parameters = array())
	 * @method static EO_AppType_Entity getEntity()
	 * @method static \Bitrix\Crm\Activity\Entity\EO_AppType createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Activity\Entity\EO_AppType_Collection createCollection()
	 * @method static \Bitrix\Crm\Activity\Entity\EO_AppType wakeUpObject($row)
	 * @method static \Bitrix\Crm\Activity\Entity\EO_AppType_Collection wakeUpCollection($rows)
	 */
	class AppTypeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_AppType_Result exec()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType fetchObject()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_AppType_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType fetchObject()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType_Collection fetchCollection()
	 */
	class EO_AppType_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType_Collection createCollection()
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType wakeUpObject($row)
	 * @method \Bitrix\Crm\Activity\Entity\EO_AppType_Collection wakeUpCollection($rows)
	 */
	class EO_AppType_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Activity\Entity\CustomTypeTable:crm/lib/activity/entity/customtype.php:1f7c2565df7283df303f40970f46a9e4 */
namespace Bitrix\Crm\Activity\Entity {
	/**
	 * EO_CustomType
	 * @see \Bitrix\Crm\Activity\Entity\CustomTypeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType resetCreatedDate()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType resetName()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType unsetName()
	 * @method \string fillName()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType resetSort()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType unsetSort()
	 * @method \int fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType set($fieldName, $value)
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType reset($fieldName)
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Activity\Entity\EO_CustomType wakeUp($data)
	 */
	class EO_CustomType {
		/* @var \Bitrix\Crm\Activity\Entity\CustomTypeTable */
		static public $dataClass = '\Bitrix\Crm\Activity\Entity\CustomTypeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Activity\Entity {
	/**
	 * EO_CustomType_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Activity\Entity\EO_CustomType $object)
	 * @method bool has(\Bitrix\Crm\Activity\Entity\EO_CustomType $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType getByPrimary($primary)
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType[] getAll()
	 * @method bool remove(\Bitrix\Crm\Activity\Entity\EO_CustomType $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Activity\Entity\EO_CustomType_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CustomType_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Activity\Entity\CustomTypeTable */
		static public $dataClass = '\Bitrix\Crm\Activity\Entity\CustomTypeTable';
	}
}
namespace Bitrix\Crm\Activity\Entity {
	/**
	 * @method static EO_CustomType_Query query()
	 * @method static EO_CustomType_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CustomType_Result getById($id)
	 * @method static EO_CustomType_Result getList(array $parameters = array())
	 * @method static EO_CustomType_Entity getEntity()
	 * @method static \Bitrix\Crm\Activity\Entity\EO_CustomType createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Activity\Entity\EO_CustomType_Collection createCollection()
	 * @method static \Bitrix\Crm\Activity\Entity\EO_CustomType wakeUpObject($row)
	 * @method static \Bitrix\Crm\Activity\Entity\EO_CustomType_Collection wakeUpCollection($rows)
	 */
	class CustomTypeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CustomType_Result exec()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType fetchObject()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CustomType_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType fetchObject()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType_Collection fetchCollection()
	 */
	class EO_CustomType_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType_Collection createCollection()
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType wakeUpObject($row)
	 * @method \Bitrix\Crm\Activity\Entity\EO_CustomType_Collection wakeUpCollection($rows)
	 */
	class EO_CustomType_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Activity\MailMetaTable:crm/lib/activity/mailmeta.php:37a5af68c999797bbdb02a319596defd */
namespace Bitrix\Crm\Activity {
	/**
	 * EO_MailMeta
	 * @see \Bitrix\Crm\Activity\MailMetaTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getActivityId()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta setActivityId(\int|\Bitrix\Main\DB\SqlExpression $activityId)
	 * @method bool hasActivityId()
	 * @method bool isActivityIdFilled()
	 * @method bool isActivityIdChanged()
	 * @method \string getMsgIdHash()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta setMsgIdHash(\string|\Bitrix\Main\DB\SqlExpression $msgIdHash)
	 * @method bool hasMsgIdHash()
	 * @method bool isMsgIdHashFilled()
	 * @method bool isMsgIdHashChanged()
	 * @method \string remindActualMsgIdHash()
	 * @method \string requireMsgIdHash()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta resetMsgIdHash()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta unsetMsgIdHash()
	 * @method \string fillMsgIdHash()
	 * @method \string getMsgInreplyHash()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta setMsgInreplyHash(\string|\Bitrix\Main\DB\SqlExpression $msgInreplyHash)
	 * @method bool hasMsgInreplyHash()
	 * @method bool isMsgInreplyHashFilled()
	 * @method bool isMsgInreplyHashChanged()
	 * @method \string remindActualMsgInreplyHash()
	 * @method \string requireMsgInreplyHash()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta resetMsgInreplyHash()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta unsetMsgInreplyHash()
	 * @method \string fillMsgInreplyHash()
	 * @method \string getMsgHeaderHash()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta setMsgHeaderHash(\string|\Bitrix\Main\DB\SqlExpression $msgHeaderHash)
	 * @method bool hasMsgHeaderHash()
	 * @method bool isMsgHeaderHashFilled()
	 * @method bool isMsgHeaderHashChanged()
	 * @method \string remindActualMsgHeaderHash()
	 * @method \string requireMsgHeaderHash()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta resetMsgHeaderHash()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta unsetMsgHeaderHash()
	 * @method \string fillMsgHeaderHash()
	 * @method \Bitrix\Crm\EO_Activity getActivity()
	 * @method \Bitrix\Crm\EO_Activity remindActualActivity()
	 * @method \Bitrix\Crm\EO_Activity requireActivity()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta setActivity(\Bitrix\Crm\EO_Activity $object)
	 * @method \Bitrix\Crm\Activity\EO_MailMeta resetActivity()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta unsetActivity()
	 * @method bool hasActivity()
	 * @method bool isActivityFilled()
	 * @method bool isActivityChanged()
	 * @method \Bitrix\Crm\EO_Activity fillActivity()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Activity\EO_MailMeta set($fieldName, $value)
	 * @method \Bitrix\Crm\Activity\EO_MailMeta reset($fieldName)
	 * @method \Bitrix\Crm\Activity\EO_MailMeta unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Activity\EO_MailMeta wakeUp($data)
	 */
	class EO_MailMeta {
		/* @var \Bitrix\Crm\Activity\MailMetaTable */
		static public $dataClass = '\Bitrix\Crm\Activity\MailMetaTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Activity {
	/**
	 * EO_MailMeta_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getActivityIdList()
	 * @method \string[] getMsgIdHashList()
	 * @method \string[] fillMsgIdHash()
	 * @method \string[] getMsgInreplyHashList()
	 * @method \string[] fillMsgInreplyHash()
	 * @method \string[] getMsgHeaderHashList()
	 * @method \string[] fillMsgHeaderHash()
	 * @method \Bitrix\Crm\EO_Activity[] getActivityList()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta_Collection getActivityCollection()
	 * @method \Bitrix\Crm\EO_Activity_Collection fillActivity()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Activity\EO_MailMeta $object)
	 * @method bool has(\Bitrix\Crm\Activity\EO_MailMeta $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Activity\EO_MailMeta getByPrimary($primary)
	 * @method \Bitrix\Crm\Activity\EO_MailMeta[] getAll()
	 * @method bool remove(\Bitrix\Crm\Activity\EO_MailMeta $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Activity\EO_MailMeta_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Activity\EO_MailMeta current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_MailMeta_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Activity\MailMetaTable */
		static public $dataClass = '\Bitrix\Crm\Activity\MailMetaTable';
	}
}
namespace Bitrix\Crm\Activity {
	/**
	 * @method static EO_MailMeta_Query query()
	 * @method static EO_MailMeta_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_MailMeta_Result getById($id)
	 * @method static EO_MailMeta_Result getList(array $parameters = array())
	 * @method static EO_MailMeta_Entity getEntity()
	 * @method static \Bitrix\Crm\Activity\EO_MailMeta createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Activity\EO_MailMeta_Collection createCollection()
	 * @method static \Bitrix\Crm\Activity\EO_MailMeta wakeUpObject($row)
	 * @method static \Bitrix\Crm\Activity\EO_MailMeta_Collection wakeUpCollection($rows)
	 */
	class MailMetaTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_MailMeta_Result exec()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta fetchObject()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_MailMeta_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Activity\EO_MailMeta fetchObject()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta_Collection fetchCollection()
	 */
	class EO_MailMeta_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Activity\EO_MailMeta createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Activity\EO_MailMeta_Collection createCollection()
	 * @method \Bitrix\Crm\Activity\EO_MailMeta wakeUpObject($row)
	 * @method \Bitrix\Crm\Activity\EO_MailMeta_Collection wakeUpCollection($rows)
	 */
	class EO_MailMeta_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\ActivityTable:crm/lib/activity.php:8e0f361222f4ee04c9898cc5d060640f */
namespace Bitrix\Crm {
	/**
	 * EO_Activity
	 * @see \Bitrix\Crm\ActivityTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Activity setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\EO_Activity setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Crm\EO_Activity resetTypeId()
	 * @method \Bitrix\Crm\EO_Activity unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\EO_Activity setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string remindActualProviderId()
	 * @method \string requireProviderId()
	 * @method \Bitrix\Crm\EO_Activity resetProviderId()
	 * @method \Bitrix\Crm\EO_Activity unsetProviderId()
	 * @method \string fillProviderId()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\EO_Activity setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \string remindActualProviderTypeId()
	 * @method \string requireProviderTypeId()
	 * @method \Bitrix\Crm\EO_Activity resetProviderTypeId()
	 * @method \Bitrix\Crm\EO_Activity unsetProviderTypeId()
	 * @method \string fillProviderTypeId()
	 * @method \string getProviderGroupId()
	 * @method \Bitrix\Crm\EO_Activity setProviderGroupId(\string|\Bitrix\Main\DB\SqlExpression $providerGroupId)
	 * @method bool hasProviderGroupId()
	 * @method bool isProviderGroupIdFilled()
	 * @method bool isProviderGroupIdChanged()
	 * @method \string remindActualProviderGroupId()
	 * @method \string requireProviderGroupId()
	 * @method \Bitrix\Crm\EO_Activity resetProviderGroupId()
	 * @method \Bitrix\Crm\EO_Activity unsetProviderGroupId()
	 * @method \string fillProviderGroupId()
	 * @method \int getDirection()
	 * @method \Bitrix\Crm\EO_Activity setDirection(\int|\Bitrix\Main\DB\SqlExpression $direction)
	 * @method bool hasDirection()
	 * @method bool isDirectionFilled()
	 * @method bool isDirectionChanged()
	 * @method \int remindActualDirection()
	 * @method \int requireDirection()
	 * @method \Bitrix\Crm\EO_Activity resetDirection()
	 * @method \Bitrix\Crm\EO_Activity unsetDirection()
	 * @method \int fillDirection()
	 * @method \boolean getIsMeeting()
	 * @method \boolean remindActualIsMeeting()
	 * @method \boolean requireIsMeeting()
	 * @method bool hasIsMeeting()
	 * @method bool isIsMeetingFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetIsMeeting()
	 * @method \boolean fillIsMeeting()
	 * @method \boolean getIsCall()
	 * @method \boolean remindActualIsCall()
	 * @method \boolean requireIsCall()
	 * @method bool hasIsCall()
	 * @method bool isIsCallFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetIsCall()
	 * @method \boolean fillIsCall()
	 * @method \boolean getIsCallIn()
	 * @method \boolean remindActualIsCallIn()
	 * @method \boolean requireIsCallIn()
	 * @method bool hasIsCallIn()
	 * @method bool isIsCallInFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetIsCallIn()
	 * @method \boolean fillIsCallIn()
	 * @method \boolean getIsCallOut()
	 * @method \boolean remindActualIsCallOut()
	 * @method \boolean requireIsCallOut()
	 * @method bool hasIsCallOut()
	 * @method bool isIsCallOutFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetIsCallOut()
	 * @method \boolean fillIsCallOut()
	 * @method \boolean getIsTask()
	 * @method \boolean remindActualIsTask()
	 * @method \boolean requireIsTask()
	 * @method bool hasIsTask()
	 * @method bool isIsTaskFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetIsTask()
	 * @method \boolean fillIsTask()
	 * @method \boolean getIsEmail()
	 * @method \boolean remindActualIsEmail()
	 * @method \boolean requireIsEmail()
	 * @method bool hasIsEmail()
	 * @method bool isIsEmailFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetIsEmail()
	 * @method \boolean fillIsEmail()
	 * @method \boolean getIsEmailIn()
	 * @method \boolean remindActualIsEmailIn()
	 * @method \boolean requireIsEmailIn()
	 * @method bool hasIsEmailIn()
	 * @method bool isIsEmailInFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetIsEmailIn()
	 * @method \boolean fillIsEmailIn()
	 * @method \boolean getIsEmailOut()
	 * @method \boolean remindActualIsEmailOut()
	 * @method \boolean requireIsEmailOut()
	 * @method bool hasIsEmailOut()
	 * @method bool isIsEmailOutFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetIsEmailOut()
	 * @method \boolean fillIsEmailOut()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\EO_Activity setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\EO_Activity resetOwnerId()
	 * @method \Bitrix\Crm\EO_Activity unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \int getOwnerTypeId()
	 * @method \Bitrix\Crm\EO_Activity setOwnerTypeId(\int|\Bitrix\Main\DB\SqlExpression $ownerTypeId)
	 * @method bool hasOwnerTypeId()
	 * @method bool isOwnerTypeIdFilled()
	 * @method bool isOwnerTypeIdChanged()
	 * @method \int remindActualOwnerTypeId()
	 * @method \int requireOwnerTypeId()
	 * @method \Bitrix\Crm\EO_Activity resetOwnerTypeId()
	 * @method \Bitrix\Crm\EO_Activity unsetOwnerTypeId()
	 * @method \int fillOwnerTypeId()
	 * @method \int getAssociatedEntityId()
	 * @method \Bitrix\Crm\EO_Activity setAssociatedEntityId(\int|\Bitrix\Main\DB\SqlExpression $associatedEntityId)
	 * @method bool hasAssociatedEntityId()
	 * @method bool isAssociatedEntityIdFilled()
	 * @method bool isAssociatedEntityIdChanged()
	 * @method \int remindActualAssociatedEntityId()
	 * @method \int requireAssociatedEntityId()
	 * @method \Bitrix\Crm\EO_Activity resetAssociatedEntityId()
	 * @method \Bitrix\Crm\EO_Activity unsetAssociatedEntityId()
	 * @method \int fillAssociatedEntityId()
	 * @method \string getSubject()
	 * @method \Bitrix\Crm\EO_Activity setSubject(\string|\Bitrix\Main\DB\SqlExpression $subject)
	 * @method bool hasSubject()
	 * @method bool isSubjectFilled()
	 * @method bool isSubjectChanged()
	 * @method \string remindActualSubject()
	 * @method \string requireSubject()
	 * @method \Bitrix\Crm\EO_Activity resetSubject()
	 * @method \Bitrix\Crm\EO_Activity unsetSubject()
	 * @method \string fillSubject()
	 * @method \boolean getCompleted()
	 * @method \Bitrix\Crm\EO_Activity setCompleted(\boolean|\Bitrix\Main\DB\SqlExpression $completed)
	 * @method bool hasCompleted()
	 * @method bool isCompletedFilled()
	 * @method bool isCompletedChanged()
	 * @method \boolean remindActualCompleted()
	 * @method \boolean requireCompleted()
	 * @method \Bitrix\Crm\EO_Activity resetCompleted()
	 * @method \Bitrix\Crm\EO_Activity unsetCompleted()
	 * @method \boolean fillCompleted()
	 * @method \boolean getIsHandleable()
	 * @method \Bitrix\Crm\EO_Activity setIsHandleable(\boolean|\Bitrix\Main\DB\SqlExpression $isHandleable)
	 * @method bool hasIsHandleable()
	 * @method bool isIsHandleableFilled()
	 * @method bool isIsHandleableChanged()
	 * @method \boolean remindActualIsHandleable()
	 * @method \boolean requireIsHandleable()
	 * @method \Bitrix\Crm\EO_Activity resetIsHandleable()
	 * @method \Bitrix\Crm\EO_Activity unsetIsHandleable()
	 * @method \boolean fillIsHandleable()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\EO_Activity setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\EO_Activity resetResponsibleId()
	 * @method \Bitrix\Crm\EO_Activity unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\EO_User getAssignedBy()
	 * @method \Bitrix\Main\EO_User remindActualAssignedBy()
	 * @method \Bitrix\Main\EO_User requireAssignedBy()
	 * @method \Bitrix\Crm\EO_Activity setAssignedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Activity resetAssignedBy()
	 * @method \Bitrix\Crm\EO_Activity unsetAssignedBy()
	 * @method bool hasAssignedBy()
	 * @method bool isAssignedByFilled()
	 * @method bool isAssignedByChanged()
	 * @method \Bitrix\Main\EO_User fillAssignedBy()
	 * @method \int getPriority()
	 * @method \Bitrix\Crm\EO_Activity setPriority(\int|\Bitrix\Main\DB\SqlExpression $priority)
	 * @method bool hasPriority()
	 * @method bool isPriorityFilled()
	 * @method bool isPriorityChanged()
	 * @method \int remindActualPriority()
	 * @method \int requirePriority()
	 * @method \Bitrix\Crm\EO_Activity resetPriority()
	 * @method \Bitrix\Crm\EO_Activity unsetPriority()
	 * @method \int fillPriority()
	 * @method \int getNotifyType()
	 * @method \Bitrix\Crm\EO_Activity setNotifyType(\int|\Bitrix\Main\DB\SqlExpression $notifyType)
	 * @method bool hasNotifyType()
	 * @method bool isNotifyTypeFilled()
	 * @method bool isNotifyTypeChanged()
	 * @method \int remindActualNotifyType()
	 * @method \int requireNotifyType()
	 * @method \Bitrix\Crm\EO_Activity resetNotifyType()
	 * @method \Bitrix\Crm\EO_Activity unsetNotifyType()
	 * @method \int fillNotifyType()
	 * @method \int getNotifyValue()
	 * @method \Bitrix\Crm\EO_Activity setNotifyValue(\int|\Bitrix\Main\DB\SqlExpression $notifyValue)
	 * @method bool hasNotifyValue()
	 * @method bool isNotifyValueFilled()
	 * @method bool isNotifyValueChanged()
	 * @method \int remindActualNotifyValue()
	 * @method \int requireNotifyValue()
	 * @method \Bitrix\Crm\EO_Activity resetNotifyValue()
	 * @method \Bitrix\Crm\EO_Activity unsetNotifyValue()
	 * @method \int fillNotifyValue()
	 * @method \string getLocation()
	 * @method \Bitrix\Crm\EO_Activity setLocation(\string|\Bitrix\Main\DB\SqlExpression $location)
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \string remindActualLocation()
	 * @method \string requireLocation()
	 * @method \Bitrix\Crm\EO_Activity resetLocation()
	 * @method \Bitrix\Crm\EO_Activity unsetLocation()
	 * @method \string fillLocation()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Crm\EO_Activity setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Crm\EO_Activity resetCreated()
	 * @method \Bitrix\Crm\EO_Activity unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \Bitrix\Main\Type\DateTime getDateCreatedShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreatedShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreatedShort()
	 * @method bool hasDateCreatedShort()
	 * @method bool isDateCreatedShortFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetDateCreatedShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreatedShort()
	 * @method \Bitrix\Main\Type\DateTime getLastUpdated()
	 * @method \Bitrix\Crm\EO_Activity setLastUpdated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastUpdated)
	 * @method bool hasLastUpdated()
	 * @method bool isLastUpdatedFilled()
	 * @method bool isLastUpdatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastUpdated()
	 * @method \Bitrix\Main\Type\DateTime requireLastUpdated()
	 * @method \Bitrix\Crm\EO_Activity resetLastUpdated()
	 * @method \Bitrix\Crm\EO_Activity unsetLastUpdated()
	 * @method \Bitrix\Main\Type\DateTime fillLastUpdated()
	 * @method \Bitrix\Main\Type\DateTime getLastUpdatedShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastUpdatedShort()
	 * @method \Bitrix\Main\Type\DateTime requireLastUpdatedShort()
	 * @method bool hasLastUpdatedShort()
	 * @method bool isLastUpdatedShortFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetLastUpdatedShort()
	 * @method \Bitrix\Main\Type\DateTime fillLastUpdatedShort()
	 * @method \Bitrix\Main\Type\DateTime getDateFinishedShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateFinishedShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateFinishedShort()
	 * @method bool hasDateFinishedShort()
	 * @method bool isDateFinishedShortFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetDateFinishedShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateFinishedShort()
	 * @method \Bitrix\Main\Type\DateTime getStartTime()
	 * @method \Bitrix\Crm\EO_Activity setStartTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $startTime)
	 * @method bool hasStartTime()
	 * @method bool isStartTimeFilled()
	 * @method bool isStartTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualStartTime()
	 * @method \Bitrix\Main\Type\DateTime requireStartTime()
	 * @method \Bitrix\Crm\EO_Activity resetStartTime()
	 * @method \Bitrix\Crm\EO_Activity unsetStartTime()
	 * @method \Bitrix\Main\Type\DateTime fillStartTime()
	 * @method \Bitrix\Main\Type\DateTime getStartTimeShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualStartTimeShort()
	 * @method \Bitrix\Main\Type\DateTime requireStartTimeShort()
	 * @method bool hasStartTimeShort()
	 * @method bool isStartTimeShortFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetStartTimeShort()
	 * @method \Bitrix\Main\Type\DateTime fillStartTimeShort()
	 * @method \Bitrix\Main\Type\DateTime getEndTime()
	 * @method \Bitrix\Crm\EO_Activity setEndTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $endTime)
	 * @method bool hasEndTime()
	 * @method bool isEndTimeFilled()
	 * @method bool isEndTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualEndTime()
	 * @method \Bitrix\Main\Type\DateTime requireEndTime()
	 * @method \Bitrix\Crm\EO_Activity resetEndTime()
	 * @method \Bitrix\Crm\EO_Activity unsetEndTime()
	 * @method \Bitrix\Main\Type\DateTime fillEndTime()
	 * @method \Bitrix\Main\Type\DateTime getEndTimeShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualEndTimeShort()
	 * @method \Bitrix\Main\Type\DateTime requireEndTimeShort()
	 * @method bool hasEndTimeShort()
	 * @method bool isEndTimeShortFilled()
	 * @method \Bitrix\Crm\EO_Activity unsetEndTimeShort()
	 * @method \Bitrix\Main\Type\DateTime fillEndTimeShort()
	 * @method \Bitrix\Main\Type\DateTime getDeadline()
	 * @method \Bitrix\Crm\EO_Activity setDeadline(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $deadline)
	 * @method bool hasDeadline()
	 * @method bool isDeadlineFilled()
	 * @method bool isDeadlineChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDeadline()
	 * @method \Bitrix\Main\Type\DateTime requireDeadline()
	 * @method \Bitrix\Crm\EO_Activity resetDeadline()
	 * @method \Bitrix\Crm\EO_Activity unsetDeadline()
	 * @method \Bitrix\Main\Type\DateTime fillDeadline()
	 * @method \int getParentId()
	 * @method \Bitrix\Crm\EO_Activity setParentId(\int|\Bitrix\Main\DB\SqlExpression $parentId)
	 * @method bool hasParentId()
	 * @method bool isParentIdFilled()
	 * @method bool isParentIdChanged()
	 * @method \int remindActualParentId()
	 * @method \int requireParentId()
	 * @method \Bitrix\Crm\EO_Activity resetParentId()
	 * @method \Bitrix\Crm\EO_Activity unsetParentId()
	 * @method \int fillParentId()
	 * @method \string getUrn()
	 * @method \Bitrix\Crm\EO_Activity setUrn(\string|\Bitrix\Main\DB\SqlExpression $urn)
	 * @method bool hasUrn()
	 * @method bool isUrnFilled()
	 * @method bool isUrnChanged()
	 * @method \string remindActualUrn()
	 * @method \string requireUrn()
	 * @method \Bitrix\Crm\EO_Activity resetUrn()
	 * @method \Bitrix\Crm\EO_Activity unsetUrn()
	 * @method \string fillUrn()
	 * @method \string getOriginId()
	 * @method \Bitrix\Crm\EO_Activity setOriginId(\string|\Bitrix\Main\DB\SqlExpression $originId)
	 * @method bool hasOriginId()
	 * @method bool isOriginIdFilled()
	 * @method bool isOriginIdChanged()
	 * @method \string remindActualOriginId()
	 * @method \string requireOriginId()
	 * @method \Bitrix\Crm\EO_Activity resetOriginId()
	 * @method \Bitrix\Crm\EO_Activity unsetOriginId()
	 * @method \string fillOriginId()
	 * @method \string getOriginatorId()
	 * @method \Bitrix\Crm\EO_Activity setOriginatorId(\string|\Bitrix\Main\DB\SqlExpression $originatorId)
	 * @method bool hasOriginatorId()
	 * @method bool isOriginatorIdFilled()
	 * @method bool isOriginatorIdChanged()
	 * @method \string remindActualOriginatorId()
	 * @method \string requireOriginatorId()
	 * @method \Bitrix\Crm\EO_Activity resetOriginatorId()
	 * @method \Bitrix\Crm\EO_Activity unsetOriginatorId()
	 * @method \string fillOriginatorId()
	 * @method \int getAuthorId()
	 * @method \Bitrix\Crm\EO_Activity setAuthorId(\int|\Bitrix\Main\DB\SqlExpression $authorId)
	 * @method bool hasAuthorId()
	 * @method bool isAuthorIdFilled()
	 * @method bool isAuthorIdChanged()
	 * @method \int remindActualAuthorId()
	 * @method \int requireAuthorId()
	 * @method \Bitrix\Crm\EO_Activity resetAuthorId()
	 * @method \Bitrix\Crm\EO_Activity unsetAuthorId()
	 * @method \int fillAuthorId()
	 * @method \Bitrix\Main\EO_User getAuthorBy()
	 * @method \Bitrix\Main\EO_User remindActualAuthorBy()
	 * @method \Bitrix\Main\EO_User requireAuthorBy()
	 * @method \Bitrix\Crm\EO_Activity setAuthorBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Activity resetAuthorBy()
	 * @method \Bitrix\Crm\EO_Activity unsetAuthorBy()
	 * @method bool hasAuthorBy()
	 * @method bool isAuthorByFilled()
	 * @method bool isAuthorByChanged()
	 * @method \Bitrix\Main\EO_User fillAuthorBy()
	 * @method \int getEditorId()
	 * @method \Bitrix\Crm\EO_Activity setEditorId(\int|\Bitrix\Main\DB\SqlExpression $editorId)
	 * @method bool hasEditorId()
	 * @method bool isEditorIdFilled()
	 * @method bool isEditorIdChanged()
	 * @method \int remindActualEditorId()
	 * @method \int requireEditorId()
	 * @method \Bitrix\Crm\EO_Activity resetEditorId()
	 * @method \Bitrix\Crm\EO_Activity unsetEditorId()
	 * @method \int fillEditorId()
	 * @method \Bitrix\Main\EO_User getEditorBy()
	 * @method \Bitrix\Main\EO_User remindActualEditorBy()
	 * @method \Bitrix\Main\EO_User requireEditorBy()
	 * @method \Bitrix\Crm\EO_Activity setEditorBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Activity resetEditorBy()
	 * @method \Bitrix\Crm\EO_Activity unsetEditorBy()
	 * @method bool hasEditorBy()
	 * @method bool isEditorByFilled()
	 * @method bool isEditorByChanged()
	 * @method \Bitrix\Main\EO_User fillEditorBy()
	 * @method \int getResultStatus()
	 * @method \Bitrix\Crm\EO_Activity setResultStatus(\int|\Bitrix\Main\DB\SqlExpression $resultStatus)
	 * @method bool hasResultStatus()
	 * @method bool isResultStatusFilled()
	 * @method bool isResultStatusChanged()
	 * @method \int remindActualResultStatus()
	 * @method \int requireResultStatus()
	 * @method \Bitrix\Crm\EO_Activity resetResultStatus()
	 * @method \Bitrix\Crm\EO_Activity unsetResultStatus()
	 * @method \int fillResultStatus()
	 * @method \int getResultStream()
	 * @method \Bitrix\Crm\EO_Activity setResultStream(\int|\Bitrix\Main\DB\SqlExpression $resultStream)
	 * @method bool hasResultStream()
	 * @method bool isResultStreamFilled()
	 * @method bool isResultStreamChanged()
	 * @method \int remindActualResultStream()
	 * @method \int requireResultStream()
	 * @method \Bitrix\Crm\EO_Activity resetResultStream()
	 * @method \Bitrix\Crm\EO_Activity unsetResultStream()
	 * @method \int fillResultStream()
	 * @method \string getResultSourceId()
	 * @method \Bitrix\Crm\EO_Activity setResultSourceId(\string|\Bitrix\Main\DB\SqlExpression $resultSourceId)
	 * @method bool hasResultSourceId()
	 * @method bool isResultSourceIdFilled()
	 * @method bool isResultSourceIdChanged()
	 * @method \string remindActualResultSourceId()
	 * @method \string requireResultSourceId()
	 * @method \Bitrix\Crm\EO_Activity resetResultSourceId()
	 * @method \Bitrix\Crm\EO_Activity unsetResultSourceId()
	 * @method \string fillResultSourceId()
	 * @method \int getResultMark()
	 * @method \Bitrix\Crm\EO_Activity setResultMark(\int|\Bitrix\Main\DB\SqlExpression $resultMark)
	 * @method bool hasResultMark()
	 * @method bool isResultMarkFilled()
	 * @method bool isResultMarkChanged()
	 * @method \int remindActualResultMark()
	 * @method \int requireResultMark()
	 * @method \Bitrix\Crm\EO_Activity resetResultMark()
	 * @method \Bitrix\Crm\EO_Activity unsetResultMark()
	 * @method \int fillResultMark()
	 * @method \int getResultValue()
	 * @method \Bitrix\Crm\EO_Activity setResultValue(\int|\Bitrix\Main\DB\SqlExpression $resultValue)
	 * @method bool hasResultValue()
	 * @method bool isResultValueFilled()
	 * @method bool isResultValueChanged()
	 * @method \int remindActualResultValue()
	 * @method \int requireResultValue()
	 * @method \Bitrix\Crm\EO_Activity resetResultValue()
	 * @method \Bitrix\Crm\EO_Activity unsetResultValue()
	 * @method \int fillResultValue()
	 * @method \float getResultSum()
	 * @method \Bitrix\Crm\EO_Activity setResultSum(\float|\Bitrix\Main\DB\SqlExpression $resultSum)
	 * @method bool hasResultSum()
	 * @method bool isResultSumFilled()
	 * @method bool isResultSumChanged()
	 * @method \float remindActualResultSum()
	 * @method \float requireResultSum()
	 * @method \Bitrix\Crm\EO_Activity resetResultSum()
	 * @method \Bitrix\Crm\EO_Activity unsetResultSum()
	 * @method \float fillResultSum()
	 * @method \string getResultCurrencyId()
	 * @method \Bitrix\Crm\EO_Activity setResultCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $resultCurrencyId)
	 * @method bool hasResultCurrencyId()
	 * @method bool isResultCurrencyIdFilled()
	 * @method bool isResultCurrencyIdChanged()
	 * @method \string remindActualResultCurrencyId()
	 * @method \string requireResultCurrencyId()
	 * @method \Bitrix\Crm\EO_Activity resetResultCurrencyId()
	 * @method \Bitrix\Crm\EO_Activity unsetResultCurrencyId()
	 * @method \string fillResultCurrencyId()
	 * @method \int getAutocompleteRule()
	 * @method \Bitrix\Crm\EO_Activity setAutocompleteRule(\int|\Bitrix\Main\DB\SqlExpression $autocompleteRule)
	 * @method bool hasAutocompleteRule()
	 * @method bool isAutocompleteRuleFilled()
	 * @method bool isAutocompleteRuleChanged()
	 * @method \int remindActualAutocompleteRule()
	 * @method \int requireAutocompleteRule()
	 * @method \Bitrix\Crm\EO_Activity resetAutocompleteRule()
	 * @method \Bitrix\Crm\EO_Activity unsetAutocompleteRule()
	 * @method \int fillAutocompleteRule()
	 * @method \Bitrix\Crm\EO_ActivityBinding getBindings()
	 * @method \Bitrix\Crm\EO_ActivityBinding remindActualBindings()
	 * @method \Bitrix\Crm\EO_ActivityBinding requireBindings()
	 * @method \Bitrix\Crm\EO_Activity setBindings(\Bitrix\Crm\EO_ActivityBinding $object)
	 * @method \Bitrix\Crm\EO_Activity resetBindings()
	 * @method \Bitrix\Crm\EO_Activity unsetBindings()
	 * @method bool hasBindings()
	 * @method bool isBindingsFilled()
	 * @method bool isBindingsChanged()
	 * @method \Bitrix\Crm\EO_ActivityBinding fillBindings()
	 * @method \Bitrix\Crm\EO_ActivityElement getElements()
	 * @method \Bitrix\Crm\EO_ActivityElement remindActualElements()
	 * @method \Bitrix\Crm\EO_ActivityElement requireElements()
	 * @method \Bitrix\Crm\EO_Activity setElements(\Bitrix\Crm\EO_ActivityElement $object)
	 * @method \Bitrix\Crm\EO_Activity resetElements()
	 * @method \Bitrix\Crm\EO_Activity unsetElements()
	 * @method bool hasElements()
	 * @method bool isElementsFilled()
	 * @method bool isElementsChanged()
	 * @method \Bitrix\Crm\EO_ActivityElement fillElements()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Crm\EO_Activity setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Crm\EO_Activity resetSearchContent()
	 * @method \Bitrix\Crm\EO_Activity unsetSearchContent()
	 * @method \string fillSearchContent()
	 * @method \string getProviderParams()
	 * @method \Bitrix\Crm\EO_Activity setProviderParams(\string|\Bitrix\Main\DB\SqlExpression $providerParams)
	 * @method bool hasProviderParams()
	 * @method bool isProviderParamsFilled()
	 * @method bool isProviderParamsChanged()
	 * @method \string remindActualProviderParams()
	 * @method \string requireProviderParams()
	 * @method \Bitrix\Crm\EO_Activity resetProviderParams()
	 * @method \Bitrix\Crm\EO_Activity unsetProviderParams()
	 * @method \string fillProviderParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Activity set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Activity reset($fieldName)
	 * @method \Bitrix\Crm\EO_Activity unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Activity wakeUp($data)
	 */
	class EO_Activity {
		/* @var \Bitrix\Crm\ActivityTable */
		static public $dataClass = '\Bitrix\Crm\ActivityTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Activity_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \string[] getProviderIdList()
	 * @method \string[] fillProviderId()
	 * @method \string[] getProviderTypeIdList()
	 * @method \string[] fillProviderTypeId()
	 * @method \string[] getProviderGroupIdList()
	 * @method \string[] fillProviderGroupId()
	 * @method \int[] getDirectionList()
	 * @method \int[] fillDirection()
	 * @method \boolean[] getIsMeetingList()
	 * @method \boolean[] fillIsMeeting()
	 * @method \boolean[] getIsCallList()
	 * @method \boolean[] fillIsCall()
	 * @method \boolean[] getIsCallInList()
	 * @method \boolean[] fillIsCallIn()
	 * @method \boolean[] getIsCallOutList()
	 * @method \boolean[] fillIsCallOut()
	 * @method \boolean[] getIsTaskList()
	 * @method \boolean[] fillIsTask()
	 * @method \boolean[] getIsEmailList()
	 * @method \boolean[] fillIsEmail()
	 * @method \boolean[] getIsEmailInList()
	 * @method \boolean[] fillIsEmailIn()
	 * @method \boolean[] getIsEmailOutList()
	 * @method \boolean[] fillIsEmailOut()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \int[] getOwnerTypeIdList()
	 * @method \int[] fillOwnerTypeId()
	 * @method \int[] getAssociatedEntityIdList()
	 * @method \int[] fillAssociatedEntityId()
	 * @method \string[] getSubjectList()
	 * @method \string[] fillSubject()
	 * @method \boolean[] getCompletedList()
	 * @method \boolean[] fillCompleted()
	 * @method \boolean[] getIsHandleableList()
	 * @method \boolean[] fillIsHandleable()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getAssignedByList()
	 * @method \Bitrix\Crm\EO_Activity_Collection getAssignedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillAssignedBy()
	 * @method \int[] getPriorityList()
	 * @method \int[] fillPriority()
	 * @method \int[] getNotifyTypeList()
	 * @method \int[] fillNotifyType()
	 * @method \int[] getNotifyValueList()
	 * @method \int[] fillNotifyValue()
	 * @method \string[] getLocationList()
	 * @method \string[] fillLocation()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreatedShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreatedShort()
	 * @method \Bitrix\Main\Type\DateTime[] getLastUpdatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastUpdated()
	 * @method \Bitrix\Main\Type\DateTime[] getLastUpdatedShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastUpdatedShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateFinishedShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateFinishedShort()
	 * @method \Bitrix\Main\Type\DateTime[] getStartTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillStartTime()
	 * @method \Bitrix\Main\Type\DateTime[] getStartTimeShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillStartTimeShort()
	 * @method \Bitrix\Main\Type\DateTime[] getEndTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillEndTime()
	 * @method \Bitrix\Main\Type\DateTime[] getEndTimeShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillEndTimeShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDeadlineList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDeadline()
	 * @method \int[] getParentIdList()
	 * @method \int[] fillParentId()
	 * @method \string[] getUrnList()
	 * @method \string[] fillUrn()
	 * @method \string[] getOriginIdList()
	 * @method \string[] fillOriginId()
	 * @method \string[] getOriginatorIdList()
	 * @method \string[] fillOriginatorId()
	 * @method \int[] getAuthorIdList()
	 * @method \int[] fillAuthorId()
	 * @method \Bitrix\Main\EO_User[] getAuthorByList()
	 * @method \Bitrix\Crm\EO_Activity_Collection getAuthorByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillAuthorBy()
	 * @method \int[] getEditorIdList()
	 * @method \int[] fillEditorId()
	 * @method \Bitrix\Main\EO_User[] getEditorByList()
	 * @method \Bitrix\Crm\EO_Activity_Collection getEditorByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEditorBy()
	 * @method \int[] getResultStatusList()
	 * @method \int[] fillResultStatus()
	 * @method \int[] getResultStreamList()
	 * @method \int[] fillResultStream()
	 * @method \string[] getResultSourceIdList()
	 * @method \string[] fillResultSourceId()
	 * @method \int[] getResultMarkList()
	 * @method \int[] fillResultMark()
	 * @method \int[] getResultValueList()
	 * @method \int[] fillResultValue()
	 * @method \float[] getResultSumList()
	 * @method \float[] fillResultSum()
	 * @method \string[] getResultCurrencyIdList()
	 * @method \string[] fillResultCurrencyId()
	 * @method \int[] getAutocompleteRuleList()
	 * @method \int[] fillAutocompleteRule()
	 * @method \Bitrix\Crm\EO_ActivityBinding[] getBindingsList()
	 * @method \Bitrix\Crm\EO_Activity_Collection getBindingsCollection()
	 * @method \Bitrix\Crm\EO_ActivityBinding_Collection fillBindings()
	 * @method \Bitrix\Crm\EO_ActivityElement[] getElementsList()
	 * @method \Bitrix\Crm\EO_Activity_Collection getElementsCollection()
	 * @method \Bitrix\Crm\EO_ActivityElement_Collection fillElements()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 * @method \string[] getProviderParamsList()
	 * @method \string[] fillProviderParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Activity $object)
	 * @method bool has(\Bitrix\Crm\EO_Activity $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Activity getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Activity[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Activity $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Activity_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Activity current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Activity_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\ActivityTable */
		static public $dataClass = '\Bitrix\Crm\ActivityTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Activity_Query query()
	 * @method static EO_Activity_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Activity_Result getById($id)
	 * @method static EO_Activity_Result getList(array $parameters = array())
	 * @method static EO_Activity_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Activity createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Activity_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Activity wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Activity_Collection wakeUpCollection($rows)
	 */
	class ActivityTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Activity_Result exec()
	 * @method \Bitrix\Crm\EO_Activity fetchObject()
	 * @method \Bitrix\Crm\EO_Activity_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Activity_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Activity fetchObject()
	 * @method \Bitrix\Crm\EO_Activity_Collection fetchCollection()
	 */
	class EO_Activity_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Activity createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Activity_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Activity wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Activity_Collection wakeUpCollection($rows)
	 */
	class EO_Activity_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\ActivityBindingTable:crm/lib/activitybinding.php:7fec207e4986e8e90ad4c5ee0c408650 */
namespace Bitrix\Crm {
	/**
	 * EO_ActivityBinding
	 * @see \Bitrix\Crm\ActivityBindingTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_ActivityBinding setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getActivityId()
	 * @method \Bitrix\Crm\EO_ActivityBinding setActivityId(\int|\Bitrix\Main\DB\SqlExpression $activityId)
	 * @method bool hasActivityId()
	 * @method bool isActivityIdFilled()
	 * @method bool isActivityIdChanged()
	 * @method \int remindActualActivityId()
	 * @method \int requireActivityId()
	 * @method \Bitrix\Crm\EO_ActivityBinding resetActivityId()
	 * @method \Bitrix\Crm\EO_ActivityBinding unsetActivityId()
	 * @method \int fillActivityId()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\EO_ActivityBinding setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\EO_ActivityBinding resetOwnerId()
	 * @method \Bitrix\Crm\EO_ActivityBinding unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \int getOwnerTypeId()
	 * @method \Bitrix\Crm\EO_ActivityBinding setOwnerTypeId(\int|\Bitrix\Main\DB\SqlExpression $ownerTypeId)
	 * @method bool hasOwnerTypeId()
	 * @method bool isOwnerTypeIdFilled()
	 * @method bool isOwnerTypeIdChanged()
	 * @method \int remindActualOwnerTypeId()
	 * @method \int requireOwnerTypeId()
	 * @method \Bitrix\Crm\EO_ActivityBinding resetOwnerTypeId()
	 * @method \Bitrix\Crm\EO_ActivityBinding unsetOwnerTypeId()
	 * @method \int fillOwnerTypeId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_ActivityBinding set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_ActivityBinding reset($fieldName)
	 * @method \Bitrix\Crm\EO_ActivityBinding unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_ActivityBinding wakeUp($data)
	 */
	class EO_ActivityBinding {
		/* @var \Bitrix\Crm\ActivityBindingTable */
		static public $dataClass = '\Bitrix\Crm\ActivityBindingTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_ActivityBinding_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getActivityIdList()
	 * @method \int[] fillActivityId()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \int[] getOwnerTypeIdList()
	 * @method \int[] fillOwnerTypeId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_ActivityBinding $object)
	 * @method bool has(\Bitrix\Crm\EO_ActivityBinding $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_ActivityBinding getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_ActivityBinding[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_ActivityBinding $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_ActivityBinding_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_ActivityBinding current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ActivityBinding_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\ActivityBindingTable */
		static public $dataClass = '\Bitrix\Crm\ActivityBindingTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_ActivityBinding_Query query()
	 * @method static EO_ActivityBinding_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ActivityBinding_Result getById($id)
	 * @method static EO_ActivityBinding_Result getList(array $parameters = array())
	 * @method static EO_ActivityBinding_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_ActivityBinding createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_ActivityBinding_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_ActivityBinding wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_ActivityBinding_Collection wakeUpCollection($rows)
	 */
	class ActivityBindingTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ActivityBinding_Result exec()
	 * @method \Bitrix\Crm\EO_ActivityBinding fetchObject()
	 * @method \Bitrix\Crm\EO_ActivityBinding_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ActivityBinding_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_ActivityBinding fetchObject()
	 * @method \Bitrix\Crm\EO_ActivityBinding_Collection fetchCollection()
	 */
	class EO_ActivityBinding_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_ActivityBinding createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_ActivityBinding_Collection createCollection()
	 * @method \Bitrix\Crm\EO_ActivityBinding wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_ActivityBinding_Collection wakeUpCollection($rows)
	 */
	class EO_ActivityBinding_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\ActivityElementTable:crm/lib/activityelement.php:23624beb846cffbb09a0b6b3303692f6 */
namespace Bitrix\Crm {
	/**
	 * EO_ActivityElement
	 * @see \Bitrix\Crm\ActivityElementTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getActivityId()
	 * @method \Bitrix\Crm\EO_ActivityElement setActivityId(\int|\Bitrix\Main\DB\SqlExpression $activityId)
	 * @method bool hasActivityId()
	 * @method bool isActivityIdFilled()
	 * @method bool isActivityIdChanged()
	 * @method \Bitrix\Crm\EO_Activity getActivity()
	 * @method \Bitrix\Crm\EO_Activity remindActualActivity()
	 * @method \Bitrix\Crm\EO_Activity requireActivity()
	 * @method \Bitrix\Crm\EO_ActivityElement setActivity(\Bitrix\Crm\EO_Activity $object)
	 * @method \Bitrix\Crm\EO_ActivityElement resetActivity()
	 * @method \Bitrix\Crm\EO_ActivityElement unsetActivity()
	 * @method bool hasActivity()
	 * @method bool isActivityFilled()
	 * @method bool isActivityChanged()
	 * @method \Bitrix\Crm\EO_Activity fillActivity()
	 * @method \string getStorageTypeId()
	 * @method \Bitrix\Crm\EO_ActivityElement setStorageTypeId(\string|\Bitrix\Main\DB\SqlExpression $storageTypeId)
	 * @method bool hasStorageTypeId()
	 * @method bool isStorageTypeIdFilled()
	 * @method bool isStorageTypeIdChanged()
	 * @method \int getElementId()
	 * @method \Bitrix\Crm\EO_ActivityElement setElementId(\int|\Bitrix\Main\DB\SqlExpression $elementId)
	 * @method bool hasElementId()
	 * @method bool isElementIdFilled()
	 * @method bool isElementIdChanged()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_ActivityElement set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_ActivityElement reset($fieldName)
	 * @method \Bitrix\Crm\EO_ActivityElement unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_ActivityElement wakeUp($data)
	 */
	class EO_ActivityElement {
		/* @var \Bitrix\Crm\ActivityElementTable */
		static public $dataClass = '\Bitrix\Crm\ActivityElementTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_ActivityElement_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getActivityIdList()
	 * @method \Bitrix\Crm\EO_Activity[] getActivityList()
	 * @method \Bitrix\Crm\EO_ActivityElement_Collection getActivityCollection()
	 * @method \Bitrix\Crm\EO_Activity_Collection fillActivity()
	 * @method \string[] getStorageTypeIdList()
	 * @method \int[] getElementIdList()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_ActivityElement $object)
	 * @method bool has(\Bitrix\Crm\EO_ActivityElement $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_ActivityElement getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_ActivityElement[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_ActivityElement $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_ActivityElement_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_ActivityElement current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ActivityElement_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\ActivityElementTable */
		static public $dataClass = '\Bitrix\Crm\ActivityElementTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_ActivityElement_Query query()
	 * @method static EO_ActivityElement_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ActivityElement_Result getById($id)
	 * @method static EO_ActivityElement_Result getList(array $parameters = array())
	 * @method static EO_ActivityElement_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_ActivityElement createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_ActivityElement_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_ActivityElement wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_ActivityElement_Collection wakeUpCollection($rows)
	 */
	class ActivityElementTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ActivityElement_Result exec()
	 * @method \Bitrix\Crm\EO_ActivityElement fetchObject()
	 * @method \Bitrix\Crm\EO_ActivityElement_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ActivityElement_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_ActivityElement fetchObject()
	 * @method \Bitrix\Crm\EO_ActivityElement_Collection fetchCollection()
	 */
	class EO_ActivityElement_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_ActivityElement createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_ActivityElement_Collection createCollection()
	 * @method \Bitrix\Crm\EO_ActivityElement wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_ActivityElement_Collection wakeUpCollection($rows)
	 */
	class EO_ActivityElement_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\AddressTable:crm/lib/address.php:f6bac728236710ad9036d217be70adf7 */
namespace Bitrix\Crm {
	/**
	 * EO_Address
	 * @see \Bitrix\Crm\AddressTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\EO_Address setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\EO_Address setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\EO_Address setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int getAnchorTypeId()
	 * @method \Bitrix\Crm\EO_Address setAnchorTypeId(\int|\Bitrix\Main\DB\SqlExpression $anchorTypeId)
	 * @method bool hasAnchorTypeId()
	 * @method bool isAnchorTypeIdFilled()
	 * @method bool isAnchorTypeIdChanged()
	 * @method \int remindActualAnchorTypeId()
	 * @method \int requireAnchorTypeId()
	 * @method \Bitrix\Crm\EO_Address resetAnchorTypeId()
	 * @method \Bitrix\Crm\EO_Address unsetAnchorTypeId()
	 * @method \int fillAnchorTypeId()
	 * @method \int getAnchorId()
	 * @method \Bitrix\Crm\EO_Address setAnchorId(\int|\Bitrix\Main\DB\SqlExpression $anchorId)
	 * @method bool hasAnchorId()
	 * @method bool isAnchorIdFilled()
	 * @method bool isAnchorIdChanged()
	 * @method \int remindActualAnchorId()
	 * @method \int requireAnchorId()
	 * @method \Bitrix\Crm\EO_Address resetAnchorId()
	 * @method \Bitrix\Crm\EO_Address unsetAnchorId()
	 * @method \int fillAnchorId()
	 * @method \string getAddress1()
	 * @method \Bitrix\Crm\EO_Address setAddress1(\string|\Bitrix\Main\DB\SqlExpression $address1)
	 * @method bool hasAddress1()
	 * @method bool isAddress1Filled()
	 * @method bool isAddress1Changed()
	 * @method \string remindActualAddress1()
	 * @method \string requireAddress1()
	 * @method \Bitrix\Crm\EO_Address resetAddress1()
	 * @method \Bitrix\Crm\EO_Address unsetAddress1()
	 * @method \string fillAddress1()
	 * @method \string getAddress2()
	 * @method \Bitrix\Crm\EO_Address setAddress2(\string|\Bitrix\Main\DB\SqlExpression $address2)
	 * @method bool hasAddress2()
	 * @method bool isAddress2Filled()
	 * @method bool isAddress2Changed()
	 * @method \string remindActualAddress2()
	 * @method \string requireAddress2()
	 * @method \Bitrix\Crm\EO_Address resetAddress2()
	 * @method \Bitrix\Crm\EO_Address unsetAddress2()
	 * @method \string fillAddress2()
	 * @method \string getCity()
	 * @method \Bitrix\Crm\EO_Address setCity(\string|\Bitrix\Main\DB\SqlExpression $city)
	 * @method bool hasCity()
	 * @method bool isCityFilled()
	 * @method bool isCityChanged()
	 * @method \string remindActualCity()
	 * @method \string requireCity()
	 * @method \Bitrix\Crm\EO_Address resetCity()
	 * @method \Bitrix\Crm\EO_Address unsetCity()
	 * @method \string fillCity()
	 * @method \string getPostalCode()
	 * @method \Bitrix\Crm\EO_Address setPostalCode(\string|\Bitrix\Main\DB\SqlExpression $postalCode)
	 * @method bool hasPostalCode()
	 * @method bool isPostalCodeFilled()
	 * @method bool isPostalCodeChanged()
	 * @method \string remindActualPostalCode()
	 * @method \string requirePostalCode()
	 * @method \Bitrix\Crm\EO_Address resetPostalCode()
	 * @method \Bitrix\Crm\EO_Address unsetPostalCode()
	 * @method \string fillPostalCode()
	 * @method \string getRegion()
	 * @method \Bitrix\Crm\EO_Address setRegion(\string|\Bitrix\Main\DB\SqlExpression $region)
	 * @method bool hasRegion()
	 * @method bool isRegionFilled()
	 * @method bool isRegionChanged()
	 * @method \string remindActualRegion()
	 * @method \string requireRegion()
	 * @method \Bitrix\Crm\EO_Address resetRegion()
	 * @method \Bitrix\Crm\EO_Address unsetRegion()
	 * @method \string fillRegion()
	 * @method \string getProvince()
	 * @method \Bitrix\Crm\EO_Address setProvince(\string|\Bitrix\Main\DB\SqlExpression $province)
	 * @method bool hasProvince()
	 * @method bool isProvinceFilled()
	 * @method bool isProvinceChanged()
	 * @method \string remindActualProvince()
	 * @method \string requireProvince()
	 * @method \Bitrix\Crm\EO_Address resetProvince()
	 * @method \Bitrix\Crm\EO_Address unsetProvince()
	 * @method \string fillProvince()
	 * @method \string getCountry()
	 * @method \Bitrix\Crm\EO_Address setCountry(\string|\Bitrix\Main\DB\SqlExpression $country)
	 * @method bool hasCountry()
	 * @method bool isCountryFilled()
	 * @method bool isCountryChanged()
	 * @method \string remindActualCountry()
	 * @method \string requireCountry()
	 * @method \Bitrix\Crm\EO_Address resetCountry()
	 * @method \Bitrix\Crm\EO_Address unsetCountry()
	 * @method \string fillCountry()
	 * @method \string getCountryCode()
	 * @method \Bitrix\Crm\EO_Address setCountryCode(\string|\Bitrix\Main\DB\SqlExpression $countryCode)
	 * @method bool hasCountryCode()
	 * @method bool isCountryCodeFilled()
	 * @method bool isCountryCodeChanged()
	 * @method \string remindActualCountryCode()
	 * @method \string requireCountryCode()
	 * @method \Bitrix\Crm\EO_Address resetCountryCode()
	 * @method \Bitrix\Crm\EO_Address unsetCountryCode()
	 * @method \string fillCountryCode()
	 * @method \int getLocAddrId()
	 * @method \Bitrix\Crm\EO_Address setLocAddrId(\int|\Bitrix\Main\DB\SqlExpression $locAddrId)
	 * @method bool hasLocAddrId()
	 * @method bool isLocAddrIdFilled()
	 * @method bool isLocAddrIdChanged()
	 * @method \int remindActualLocAddrId()
	 * @method \int requireLocAddrId()
	 * @method \Bitrix\Crm\EO_Address resetLocAddrId()
	 * @method \Bitrix\Crm\EO_Address unsetLocAddrId()
	 * @method \int fillLocAddrId()
	 * @method \boolean getIsDef()
	 * @method \Bitrix\Crm\EO_Address setIsDef(\boolean|\Bitrix\Main\DB\SqlExpression $isDef)
	 * @method bool hasIsDef()
	 * @method bool isIsDefFilled()
	 * @method bool isIsDefChanged()
	 * @method \boolean remindActualIsDef()
	 * @method \boolean requireIsDef()
	 * @method \Bitrix\Crm\EO_Address resetIsDef()
	 * @method \Bitrix\Crm\EO_Address unsetIsDef()
	 * @method \boolean fillIsDef()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Address set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Address reset($fieldName)
	 * @method \Bitrix\Crm\EO_Address unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Address wakeUp($data)
	 */
	class EO_Address {
		/* @var \Bitrix\Crm\AddressTable */
		static public $dataClass = '\Bitrix\Crm\AddressTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Address_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getTypeIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] getAnchorTypeIdList()
	 * @method \int[] fillAnchorTypeId()
	 * @method \int[] getAnchorIdList()
	 * @method \int[] fillAnchorId()
	 * @method \string[] getAddress1List()
	 * @method \string[] fillAddress1()
	 * @method \string[] getAddress2List()
	 * @method \string[] fillAddress2()
	 * @method \string[] getCityList()
	 * @method \string[] fillCity()
	 * @method \string[] getPostalCodeList()
	 * @method \string[] fillPostalCode()
	 * @method \string[] getRegionList()
	 * @method \string[] fillRegion()
	 * @method \string[] getProvinceList()
	 * @method \string[] fillProvince()
	 * @method \string[] getCountryList()
	 * @method \string[] fillCountry()
	 * @method \string[] getCountryCodeList()
	 * @method \string[] fillCountryCode()
	 * @method \int[] getLocAddrIdList()
	 * @method \int[] fillLocAddrId()
	 * @method \boolean[] getIsDefList()
	 * @method \boolean[] fillIsDef()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Address $object)
	 * @method bool has(\Bitrix\Crm\EO_Address $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Address getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Address[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Address $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Address_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Address current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Address_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\AddressTable */
		static public $dataClass = '\Bitrix\Crm\AddressTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Address_Query query()
	 * @method static EO_Address_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Address_Result getById($id)
	 * @method static EO_Address_Result getList(array $parameters = array())
	 * @method static EO_Address_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Address createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Address_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Address wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Address_Collection wakeUpCollection($rows)
	 */
	class AddressTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Address_Result exec()
	 * @method \Bitrix\Crm\EO_Address fetchObject()
	 * @method \Bitrix\Crm\EO_Address_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Address_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Address fetchObject()
	 * @method \Bitrix\Crm\EO_Address_Collection fetchCollection()
	 */
	class EO_Address_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Address createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Address_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Address wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Address_Collection wakeUpCollection($rows)
	 */
	class EO_Address_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Ads\Internals\AdsFormLinkTable:crm/lib/ads/internals/adsformlink.php:65d89c860147f2fb2331571ad1451442 */
namespace Bitrix\Crm\Ads\Internals {
	/**
	 * EO_AdsFormLink
	 * @see \Bitrix\Crm\Ads\Internals\AdsFormLinkTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink resetDateInsert()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \int getWebformId()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink setWebformId(\int|\Bitrix\Main\DB\SqlExpression $webformId)
	 * @method bool hasWebformId()
	 * @method bool isWebformIdFilled()
	 * @method bool isWebformIdChanged()
	 * @method \int remindActualWebformId()
	 * @method \int requireWebformId()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink resetWebformId()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink unsetWebformId()
	 * @method \int fillWebformId()
	 * @method \int getLinkDirection()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink setLinkDirection(\int|\Bitrix\Main\DB\SqlExpression $linkDirection)
	 * @method bool hasLinkDirection()
	 * @method bool isLinkDirectionFilled()
	 * @method bool isLinkDirectionChanged()
	 * @method \int remindActualLinkDirection()
	 * @method \int requireLinkDirection()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink resetLinkDirection()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink unsetLinkDirection()
	 * @method \int fillLinkDirection()
	 * @method \string getAdsType()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink setAdsType(\string|\Bitrix\Main\DB\SqlExpression $adsType)
	 * @method bool hasAdsType()
	 * @method bool isAdsTypeFilled()
	 * @method bool isAdsTypeChanged()
	 * @method \string remindActualAdsType()
	 * @method \string requireAdsType()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink resetAdsType()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink unsetAdsType()
	 * @method \string fillAdsType()
	 * @method \string getAdsAccountId()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink setAdsAccountId(\string|\Bitrix\Main\DB\SqlExpression $adsAccountId)
	 * @method bool hasAdsAccountId()
	 * @method bool isAdsAccountIdFilled()
	 * @method bool isAdsAccountIdChanged()
	 * @method \string remindActualAdsAccountId()
	 * @method \string requireAdsAccountId()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink resetAdsAccountId()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink unsetAdsAccountId()
	 * @method \string fillAdsAccountId()
	 * @method \string getAdsFormId()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink setAdsFormId(\string|\Bitrix\Main\DB\SqlExpression $adsFormId)
	 * @method bool hasAdsFormId()
	 * @method bool isAdsFormIdFilled()
	 * @method bool isAdsFormIdChanged()
	 * @method \string remindActualAdsFormId()
	 * @method \string requireAdsFormId()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink resetAdsFormId()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink unsetAdsFormId()
	 * @method \string fillAdsFormId()
	 * @method \string getAdsAccountName()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink setAdsAccountName(\string|\Bitrix\Main\DB\SqlExpression $adsAccountName)
	 * @method bool hasAdsAccountName()
	 * @method bool isAdsAccountNameFilled()
	 * @method bool isAdsAccountNameChanged()
	 * @method \string remindActualAdsAccountName()
	 * @method \string requireAdsAccountName()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink resetAdsAccountName()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink unsetAdsAccountName()
	 * @method \string fillAdsAccountName()
	 * @method \string getAdsFormName()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink setAdsFormName(\string|\Bitrix\Main\DB\SqlExpression $adsFormName)
	 * @method bool hasAdsFormName()
	 * @method bool isAdsFormNameFilled()
	 * @method bool isAdsFormNameChanged()
	 * @method \string remindActualAdsFormName()
	 * @method \string requireAdsFormName()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink resetAdsFormName()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink unsetAdsFormName()
	 * @method \string fillAdsFormName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink set($fieldName, $value)
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink reset($fieldName)
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Ads\Internals\EO_AdsFormLink wakeUp($data)
	 */
	class EO_AdsFormLink {
		/* @var \Bitrix\Crm\Ads\Internals\AdsFormLinkTable */
		static public $dataClass = '\Bitrix\Crm\Ads\Internals\AdsFormLinkTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Ads\Internals {
	/**
	 * EO_AdsFormLink_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \int[] getWebformIdList()
	 * @method \int[] fillWebformId()
	 * @method \int[] getLinkDirectionList()
	 * @method \int[] fillLinkDirection()
	 * @method \string[] getAdsTypeList()
	 * @method \string[] fillAdsType()
	 * @method \string[] getAdsAccountIdList()
	 * @method \string[] fillAdsAccountId()
	 * @method \string[] getAdsFormIdList()
	 * @method \string[] fillAdsFormId()
	 * @method \string[] getAdsAccountNameList()
	 * @method \string[] fillAdsAccountName()
	 * @method \string[] getAdsFormNameList()
	 * @method \string[] fillAdsFormName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Ads\Internals\EO_AdsFormLink $object)
	 * @method bool has(\Bitrix\Crm\Ads\Internals\EO_AdsFormLink $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink getByPrimary($primary)
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink[] getAll()
	 * @method bool remove(\Bitrix\Crm\Ads\Internals\EO_AdsFormLink $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Ads\Internals\EO_AdsFormLink_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_AdsFormLink_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Ads\Internals\AdsFormLinkTable */
		static public $dataClass = '\Bitrix\Crm\Ads\Internals\AdsFormLinkTable';
	}
}
namespace Bitrix\Crm\Ads\Internals {
	/**
	 * @method static EO_AdsFormLink_Query query()
	 * @method static EO_AdsFormLink_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_AdsFormLink_Result getById($id)
	 * @method static EO_AdsFormLink_Result getList(array $parameters = array())
	 * @method static EO_AdsFormLink_Entity getEntity()
	 * @method static \Bitrix\Crm\Ads\Internals\EO_AdsFormLink createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Ads\Internals\EO_AdsFormLink_Collection createCollection()
	 * @method static \Bitrix\Crm\Ads\Internals\EO_AdsFormLink wakeUpObject($row)
	 * @method static \Bitrix\Crm\Ads\Internals\EO_AdsFormLink_Collection wakeUpCollection($rows)
	 */
	class AdsFormLinkTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_AdsFormLink_Result exec()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink fetchObject()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_AdsFormLink_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink fetchObject()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink_Collection fetchCollection()
	 */
	class EO_AdsFormLink_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink_Collection createCollection()
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink wakeUpObject($row)
	 * @method \Bitrix\Crm\Ads\Internals\EO_AdsFormLink_Collection wakeUpCollection($rows)
	 */
	class EO_AdsFormLink_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Attribute\Entity\FieldAttributeTable:crm/lib/attribute/entity/fieldattribute.php:a47dff8e4ba2c0c71786d10b29b05bd5 */
namespace Bitrix\Crm\Attribute\Entity {
	/**
	 * EO_FieldAttribute
	 * @see \Bitrix\Crm\Attribute\Entity\FieldAttributeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute resetEntityTypeId()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \string getEntityScope()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute setEntityScope(\string|\Bitrix\Main\DB\SqlExpression $entityScope)
	 * @method bool hasEntityScope()
	 * @method bool isEntityScopeFilled()
	 * @method bool isEntityScopeChanged()
	 * @method \string remindActualEntityScope()
	 * @method \string requireEntityScope()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute resetEntityScope()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute unsetEntityScope()
	 * @method \string fillEntityScope()
	 * @method \string getTypeId()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute setTypeId(\string|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string remindActualTypeId()
	 * @method \string requireTypeId()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute resetTypeId()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute unsetTypeId()
	 * @method \string fillTypeId()
	 * @method \string getFieldName()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute setFieldName(\string|\Bitrix\Main\DB\SqlExpression $fieldName)
	 * @method bool hasFieldName()
	 * @method bool isFieldNameFilled()
	 * @method bool isFieldNameChanged()
	 * @method \string remindActualFieldName()
	 * @method \string requireFieldName()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute resetFieldName()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute unsetFieldName()
	 * @method \string fillFieldName()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute resetCreatedTime()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \string getStartPhase()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute setStartPhase(\string|\Bitrix\Main\DB\SqlExpression $startPhase)
	 * @method bool hasStartPhase()
	 * @method bool isStartPhaseFilled()
	 * @method bool isStartPhaseChanged()
	 * @method \string remindActualStartPhase()
	 * @method \string requireStartPhase()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute resetStartPhase()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute unsetStartPhase()
	 * @method \string fillStartPhase()
	 * @method \string getFinishPhase()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute setFinishPhase(\string|\Bitrix\Main\DB\SqlExpression $finishPhase)
	 * @method bool hasFinishPhase()
	 * @method bool isFinishPhaseFilled()
	 * @method bool isFinishPhaseChanged()
	 * @method \string remindActualFinishPhase()
	 * @method \string requireFinishPhase()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute resetFinishPhase()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute unsetFinishPhase()
	 * @method \string fillFinishPhase()
	 * @method \int getPhaseGroupTypeId()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute setPhaseGroupTypeId(\int|\Bitrix\Main\DB\SqlExpression $phaseGroupTypeId)
	 * @method bool hasPhaseGroupTypeId()
	 * @method bool isPhaseGroupTypeIdFilled()
	 * @method bool isPhaseGroupTypeIdChanged()
	 * @method \int remindActualPhaseGroupTypeId()
	 * @method \int requirePhaseGroupTypeId()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute resetPhaseGroupTypeId()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute unsetPhaseGroupTypeId()
	 * @method \int fillPhaseGroupTypeId()
	 * @method \boolean getIsCustomField()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute setIsCustomField(\boolean|\Bitrix\Main\DB\SqlExpression $isCustomField)
	 * @method bool hasIsCustomField()
	 * @method bool isIsCustomFieldFilled()
	 * @method bool isIsCustomFieldChanged()
	 * @method \boolean remindActualIsCustomField()
	 * @method \boolean requireIsCustomField()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute resetIsCustomField()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute unsetIsCustomField()
	 * @method \boolean fillIsCustomField()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute set($fieldName, $value)
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute reset($fieldName)
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute wakeUp($data)
	 */
	class EO_FieldAttribute {
		/* @var \Bitrix\Crm\Attribute\Entity\FieldAttributeTable */
		static public $dataClass = '\Bitrix\Crm\Attribute\Entity\FieldAttributeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Attribute\Entity {
	/**
	 * EO_FieldAttribute_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \string[] getEntityScopeList()
	 * @method \string[] fillEntityScope()
	 * @method \string[] getTypeIdList()
	 * @method \string[] fillTypeId()
	 * @method \string[] getFieldNameList()
	 * @method \string[] fillFieldName()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \string[] getStartPhaseList()
	 * @method \string[] fillStartPhase()
	 * @method \string[] getFinishPhaseList()
	 * @method \string[] fillFinishPhase()
	 * @method \int[] getPhaseGroupTypeIdList()
	 * @method \int[] fillPhaseGroupTypeId()
	 * @method \boolean[] getIsCustomFieldList()
	 * @method \boolean[] fillIsCustomField()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Attribute\Entity\EO_FieldAttribute $object)
	 * @method bool has(\Bitrix\Crm\Attribute\Entity\EO_FieldAttribute $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute getByPrimary($primary)
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute[] getAll()
	 * @method bool remove(\Bitrix\Crm\Attribute\Entity\EO_FieldAttribute $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_FieldAttribute_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Attribute\Entity\FieldAttributeTable */
		static public $dataClass = '\Bitrix\Crm\Attribute\Entity\FieldAttributeTable';
	}
}
namespace Bitrix\Crm\Attribute\Entity {
	/**
	 * @method static EO_FieldAttribute_Query query()
	 * @method static EO_FieldAttribute_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_FieldAttribute_Result getById($id)
	 * @method static EO_FieldAttribute_Result getList(array $parameters = array())
	 * @method static EO_FieldAttribute_Entity getEntity()
	 * @method static \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute_Collection createCollection()
	 * @method static \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute wakeUpObject($row)
	 * @method static \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute_Collection wakeUpCollection($rows)
	 */
	class FieldAttributeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_FieldAttribute_Result exec()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute fetchObject()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_FieldAttribute_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute fetchObject()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute_Collection fetchCollection()
	 */
	class EO_FieldAttribute_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute_Collection createCollection()
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute wakeUpObject($row)
	 * @method \Bitrix\Crm\Attribute\Entity\EO_FieldAttribute_Collection wakeUpCollection($rows)
	 */
	class EO_FieldAttribute_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Automation\Engine\Entity\TemplateTable:crm/lib/automation/engine/entity/template.php:c879062f9b50ef17a9c209a07fcf59a6 */
namespace Bitrix\Crm\Automation\Engine\Entity {
	/**
	 * EO_Template
	 * @see \Bitrix\Crm\Automation\Engine\Entity\TemplateTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template resetEntityTypeId()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \string getEntityStatus()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template setEntityStatus(\string|\Bitrix\Main\DB\SqlExpression $entityStatus)
	 * @method bool hasEntityStatus()
	 * @method bool isEntityStatusFilled()
	 * @method bool isEntityStatusChanged()
	 * @method \string remindActualEntityStatus()
	 * @method \string requireEntityStatus()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template resetEntityStatus()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template unsetEntityStatus()
	 * @method \string fillEntityStatus()
	 * @method \int getTemplateId()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template setTemplateId(\int|\Bitrix\Main\DB\SqlExpression $templateId)
	 * @method bool hasTemplateId()
	 * @method bool isTemplateIdFilled()
	 * @method bool isTemplateIdChanged()
	 * @method \int remindActualTemplateId()
	 * @method \int requireTemplateId()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template resetTemplateId()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template unsetTemplateId()
	 * @method \int fillTemplateId()
	 * @method \string getStartRules()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template setStartRules(\string|\Bitrix\Main\DB\SqlExpression $startRules)
	 * @method bool hasStartRules()
	 * @method bool isStartRulesFilled()
	 * @method bool isStartRulesChanged()
	 * @method \string remindActualStartRules()
	 * @method \string requireStartRules()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template resetStartRules()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template unsetStartRules()
	 * @method \string fillStartRules()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template set($fieldName, $value)
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template reset($fieldName)
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Automation\Engine\Entity\EO_Template wakeUp($data)
	 */
	class EO_Template {
		/* @var \Bitrix\Crm\Automation\Engine\Entity\TemplateTable */
		static public $dataClass = '\Bitrix\Crm\Automation\Engine\Entity\TemplateTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Automation\Engine\Entity {
	/**
	 * EO_Template_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \string[] getEntityStatusList()
	 * @method \string[] fillEntityStatus()
	 * @method \int[] getTemplateIdList()
	 * @method \int[] fillTemplateId()
	 * @method \string[] getStartRulesList()
	 * @method \string[] fillStartRules()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Automation\Engine\Entity\EO_Template $object)
	 * @method bool has(\Bitrix\Crm\Automation\Engine\Entity\EO_Template $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template getByPrimary($primary)
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template[] getAll()
	 * @method bool remove(\Bitrix\Crm\Automation\Engine\Entity\EO_Template $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Automation\Engine\Entity\EO_Template_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Template_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Automation\Engine\Entity\TemplateTable */
		static public $dataClass = '\Bitrix\Crm\Automation\Engine\Entity\TemplateTable';
	}
}
namespace Bitrix\Crm\Automation\Engine\Entity {
	/**
	 * @method static EO_Template_Query query()
	 * @method static EO_Template_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Template_Result getById($id)
	 * @method static EO_Template_Result getList(array $parameters = array())
	 * @method static EO_Template_Entity getEntity()
	 * @method static \Bitrix\Crm\Automation\Engine\Entity\EO_Template createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Automation\Engine\Entity\EO_Template_Collection createCollection()
	 * @method static \Bitrix\Crm\Automation\Engine\Entity\EO_Template wakeUpObject($row)
	 * @method static \Bitrix\Crm\Automation\Engine\Entity\EO_Template_Collection wakeUpCollection($rows)
	 */
	class TemplateTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Template_Result exec()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template fetchObject()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Template_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template fetchObject()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template_Collection fetchCollection()
	 */
	class EO_Template_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template_Collection createCollection()
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template wakeUpObject($row)
	 * @method \Bitrix\Crm\Automation\Engine\Entity\EO_Template_Collection wakeUpCollection($rows)
	 */
	class EO_Template_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Automation\Trigger\Entity\TriggerTable:crm/lib/automation/trigger/entity/trigger.php:39f4d7952263f0fa27a01b44284644a2 */
namespace Bitrix\Crm\Automation\Trigger\Entity {
	/**
	 * EO_Trigger
	 * @see \Bitrix\Crm\Automation\Trigger\Entity\TriggerTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger resetName()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger resetCode()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger unsetCode()
	 * @method \string fillCode()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger resetEntityTypeId()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \string getEntityStatus()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger setEntityStatus(\string|\Bitrix\Main\DB\SqlExpression $entityStatus)
	 * @method bool hasEntityStatus()
	 * @method bool isEntityStatusFilled()
	 * @method bool isEntityStatusChanged()
	 * @method \string remindActualEntityStatus()
	 * @method \string requireEntityStatus()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger resetEntityStatus()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger unsetEntityStatus()
	 * @method \string fillEntityStatus()
	 * @method \string getApplyRules()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger setApplyRules(\string|\Bitrix\Main\DB\SqlExpression $applyRules)
	 * @method bool hasApplyRules()
	 * @method bool isApplyRulesFilled()
	 * @method bool isApplyRulesChanged()
	 * @method \string remindActualApplyRules()
	 * @method \string requireApplyRules()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger resetApplyRules()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger unsetApplyRules()
	 * @method \string fillApplyRules()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger set($fieldName, $value)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger reset($fieldName)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger wakeUp($data)
	 */
	class EO_Trigger {
		/* @var \Bitrix\Crm\Automation\Trigger\Entity\TriggerTable */
		static public $dataClass = '\Bitrix\Crm\Automation\Trigger\Entity\TriggerTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Automation\Trigger\Entity {
	/**
	 * EO_Trigger_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \string[] getEntityStatusList()
	 * @method \string[] fillEntityStatus()
	 * @method \string[] getApplyRulesList()
	 * @method \string[] fillApplyRules()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger $object)
	 * @method bool has(\Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger getByPrimary($primary)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger[] getAll()
	 * @method bool remove(\Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Trigger_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Automation\Trigger\Entity\TriggerTable */
		static public $dataClass = '\Bitrix\Crm\Automation\Trigger\Entity\TriggerTable';
	}
}
namespace Bitrix\Crm\Automation\Trigger\Entity {
	/**
	 * @method static EO_Trigger_Query query()
	 * @method static EO_Trigger_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Trigger_Result getById($id)
	 * @method static EO_Trigger_Result getList(array $parameters = array())
	 * @method static EO_Trigger_Entity getEntity()
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger_Collection createCollection()
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger wakeUpObject($row)
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger_Collection wakeUpCollection($rows)
	 */
	class TriggerTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Trigger_Result exec()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger fetchObject()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Trigger_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger fetchObject()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger_Collection fetchCollection()
	 */
	class EO_Trigger_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger_Collection createCollection()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger wakeUpObject($row)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_Trigger_Collection wakeUpCollection($rows)
	 */
	class EO_Trigger_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Automation\Trigger\Entity\TriggerAppTable:crm/lib/automation/trigger/entity/triggerapp.php:fec23978ce2a6ab17d4297bee2e9e903 */
namespace Bitrix\Crm\Automation\Trigger\Entity {
	/**
	 * EO_TriggerApp
	 * @see \Bitrix\Crm\Automation\Trigger\Entity\TriggerAppTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getAppId()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp setAppId(\int|\Bitrix\Main\DB\SqlExpression $appId)
	 * @method bool hasAppId()
	 * @method bool isAppIdFilled()
	 * @method bool isAppIdChanged()
	 * @method \int remindActualAppId()
	 * @method \int requireAppId()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp resetAppId()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp unsetAppId()
	 * @method \int fillAppId()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp resetName()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp resetCode()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp unsetCode()
	 * @method \string fillCode()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp resetDateCreate()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp set($fieldName, $value)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp reset($fieldName)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp wakeUp($data)
	 */
	class EO_TriggerApp {
		/* @var \Bitrix\Crm\Automation\Trigger\Entity\TriggerAppTable */
		static public $dataClass = '\Bitrix\Crm\Automation\Trigger\Entity\TriggerAppTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Automation\Trigger\Entity {
	/**
	 * EO_TriggerApp_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getAppIdList()
	 * @method \int[] fillAppId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp $object)
	 * @method bool has(\Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp getByPrimary($primary)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp[] getAll()
	 * @method bool remove(\Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_TriggerApp_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Automation\Trigger\Entity\TriggerAppTable */
		static public $dataClass = '\Bitrix\Crm\Automation\Trigger\Entity\TriggerAppTable';
	}
}
namespace Bitrix\Crm\Automation\Trigger\Entity {
	/**
	 * @method static EO_TriggerApp_Query query()
	 * @method static EO_TriggerApp_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_TriggerApp_Result getById($id)
	 * @method static EO_TriggerApp_Result getList(array $parameters = array())
	 * @method static EO_TriggerApp_Entity getEntity()
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp_Collection createCollection()
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp wakeUpObject($row)
	 * @method static \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp_Collection wakeUpCollection($rows)
	 */
	class TriggerAppTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_TriggerApp_Result exec()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp fetchObject()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_TriggerApp_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp fetchObject()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp_Collection fetchCollection()
	 */
	class EO_TriggerApp_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp_Collection createCollection()
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp wakeUpObject($row)
	 * @method \Bitrix\Crm\Automation\Trigger\Entity\EO_TriggerApp_Collection wakeUpCollection($rows)
	 */
	class EO_TriggerApp_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\BankDetailTable:crm/lib/bankdetail.php:04e59aacbb28d5ca9fe2f2566678e540 */
namespace Bitrix\Crm {
	/**
	 * EO_BankDetail
	 * @see \Bitrix\Crm\BankDetailTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_BankDetail setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\EO_BankDetail setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\EO_BankDetail resetEntityTypeId()
	 * @method \Bitrix\Crm\EO_BankDetail unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\EO_BankDetail setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\EO_BankDetail resetEntityId()
	 * @method \Bitrix\Crm\EO_BankDetail unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getCountryId()
	 * @method \Bitrix\Crm\EO_BankDetail setCountryId(\int|\Bitrix\Main\DB\SqlExpression $countryId)
	 * @method bool hasCountryId()
	 * @method bool isCountryIdFilled()
	 * @method bool isCountryIdChanged()
	 * @method \int remindActualCountryId()
	 * @method \int requireCountryId()
	 * @method \Bitrix\Crm\EO_BankDetail resetCountryId()
	 * @method \Bitrix\Crm\EO_BankDetail unsetCountryId()
	 * @method \int fillCountryId()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\EO_BankDetail setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\EO_BankDetail resetDateCreate()
	 * @method \Bitrix\Crm\EO_BankDetail unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Crm\EO_BankDetail setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Crm\EO_BankDetail resetDateModify()
	 * @method \Bitrix\Crm\EO_BankDetail unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \int getCreatedById()
	 * @method \Bitrix\Crm\EO_BankDetail setCreatedById(\int|\Bitrix\Main\DB\SqlExpression $createdById)
	 * @method bool hasCreatedById()
	 * @method bool isCreatedByIdFilled()
	 * @method bool isCreatedByIdChanged()
	 * @method \int remindActualCreatedById()
	 * @method \int requireCreatedById()
	 * @method \Bitrix\Crm\EO_BankDetail resetCreatedById()
	 * @method \Bitrix\Crm\EO_BankDetail unsetCreatedById()
	 * @method \int fillCreatedById()
	 * @method \int getModifyById()
	 * @method \Bitrix\Crm\EO_BankDetail setModifyById(\int|\Bitrix\Main\DB\SqlExpression $modifyById)
	 * @method bool hasModifyById()
	 * @method bool isModifyByIdFilled()
	 * @method bool isModifyByIdChanged()
	 * @method \int remindActualModifyById()
	 * @method \int requireModifyById()
	 * @method \Bitrix\Crm\EO_BankDetail resetModifyById()
	 * @method \Bitrix\Crm\EO_BankDetail unsetModifyById()
	 * @method \int fillModifyById()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_BankDetail setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_BankDetail resetName()
	 * @method \Bitrix\Crm\EO_BankDetail unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\EO_BankDetail setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\EO_BankDetail resetCode()
	 * @method \Bitrix\Crm\EO_BankDetail unsetCode()
	 * @method \string fillCode()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\EO_BankDetail setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\EO_BankDetail resetXmlId()
	 * @method \Bitrix\Crm\EO_BankDetail unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getOriginatorId()
	 * @method \Bitrix\Crm\EO_BankDetail setOriginatorId(\string|\Bitrix\Main\DB\SqlExpression $originatorId)
	 * @method bool hasOriginatorId()
	 * @method bool isOriginatorIdFilled()
	 * @method bool isOriginatorIdChanged()
	 * @method \string remindActualOriginatorId()
	 * @method \string requireOriginatorId()
	 * @method \Bitrix\Crm\EO_BankDetail resetOriginatorId()
	 * @method \Bitrix\Crm\EO_BankDetail unsetOriginatorId()
	 * @method \string fillOriginatorId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Crm\EO_BankDetail setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Crm\EO_BankDetail resetActive()
	 * @method \Bitrix\Crm\EO_BankDetail unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\EO_BankDetail setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\EO_BankDetail resetSort()
	 * @method \Bitrix\Crm\EO_BankDetail unsetSort()
	 * @method \int fillSort()
	 * @method \string getRqBankName()
	 * @method \Bitrix\Crm\EO_BankDetail setRqBankName(\string|\Bitrix\Main\DB\SqlExpression $rqBankName)
	 * @method bool hasRqBankName()
	 * @method bool isRqBankNameFilled()
	 * @method bool isRqBankNameChanged()
	 * @method \string remindActualRqBankName()
	 * @method \string requireRqBankName()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqBankName()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqBankName()
	 * @method \string fillRqBankName()
	 * @method \string getRqBankAddr()
	 * @method \Bitrix\Crm\EO_BankDetail setRqBankAddr(\string|\Bitrix\Main\DB\SqlExpression $rqBankAddr)
	 * @method bool hasRqBankAddr()
	 * @method bool isRqBankAddrFilled()
	 * @method bool isRqBankAddrChanged()
	 * @method \string remindActualRqBankAddr()
	 * @method \string requireRqBankAddr()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqBankAddr()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqBankAddr()
	 * @method \string fillRqBankAddr()
	 * @method \string getRqBankRouteNum()
	 * @method \Bitrix\Crm\EO_BankDetail setRqBankRouteNum(\string|\Bitrix\Main\DB\SqlExpression $rqBankRouteNum)
	 * @method bool hasRqBankRouteNum()
	 * @method bool isRqBankRouteNumFilled()
	 * @method bool isRqBankRouteNumChanged()
	 * @method \string remindActualRqBankRouteNum()
	 * @method \string requireRqBankRouteNum()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqBankRouteNum()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqBankRouteNum()
	 * @method \string fillRqBankRouteNum()
	 * @method \string getRqBik()
	 * @method \Bitrix\Crm\EO_BankDetail setRqBik(\string|\Bitrix\Main\DB\SqlExpression $rqBik)
	 * @method bool hasRqBik()
	 * @method bool isRqBikFilled()
	 * @method bool isRqBikChanged()
	 * @method \string remindActualRqBik()
	 * @method \string requireRqBik()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqBik()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqBik()
	 * @method \string fillRqBik()
	 * @method \string getRqMfo()
	 * @method \Bitrix\Crm\EO_BankDetail setRqMfo(\string|\Bitrix\Main\DB\SqlExpression $rqMfo)
	 * @method bool hasRqMfo()
	 * @method bool isRqMfoFilled()
	 * @method bool isRqMfoChanged()
	 * @method \string remindActualRqMfo()
	 * @method \string requireRqMfo()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqMfo()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqMfo()
	 * @method \string fillRqMfo()
	 * @method \string getRqAccName()
	 * @method \Bitrix\Crm\EO_BankDetail setRqAccName(\string|\Bitrix\Main\DB\SqlExpression $rqAccName)
	 * @method bool hasRqAccName()
	 * @method bool isRqAccNameFilled()
	 * @method bool isRqAccNameChanged()
	 * @method \string remindActualRqAccName()
	 * @method \string requireRqAccName()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqAccName()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqAccName()
	 * @method \string fillRqAccName()
	 * @method \string getRqAccNum()
	 * @method \Bitrix\Crm\EO_BankDetail setRqAccNum(\string|\Bitrix\Main\DB\SqlExpression $rqAccNum)
	 * @method bool hasRqAccNum()
	 * @method bool isRqAccNumFilled()
	 * @method bool isRqAccNumChanged()
	 * @method \string remindActualRqAccNum()
	 * @method \string requireRqAccNum()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqAccNum()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqAccNum()
	 * @method \string fillRqAccNum()
	 * @method \string getRqIik()
	 * @method \Bitrix\Crm\EO_BankDetail setRqIik(\string|\Bitrix\Main\DB\SqlExpression $rqIik)
	 * @method bool hasRqIik()
	 * @method bool isRqIikFilled()
	 * @method bool isRqIikChanged()
	 * @method \string remindActualRqIik()
	 * @method \string requireRqIik()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqIik()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqIik()
	 * @method \string fillRqIik()
	 * @method \string getRqAccCurrency()
	 * @method \Bitrix\Crm\EO_BankDetail setRqAccCurrency(\string|\Bitrix\Main\DB\SqlExpression $rqAccCurrency)
	 * @method bool hasRqAccCurrency()
	 * @method bool isRqAccCurrencyFilled()
	 * @method bool isRqAccCurrencyChanged()
	 * @method \string remindActualRqAccCurrency()
	 * @method \string requireRqAccCurrency()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqAccCurrency()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqAccCurrency()
	 * @method \string fillRqAccCurrency()
	 * @method \string getRqCorAccNum()
	 * @method \Bitrix\Crm\EO_BankDetail setRqCorAccNum(\string|\Bitrix\Main\DB\SqlExpression $rqCorAccNum)
	 * @method bool hasRqCorAccNum()
	 * @method bool isRqCorAccNumFilled()
	 * @method bool isRqCorAccNumChanged()
	 * @method \string remindActualRqCorAccNum()
	 * @method \string requireRqCorAccNum()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqCorAccNum()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqCorAccNum()
	 * @method \string fillRqCorAccNum()
	 * @method \string getRqIban()
	 * @method \Bitrix\Crm\EO_BankDetail setRqIban(\string|\Bitrix\Main\DB\SqlExpression $rqIban)
	 * @method bool hasRqIban()
	 * @method bool isRqIbanFilled()
	 * @method bool isRqIbanChanged()
	 * @method \string remindActualRqIban()
	 * @method \string requireRqIban()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqIban()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqIban()
	 * @method \string fillRqIban()
	 * @method \string getRqSwift()
	 * @method \Bitrix\Crm\EO_BankDetail setRqSwift(\string|\Bitrix\Main\DB\SqlExpression $rqSwift)
	 * @method bool hasRqSwift()
	 * @method bool isRqSwiftFilled()
	 * @method bool isRqSwiftChanged()
	 * @method \string remindActualRqSwift()
	 * @method \string requireRqSwift()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqSwift()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqSwift()
	 * @method \string fillRqSwift()
	 * @method \string getRqBic()
	 * @method \Bitrix\Crm\EO_BankDetail setRqBic(\string|\Bitrix\Main\DB\SqlExpression $rqBic)
	 * @method bool hasRqBic()
	 * @method bool isRqBicFilled()
	 * @method bool isRqBicChanged()
	 * @method \string remindActualRqBic()
	 * @method \string requireRqBic()
	 * @method \Bitrix\Crm\EO_BankDetail resetRqBic()
	 * @method \Bitrix\Crm\EO_BankDetail unsetRqBic()
	 * @method \string fillRqBic()
	 * @method \string getComments()
	 * @method \Bitrix\Crm\EO_BankDetail setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Crm\EO_BankDetail resetComments()
	 * @method \Bitrix\Crm\EO_BankDetail unsetComments()
	 * @method \string fillComments()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_BankDetail set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_BankDetail reset($fieldName)
	 * @method \Bitrix\Crm\EO_BankDetail unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_BankDetail wakeUp($data)
	 */
	class EO_BankDetail {
		/* @var \Bitrix\Crm\BankDetailTable */
		static public $dataClass = '\Bitrix\Crm\BankDetailTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_BankDetail_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getCountryIdList()
	 * @method \int[] fillCountryId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \int[] getCreatedByIdList()
	 * @method \int[] fillCreatedById()
	 * @method \int[] getModifyByIdList()
	 * @method \int[] fillModifyById()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getOriginatorIdList()
	 * @method \string[] fillOriginatorId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getRqBankNameList()
	 * @method \string[] fillRqBankName()
	 * @method \string[] getRqBankAddrList()
	 * @method \string[] fillRqBankAddr()
	 * @method \string[] getRqBankRouteNumList()
	 * @method \string[] fillRqBankRouteNum()
	 * @method \string[] getRqBikList()
	 * @method \string[] fillRqBik()
	 * @method \string[] getRqMfoList()
	 * @method \string[] fillRqMfo()
	 * @method \string[] getRqAccNameList()
	 * @method \string[] fillRqAccName()
	 * @method \string[] getRqAccNumList()
	 * @method \string[] fillRqAccNum()
	 * @method \string[] getRqIikList()
	 * @method \string[] fillRqIik()
	 * @method \string[] getRqAccCurrencyList()
	 * @method \string[] fillRqAccCurrency()
	 * @method \string[] getRqCorAccNumList()
	 * @method \string[] fillRqCorAccNum()
	 * @method \string[] getRqIbanList()
	 * @method \string[] fillRqIban()
	 * @method \string[] getRqSwiftList()
	 * @method \string[] fillRqSwift()
	 * @method \string[] getRqBicList()
	 * @method \string[] fillRqBic()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_BankDetail $object)
	 * @method bool has(\Bitrix\Crm\EO_BankDetail $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_BankDetail getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_BankDetail[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_BankDetail $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_BankDetail_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_BankDetail current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_BankDetail_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\BankDetailTable */
		static public $dataClass = '\Bitrix\Crm\BankDetailTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_BankDetail_Query query()
	 * @method static EO_BankDetail_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_BankDetail_Result getById($id)
	 * @method static EO_BankDetail_Result getList(array $parameters = array())
	 * @method static EO_BankDetail_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_BankDetail createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_BankDetail_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_BankDetail wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_BankDetail_Collection wakeUpCollection($rows)
	 */
	class BankDetailTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BankDetail_Result exec()
	 * @method \Bitrix\Crm\EO_BankDetail fetchObject()
	 * @method \Bitrix\Crm\EO_BankDetail_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BankDetail_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_BankDetail fetchObject()
	 * @method \Bitrix\Crm\EO_BankDetail_Collection fetchCollection()
	 */
	class EO_BankDetail_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_BankDetail createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_BankDetail_Collection createCollection()
	 * @method \Bitrix\Crm\EO_BankDetail wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_BankDetail_Collection wakeUpCollection($rows)
	 */
	class EO_BankDetail_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Binding\ContactCompanyTable:crm/lib/binding/contactcompany.php:9251b9c6bdd7dd776f68a2931ca900d6 */
namespace Bitrix\Crm\Binding {
	/**
	 * EO_ContactCompany
	 * @see \Bitrix\Crm\Binding\ContactCompanyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getContactId()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany setContactId(\int|\Bitrix\Main\DB\SqlExpression $contactId)
	 * @method bool hasContactId()
	 * @method bool isContactIdFilled()
	 * @method bool isContactIdChanged()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany resetSort()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany unsetSort()
	 * @method \int fillSort()
	 * @method \int getRoleId()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany setRoleId(\int|\Bitrix\Main\DB\SqlExpression $roleId)
	 * @method bool hasRoleId()
	 * @method bool isRoleIdFilled()
	 * @method bool isRoleIdChanged()
	 * @method \int remindActualRoleId()
	 * @method \int requireRoleId()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany resetRoleId()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany unsetRoleId()
	 * @method \int fillRoleId()
	 * @method \boolean getIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany setIsPrimary(\boolean|\Bitrix\Main\DB\SqlExpression $isPrimary)
	 * @method bool hasIsPrimary()
	 * @method bool isIsPrimaryFilled()
	 * @method bool isIsPrimaryChanged()
	 * @method \boolean remindActualIsPrimary()
	 * @method \boolean requireIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany resetIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany unsetIsPrimary()
	 * @method \boolean fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany set($fieldName, $value)
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany reset($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Binding\EO_ContactCompany wakeUp($data)
	 */
	class EO_ContactCompany {
		/* @var \Bitrix\Crm\Binding\ContactCompanyTable */
		static public $dataClass = '\Bitrix\Crm\Binding\ContactCompanyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * EO_ContactCompany_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getContactIdList()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getRoleIdList()
	 * @method \int[] fillRoleId()
	 * @method \boolean[] getIsPrimaryList()
	 * @method \boolean[] fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Binding\EO_ContactCompany $object)
	 * @method bool has(\Bitrix\Crm\Binding\EO_ContactCompany $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany getByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany[] getAll()
	 * @method bool remove(\Bitrix\Crm\Binding\EO_ContactCompany $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Binding\EO_ContactCompany_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ContactCompany_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Binding\ContactCompanyTable */
		static public $dataClass = '\Bitrix\Crm\Binding\ContactCompanyTable';
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * @method static EO_ContactCompany_Query query()
	 * @method static EO_ContactCompany_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ContactCompany_Result getById($id)
	 * @method static EO_ContactCompany_Result getList(array $parameters = array())
	 * @method static EO_ContactCompany_Entity getEntity()
	 * @method static \Bitrix\Crm\Binding\EO_ContactCompany createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Binding\EO_ContactCompany_Collection createCollection()
	 * @method static \Bitrix\Crm\Binding\EO_ContactCompany wakeUpObject($row)
	 * @method static \Bitrix\Crm\Binding\EO_ContactCompany_Collection wakeUpCollection($rows)
	 */
	class ContactCompanyTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ContactCompany_Result exec()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ContactCompany_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany_Collection fetchCollection()
	 */
	class EO_ContactCompany_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany_Collection createCollection()
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany wakeUpObject($row)
	 * @method \Bitrix\Crm\Binding\EO_ContactCompany_Collection wakeUpCollection($rows)
	 */
	class EO_ContactCompany_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Binding\DealContactTable:crm/lib/binding/dealcontact.php:03e67f1918ed456a5276235af1a918c6 */
namespace Bitrix\Crm\Binding {
	/**
	 * EO_DealContact
	 * @see \Bitrix\Crm\Binding\DealContactTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getDealId()
	 * @method \Bitrix\Crm\Binding\EO_DealContact setDealId(\int|\Bitrix\Main\DB\SqlExpression $dealId)
	 * @method bool hasDealId()
	 * @method bool isDealIdFilled()
	 * @method bool isDealIdChanged()
	 * @method \int getContactId()
	 * @method \Bitrix\Crm\Binding\EO_DealContact setContactId(\int|\Bitrix\Main\DB\SqlExpression $contactId)
	 * @method bool hasContactId()
	 * @method bool isContactIdFilled()
	 * @method bool isContactIdChanged()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Binding\EO_DealContact setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Binding\EO_DealContact resetSort()
	 * @method \Bitrix\Crm\Binding\EO_DealContact unsetSort()
	 * @method \int fillSort()
	 * @method \int getRoleId()
	 * @method \Bitrix\Crm\Binding\EO_DealContact setRoleId(\int|\Bitrix\Main\DB\SqlExpression $roleId)
	 * @method bool hasRoleId()
	 * @method bool isRoleIdFilled()
	 * @method bool isRoleIdChanged()
	 * @method \int remindActualRoleId()
	 * @method \int requireRoleId()
	 * @method \Bitrix\Crm\Binding\EO_DealContact resetRoleId()
	 * @method \Bitrix\Crm\Binding\EO_DealContact unsetRoleId()
	 * @method \int fillRoleId()
	 * @method \boolean getIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_DealContact setIsPrimary(\boolean|\Bitrix\Main\DB\SqlExpression $isPrimary)
	 * @method bool hasIsPrimary()
	 * @method bool isIsPrimaryFilled()
	 * @method bool isIsPrimaryChanged()
	 * @method \boolean remindActualIsPrimary()
	 * @method \boolean requireIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_DealContact resetIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_DealContact unsetIsPrimary()
	 * @method \boolean fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_DealContact set($fieldName, $value)
	 * @method \Bitrix\Crm\Binding\EO_DealContact reset($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_DealContact unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Binding\EO_DealContact wakeUp($data)
	 */
	class EO_DealContact {
		/* @var \Bitrix\Crm\Binding\DealContactTable */
		static public $dataClass = '\Bitrix\Crm\Binding\DealContactTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * EO_DealContact_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getDealIdList()
	 * @method \int[] getContactIdList()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getRoleIdList()
	 * @method \int[] fillRoleId()
	 * @method \boolean[] getIsPrimaryList()
	 * @method \boolean[] fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Binding\EO_DealContact $object)
	 * @method bool has(\Bitrix\Crm\Binding\EO_DealContact $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_DealContact getByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_DealContact[] getAll()
	 * @method bool remove(\Bitrix\Crm\Binding\EO_DealContact $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Binding\EO_DealContact_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Binding\EO_DealContact current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DealContact_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Binding\DealContactTable */
		static public $dataClass = '\Bitrix\Crm\Binding\DealContactTable';
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * @method static EO_DealContact_Query query()
	 * @method static EO_DealContact_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DealContact_Result getById($id)
	 * @method static EO_DealContact_Result getList(array $parameters = array())
	 * @method static EO_DealContact_Entity getEntity()
	 * @method static \Bitrix\Crm\Binding\EO_DealContact createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Binding\EO_DealContact_Collection createCollection()
	 * @method static \Bitrix\Crm\Binding\EO_DealContact wakeUpObject($row)
	 * @method static \Bitrix\Crm\Binding\EO_DealContact_Collection wakeUpCollection($rows)
	 */
	class DealContactTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DealContact_Result exec()
	 * @method \Bitrix\Crm\Binding\EO_DealContact fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_DealContact_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DealContact_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_DealContact fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_DealContact_Collection fetchCollection()
	 */
	class EO_DealContact_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_DealContact createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Binding\EO_DealContact_Collection createCollection()
	 * @method \Bitrix\Crm\Binding\EO_DealContact wakeUpObject($row)
	 * @method \Bitrix\Crm\Binding\EO_DealContact_Collection wakeUpCollection($rows)
	 */
	class EO_DealContact_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Binding\LeadContactTable:crm/lib/binding/leadcontact.php:64d0ae33b3f7d29b7a2ae4c166455407 */
namespace Bitrix\Crm\Binding {
	/**
	 * EO_LeadContact
	 * @see \Bitrix\Crm\Binding\LeadContactTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getLeadId()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact setLeadId(\int|\Bitrix\Main\DB\SqlExpression $leadId)
	 * @method bool hasLeadId()
	 * @method bool isLeadIdFilled()
	 * @method bool isLeadIdChanged()
	 * @method \int getContactId()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact setContactId(\int|\Bitrix\Main\DB\SqlExpression $contactId)
	 * @method bool hasContactId()
	 * @method bool isContactIdFilled()
	 * @method bool isContactIdChanged()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact resetSort()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact unsetSort()
	 * @method \int fillSort()
	 * @method \int getRoleId()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact setRoleId(\int|\Bitrix\Main\DB\SqlExpression $roleId)
	 * @method bool hasRoleId()
	 * @method bool isRoleIdFilled()
	 * @method bool isRoleIdChanged()
	 * @method \int remindActualRoleId()
	 * @method \int requireRoleId()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact resetRoleId()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact unsetRoleId()
	 * @method \int fillRoleId()
	 * @method \boolean getIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact setIsPrimary(\boolean|\Bitrix\Main\DB\SqlExpression $isPrimary)
	 * @method bool hasIsPrimary()
	 * @method bool isIsPrimaryFilled()
	 * @method bool isIsPrimaryChanged()
	 * @method \boolean remindActualIsPrimary()
	 * @method \boolean requireIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact resetIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact unsetIsPrimary()
	 * @method \boolean fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_LeadContact set($fieldName, $value)
	 * @method \Bitrix\Crm\Binding\EO_LeadContact reset($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_LeadContact unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Binding\EO_LeadContact wakeUp($data)
	 */
	class EO_LeadContact {
		/* @var \Bitrix\Crm\Binding\LeadContactTable */
		static public $dataClass = '\Bitrix\Crm\Binding\LeadContactTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * EO_LeadContact_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getLeadIdList()
	 * @method \int[] getContactIdList()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getRoleIdList()
	 * @method \int[] fillRoleId()
	 * @method \boolean[] getIsPrimaryList()
	 * @method \boolean[] fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Binding\EO_LeadContact $object)
	 * @method bool has(\Bitrix\Crm\Binding\EO_LeadContact $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_LeadContact getByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_LeadContact[] getAll()
	 * @method bool remove(\Bitrix\Crm\Binding\EO_LeadContact $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Binding\EO_LeadContact_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Binding\EO_LeadContact current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_LeadContact_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Binding\LeadContactTable */
		static public $dataClass = '\Bitrix\Crm\Binding\LeadContactTable';
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * @method static EO_LeadContact_Query query()
	 * @method static EO_LeadContact_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_LeadContact_Result getById($id)
	 * @method static EO_LeadContact_Result getList(array $parameters = array())
	 * @method static EO_LeadContact_Entity getEntity()
	 * @method static \Bitrix\Crm\Binding\EO_LeadContact createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Binding\EO_LeadContact_Collection createCollection()
	 * @method static \Bitrix\Crm\Binding\EO_LeadContact wakeUpObject($row)
	 * @method static \Bitrix\Crm\Binding\EO_LeadContact_Collection wakeUpCollection($rows)
	 */
	class LeadContactTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_LeadContact_Result exec()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_LeadContact_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_LeadContact fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact_Collection fetchCollection()
	 */
	class EO_LeadContact_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_LeadContact createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Binding\EO_LeadContact_Collection createCollection()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact wakeUpObject($row)
	 * @method \Bitrix\Crm\Binding\EO_LeadContact_Collection wakeUpCollection($rows)
	 */
	class EO_LeadContact_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Binding\OrderContactCompanyTable:crm/lib/binding/ordercontactcompany.php:7328b4aeae09945ebf6a52ab97a46861 */
namespace Bitrix\Crm\Binding {
	/**
	 * EO_OrderContactCompany
	 * @see \Bitrix\Crm\Binding\OrderContactCompanyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany resetOrderId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Order getOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order remindActualOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order requireOrder()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany setOrder(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany resetOrder()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany unsetOrder()
	 * @method bool hasOrder()
	 * @method bool isOrderFilled()
	 * @method bool isOrderChanged()
	 * @method \Bitrix\Sale\Internals\EO_Order fillOrder()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany resetEntityId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany resetEntityTypeId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany resetSort()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany unsetSort()
	 * @method \int fillSort()
	 * @method \int getRoleId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany setRoleId(\int|\Bitrix\Main\DB\SqlExpression $roleId)
	 * @method bool hasRoleId()
	 * @method bool isRoleIdFilled()
	 * @method bool isRoleIdChanged()
	 * @method \int remindActualRoleId()
	 * @method \int requireRoleId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany resetRoleId()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany unsetRoleId()
	 * @method \int fillRoleId()
	 * @method \boolean getIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany setIsPrimary(\boolean|\Bitrix\Main\DB\SqlExpression $isPrimary)
	 * @method bool hasIsPrimary()
	 * @method bool isIsPrimaryFilled()
	 * @method bool isIsPrimaryChanged()
	 * @method \boolean remindActualIsPrimary()
	 * @method \boolean requireIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany resetIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany unsetIsPrimary()
	 * @method \boolean fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany set($fieldName, $value)
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany reset($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Binding\EO_OrderContactCompany wakeUp($data)
	 */
	class EO_OrderContactCompany {
		/* @var \Bitrix\Crm\Binding\OrderContactCompanyTable */
		static public $dataClass = '\Bitrix\Crm\Binding\OrderContactCompanyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * EO_OrderContactCompany_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \Bitrix\Sale\Internals\EO_Order[] getOrderList()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany_Collection getOrderCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fillOrder()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getRoleIdList()
	 * @method \int[] fillRoleId()
	 * @method \boolean[] getIsPrimaryList()
	 * @method \boolean[] fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Binding\EO_OrderContactCompany $object)
	 * @method bool has(\Bitrix\Crm\Binding\EO_OrderContactCompany $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany getByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany[] getAll()
	 * @method bool remove(\Bitrix\Crm\Binding\EO_OrderContactCompany $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Binding\EO_OrderContactCompany_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_OrderContactCompany_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Binding\OrderContactCompanyTable */
		static public $dataClass = '\Bitrix\Crm\Binding\OrderContactCompanyTable';
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * @method static EO_OrderContactCompany_Query query()
	 * @method static EO_OrderContactCompany_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_OrderContactCompany_Result getById($id)
	 * @method static EO_OrderContactCompany_Result getList(array $parameters = array())
	 * @method static EO_OrderContactCompany_Entity getEntity()
	 * @method static \Bitrix\Crm\Binding\EO_OrderContactCompany createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Binding\EO_OrderContactCompany_Collection createCollection()
	 * @method static \Bitrix\Crm\Binding\EO_OrderContactCompany wakeUpObject($row)
	 * @method static \Bitrix\Crm\Binding\EO_OrderContactCompany_Collection wakeUpCollection($rows)
	 */
	class OrderContactCompanyTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderContactCompany_Result exec()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderContactCompany_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany_Collection fetchCollection()
	 */
	class EO_OrderContactCompany_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany_Collection createCollection()
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany wakeUpObject($row)
	 * @method \Bitrix\Crm\Binding\EO_OrderContactCompany_Collection wakeUpCollection($rows)
	 */
	class EO_OrderContactCompany_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Binding\OrderDealTable:crm/lib/binding/orderdealtable.php:0e5e1340d252aa431ee6e97662e48d2f */
namespace Bitrix\Crm\Binding {
	/**
	 * EO_OrderDeal
	 * @see \Bitrix\Crm\Binding\OrderDealTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getDealId()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal setDealId(\int|\Bitrix\Main\DB\SqlExpression $dealId)
	 * @method bool hasDealId()
	 * @method bool isDealIdFilled()
	 * @method bool isDealIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \Bitrix\Sale\Internals\EO_Order getOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order remindActualOrder()
	 * @method \Bitrix\Sale\Internals\EO_Order requireOrder()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal setOrder(\Bitrix\Sale\Internals\EO_Order $object)
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal resetOrder()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal unsetOrder()
	 * @method bool hasOrder()
	 * @method bool isOrderFilled()
	 * @method bool isOrderChanged()
	 * @method \Bitrix\Sale\Internals\EO_Order fillOrder()
	 * @method \Bitrix\Crm\EO_Deal getDeal()
	 * @method \Bitrix\Crm\EO_Deal remindActualDeal()
	 * @method \Bitrix\Crm\EO_Deal requireDeal()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal setDeal(\Bitrix\Crm\EO_Deal $object)
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal resetDeal()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal unsetDeal()
	 * @method bool hasDeal()
	 * @method bool isDealFilled()
	 * @method bool isDealChanged()
	 * @method \Bitrix\Crm\EO_Deal fillDeal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal set($fieldName, $value)
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal reset($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Binding\EO_OrderDeal wakeUp($data)
	 */
	class EO_OrderDeal {
		/* @var \Bitrix\Crm\Binding\OrderDealTable */
		static public $dataClass = '\Bitrix\Crm\Binding\OrderDealTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * EO_OrderDeal_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getDealIdList()
	 * @method \int[] getOrderIdList()
	 * @method \Bitrix\Sale\Internals\EO_Order[] getOrderList()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal_Collection getOrderCollection()
	 * @method \Bitrix\Sale\Internals\EO_Order_Collection fillOrder()
	 * @method \Bitrix\Crm\EO_Deal[] getDealList()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal_Collection getDealCollection()
	 * @method \Bitrix\Crm\EO_Deal_Collection fillDeal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Binding\EO_OrderDeal $object)
	 * @method bool has(\Bitrix\Crm\Binding\EO_OrderDeal $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal getByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal[] getAll()
	 * @method bool remove(\Bitrix\Crm\Binding\EO_OrderDeal $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Binding\EO_OrderDeal_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_OrderDeal_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Binding\OrderDealTable */
		static public $dataClass = '\Bitrix\Crm\Binding\OrderDealTable';
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * @method static EO_OrderDeal_Query query()
	 * @method static EO_OrderDeal_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_OrderDeal_Result getById($id)
	 * @method static EO_OrderDeal_Result getList(array $parameters = array())
	 * @method static EO_OrderDeal_Entity getEntity()
	 * @method static \Bitrix\Crm\Binding\EO_OrderDeal createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Binding\EO_OrderDeal_Collection createCollection()
	 * @method static \Bitrix\Crm\Binding\EO_OrderDeal wakeUpObject($row)
	 * @method static \Bitrix\Crm\Binding\EO_OrderDeal_Collection wakeUpCollection($rows)
	 */
	class OrderDealTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderDeal_Result exec()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderDeal_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal_Collection fetchCollection()
	 */
	class EO_OrderDeal_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal_Collection createCollection()
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal wakeUpObject($row)
	 * @method \Bitrix\Crm\Binding\EO_OrderDeal_Collection wakeUpCollection($rows)
	 */
	class EO_OrderDeal_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Binding\QuoteContactTable:crm/lib/binding/quotecontact.php:7548f00652352c3b495432d5a3c21fde */
namespace Bitrix\Crm\Binding {
	/**
	 * EO_QuoteContact
	 * @see \Bitrix\Crm\Binding\QuoteContactTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getQuoteId()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact setQuoteId(\int|\Bitrix\Main\DB\SqlExpression $quoteId)
	 * @method bool hasQuoteId()
	 * @method bool isQuoteIdFilled()
	 * @method bool isQuoteIdChanged()
	 * @method \int getContactId()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact setContactId(\int|\Bitrix\Main\DB\SqlExpression $contactId)
	 * @method bool hasContactId()
	 * @method bool isContactIdFilled()
	 * @method bool isContactIdChanged()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact resetSort()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact unsetSort()
	 * @method \int fillSort()
	 * @method \int getRoleId()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact setRoleId(\int|\Bitrix\Main\DB\SqlExpression $roleId)
	 * @method bool hasRoleId()
	 * @method bool isRoleIdFilled()
	 * @method bool isRoleIdChanged()
	 * @method \int remindActualRoleId()
	 * @method \int requireRoleId()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact resetRoleId()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact unsetRoleId()
	 * @method \int fillRoleId()
	 * @method \boolean getIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact setIsPrimary(\boolean|\Bitrix\Main\DB\SqlExpression $isPrimary)
	 * @method bool hasIsPrimary()
	 * @method bool isIsPrimaryFilled()
	 * @method bool isIsPrimaryChanged()
	 * @method \boolean remindActualIsPrimary()
	 * @method \boolean requireIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact resetIsPrimary()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact unsetIsPrimary()
	 * @method \boolean fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact set($fieldName, $value)
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact reset($fieldName)
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Binding\EO_QuoteContact wakeUp($data)
	 */
	class EO_QuoteContact {
		/* @var \Bitrix\Crm\Binding\QuoteContactTable */
		static public $dataClass = '\Bitrix\Crm\Binding\QuoteContactTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * EO_QuoteContact_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getQuoteIdList()
	 * @method \int[] getContactIdList()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getRoleIdList()
	 * @method \int[] fillRoleId()
	 * @method \boolean[] getIsPrimaryList()
	 * @method \boolean[] fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Binding\EO_QuoteContact $object)
	 * @method bool has(\Bitrix\Crm\Binding\EO_QuoteContact $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact getByPrimary($primary)
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact[] getAll()
	 * @method bool remove(\Bitrix\Crm\Binding\EO_QuoteContact $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Binding\EO_QuoteContact_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_QuoteContact_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Binding\QuoteContactTable */
		static public $dataClass = '\Bitrix\Crm\Binding\QuoteContactTable';
	}
}
namespace Bitrix\Crm\Binding {
	/**
	 * @method static EO_QuoteContact_Query query()
	 * @method static EO_QuoteContact_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_QuoteContact_Result getById($id)
	 * @method static EO_QuoteContact_Result getList(array $parameters = array())
	 * @method static EO_QuoteContact_Entity getEntity()
	 * @method static \Bitrix\Crm\Binding\EO_QuoteContact createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Binding\EO_QuoteContact_Collection createCollection()
	 * @method static \Bitrix\Crm\Binding\EO_QuoteContact wakeUpObject($row)
	 * @method static \Bitrix\Crm\Binding\EO_QuoteContact_Collection wakeUpCollection($rows)
	 */
	class QuoteContactTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_QuoteContact_Result exec()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_QuoteContact_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact fetchObject()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact_Collection fetchCollection()
	 */
	class EO_QuoteContact_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact_Collection createCollection()
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact wakeUpObject($row)
	 * @method \Bitrix\Crm\Binding\EO_QuoteContact_Collection wakeUpCollection($rows)
	 */
	class EO_QuoteContact_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\BusinessTypeTable:crm/lib/businesstype.php:e39ce2876125956a9ea7bba5f5598ab1 */
namespace Bitrix\Crm {
	/**
	 * EO_BusinessType
	 * @see \Bitrix\Crm\BusinessTypeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getCode()
	 * @method \Bitrix\Crm\EO_BusinessType setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_BusinessType setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_BusinessType resetName()
	 * @method \Bitrix\Crm\EO_BusinessType unsetName()
	 * @method \string fillName()
	 * @method \string getLang()
	 * @method \Bitrix\Crm\EO_BusinessType setLang(\string|\Bitrix\Main\DB\SqlExpression $lang)
	 * @method bool hasLang()
	 * @method bool isLangFilled()
	 * @method bool isLangChanged()
	 * @method \string remindActualLang()
	 * @method \string requireLang()
	 * @method \Bitrix\Crm\EO_BusinessType resetLang()
	 * @method \Bitrix\Crm\EO_BusinessType unsetLang()
	 * @method \string fillLang()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_BusinessType set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_BusinessType reset($fieldName)
	 * @method \Bitrix\Crm\EO_BusinessType unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_BusinessType wakeUp($data)
	 */
	class EO_BusinessType {
		/* @var \Bitrix\Crm\BusinessTypeTable */
		static public $dataClass = '\Bitrix\Crm\BusinessTypeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_BusinessType_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getCodeList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLangList()
	 * @method \string[] fillLang()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_BusinessType $object)
	 * @method bool has(\Bitrix\Crm\EO_BusinessType $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_BusinessType getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_BusinessType[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_BusinessType $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_BusinessType_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_BusinessType current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_BusinessType_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\BusinessTypeTable */
		static public $dataClass = '\Bitrix\Crm\BusinessTypeTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_BusinessType_Query query()
	 * @method static EO_BusinessType_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_BusinessType_Result getById($id)
	 * @method static EO_BusinessType_Result getList(array $parameters = array())
	 * @method static EO_BusinessType_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_BusinessType createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_BusinessType_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_BusinessType wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_BusinessType_Collection wakeUpCollection($rows)
	 */
	class BusinessTypeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BusinessType_Result exec()
	 * @method \Bitrix\Crm\EO_BusinessType fetchObject()
	 * @method \Bitrix\Crm\EO_BusinessType_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BusinessType_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_BusinessType fetchObject()
	 * @method \Bitrix\Crm\EO_BusinessType_Collection fetchCollection()
	 */
	class EO_BusinessType_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_BusinessType createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_BusinessType_Collection createCollection()
	 * @method \Bitrix\Crm\EO_BusinessType wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_BusinessType_Collection wakeUpCollection($rows)
	 */
	class EO_BusinessType_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\CallList\Internals\CallListTable:crm/lib/calllist/internals/calllist.php:6802e4f58ad96077a5d3d01969c0fb49 */
namespace Bitrix\Crm\CallList\Internals {
	/**
	 * EO_CallList
	 * @see \Bitrix\Crm\CallList\Internals\CallListTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList resetDateCreate()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getCreatedById()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList setCreatedById(\int|\Bitrix\Main\DB\SqlExpression $createdById)
	 * @method bool hasCreatedById()
	 * @method bool isCreatedByIdFilled()
	 * @method bool isCreatedByIdChanged()
	 * @method \int remindActualCreatedById()
	 * @method \int requireCreatedById()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList resetCreatedById()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList unsetCreatedById()
	 * @method \int fillCreatedById()
	 * @method \string getFiltered()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList setFiltered(\string|\Bitrix\Main\DB\SqlExpression $filtered)
	 * @method bool hasFiltered()
	 * @method bool isFilteredFilled()
	 * @method bool isFilteredChanged()
	 * @method \string remindActualFiltered()
	 * @method \string requireFiltered()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList resetFiltered()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList unsetFiltered()
	 * @method \string fillFiltered()
	 * @method \string getGridId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList setGridId(\string|\Bitrix\Main\DB\SqlExpression $gridId)
	 * @method bool hasGridId()
	 * @method bool isGridIdFilled()
	 * @method bool isGridIdChanged()
	 * @method \string remindActualGridId()
	 * @method \string requireGridId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList resetGridId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList unsetGridId()
	 * @method \string fillGridId()
	 * @method \string getFilterParams()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList setFilterParams(\string|\Bitrix\Main\DB\SqlExpression $filterParams)
	 * @method bool hasFilterParams()
	 * @method bool isFilterParamsFilled()
	 * @method bool isFilterParamsChanged()
	 * @method \string remindActualFilterParams()
	 * @method \string requireFilterParams()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList resetFilterParams()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList unsetFilterParams()
	 * @method \string fillFilterParams()
	 * @method \int getWebformId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList setWebformId(\int|\Bitrix\Main\DB\SqlExpression $webformId)
	 * @method bool hasWebformId()
	 * @method bool isWebformIdFilled()
	 * @method bool isWebformIdChanged()
	 * @method \int remindActualWebformId()
	 * @method \int requireWebformId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList resetWebformId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList unsetWebformId()
	 * @method \int fillWebformId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList resetEntityTypeId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList set($fieldName, $value)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList reset($fieldName)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallList wakeUp($data)
	 */
	class EO_CallList {
		/* @var \Bitrix\Crm\CallList\Internals\CallListTable */
		static public $dataClass = '\Bitrix\Crm\CallList\Internals\CallListTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\CallList\Internals {
	/**
	 * EO_CallList_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getCreatedByIdList()
	 * @method \int[] fillCreatedById()
	 * @method \string[] getFilteredList()
	 * @method \string[] fillFiltered()
	 * @method \string[] getGridIdList()
	 * @method \string[] fillGridId()
	 * @method \string[] getFilterParamsList()
	 * @method \string[] fillFilterParams()
	 * @method \int[] getWebformIdList()
	 * @method \int[] fillWebformId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\CallList\Internals\EO_CallList $object)
	 * @method bool has(\Bitrix\Crm\CallList\Internals\EO_CallList $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList getByPrimary($primary)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList[] getAll()
	 * @method bool remove(\Bitrix\Crm\CallList\Internals\EO_CallList $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallList_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CallList_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\CallList\Internals\CallListTable */
		static public $dataClass = '\Bitrix\Crm\CallList\Internals\CallListTable';
	}
}
namespace Bitrix\Crm\CallList\Internals {
	/**
	 * @method static EO_CallList_Query query()
	 * @method static EO_CallList_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CallList_Result getById($id)
	 * @method static EO_CallList_Result getList(array $parameters = array())
	 * @method static EO_CallList_Entity getEntity()
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallList createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallList_Collection createCollection()
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallList wakeUpObject($row)
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallList_Collection wakeUpCollection($rows)
	 */
	class CallListTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CallList_Result exec()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList fetchObject()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CallList_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList fetchObject()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList_Collection fetchCollection()
	 */
	class EO_CallList_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList_Collection createCollection()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList wakeUpObject($row)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallList_Collection wakeUpCollection($rows)
	 */
	class EO_CallList_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\CallList\Internals\CallListCreatedTable:crm/lib/calllist/internals/calllistcreated.php:99799180154d3fb1e0fa3ca20bbb59f0 */
namespace Bitrix\Crm\CallList\Internals {
	/**
	 * EO_CallListCreated
	 * @see \Bitrix\Crm\CallList\Internals\CallListCreatedTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getListId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated setListId(\int|\Bitrix\Main\DB\SqlExpression $listId)
	 * @method bool hasListId()
	 * @method bool isListIdFilled()
	 * @method bool isListIdChanged()
	 * @method \int remindActualListId()
	 * @method \int requireListId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated resetListId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated unsetListId()
	 * @method \int fillListId()
	 * @method \int getElementId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated setElementId(\int|\Bitrix\Main\DB\SqlExpression $elementId)
	 * @method bool hasElementId()
	 * @method bool isElementIdFilled()
	 * @method bool isElementIdChanged()
	 * @method \int remindActualElementId()
	 * @method \int requireElementId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated resetElementId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated unsetElementId()
	 * @method \int fillElementId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated resetEntityType()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated resetEntityId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated unsetEntityId()
	 * @method \int fillEntityId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated set($fieldName, $value)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated reset($fieldName)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListCreated wakeUp($data)
	 */
	class EO_CallListCreated {
		/* @var \Bitrix\Crm\CallList\Internals\CallListCreatedTable */
		static public $dataClass = '\Bitrix\Crm\CallList\Internals\CallListCreatedTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\CallList\Internals {
	/**
	 * EO_CallListCreated_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getListIdList()
	 * @method \int[] fillListId()
	 * @method \int[] getElementIdList()
	 * @method \int[] fillElementId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\CallList\Internals\EO_CallListCreated $object)
	 * @method bool has(\Bitrix\Crm\CallList\Internals\EO_CallListCreated $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated getByPrimary($primary)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated[] getAll()
	 * @method bool remove(\Bitrix\Crm\CallList\Internals\EO_CallListCreated $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListCreated_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CallListCreated_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\CallList\Internals\CallListCreatedTable */
		static public $dataClass = '\Bitrix\Crm\CallList\Internals\CallListCreatedTable';
	}
}
namespace Bitrix\Crm\CallList\Internals {
	/**
	 * @method static EO_CallListCreated_Query query()
	 * @method static EO_CallListCreated_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CallListCreated_Result getById($id)
	 * @method static EO_CallListCreated_Result getList(array $parameters = array())
	 * @method static EO_CallListCreated_Entity getEntity()
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListCreated createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListCreated_Collection createCollection()
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListCreated wakeUpObject($row)
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListCreated_Collection wakeUpCollection($rows)
	 */
	class CallListCreatedTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CallListCreated_Result exec()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated fetchObject()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CallListCreated_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated fetchObject()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated_Collection fetchCollection()
	 */
	class EO_CallListCreated_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated_Collection createCollection()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated wakeUpObject($row)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListCreated_Collection wakeUpCollection($rows)
	 */
	class EO_CallListCreated_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\CallList\Internals\CallListItemTable:crm/lib/calllist/internals/calllistitem.php:b71f15342bc08f43c7112e847821b2df */
namespace Bitrix\Crm\CallList\Internals {
	/**
	 * EO_CallListItem
	 * @see \Bitrix\Crm\CallList\Internals\CallListItemTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getListId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem setListId(\int|\Bitrix\Main\DB\SqlExpression $listId)
	 * @method bool hasListId()
	 * @method bool isListIdFilled()
	 * @method bool isListIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getElementId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem setElementId(\int|\Bitrix\Main\DB\SqlExpression $elementId)
	 * @method bool hasElementId()
	 * @method bool isElementIdFilled()
	 * @method bool isElementIdChanged()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem resetStatusId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \int getCallId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem setCallId(\int|\Bitrix\Main\DB\SqlExpression $callId)
	 * @method bool hasCallId()
	 * @method bool isCallIdFilled()
	 * @method bool isCallIdChanged()
	 * @method \int remindActualCallId()
	 * @method \int requireCallId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem resetCallId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem unsetCallId()
	 * @method \int fillCallId()
	 * @method \int getWebformResultId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem setWebformResultId(\int|\Bitrix\Main\DB\SqlExpression $webformResultId)
	 * @method bool hasWebformResultId()
	 * @method bool isWebformResultIdFilled()
	 * @method bool isWebformResultIdChanged()
	 * @method \int remindActualWebformResultId()
	 * @method \int requireWebformResultId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem resetWebformResultId()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem unsetWebformResultId()
	 * @method \int fillWebformResultId()
	 * @method \int getRank()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem setRank(\int|\Bitrix\Main\DB\SqlExpression $rank)
	 * @method bool hasRank()
	 * @method bool isRankFilled()
	 * @method bool isRankChanged()
	 * @method \int remindActualRank()
	 * @method \int requireRank()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem resetRank()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem unsetRank()
	 * @method \int fillRank()
	 * @method \Bitrix\Crm\EO_Activity getWebformActivity()
	 * @method \Bitrix\Crm\EO_Activity remindActualWebformActivity()
	 * @method \Bitrix\Crm\EO_Activity requireWebformActivity()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem setWebformActivity(\Bitrix\Crm\EO_Activity $object)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem resetWebformActivity()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem unsetWebformActivity()
	 * @method bool hasWebformActivity()
	 * @method bool isWebformActivityFilled()
	 * @method bool isWebformActivityChanged()
	 * @method \Bitrix\Crm\EO_Activity fillWebformActivity()
	 * @method \Bitrix\Voximplant\EO_Statistic getCall()
	 * @method \Bitrix\Voximplant\EO_Statistic remindActualCall()
	 * @method \Bitrix\Voximplant\EO_Statistic requireCall()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem setCall(\Bitrix\Voximplant\EO_Statistic $object)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem resetCall()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem unsetCall()
	 * @method bool hasCall()
	 * @method bool isCallFilled()
	 * @method bool isCallChanged()
	 * @method \Bitrix\Voximplant\EO_Statistic fillCall()
	 * @method \string getCnt()
	 * @method \string remindActualCnt()
	 * @method \string requireCnt()
	 * @method bool hasCnt()
	 * @method bool isCntFilled()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem unsetCnt()
	 * @method \string fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem set($fieldName, $value)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem reset($fieldName)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListItem wakeUp($data)
	 */
	class EO_CallListItem {
		/* @var \Bitrix\Crm\CallList\Internals\CallListItemTable */
		static public $dataClass = '\Bitrix\Crm\CallList\Internals\CallListItemTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\CallList\Internals {
	/**
	 * EO_CallListItem_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getListIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getElementIdList()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \int[] getCallIdList()
	 * @method \int[] fillCallId()
	 * @method \int[] getWebformResultIdList()
	 * @method \int[] fillWebformResultId()
	 * @method \int[] getRankList()
	 * @method \int[] fillRank()
	 * @method \Bitrix\Crm\EO_Activity[] getWebformActivityList()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem_Collection getWebformActivityCollection()
	 * @method \Bitrix\Crm\EO_Activity_Collection fillWebformActivity()
	 * @method \Bitrix\Voximplant\EO_Statistic[] getCallList()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem_Collection getCallCollection()
	 * @method \Bitrix\Voximplant\EO_Statistic_Collection fillCall()
	 * @method \string[] getCntList()
	 * @method \string[] fillCnt()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\CallList\Internals\EO_CallListItem $object)
	 * @method bool has(\Bitrix\Crm\CallList\Internals\EO_CallListItem $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem getByPrimary($primary)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem[] getAll()
	 * @method bool remove(\Bitrix\Crm\CallList\Internals\EO_CallListItem $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListItem_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CallListItem_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\CallList\Internals\CallListItemTable */
		static public $dataClass = '\Bitrix\Crm\CallList\Internals\CallListItemTable';
	}
}
namespace Bitrix\Crm\CallList\Internals {
	/**
	 * @method static EO_CallListItem_Query query()
	 * @method static EO_CallListItem_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CallListItem_Result getById($id)
	 * @method static EO_CallListItem_Result getList(array $parameters = array())
	 * @method static EO_CallListItem_Entity getEntity()
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListItem createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListItem_Collection createCollection()
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListItem wakeUpObject($row)
	 * @method static \Bitrix\Crm\CallList\Internals\EO_CallListItem_Collection wakeUpCollection($rows)
	 */
	class CallListItemTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CallListItem_Result exec()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem fetchObject()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CallListItem_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem fetchObject()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem_Collection fetchCollection()
	 */
	class EO_CallListItem_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem_Collection createCollection()
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem wakeUpObject($row)
	 * @method \Bitrix\Crm\CallList\Internals\EO_CallListItem_Collection wakeUpCollection($rows)
	 */
	class EO_CallListItem_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Category\Entity\DealCategoryTable:crm/lib/category/entity/dealcategory.php:5806c3f0d884c5e6cbb0c5828803f36f */
namespace Bitrix\Crm\Category\Entity {
	/**
	 * EO_DealCategory
	 * @see \Bitrix\Crm\Category\Entity\DealCategoryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory resetCreatedDate()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory resetName()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory unsetName()
	 * @method \string fillName()
	 * @method \boolean getIsLocked()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory setIsLocked(\boolean|\Bitrix\Main\DB\SqlExpression $isLocked)
	 * @method bool hasIsLocked()
	 * @method bool isIsLockedFilled()
	 * @method bool isIsLockedChanged()
	 * @method \boolean remindActualIsLocked()
	 * @method \boolean requireIsLocked()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory resetIsLocked()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory unsetIsLocked()
	 * @method \boolean fillIsLocked()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory resetSort()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory unsetSort()
	 * @method \int fillSort()
	 * @method \string getOriginId()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory setOriginId(\string|\Bitrix\Main\DB\SqlExpression $originId)
	 * @method bool hasOriginId()
	 * @method bool isOriginIdFilled()
	 * @method bool isOriginIdChanged()
	 * @method \string remindActualOriginId()
	 * @method \string requireOriginId()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory resetOriginId()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory unsetOriginId()
	 * @method \string fillOriginId()
	 * @method \string getOriginatorId()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory setOriginatorId(\string|\Bitrix\Main\DB\SqlExpression $originatorId)
	 * @method bool hasOriginatorId()
	 * @method bool isOriginatorIdFilled()
	 * @method bool isOriginatorIdChanged()
	 * @method \string remindActualOriginatorId()
	 * @method \string requireOriginatorId()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory resetOriginatorId()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory unsetOriginatorId()
	 * @method \string fillOriginatorId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory set($fieldName, $value)
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory reset($fieldName)
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Category\Entity\EO_DealCategory wakeUp($data)
	 */
	class EO_DealCategory {
		/* @var \Bitrix\Crm\Category\Entity\DealCategoryTable */
		static public $dataClass = '\Bitrix\Crm\Category\Entity\DealCategoryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Category\Entity {
	/**
	 * EO_DealCategory_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \boolean[] getIsLockedList()
	 * @method \boolean[] fillIsLocked()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getOriginIdList()
	 * @method \string[] fillOriginId()
	 * @method \string[] getOriginatorIdList()
	 * @method \string[] fillOriginatorId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Category\Entity\EO_DealCategory $object)
	 * @method bool has(\Bitrix\Crm\Category\Entity\EO_DealCategory $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory getByPrimary($primary)
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory[] getAll()
	 * @method bool remove(\Bitrix\Crm\Category\Entity\EO_DealCategory $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Category\Entity\EO_DealCategory_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DealCategory_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Category\Entity\DealCategoryTable */
		static public $dataClass = '\Bitrix\Crm\Category\Entity\DealCategoryTable';
	}
}
namespace Bitrix\Crm\Category\Entity {
	/**
	 * @method static EO_DealCategory_Query query()
	 * @method static EO_DealCategory_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DealCategory_Result getById($id)
	 * @method static EO_DealCategory_Result getList(array $parameters = array())
	 * @method static EO_DealCategory_Entity getEntity()
	 * @method static \Bitrix\Crm\Category\Entity\EO_DealCategory createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Category\Entity\EO_DealCategory_Collection createCollection()
	 * @method static \Bitrix\Crm\Category\Entity\EO_DealCategory wakeUpObject($row)
	 * @method static \Bitrix\Crm\Category\Entity\EO_DealCategory_Collection wakeUpCollection($rows)
	 */
	class DealCategoryTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DealCategory_Result exec()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory fetchObject()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DealCategory_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory fetchObject()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory_Collection fetchCollection()
	 */
	class EO_DealCategory_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory_Collection createCollection()
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory wakeUpObject($row)
	 * @method \Bitrix\Crm\Category\Entity\EO_DealCategory_Collection wakeUpCollection($rows)
	 */
	class EO_DealCategory_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Cleaning\Entity\CleaningTable:crm/lib/cleaning/entity/cleaning.php:a78e6b659a49ce77b488af8c98dcee37 */
namespace Bitrix\Crm\Cleaning\Entity {
	/**
	 * EO_Cleaning
	 * @see \Bitrix\Crm\Cleaning\Entity\CleaningTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning resetCreatedTime()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime getLastUpdatedTime()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning setLastUpdatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastUpdatedTime)
	 * @method bool hasLastUpdatedTime()
	 * @method bool isLastUpdatedTimeFilled()
	 * @method bool isLastUpdatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastUpdatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireLastUpdatedTime()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning resetLastUpdatedTime()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning unsetLastUpdatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillLastUpdatedTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning set($fieldName, $value)
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning reset($fieldName)
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Cleaning\Entity\EO_Cleaning wakeUp($data)
	 */
	class EO_Cleaning {
		/* @var \Bitrix\Crm\Cleaning\Entity\CleaningTable */
		static public $dataClass = '\Bitrix\Crm\Cleaning\Entity\CleaningTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Cleaning\Entity {
	/**
	 * EO_Cleaning_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getEntityIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime[] getLastUpdatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastUpdatedTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Cleaning\Entity\EO_Cleaning $object)
	 * @method bool has(\Bitrix\Crm\Cleaning\Entity\EO_Cleaning $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning getByPrimary($primary)
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning[] getAll()
	 * @method bool remove(\Bitrix\Crm\Cleaning\Entity\EO_Cleaning $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Cleaning\Entity\EO_Cleaning_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Cleaning_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Cleaning\Entity\CleaningTable */
		static public $dataClass = '\Bitrix\Crm\Cleaning\Entity\CleaningTable';
	}
}
namespace Bitrix\Crm\Cleaning\Entity {
	/**
	 * @method static EO_Cleaning_Query query()
	 * @method static EO_Cleaning_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Cleaning_Result getById($id)
	 * @method static EO_Cleaning_Result getList(array $parameters = array())
	 * @method static EO_Cleaning_Entity getEntity()
	 * @method static \Bitrix\Crm\Cleaning\Entity\EO_Cleaning createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Cleaning\Entity\EO_Cleaning_Collection createCollection()
	 * @method static \Bitrix\Crm\Cleaning\Entity\EO_Cleaning wakeUpObject($row)
	 * @method static \Bitrix\Crm\Cleaning\Entity\EO_Cleaning_Collection wakeUpCollection($rows)
	 */
	class CleaningTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Cleaning_Result exec()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning fetchObject()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Cleaning_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning fetchObject()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning_Collection fetchCollection()
	 */
	class EO_Cleaning_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning_Collection createCollection()
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning wakeUpObject($row)
	 * @method \Bitrix\Crm\Cleaning\Entity\EO_Cleaning_Collection wakeUpCollection($rows)
	 */
	class EO_Cleaning_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\CompanyTable:crm/lib/company.php:31675e6cebe765b8938a7e76bafec057 */
namespace Bitrix\Crm {
	/**
	 * EO_Company
	 * @see \Bitrix\Crm\CompanyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Company setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getTitle()
	 * @method \Bitrix\Crm\EO_Company setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Crm\EO_Company resetTitle()
	 * @method \Bitrix\Crm\EO_Company unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getLogo()
	 * @method \Bitrix\Crm\EO_Company setLogo(\string|\Bitrix\Main\DB\SqlExpression $logo)
	 * @method bool hasLogo()
	 * @method bool isLogoFilled()
	 * @method bool isLogoChanged()
	 * @method \string remindActualLogo()
	 * @method \string requireLogo()
	 * @method \Bitrix\Crm\EO_Company resetLogo()
	 * @method \Bitrix\Crm\EO_Company unsetLogo()
	 * @method \string fillLogo()
	 * @method \string getCompanyType()
	 * @method \Bitrix\Crm\EO_Company setCompanyType(\string|\Bitrix\Main\DB\SqlExpression $companyType)
	 * @method bool hasCompanyType()
	 * @method bool isCompanyTypeFilled()
	 * @method bool isCompanyTypeChanged()
	 * @method \string remindActualCompanyType()
	 * @method \string requireCompanyType()
	 * @method \Bitrix\Crm\EO_Company resetCompanyType()
	 * @method \Bitrix\Crm\EO_Company unsetCompanyType()
	 * @method \string fillCompanyType()
	 * @method \Bitrix\Crm\EO_Status getCompanyTypeBy()
	 * @method \Bitrix\Crm\EO_Status remindActualCompanyTypeBy()
	 * @method \Bitrix\Crm\EO_Status requireCompanyTypeBy()
	 * @method \Bitrix\Crm\EO_Company setCompanyTypeBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Company resetCompanyTypeBy()
	 * @method \Bitrix\Crm\EO_Company unsetCompanyTypeBy()
	 * @method bool hasCompanyTypeBy()
	 * @method bool isCompanyTypeByFilled()
	 * @method bool isCompanyTypeByChanged()
	 * @method \Bitrix\Crm\EO_Status fillCompanyTypeBy()
	 * @method \string getIndustry()
	 * @method \Bitrix\Crm\EO_Company setIndustry(\string|\Bitrix\Main\DB\SqlExpression $industry)
	 * @method bool hasIndustry()
	 * @method bool isIndustryFilled()
	 * @method bool isIndustryChanged()
	 * @method \string remindActualIndustry()
	 * @method \string requireIndustry()
	 * @method \Bitrix\Crm\EO_Company resetIndustry()
	 * @method \Bitrix\Crm\EO_Company unsetIndustry()
	 * @method \string fillIndustry()
	 * @method \Bitrix\Crm\EO_Status getIndustryBy()
	 * @method \Bitrix\Crm\EO_Status remindActualIndustryBy()
	 * @method \Bitrix\Crm\EO_Status requireIndustryBy()
	 * @method \Bitrix\Crm\EO_Company setIndustryBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Company resetIndustryBy()
	 * @method \Bitrix\Crm\EO_Company unsetIndustryBy()
	 * @method bool hasIndustryBy()
	 * @method bool isIndustryByFilled()
	 * @method bool isIndustryByChanged()
	 * @method \Bitrix\Crm\EO_Status fillIndustryBy()
	 * @method \string getEmployees()
	 * @method \Bitrix\Crm\EO_Company setEmployees(\string|\Bitrix\Main\DB\SqlExpression $employees)
	 * @method bool hasEmployees()
	 * @method bool isEmployeesFilled()
	 * @method bool isEmployeesChanged()
	 * @method \string remindActualEmployees()
	 * @method \string requireEmployees()
	 * @method \Bitrix\Crm\EO_Company resetEmployees()
	 * @method \Bitrix\Crm\EO_Company unsetEmployees()
	 * @method \string fillEmployees()
	 * @method \Bitrix\Crm\EO_Status getEmployeesBy()
	 * @method \Bitrix\Crm\EO_Status remindActualEmployeesBy()
	 * @method \Bitrix\Crm\EO_Status requireEmployeesBy()
	 * @method \Bitrix\Crm\EO_Company setEmployeesBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Company resetEmployeesBy()
	 * @method \Bitrix\Crm\EO_Company unsetEmployeesBy()
	 * @method bool hasEmployeesBy()
	 * @method bool isEmployeesByFilled()
	 * @method bool isEmployeesByChanged()
	 * @method \Bitrix\Crm\EO_Status fillEmployeesBy()
	 * @method \string getRevenue()
	 * @method \Bitrix\Crm\EO_Company setRevenue(\string|\Bitrix\Main\DB\SqlExpression $revenue)
	 * @method bool hasRevenue()
	 * @method bool isRevenueFilled()
	 * @method bool isRevenueChanged()
	 * @method \string remindActualRevenue()
	 * @method \string requireRevenue()
	 * @method \Bitrix\Crm\EO_Company resetRevenue()
	 * @method \Bitrix\Crm\EO_Company unsetRevenue()
	 * @method \string fillRevenue()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\EO_Company setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\EO_Company resetCurrencyId()
	 * @method \Bitrix\Crm\EO_Company unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \string getComments()
	 * @method \Bitrix\Crm\EO_Company setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Crm\EO_Company resetComments()
	 * @method \Bitrix\Crm\EO_Company unsetComments()
	 * @method \string fillComments()
	 * @method \string getAddress()
	 * @method \Bitrix\Crm\EO_Company setAddress(\string|\Bitrix\Main\DB\SqlExpression $address)
	 * @method bool hasAddress()
	 * @method bool isAddressFilled()
	 * @method bool isAddressChanged()
	 * @method \string remindActualAddress()
	 * @method \string requireAddress()
	 * @method \Bitrix\Crm\EO_Company resetAddress()
	 * @method \Bitrix\Crm\EO_Company unsetAddress()
	 * @method \string fillAddress()
	 * @method \string getAddressLegal()
	 * @method \Bitrix\Crm\EO_Company setAddressLegal(\string|\Bitrix\Main\DB\SqlExpression $addressLegal)
	 * @method bool hasAddressLegal()
	 * @method bool isAddressLegalFilled()
	 * @method bool isAddressLegalChanged()
	 * @method \string remindActualAddressLegal()
	 * @method \string requireAddressLegal()
	 * @method \Bitrix\Crm\EO_Company resetAddressLegal()
	 * @method \Bitrix\Crm\EO_Company unsetAddressLegal()
	 * @method \string fillAddressLegal()
	 * @method \string getBankingDetails()
	 * @method \Bitrix\Crm\EO_Company setBankingDetails(\string|\Bitrix\Main\DB\SqlExpression $bankingDetails)
	 * @method bool hasBankingDetails()
	 * @method bool isBankingDetailsFilled()
	 * @method bool isBankingDetailsChanged()
	 * @method \string remindActualBankingDetails()
	 * @method \string requireBankingDetails()
	 * @method \Bitrix\Crm\EO_Company resetBankingDetails()
	 * @method \Bitrix\Crm\EO_Company unsetBankingDetails()
	 * @method \string fillBankingDetails()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\EO_Company setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\EO_Company resetDateCreate()
	 * @method \Bitrix\Crm\EO_Company unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Crm\EO_Company setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Crm\EO_Company resetDateModify()
	 * @method \Bitrix\Crm\EO_Company unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \int getAssignedById()
	 * @method \Bitrix\Crm\EO_Company setAssignedById(\int|\Bitrix\Main\DB\SqlExpression $assignedById)
	 * @method bool hasAssignedById()
	 * @method bool isAssignedByIdFilled()
	 * @method bool isAssignedByIdChanged()
	 * @method \int remindActualAssignedById()
	 * @method \int requireAssignedById()
	 * @method \Bitrix\Crm\EO_Company resetAssignedById()
	 * @method \Bitrix\Crm\EO_Company unsetAssignedById()
	 * @method \int fillAssignedById()
	 * @method \Bitrix\Main\EO_User getAssignedBy()
	 * @method \Bitrix\Main\EO_User remindActualAssignedBy()
	 * @method \Bitrix\Main\EO_User requireAssignedBy()
	 * @method \Bitrix\Crm\EO_Company setAssignedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Company resetAssignedBy()
	 * @method \Bitrix\Crm\EO_Company unsetAssignedBy()
	 * @method bool hasAssignedBy()
	 * @method bool isAssignedByFilled()
	 * @method bool isAssignedByChanged()
	 * @method \Bitrix\Main\EO_User fillAssignedBy()
	 * @method \int getCreatedById()
	 * @method \Bitrix\Crm\EO_Company setCreatedById(\int|\Bitrix\Main\DB\SqlExpression $createdById)
	 * @method bool hasCreatedById()
	 * @method bool isCreatedByIdFilled()
	 * @method bool isCreatedByIdChanged()
	 * @method \int remindActualCreatedById()
	 * @method \int requireCreatedById()
	 * @method \Bitrix\Crm\EO_Company resetCreatedById()
	 * @method \Bitrix\Crm\EO_Company unsetCreatedById()
	 * @method \int fillCreatedById()
	 * @method \Bitrix\Main\EO_User getCreatedBy()
	 * @method \Bitrix\Main\EO_User remindActualCreatedBy()
	 * @method \Bitrix\Main\EO_User requireCreatedBy()
	 * @method \Bitrix\Crm\EO_Company setCreatedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Company resetCreatedBy()
	 * @method \Bitrix\Crm\EO_Company unsetCreatedBy()
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedBy()
	 * @method \int getModifyById()
	 * @method \Bitrix\Crm\EO_Company setModifyById(\int|\Bitrix\Main\DB\SqlExpression $modifyById)
	 * @method bool hasModifyById()
	 * @method bool isModifyByIdFilled()
	 * @method bool isModifyByIdChanged()
	 * @method \int remindActualModifyById()
	 * @method \int requireModifyById()
	 * @method \Bitrix\Crm\EO_Company resetModifyById()
	 * @method \Bitrix\Crm\EO_Company unsetModifyById()
	 * @method \int fillModifyById()
	 * @method \Bitrix\Main\EO_User getModifyBy()
	 * @method \Bitrix\Main\EO_User remindActualModifyBy()
	 * @method \Bitrix\Main\EO_User requireModifyBy()
	 * @method \Bitrix\Crm\EO_Company setModifyBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Company resetModifyBy()
	 * @method \Bitrix\Crm\EO_Company unsetModifyBy()
	 * @method bool hasModifyBy()
	 * @method bool isModifyByFilled()
	 * @method bool isModifyByChanged()
	 * @method \Bitrix\Main\EO_User fillModifyBy()
	 * @method \Bitrix\Crm\EO_EventRelations getEventRelation()
	 * @method \Bitrix\Crm\EO_EventRelations remindActualEventRelation()
	 * @method \Bitrix\Crm\EO_EventRelations requireEventRelation()
	 * @method \Bitrix\Crm\EO_Company setEventRelation(\Bitrix\Crm\EO_EventRelations $object)
	 * @method \Bitrix\Crm\EO_Company resetEventRelation()
	 * @method \Bitrix\Crm\EO_Company unsetEventRelation()
	 * @method bool hasEventRelation()
	 * @method bool isEventRelationFilled()
	 * @method bool isEventRelationChanged()
	 * @method \Bitrix\Crm\EO_EventRelations fillEventRelation()
	 * @method \int getLeadId()
	 * @method \Bitrix\Crm\EO_Company setLeadId(\int|\Bitrix\Main\DB\SqlExpression $leadId)
	 * @method bool hasLeadId()
	 * @method bool isLeadIdFilled()
	 * @method bool isLeadIdChanged()
	 * @method \int remindActualLeadId()
	 * @method \int requireLeadId()
	 * @method \Bitrix\Crm\EO_Company resetLeadId()
	 * @method \Bitrix\Crm\EO_Company unsetLeadId()
	 * @method \int fillLeadId()
	 * @method \string getIsMyCompany()
	 * @method \Bitrix\Crm\EO_Company setIsMyCompany(\string|\Bitrix\Main\DB\SqlExpression $isMyCompany)
	 * @method bool hasIsMyCompany()
	 * @method bool isIsMyCompanyFilled()
	 * @method bool isIsMyCompanyChanged()
	 * @method \string remindActualIsMyCompany()
	 * @method \string requireIsMyCompany()
	 * @method \Bitrix\Crm\EO_Company resetIsMyCompany()
	 * @method \Bitrix\Crm\EO_Company unsetIsMyCompany()
	 * @method \string fillIsMyCompany()
	 * @method \boolean getHasEmail()
	 * @method \Bitrix\Crm\EO_Company setHasEmail(\boolean|\Bitrix\Main\DB\SqlExpression $hasEmail)
	 * @method bool hasHasEmail()
	 * @method bool isHasEmailFilled()
	 * @method bool isHasEmailChanged()
	 * @method \boolean remindActualHasEmail()
	 * @method \boolean requireHasEmail()
	 * @method \Bitrix\Crm\EO_Company resetHasEmail()
	 * @method \Bitrix\Crm\EO_Company unsetHasEmail()
	 * @method \boolean fillHasEmail()
	 * @method \boolean getHasPhone()
	 * @method \Bitrix\Crm\EO_Company setHasPhone(\boolean|\Bitrix\Main\DB\SqlExpression $hasPhone)
	 * @method bool hasHasPhone()
	 * @method bool isHasPhoneFilled()
	 * @method bool isHasPhoneChanged()
	 * @method \boolean remindActualHasPhone()
	 * @method \boolean requireHasPhone()
	 * @method \Bitrix\Crm\EO_Company resetHasPhone()
	 * @method \Bitrix\Crm\EO_Company unsetHasPhone()
	 * @method \boolean fillHasPhone()
	 * @method \boolean getHasImol()
	 * @method \Bitrix\Crm\EO_Company setHasImol(\boolean|\Bitrix\Main\DB\SqlExpression $hasImol)
	 * @method bool hasHasImol()
	 * @method bool isHasImolFilled()
	 * @method bool isHasImolChanged()
	 * @method \boolean remindActualHasImol()
	 * @method \boolean requireHasImol()
	 * @method \Bitrix\Crm\EO_Company resetHasImol()
	 * @method \Bitrix\Crm\EO_Company unsetHasImol()
	 * @method \boolean fillHasImol()
	 * @method \string getEmailHome()
	 * @method \string remindActualEmailHome()
	 * @method \string requireEmailHome()
	 * @method bool hasEmailHome()
	 * @method bool isEmailHomeFilled()
	 * @method \Bitrix\Crm\EO_Company unsetEmailHome()
	 * @method \string fillEmailHome()
	 * @method \string getEmailWork()
	 * @method \string remindActualEmailWork()
	 * @method \string requireEmailWork()
	 * @method bool hasEmailWork()
	 * @method bool isEmailWorkFilled()
	 * @method \Bitrix\Crm\EO_Company unsetEmailWork()
	 * @method \string fillEmailWork()
	 * @method \string getEmailMailing()
	 * @method \string remindActualEmailMailing()
	 * @method \string requireEmailMailing()
	 * @method bool hasEmailMailing()
	 * @method bool isEmailMailingFilled()
	 * @method \Bitrix\Crm\EO_Company unsetEmailMailing()
	 * @method \string fillEmailMailing()
	 * @method \string getPhoneMobile()
	 * @method \string remindActualPhoneMobile()
	 * @method \string requirePhoneMobile()
	 * @method bool hasPhoneMobile()
	 * @method bool isPhoneMobileFilled()
	 * @method \Bitrix\Crm\EO_Company unsetPhoneMobile()
	 * @method \string fillPhoneMobile()
	 * @method \string getPhoneWork()
	 * @method \string remindActualPhoneWork()
	 * @method \string requirePhoneWork()
	 * @method bool hasPhoneWork()
	 * @method bool isPhoneWorkFilled()
	 * @method \Bitrix\Crm\EO_Company unsetPhoneWork()
	 * @method \string fillPhoneWork()
	 * @method \string getPhoneMailing()
	 * @method \string remindActualPhoneMailing()
	 * @method \string requirePhoneMailing()
	 * @method bool hasPhoneMailing()
	 * @method bool isPhoneMailingFilled()
	 * @method \Bitrix\Crm\EO_Company unsetPhoneMailing()
	 * @method \string fillPhoneMailing()
	 * @method \string getImol()
	 * @method \string remindActualImol()
	 * @method \string requireImol()
	 * @method bool hasImol()
	 * @method bool isImolFilled()
	 * @method \Bitrix\Crm\EO_Company unsetImol()
	 * @method \string fillImol()
	 * @method \string getEmail()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method \Bitrix\Crm\EO_Company unsetEmail()
	 * @method \string fillEmail()
	 * @method \string getPhone()
	 * @method \string remindActualPhone()
	 * @method \string requirePhone()
	 * @method bool hasPhone()
	 * @method bool isPhoneFilled()
	 * @method \Bitrix\Crm\EO_Company unsetPhone()
	 * @method \string fillPhone()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Crm\EO_Company setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Crm\EO_Company resetSearchContent()
	 * @method \Bitrix\Crm\EO_Company unsetSearchContent()
	 * @method \string fillSearchContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Company set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Company reset($fieldName)
	 * @method \Bitrix\Crm\EO_Company unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Company wakeUp($data)
	 */
	class EO_Company {
		/* @var \Bitrix\Crm\CompanyTable */
		static public $dataClass = '\Bitrix\Crm\CompanyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Company_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getLogoList()
	 * @method \string[] fillLogo()
	 * @method \string[] getCompanyTypeList()
	 * @method \string[] fillCompanyType()
	 * @method \Bitrix\Crm\EO_Status[] getCompanyTypeByList()
	 * @method \Bitrix\Crm\EO_Company_Collection getCompanyTypeByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillCompanyTypeBy()
	 * @method \string[] getIndustryList()
	 * @method \string[] fillIndustry()
	 * @method \Bitrix\Crm\EO_Status[] getIndustryByList()
	 * @method \Bitrix\Crm\EO_Company_Collection getIndustryByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillIndustryBy()
	 * @method \string[] getEmployeesList()
	 * @method \string[] fillEmployees()
	 * @method \Bitrix\Crm\EO_Status[] getEmployeesByList()
	 * @method \Bitrix\Crm\EO_Company_Collection getEmployeesByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillEmployeesBy()
	 * @method \string[] getRevenueList()
	 * @method \string[] fillRevenue()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \string[] getAddressList()
	 * @method \string[] fillAddress()
	 * @method \string[] getAddressLegalList()
	 * @method \string[] fillAddressLegal()
	 * @method \string[] getBankingDetailsList()
	 * @method \string[] fillBankingDetails()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \int[] getAssignedByIdList()
	 * @method \int[] fillAssignedById()
	 * @method \Bitrix\Main\EO_User[] getAssignedByList()
	 * @method \Bitrix\Crm\EO_Company_Collection getAssignedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillAssignedBy()
	 * @method \int[] getCreatedByIdList()
	 * @method \int[] fillCreatedById()
	 * @method \Bitrix\Main\EO_User[] getCreatedByList()
	 * @method \Bitrix\Crm\EO_Company_Collection getCreatedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedBy()
	 * @method \int[] getModifyByIdList()
	 * @method \int[] fillModifyById()
	 * @method \Bitrix\Main\EO_User[] getModifyByList()
	 * @method \Bitrix\Crm\EO_Company_Collection getModifyByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifyBy()
	 * @method \Bitrix\Crm\EO_EventRelations[] getEventRelationList()
	 * @method \Bitrix\Crm\EO_Company_Collection getEventRelationCollection()
	 * @method \Bitrix\Crm\EO_EventRelations_Collection fillEventRelation()
	 * @method \int[] getLeadIdList()
	 * @method \int[] fillLeadId()
	 * @method \string[] getIsMyCompanyList()
	 * @method \string[] fillIsMyCompany()
	 * @method \boolean[] getHasEmailList()
	 * @method \boolean[] fillHasEmail()
	 * @method \boolean[] getHasPhoneList()
	 * @method \boolean[] fillHasPhone()
	 * @method \boolean[] getHasImolList()
	 * @method \boolean[] fillHasImol()
	 * @method \string[] getEmailHomeList()
	 * @method \string[] fillEmailHome()
	 * @method \string[] getEmailWorkList()
	 * @method \string[] fillEmailWork()
	 * @method \string[] getEmailMailingList()
	 * @method \string[] fillEmailMailing()
	 * @method \string[] getPhoneMobileList()
	 * @method \string[] fillPhoneMobile()
	 * @method \string[] getPhoneWorkList()
	 * @method \string[] fillPhoneWork()
	 * @method \string[] getPhoneMailingList()
	 * @method \string[] fillPhoneMailing()
	 * @method \string[] getImolList()
	 * @method \string[] fillImol()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \string[] getPhoneList()
	 * @method \string[] fillPhone()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Company $object)
	 * @method bool has(\Bitrix\Crm\EO_Company $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Company getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Company[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Company $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Company_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Company current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Company_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\CompanyTable */
		static public $dataClass = '\Bitrix\Crm\CompanyTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Company_Query query()
	 * @method static EO_Company_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Company_Result getById($id)
	 * @method static EO_Company_Result getList(array $parameters = array())
	 * @method static EO_Company_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Company createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Company_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Company wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Company_Collection wakeUpCollection($rows)
	 */
	class CompanyTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Company_Result exec()
	 * @method \Bitrix\Crm\EO_Company fetchObject()
	 * @method \Bitrix\Crm\EO_Company_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Company_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Company fetchObject()
	 * @method \Bitrix\Crm\EO_Company_Collection fetchCollection()
	 */
	class EO_Company_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Company createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Company_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Company wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Company_Collection wakeUpCollection($rows)
	 */
	class EO_Company_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Config\Entity\EntityConfigTable:crm/lib/config/entity/entityconfig.php:ad109d99e2707add461466cf2a3f2e71 */
namespace Bitrix\Crm\Config\Entity {
	/**
	 * EO_EntityConfig
	 * @see \Bitrix\Crm\Config\Entity\EntityConfigTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \string getSettings()
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig resetSettings()
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig unsetSettings()
	 * @method \string fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig set($fieldName, $value)
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig reset($fieldName)
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Config\Entity\EO_EntityConfig wakeUp($data)
	 */
	class EO_EntityConfig {
		/* @var \Bitrix\Crm\Config\Entity\EntityConfigTable */
		static public $dataClass = '\Bitrix\Crm\Config\Entity\EntityConfigTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Config\Entity {
	/**
	 * EO_EntityConfig_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] getUserIdList()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Config\Entity\EO_EntityConfig $object)
	 * @method bool has(\Bitrix\Crm\Config\Entity\EO_EntityConfig $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig getByPrimary($primary)
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig[] getAll()
	 * @method bool remove(\Bitrix\Crm\Config\Entity\EO_EntityConfig $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Config\Entity\EO_EntityConfig_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EntityConfig_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Config\Entity\EntityConfigTable */
		static public $dataClass = '\Bitrix\Crm\Config\Entity\EntityConfigTable';
	}
}
namespace Bitrix\Crm\Config\Entity {
	/**
	 * @method static EO_EntityConfig_Query query()
	 * @method static EO_EntityConfig_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EntityConfig_Result getById($id)
	 * @method static EO_EntityConfig_Result getList(array $parameters = array())
	 * @method static EO_EntityConfig_Entity getEntity()
	 * @method static \Bitrix\Crm\Config\Entity\EO_EntityConfig createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Config\Entity\EO_EntityConfig_Collection createCollection()
	 * @method static \Bitrix\Crm\Config\Entity\EO_EntityConfig wakeUpObject($row)
	 * @method static \Bitrix\Crm\Config\Entity\EO_EntityConfig_Collection wakeUpCollection($rows)
	 */
	class EntityConfigTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_EntityConfig_Result exec()
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig fetchObject()
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_EntityConfig_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig fetchObject()
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig_Collection fetchCollection()
	 */
	class EO_EntityConfig_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig_Collection createCollection()
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig wakeUpObject($row)
	 * @method \Bitrix\Crm\Config\Entity\EO_EntityConfig_Collection wakeUpCollection($rows)
	 */
	class EO_EntityConfig_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\ContactTable:crm/lib/contacttable.php:2c150f8600a83806b5e93fb59abd7fd1 */
namespace Bitrix\Crm {
	/**
	 * EO_Contact
	 * @see \Bitrix\Crm\ContactTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Contact setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_Contact setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_Contact resetName()
	 * @method \Bitrix\Crm\EO_Contact unsetName()
	 * @method \string fillName()
	 * @method \string getLastName()
	 * @method \Bitrix\Crm\EO_Contact setLastName(\string|\Bitrix\Main\DB\SqlExpression $lastName)
	 * @method bool hasLastName()
	 * @method bool isLastNameFilled()
	 * @method bool isLastNameChanged()
	 * @method \string remindActualLastName()
	 * @method \string requireLastName()
	 * @method \Bitrix\Crm\EO_Contact resetLastName()
	 * @method \Bitrix\Crm\EO_Contact unsetLastName()
	 * @method \string fillLastName()
	 * @method \string getSecondName()
	 * @method \Bitrix\Crm\EO_Contact setSecondName(\string|\Bitrix\Main\DB\SqlExpression $secondName)
	 * @method bool hasSecondName()
	 * @method bool isSecondNameFilled()
	 * @method bool isSecondNameChanged()
	 * @method \string remindActualSecondName()
	 * @method \string requireSecondName()
	 * @method \Bitrix\Crm\EO_Contact resetSecondName()
	 * @method \Bitrix\Crm\EO_Contact unsetSecondName()
	 * @method \string fillSecondName()
	 * @method \string getShortName()
	 * @method \string remindActualShortName()
	 * @method \string requireShortName()
	 * @method bool hasShortName()
	 * @method bool isShortNameFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetShortName()
	 * @method \string fillShortName()
	 * @method \string getLogin()
	 * @method \string remindActualLogin()
	 * @method \string requireLogin()
	 * @method bool hasLogin()
	 * @method bool isLoginFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetLogin()
	 * @method \string fillLogin()
	 * @method \string getPost()
	 * @method \Bitrix\Crm\EO_Contact setPost(\string|\Bitrix\Main\DB\SqlExpression $post)
	 * @method bool hasPost()
	 * @method bool isPostFilled()
	 * @method bool isPostChanged()
	 * @method \string remindActualPost()
	 * @method \string requirePost()
	 * @method \Bitrix\Crm\EO_Contact resetPost()
	 * @method \Bitrix\Crm\EO_Contact unsetPost()
	 * @method \string fillPost()
	 * @method \string getAddress()
	 * @method \Bitrix\Crm\EO_Contact setAddress(\string|\Bitrix\Main\DB\SqlExpression $address)
	 * @method bool hasAddress()
	 * @method bool isAddressFilled()
	 * @method bool isAddressChanged()
	 * @method \string remindActualAddress()
	 * @method \string requireAddress()
	 * @method \Bitrix\Crm\EO_Contact resetAddress()
	 * @method \Bitrix\Crm\EO_Contact unsetAddress()
	 * @method \string fillAddress()
	 * @method \string getComments()
	 * @method \Bitrix\Crm\EO_Contact setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Crm\EO_Contact resetComments()
	 * @method \Bitrix\Crm\EO_Contact unsetComments()
	 * @method \string fillComments()
	 * @method \string getTypeId()
	 * @method \Bitrix\Crm\EO_Contact setTypeId(\string|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string remindActualTypeId()
	 * @method \string requireTypeId()
	 * @method \Bitrix\Crm\EO_Contact resetTypeId()
	 * @method \Bitrix\Crm\EO_Contact unsetTypeId()
	 * @method \string fillTypeId()
	 * @method \Bitrix\Crm\EO_Status getTypeBy()
	 * @method \Bitrix\Crm\EO_Status remindActualTypeBy()
	 * @method \Bitrix\Crm\EO_Status requireTypeBy()
	 * @method \Bitrix\Crm\EO_Contact setTypeBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Contact resetTypeBy()
	 * @method \Bitrix\Crm\EO_Contact unsetTypeBy()
	 * @method bool hasTypeBy()
	 * @method bool isTypeByFilled()
	 * @method bool isTypeByChanged()
	 * @method \Bitrix\Crm\EO_Status fillTypeBy()
	 * @method \string getSourceId()
	 * @method \Bitrix\Crm\EO_Contact setSourceId(\string|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \string remindActualSourceId()
	 * @method \string requireSourceId()
	 * @method \Bitrix\Crm\EO_Contact resetSourceId()
	 * @method \Bitrix\Crm\EO_Contact unsetSourceId()
	 * @method \string fillSourceId()
	 * @method \Bitrix\Crm\EO_Status getSourceBy()
	 * @method \Bitrix\Crm\EO_Status remindActualSourceBy()
	 * @method \Bitrix\Crm\EO_Status requireSourceBy()
	 * @method \Bitrix\Crm\EO_Contact setSourceBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Contact resetSourceBy()
	 * @method \Bitrix\Crm\EO_Contact unsetSourceBy()
	 * @method bool hasSourceBy()
	 * @method bool isSourceByFilled()
	 * @method bool isSourceByChanged()
	 * @method \Bitrix\Crm\EO_Status fillSourceBy()
	 * @method \string getSourceDescription()
	 * @method \Bitrix\Crm\EO_Contact setSourceDescription(\string|\Bitrix\Main\DB\SqlExpression $sourceDescription)
	 * @method bool hasSourceDescription()
	 * @method bool isSourceDescriptionFilled()
	 * @method bool isSourceDescriptionChanged()
	 * @method \string remindActualSourceDescription()
	 * @method \string requireSourceDescription()
	 * @method \Bitrix\Crm\EO_Contact resetSourceDescription()
	 * @method \Bitrix\Crm\EO_Contact unsetSourceDescription()
	 * @method \string fillSourceDescription()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\EO_Contact setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\EO_Contact resetDateCreate()
	 * @method \Bitrix\Crm\EO_Contact unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Crm\EO_Contact setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Crm\EO_Contact resetDateModify()
	 * @method \Bitrix\Crm\EO_Contact unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \int getAssignedById()
	 * @method \Bitrix\Crm\EO_Contact setAssignedById(\int|\Bitrix\Main\DB\SqlExpression $assignedById)
	 * @method bool hasAssignedById()
	 * @method bool isAssignedByIdFilled()
	 * @method bool isAssignedByIdChanged()
	 * @method \int remindActualAssignedById()
	 * @method \int requireAssignedById()
	 * @method \Bitrix\Crm\EO_Contact resetAssignedById()
	 * @method \Bitrix\Crm\EO_Contact unsetAssignedById()
	 * @method \int fillAssignedById()
	 * @method \Bitrix\Main\EO_User getAssignedBy()
	 * @method \Bitrix\Main\EO_User remindActualAssignedBy()
	 * @method \Bitrix\Main\EO_User requireAssignedBy()
	 * @method \Bitrix\Crm\EO_Contact setAssignedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Contact resetAssignedBy()
	 * @method \Bitrix\Crm\EO_Contact unsetAssignedBy()
	 * @method bool hasAssignedBy()
	 * @method bool isAssignedByFilled()
	 * @method bool isAssignedByChanged()
	 * @method \Bitrix\Main\EO_User fillAssignedBy()
	 * @method \int getCreatedById()
	 * @method \Bitrix\Crm\EO_Contact setCreatedById(\int|\Bitrix\Main\DB\SqlExpression $createdById)
	 * @method bool hasCreatedById()
	 * @method bool isCreatedByIdFilled()
	 * @method bool isCreatedByIdChanged()
	 * @method \int remindActualCreatedById()
	 * @method \int requireCreatedById()
	 * @method \Bitrix\Crm\EO_Contact resetCreatedById()
	 * @method \Bitrix\Crm\EO_Contact unsetCreatedById()
	 * @method \int fillCreatedById()
	 * @method \Bitrix\Main\EO_User getCreatedBy()
	 * @method \Bitrix\Main\EO_User remindActualCreatedBy()
	 * @method \Bitrix\Main\EO_User requireCreatedBy()
	 * @method \Bitrix\Crm\EO_Contact setCreatedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Contact resetCreatedBy()
	 * @method \Bitrix\Crm\EO_Contact unsetCreatedBy()
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedBy()
	 * @method \int getModifyById()
	 * @method \Bitrix\Crm\EO_Contact setModifyById(\int|\Bitrix\Main\DB\SqlExpression $modifyById)
	 * @method bool hasModifyById()
	 * @method bool isModifyByIdFilled()
	 * @method bool isModifyByIdChanged()
	 * @method \int remindActualModifyById()
	 * @method \int requireModifyById()
	 * @method \Bitrix\Crm\EO_Contact resetModifyById()
	 * @method \Bitrix\Crm\EO_Contact unsetModifyById()
	 * @method \int fillModifyById()
	 * @method \Bitrix\Main\EO_User getModifyBy()
	 * @method \Bitrix\Main\EO_User remindActualModifyBy()
	 * @method \Bitrix\Main\EO_User requireModifyBy()
	 * @method \Bitrix\Crm\EO_Contact setModifyBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Contact resetModifyBy()
	 * @method \Bitrix\Crm\EO_Contact unsetModifyBy()
	 * @method bool hasModifyBy()
	 * @method bool isModifyByFilled()
	 * @method bool isModifyByChanged()
	 * @method \Bitrix\Main\EO_User fillModifyBy()
	 * @method \Bitrix\Main\Type\Date getBirthdate()
	 * @method \Bitrix\Crm\EO_Contact setBirthdate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $birthdate)
	 * @method bool hasBirthdate()
	 * @method bool isBirthdateFilled()
	 * @method bool isBirthdateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualBirthdate()
	 * @method \Bitrix\Main\Type\Date requireBirthdate()
	 * @method \Bitrix\Crm\EO_Contact resetBirthdate()
	 * @method \Bitrix\Crm\EO_Contact unsetBirthdate()
	 * @method \Bitrix\Main\Type\Date fillBirthdate()
	 * @method \Bitrix\Crm\EO_EventRelations getEventRelation()
	 * @method \Bitrix\Crm\EO_EventRelations remindActualEventRelation()
	 * @method \Bitrix\Crm\EO_EventRelations requireEventRelation()
	 * @method \Bitrix\Crm\EO_Contact setEventRelation(\Bitrix\Crm\EO_EventRelations $object)
	 * @method \Bitrix\Crm\EO_Contact resetEventRelation()
	 * @method \Bitrix\Crm\EO_Contact unsetEventRelation()
	 * @method bool hasEventRelation()
	 * @method bool isEventRelationFilled()
	 * @method bool isEventRelationChanged()
	 * @method \Bitrix\Crm\EO_EventRelations fillEventRelation()
	 * @method \int getLeadId()
	 * @method \Bitrix\Crm\EO_Contact setLeadId(\int|\Bitrix\Main\DB\SqlExpression $leadId)
	 * @method bool hasLeadId()
	 * @method bool isLeadIdFilled()
	 * @method bool isLeadIdChanged()
	 * @method \int remindActualLeadId()
	 * @method \int requireLeadId()
	 * @method \Bitrix\Crm\EO_Contact resetLeadId()
	 * @method \Bitrix\Crm\EO_Contact unsetLeadId()
	 * @method \int fillLeadId()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Crm\EO_Contact setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Crm\EO_Contact resetCompanyId()
	 * @method \Bitrix\Crm\EO_Contact unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \Bitrix\Crm\EO_Company getCompany()
	 * @method \Bitrix\Crm\EO_Company remindActualCompany()
	 * @method \Bitrix\Crm\EO_Company requireCompany()
	 * @method \Bitrix\Crm\EO_Contact setCompany(\Bitrix\Crm\EO_Company $object)
	 * @method \Bitrix\Crm\EO_Contact resetCompany()
	 * @method \Bitrix\Crm\EO_Contact unsetCompany()
	 * @method bool hasCompany()
	 * @method bool isCompanyFilled()
	 * @method bool isCompanyChanged()
	 * @method \Bitrix\Crm\EO_Company fillCompany()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Crm\EO_Contact setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Crm\EO_Contact resetSearchContent()
	 * @method \Bitrix\Crm\EO_Contact unsetSearchContent()
	 * @method \string fillSearchContent()
	 * @method \string getHonorific()
	 * @method \Bitrix\Crm\EO_Contact setHonorific(\string|\Bitrix\Main\DB\SqlExpression $honorific)
	 * @method bool hasHonorific()
	 * @method bool isHonorificFilled()
	 * @method bool isHonorificChanged()
	 * @method \string remindActualHonorific()
	 * @method \string requireHonorific()
	 * @method \Bitrix\Crm\EO_Contact resetHonorific()
	 * @method \Bitrix\Crm\EO_Contact unsetHonorific()
	 * @method \string fillHonorific()
	 * @method \string getFullName()
	 * @method \Bitrix\Crm\EO_Contact setFullName(\string|\Bitrix\Main\DB\SqlExpression $fullName)
	 * @method bool hasFullName()
	 * @method bool isFullNameFilled()
	 * @method bool isFullNameChanged()
	 * @method \string remindActualFullName()
	 * @method \string requireFullName()
	 * @method \Bitrix\Crm\EO_Contact resetFullName()
	 * @method \Bitrix\Crm\EO_Contact unsetFullName()
	 * @method \string fillFullName()
	 * @method \int getFaceId()
	 * @method \Bitrix\Crm\EO_Contact setFaceId(\int|\Bitrix\Main\DB\SqlExpression $faceId)
	 * @method bool hasFaceId()
	 * @method bool isFaceIdFilled()
	 * @method bool isFaceIdChanged()
	 * @method \int remindActualFaceId()
	 * @method \int requireFaceId()
	 * @method \Bitrix\Crm\EO_Contact resetFaceId()
	 * @method \Bitrix\Crm\EO_Contact unsetFaceId()
	 * @method \int fillFaceId()
	 * @method \boolean getHasEmail()
	 * @method \Bitrix\Crm\EO_Contact setHasEmail(\boolean|\Bitrix\Main\DB\SqlExpression $hasEmail)
	 * @method bool hasHasEmail()
	 * @method bool isHasEmailFilled()
	 * @method bool isHasEmailChanged()
	 * @method \boolean remindActualHasEmail()
	 * @method \boolean requireHasEmail()
	 * @method \Bitrix\Crm\EO_Contact resetHasEmail()
	 * @method \Bitrix\Crm\EO_Contact unsetHasEmail()
	 * @method \boolean fillHasEmail()
	 * @method \boolean getHasPhone()
	 * @method \Bitrix\Crm\EO_Contact setHasPhone(\boolean|\Bitrix\Main\DB\SqlExpression $hasPhone)
	 * @method bool hasHasPhone()
	 * @method bool isHasPhoneFilled()
	 * @method bool isHasPhoneChanged()
	 * @method \boolean remindActualHasPhone()
	 * @method \boolean requireHasPhone()
	 * @method \Bitrix\Crm\EO_Contact resetHasPhone()
	 * @method \Bitrix\Crm\EO_Contact unsetHasPhone()
	 * @method \boolean fillHasPhone()
	 * @method \boolean getHasImol()
	 * @method \Bitrix\Crm\EO_Contact setHasImol(\boolean|\Bitrix\Main\DB\SqlExpression $hasImol)
	 * @method bool hasHasImol()
	 * @method bool isHasImolFilled()
	 * @method bool isHasImolChanged()
	 * @method \boolean remindActualHasImol()
	 * @method \boolean requireHasImol()
	 * @method \Bitrix\Crm\EO_Contact resetHasImol()
	 * @method \Bitrix\Crm\EO_Contact unsetHasImol()
	 * @method \boolean fillHasImol()
	 * @method \string getEmailHome()
	 * @method \string remindActualEmailHome()
	 * @method \string requireEmailHome()
	 * @method bool hasEmailHome()
	 * @method bool isEmailHomeFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetEmailHome()
	 * @method \string fillEmailHome()
	 * @method \string getEmailWork()
	 * @method \string remindActualEmailWork()
	 * @method \string requireEmailWork()
	 * @method bool hasEmailWork()
	 * @method bool isEmailWorkFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetEmailWork()
	 * @method \string fillEmailWork()
	 * @method \string getEmailMailing()
	 * @method \string remindActualEmailMailing()
	 * @method \string requireEmailMailing()
	 * @method bool hasEmailMailing()
	 * @method bool isEmailMailingFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetEmailMailing()
	 * @method \string fillEmailMailing()
	 * @method \string getPhoneMobile()
	 * @method \string remindActualPhoneMobile()
	 * @method \string requirePhoneMobile()
	 * @method bool hasPhoneMobile()
	 * @method bool isPhoneMobileFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetPhoneMobile()
	 * @method \string fillPhoneMobile()
	 * @method \string getPhoneWork()
	 * @method \string remindActualPhoneWork()
	 * @method \string requirePhoneWork()
	 * @method bool hasPhoneWork()
	 * @method bool isPhoneWorkFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetPhoneWork()
	 * @method \string fillPhoneWork()
	 * @method \string getPhoneMailing()
	 * @method \string remindActualPhoneMailing()
	 * @method \string requirePhoneMailing()
	 * @method bool hasPhoneMailing()
	 * @method bool isPhoneMailingFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetPhoneMailing()
	 * @method \string fillPhoneMailing()
	 * @method \string getImol()
	 * @method \string remindActualImol()
	 * @method \string requireImol()
	 * @method bool hasImol()
	 * @method bool isImolFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetImol()
	 * @method \string fillImol()
	 * @method \string getEmail()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetEmail()
	 * @method \string fillEmail()
	 * @method \string getPhone()
	 * @method \string remindActualPhone()
	 * @method \string requirePhone()
	 * @method bool hasPhone()
	 * @method bool isPhoneFilled()
	 * @method \Bitrix\Crm\EO_Contact unsetPhone()
	 * @method \string fillPhone()
	 * @method \string getPhoto()
	 * @method \Bitrix\Crm\EO_Contact setPhoto(\string|\Bitrix\Main\DB\SqlExpression $photo)
	 * @method bool hasPhoto()
	 * @method bool isPhotoFilled()
	 * @method bool isPhotoChanged()
	 * @method \string remindActualPhoto()
	 * @method \string requirePhoto()
	 * @method \Bitrix\Crm\EO_Contact resetPhoto()
	 * @method \Bitrix\Crm\EO_Contact unsetPhoto()
	 * @method \string fillPhoto()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Contact set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Contact reset($fieldName)
	 * @method \Bitrix\Crm\EO_Contact unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Contact wakeUp($data)
	 */
	class EO_Contact {
		/* @var \Bitrix\Crm\ContactTable */
		static public $dataClass = '\Bitrix\Crm\ContactTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Contact_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLastNameList()
	 * @method \string[] fillLastName()
	 * @method \string[] getSecondNameList()
	 * @method \string[] fillSecondName()
	 * @method \string[] getShortNameList()
	 * @method \string[] fillShortName()
	 * @method \string[] getLoginList()
	 * @method \string[] fillLogin()
	 * @method \string[] getPostList()
	 * @method \string[] fillPost()
	 * @method \string[] getAddressList()
	 * @method \string[] fillAddress()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \string[] getTypeIdList()
	 * @method \string[] fillTypeId()
	 * @method \Bitrix\Crm\EO_Status[] getTypeByList()
	 * @method \Bitrix\Crm\EO_Contact_Collection getTypeByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillTypeBy()
	 * @method \string[] getSourceIdList()
	 * @method \string[] fillSourceId()
	 * @method \Bitrix\Crm\EO_Status[] getSourceByList()
	 * @method \Bitrix\Crm\EO_Contact_Collection getSourceByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillSourceBy()
	 * @method \string[] getSourceDescriptionList()
	 * @method \string[] fillSourceDescription()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \int[] getAssignedByIdList()
	 * @method \int[] fillAssignedById()
	 * @method \Bitrix\Main\EO_User[] getAssignedByList()
	 * @method \Bitrix\Crm\EO_Contact_Collection getAssignedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillAssignedBy()
	 * @method \int[] getCreatedByIdList()
	 * @method \int[] fillCreatedById()
	 * @method \Bitrix\Main\EO_User[] getCreatedByList()
	 * @method \Bitrix\Crm\EO_Contact_Collection getCreatedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedBy()
	 * @method \int[] getModifyByIdList()
	 * @method \int[] fillModifyById()
	 * @method \Bitrix\Main\EO_User[] getModifyByList()
	 * @method \Bitrix\Crm\EO_Contact_Collection getModifyByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifyBy()
	 * @method \Bitrix\Main\Type\Date[] getBirthdateList()
	 * @method \Bitrix\Main\Type\Date[] fillBirthdate()
	 * @method \Bitrix\Crm\EO_EventRelations[] getEventRelationList()
	 * @method \Bitrix\Crm\EO_Contact_Collection getEventRelationCollection()
	 * @method \Bitrix\Crm\EO_EventRelations_Collection fillEventRelation()
	 * @method \int[] getLeadIdList()
	 * @method \int[] fillLeadId()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \Bitrix\Crm\EO_Company[] getCompanyList()
	 * @method \Bitrix\Crm\EO_Contact_Collection getCompanyCollection()
	 * @method \Bitrix\Crm\EO_Company_Collection fillCompany()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 * @method \string[] getHonorificList()
	 * @method \string[] fillHonorific()
	 * @method \string[] getFullNameList()
	 * @method \string[] fillFullName()
	 * @method \int[] getFaceIdList()
	 * @method \int[] fillFaceId()
	 * @method \boolean[] getHasEmailList()
	 * @method \boolean[] fillHasEmail()
	 * @method \boolean[] getHasPhoneList()
	 * @method \boolean[] fillHasPhone()
	 * @method \boolean[] getHasImolList()
	 * @method \boolean[] fillHasImol()
	 * @method \string[] getEmailHomeList()
	 * @method \string[] fillEmailHome()
	 * @method \string[] getEmailWorkList()
	 * @method \string[] fillEmailWork()
	 * @method \string[] getEmailMailingList()
	 * @method \string[] fillEmailMailing()
	 * @method \string[] getPhoneMobileList()
	 * @method \string[] fillPhoneMobile()
	 * @method \string[] getPhoneWorkList()
	 * @method \string[] fillPhoneWork()
	 * @method \string[] getPhoneMailingList()
	 * @method \string[] fillPhoneMailing()
	 * @method \string[] getImolList()
	 * @method \string[] fillImol()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \string[] getPhoneList()
	 * @method \string[] fillPhone()
	 * @method \string[] getPhotoList()
	 * @method \string[] fillPhoto()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Contact $object)
	 * @method bool has(\Bitrix\Crm\EO_Contact $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Contact getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Contact[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Contact $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Contact_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Contact current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Contact_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\ContactTable */
		static public $dataClass = '\Bitrix\Crm\ContactTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Contact_Query query()
	 * @method static EO_Contact_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Contact_Result getById($id)
	 * @method static EO_Contact_Result getList(array $parameters = array())
	 * @method static EO_Contact_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Contact createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Contact_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Contact wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Contact_Collection wakeUpCollection($rows)
	 */
	class ContactTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Contact_Result exec()
	 * @method \Bitrix\Crm\EO_Contact fetchObject()
	 * @method \Bitrix\Crm\EO_Contact_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Contact_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Contact fetchObject()
	 * @method \Bitrix\Crm\EO_Contact_Collection fetchCollection()
	 */
	class EO_Contact_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Contact createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Contact_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Contact wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Contact_Collection wakeUpCollection($rows)
	 */
	class EO_Contact_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Conversion\Entity\EntityConversionMapTable:crm/lib/conversion/entity/entityconversionmaptable.php:561d31a72224f20f7bcb5d8e3fc925cf */
namespace Bitrix\Crm\Conversion\Entity {
	/**
	 * EO_EntityConversionMap
	 * @see \Bitrix\Crm\Conversion\Entity\EntityConversionMapTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getSrcTypeId()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap setSrcTypeId(\int|\Bitrix\Main\DB\SqlExpression $srcTypeId)
	 * @method bool hasSrcTypeId()
	 * @method bool isSrcTypeIdFilled()
	 * @method bool isSrcTypeIdChanged()
	 * @method \int getDstTypeId()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap setDstTypeId(\int|\Bitrix\Main\DB\SqlExpression $dstTypeId)
	 * @method bool hasDstTypeId()
	 * @method bool isDstTypeIdFilled()
	 * @method bool isDstTypeIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getLastUpdated()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap setLastUpdated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastUpdated)
	 * @method bool hasLastUpdated()
	 * @method bool isLastUpdatedFilled()
	 * @method bool isLastUpdatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastUpdated()
	 * @method \Bitrix\Main\Type\DateTime requireLastUpdated()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap resetLastUpdated()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap unsetLastUpdated()
	 * @method \Bitrix\Main\Type\DateTime fillLastUpdated()
	 * @method \string getData()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap setData(\string|\Bitrix\Main\DB\SqlExpression $data)
	 * @method bool hasData()
	 * @method bool isDataFilled()
	 * @method bool isDataChanged()
	 * @method \string remindActualData()
	 * @method \string requireData()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap resetData()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap unsetData()
	 * @method \string fillData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap set($fieldName, $value)
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap reset($fieldName)
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap wakeUp($data)
	 */
	class EO_EntityConversionMap {
		/* @var \Bitrix\Crm\Conversion\Entity\EntityConversionMapTable */
		static public $dataClass = '\Bitrix\Crm\Conversion\Entity\EntityConversionMapTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Conversion\Entity {
	/**
	 * EO_EntityConversionMap_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getSrcTypeIdList()
	 * @method \int[] getDstTypeIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getLastUpdatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastUpdated()
	 * @method \string[] getDataList()
	 * @method \string[] fillData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap $object)
	 * @method bool has(\Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap getByPrimary($primary)
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap[] getAll()
	 * @method bool remove(\Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EntityConversionMap_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Conversion\Entity\EntityConversionMapTable */
		static public $dataClass = '\Bitrix\Crm\Conversion\Entity\EntityConversionMapTable';
	}
}
namespace Bitrix\Crm\Conversion\Entity {
	/**
	 * @method static EO_EntityConversionMap_Query query()
	 * @method static EO_EntityConversionMap_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EntityConversionMap_Result getById($id)
	 * @method static EO_EntityConversionMap_Result getList(array $parameters = array())
	 * @method static EO_EntityConversionMap_Entity getEntity()
	 * @method static \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap_Collection createCollection()
	 * @method static \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap wakeUpObject($row)
	 * @method static \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap_Collection wakeUpCollection($rows)
	 */
	class EntityConversionMapTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_EntityConversionMap_Result exec()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap fetchObject()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_EntityConversionMap_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap fetchObject()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap_Collection fetchCollection()
	 */
	class EO_EntityConversionMap_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap_Collection createCollection()
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap wakeUpObject($row)
	 * @method \Bitrix\Crm\Conversion\Entity\EO_EntityConversionMap_Collection wakeUpCollection($rows)
	 */
	class EO_EntityConversionMap_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\DealTable:crm/lib/deal.php:fb5e74f6149bd744424d708a0d7c21fe */
namespace Bitrix\Crm {
	/**
	 * EO_Deal
	 * @see \Bitrix\Crm\DealTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Deal setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getTitle()
	 * @method \Bitrix\Crm\EO_Deal setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Crm\EO_Deal resetTitle()
	 * @method \Bitrix\Crm\EO_Deal unsetTitle()
	 * @method \string fillTitle()
	 * @method \float getOpportunity()
	 * @method \Bitrix\Crm\EO_Deal setOpportunity(\float|\Bitrix\Main\DB\SqlExpression $opportunity)
	 * @method bool hasOpportunity()
	 * @method bool isOpportunityFilled()
	 * @method bool isOpportunityChanged()
	 * @method \float remindActualOpportunity()
	 * @method \float requireOpportunity()
	 * @method \Bitrix\Crm\EO_Deal resetOpportunity()
	 * @method \Bitrix\Crm\EO_Deal unsetOpportunity()
	 * @method \float fillOpportunity()
	 * @method \boolean getIsManualOpportunity()
	 * @method \Bitrix\Crm\EO_Deal setIsManualOpportunity(\boolean|\Bitrix\Main\DB\SqlExpression $isManualOpportunity)
	 * @method bool hasIsManualOpportunity()
	 * @method bool isIsManualOpportunityFilled()
	 * @method bool isIsManualOpportunityChanged()
	 * @method \boolean remindActualIsManualOpportunity()
	 * @method \boolean requireIsManualOpportunity()
	 * @method \Bitrix\Crm\EO_Deal resetIsManualOpportunity()
	 * @method \Bitrix\Crm\EO_Deal unsetIsManualOpportunity()
	 * @method \boolean fillIsManualOpportunity()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\EO_Deal setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\EO_Deal resetCurrencyId()
	 * @method \Bitrix\Crm\EO_Deal unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \float getOpportunityAccount()
	 * @method \Bitrix\Crm\EO_Deal setOpportunityAccount(\float|\Bitrix\Main\DB\SqlExpression $opportunityAccount)
	 * @method bool hasOpportunityAccount()
	 * @method bool isOpportunityAccountFilled()
	 * @method bool isOpportunityAccountChanged()
	 * @method \float remindActualOpportunityAccount()
	 * @method \float requireOpportunityAccount()
	 * @method \Bitrix\Crm\EO_Deal resetOpportunityAccount()
	 * @method \Bitrix\Crm\EO_Deal unsetOpportunityAccount()
	 * @method \float fillOpportunityAccount()
	 * @method \string getAccountCurrencyId()
	 * @method \Bitrix\Crm\EO_Deal setAccountCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $accountCurrencyId)
	 * @method bool hasAccountCurrencyId()
	 * @method bool isAccountCurrencyIdFilled()
	 * @method bool isAccountCurrencyIdChanged()
	 * @method \string remindActualAccountCurrencyId()
	 * @method \string requireAccountCurrencyId()
	 * @method \Bitrix\Crm\EO_Deal resetAccountCurrencyId()
	 * @method \Bitrix\Crm\EO_Deal unsetAccountCurrencyId()
	 * @method \string fillAccountCurrencyId()
	 * @method \float getExchRate()
	 * @method \Bitrix\Crm\EO_Deal setExchRate(\float|\Bitrix\Main\DB\SqlExpression $exchRate)
	 * @method bool hasExchRate()
	 * @method bool isExchRateFilled()
	 * @method bool isExchRateChanged()
	 * @method \float remindActualExchRate()
	 * @method \float requireExchRate()
	 * @method \Bitrix\Crm\EO_Deal resetExchRate()
	 * @method \Bitrix\Crm\EO_Deal unsetExchRate()
	 * @method \float fillExchRate()
	 * @method \int getProbability()
	 * @method \Bitrix\Crm\EO_Deal setProbability(\int|\Bitrix\Main\DB\SqlExpression $probability)
	 * @method bool hasProbability()
	 * @method bool isProbabilityFilled()
	 * @method bool isProbabilityChanged()
	 * @method \int remindActualProbability()
	 * @method \int requireProbability()
	 * @method \Bitrix\Crm\EO_Deal resetProbability()
	 * @method \Bitrix\Crm\EO_Deal unsetProbability()
	 * @method \int fillProbability()
	 * @method \string getStageId()
	 * @method \Bitrix\Crm\EO_Deal setStageId(\string|\Bitrix\Main\DB\SqlExpression $stageId)
	 * @method bool hasStageId()
	 * @method bool isStageIdFilled()
	 * @method bool isStageIdChanged()
	 * @method \string remindActualStageId()
	 * @method \string requireStageId()
	 * @method \Bitrix\Crm\EO_Deal resetStageId()
	 * @method \Bitrix\Crm\EO_Deal unsetStageId()
	 * @method \string fillStageId()
	 * @method \Bitrix\Crm\EO_Status getStageBy()
	 * @method \Bitrix\Crm\EO_Status remindActualStageBy()
	 * @method \Bitrix\Crm\EO_Status requireStageBy()
	 * @method \Bitrix\Crm\EO_Deal setStageBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Deal resetStageBy()
	 * @method \Bitrix\Crm\EO_Deal unsetStageBy()
	 * @method bool hasStageBy()
	 * @method bool isStageByFilled()
	 * @method bool isStageByChanged()
	 * @method \Bitrix\Crm\EO_Status fillStageBy()
	 * @method \boolean getClosed()
	 * @method \Bitrix\Crm\EO_Deal setClosed(\boolean|\Bitrix\Main\DB\SqlExpression $closed)
	 * @method bool hasClosed()
	 * @method bool isClosedFilled()
	 * @method bool isClosedChanged()
	 * @method \boolean remindActualClosed()
	 * @method \boolean requireClosed()
	 * @method \Bitrix\Crm\EO_Deal resetClosed()
	 * @method \Bitrix\Crm\EO_Deal unsetClosed()
	 * @method \boolean fillClosed()
	 * @method \boolean getIsRepeatedApproach()
	 * @method \Bitrix\Crm\EO_Deal setIsRepeatedApproach(\boolean|\Bitrix\Main\DB\SqlExpression $isRepeatedApproach)
	 * @method bool hasIsRepeatedApproach()
	 * @method bool isIsRepeatedApproachFilled()
	 * @method bool isIsRepeatedApproachChanged()
	 * @method \boolean remindActualIsRepeatedApproach()
	 * @method \boolean requireIsRepeatedApproach()
	 * @method \Bitrix\Crm\EO_Deal resetIsRepeatedApproach()
	 * @method \Bitrix\Crm\EO_Deal unsetIsRepeatedApproach()
	 * @method \boolean fillIsRepeatedApproach()
	 * @method \boolean getIsReturnCustomer()
	 * @method \Bitrix\Crm\EO_Deal setIsReturnCustomer(\boolean|\Bitrix\Main\DB\SqlExpression $isReturnCustomer)
	 * @method bool hasIsReturnCustomer()
	 * @method bool isIsReturnCustomerFilled()
	 * @method bool isIsReturnCustomerChanged()
	 * @method \boolean remindActualIsReturnCustomer()
	 * @method \boolean requireIsReturnCustomer()
	 * @method \Bitrix\Crm\EO_Deal resetIsReturnCustomer()
	 * @method \Bitrix\Crm\EO_Deal unsetIsReturnCustomer()
	 * @method \boolean fillIsReturnCustomer()
	 * @method \boolean getIsRecurring()
	 * @method \Bitrix\Crm\EO_Deal setIsRecurring(\boolean|\Bitrix\Main\DB\SqlExpression $isRecurring)
	 * @method bool hasIsRecurring()
	 * @method bool isIsRecurringFilled()
	 * @method bool isIsRecurringChanged()
	 * @method \boolean remindActualIsRecurring()
	 * @method \boolean requireIsRecurring()
	 * @method \Bitrix\Crm\EO_Deal resetIsRecurring()
	 * @method \Bitrix\Crm\EO_Deal unsetIsRecurring()
	 * @method \boolean fillIsRecurring()
	 * @method \string getTypeId()
	 * @method \Bitrix\Crm\EO_Deal setTypeId(\string|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string remindActualTypeId()
	 * @method \string requireTypeId()
	 * @method \Bitrix\Crm\EO_Deal resetTypeId()
	 * @method \Bitrix\Crm\EO_Deal unsetTypeId()
	 * @method \string fillTypeId()
	 * @method \Bitrix\Crm\EO_Status getTypeBy()
	 * @method \Bitrix\Crm\EO_Status remindActualTypeBy()
	 * @method \Bitrix\Crm\EO_Status requireTypeBy()
	 * @method \Bitrix\Crm\EO_Deal setTypeBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Deal resetTypeBy()
	 * @method \Bitrix\Crm\EO_Deal unsetTypeBy()
	 * @method bool hasTypeBy()
	 * @method bool isTypeByFilled()
	 * @method bool isTypeByChanged()
	 * @method \Bitrix\Crm\EO_Status fillTypeBy()
	 * @method \string getComments()
	 * @method \Bitrix\Crm\EO_Deal setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Crm\EO_Deal resetComments()
	 * @method \Bitrix\Crm\EO_Deal unsetComments()
	 * @method \string fillComments()
	 * @method \Bitrix\Main\Type\DateTime getBegindate()
	 * @method \Bitrix\Crm\EO_Deal setBegindate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $begindate)
	 * @method bool hasBegindate()
	 * @method bool isBegindateFilled()
	 * @method bool isBegindateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualBegindate()
	 * @method \Bitrix\Main\Type\DateTime requireBegindate()
	 * @method \Bitrix\Crm\EO_Deal resetBegindate()
	 * @method \Bitrix\Crm\EO_Deal unsetBegindate()
	 * @method \Bitrix\Main\Type\DateTime fillBegindate()
	 * @method \Bitrix\Main\Type\DateTime getBegindateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualBegindateShort()
	 * @method \Bitrix\Main\Type\DateTime requireBegindateShort()
	 * @method bool hasBegindateShort()
	 * @method bool isBegindateShortFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetBegindateShort()
	 * @method \Bitrix\Main\Type\DateTime fillBegindateShort()
	 * @method \Bitrix\Main\Type\DateTime getClosedate()
	 * @method \Bitrix\Crm\EO_Deal setClosedate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $closedate)
	 * @method bool hasClosedate()
	 * @method bool isClosedateFilled()
	 * @method bool isClosedateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualClosedate()
	 * @method \Bitrix\Main\Type\DateTime requireClosedate()
	 * @method \Bitrix\Crm\EO_Deal resetClosedate()
	 * @method \Bitrix\Crm\EO_Deal unsetClosedate()
	 * @method \Bitrix\Main\Type\DateTime fillClosedate()
	 * @method \Bitrix\Main\Type\DateTime getClosedateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualClosedateShort()
	 * @method \Bitrix\Main\Type\DateTime requireClosedateShort()
	 * @method bool hasClosedateShort()
	 * @method bool isClosedateShortFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetClosedateShort()
	 * @method \Bitrix\Main\Type\DateTime fillClosedateShort()
	 * @method \Bitrix\Main\Type\DateTime getEventDate()
	 * @method \Bitrix\Crm\EO_Deal setEventDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $eventDate)
	 * @method bool hasEventDate()
	 * @method bool isEventDateFilled()
	 * @method bool isEventDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualEventDate()
	 * @method \Bitrix\Main\Type\DateTime requireEventDate()
	 * @method \Bitrix\Crm\EO_Deal resetEventDate()
	 * @method \Bitrix\Crm\EO_Deal unsetEventDate()
	 * @method \Bitrix\Main\Type\DateTime fillEventDate()
	 * @method \Bitrix\Main\Type\DateTime getEventDateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualEventDateShort()
	 * @method \Bitrix\Main\Type\DateTime requireEventDateShort()
	 * @method bool hasEventDateShort()
	 * @method bool isEventDateShortFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetEventDateShort()
	 * @method \Bitrix\Main\Type\DateTime fillEventDateShort()
	 * @method \string getEventId()
	 * @method \Bitrix\Crm\EO_Deal setEventId(\string|\Bitrix\Main\DB\SqlExpression $eventId)
	 * @method bool hasEventId()
	 * @method bool isEventIdFilled()
	 * @method bool isEventIdChanged()
	 * @method \string remindActualEventId()
	 * @method \string requireEventId()
	 * @method \Bitrix\Crm\EO_Deal resetEventId()
	 * @method \Bitrix\Crm\EO_Deal unsetEventId()
	 * @method \string fillEventId()
	 * @method \Bitrix\Crm\EO_Status getEventBy()
	 * @method \Bitrix\Crm\EO_Status remindActualEventBy()
	 * @method \Bitrix\Crm\EO_Status requireEventBy()
	 * @method \Bitrix\Crm\EO_Deal setEventBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Deal resetEventBy()
	 * @method \Bitrix\Crm\EO_Deal unsetEventBy()
	 * @method bool hasEventBy()
	 * @method bool isEventByFilled()
	 * @method bool isEventByChanged()
	 * @method \Bitrix\Crm\EO_Status fillEventBy()
	 * @method \string getEventDescription()
	 * @method \Bitrix\Crm\EO_Deal setEventDescription(\string|\Bitrix\Main\DB\SqlExpression $eventDescription)
	 * @method bool hasEventDescription()
	 * @method bool isEventDescriptionFilled()
	 * @method bool isEventDescriptionChanged()
	 * @method \string remindActualEventDescription()
	 * @method \string requireEventDescription()
	 * @method \Bitrix\Crm\EO_Deal resetEventDescription()
	 * @method \Bitrix\Crm\EO_Deal unsetEventDescription()
	 * @method \string fillEventDescription()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\EO_Deal setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\EO_Deal resetDateCreate()
	 * @method \Bitrix\Crm\EO_Deal unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreateShort()
	 * @method bool hasDateCreateShort()
	 * @method bool isDateCreateShortFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Crm\EO_Deal setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Crm\EO_Deal resetDateModify()
	 * @method \Bitrix\Crm\EO_Deal unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \Bitrix\Main\Type\DateTime getDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateModifyShort()
	 * @method bool hasDateModifyShort()
	 * @method bool isDateModifyShortFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateModifyShort()
	 * @method \int getAssignedById()
	 * @method \Bitrix\Crm\EO_Deal setAssignedById(\int|\Bitrix\Main\DB\SqlExpression $assignedById)
	 * @method bool hasAssignedById()
	 * @method bool isAssignedByIdFilled()
	 * @method bool isAssignedByIdChanged()
	 * @method \int remindActualAssignedById()
	 * @method \int requireAssignedById()
	 * @method \Bitrix\Crm\EO_Deal resetAssignedById()
	 * @method \Bitrix\Crm\EO_Deal unsetAssignedById()
	 * @method \int fillAssignedById()
	 * @method \Bitrix\Main\EO_User getAssignedBy()
	 * @method \Bitrix\Main\EO_User remindActualAssignedBy()
	 * @method \Bitrix\Main\EO_User requireAssignedBy()
	 * @method \Bitrix\Crm\EO_Deal setAssignedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Deal resetAssignedBy()
	 * @method \Bitrix\Crm\EO_Deal unsetAssignedBy()
	 * @method bool hasAssignedBy()
	 * @method bool isAssignedByFilled()
	 * @method bool isAssignedByChanged()
	 * @method \Bitrix\Main\EO_User fillAssignedBy()
	 * @method \int getCreatedById()
	 * @method \Bitrix\Crm\EO_Deal setCreatedById(\int|\Bitrix\Main\DB\SqlExpression $createdById)
	 * @method bool hasCreatedById()
	 * @method bool isCreatedByIdFilled()
	 * @method bool isCreatedByIdChanged()
	 * @method \int remindActualCreatedById()
	 * @method \int requireCreatedById()
	 * @method \Bitrix\Crm\EO_Deal resetCreatedById()
	 * @method \Bitrix\Crm\EO_Deal unsetCreatedById()
	 * @method \int fillCreatedById()
	 * @method \Bitrix\Main\EO_User getCreatedBy()
	 * @method \Bitrix\Main\EO_User remindActualCreatedBy()
	 * @method \Bitrix\Main\EO_User requireCreatedBy()
	 * @method \Bitrix\Crm\EO_Deal setCreatedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Deal resetCreatedBy()
	 * @method \Bitrix\Crm\EO_Deal unsetCreatedBy()
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedBy()
	 * @method \int getModifyById()
	 * @method \Bitrix\Crm\EO_Deal setModifyById(\int|\Bitrix\Main\DB\SqlExpression $modifyById)
	 * @method bool hasModifyById()
	 * @method bool isModifyByIdFilled()
	 * @method bool isModifyByIdChanged()
	 * @method \int remindActualModifyById()
	 * @method \int requireModifyById()
	 * @method \Bitrix\Crm\EO_Deal resetModifyById()
	 * @method \Bitrix\Crm\EO_Deal unsetModifyById()
	 * @method \int fillModifyById()
	 * @method \Bitrix\Main\EO_User getModifyBy()
	 * @method \Bitrix\Main\EO_User remindActualModifyBy()
	 * @method \Bitrix\Main\EO_User requireModifyBy()
	 * @method \Bitrix\Crm\EO_Deal setModifyBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Deal resetModifyBy()
	 * @method \Bitrix\Crm\EO_Deal unsetModifyBy()
	 * @method bool hasModifyBy()
	 * @method bool isModifyByFilled()
	 * @method bool isModifyByChanged()
	 * @method \Bitrix\Main\EO_User fillModifyBy()
	 * @method \Bitrix\Crm\EO_EventRelations getEventRelation()
	 * @method \Bitrix\Crm\EO_EventRelations remindActualEventRelation()
	 * @method \Bitrix\Crm\EO_EventRelations requireEventRelation()
	 * @method \Bitrix\Crm\EO_Deal setEventRelation(\Bitrix\Crm\EO_EventRelations $object)
	 * @method \Bitrix\Crm\EO_Deal resetEventRelation()
	 * @method \Bitrix\Crm\EO_Deal unsetEventRelation()
	 * @method bool hasEventRelation()
	 * @method bool isEventRelationFilled()
	 * @method bool isEventRelationChanged()
	 * @method \Bitrix\Crm\EO_EventRelations fillEventRelation()
	 * @method \int getLeadId()
	 * @method \Bitrix\Crm\EO_Deal setLeadId(\int|\Bitrix\Main\DB\SqlExpression $leadId)
	 * @method bool hasLeadId()
	 * @method bool isLeadIdFilled()
	 * @method bool isLeadIdChanged()
	 * @method \int remindActualLeadId()
	 * @method \int requireLeadId()
	 * @method \Bitrix\Crm\EO_Deal resetLeadId()
	 * @method \Bitrix\Crm\EO_Deal unsetLeadId()
	 * @method \int fillLeadId()
	 * @method \Bitrix\Crm\EO_Lead getLeadBy()
	 * @method \Bitrix\Crm\EO_Lead remindActualLeadBy()
	 * @method \Bitrix\Crm\EO_Lead requireLeadBy()
	 * @method \Bitrix\Crm\EO_Deal setLeadBy(\Bitrix\Crm\EO_Lead $object)
	 * @method \Bitrix\Crm\EO_Deal resetLeadBy()
	 * @method \Bitrix\Crm\EO_Deal unsetLeadBy()
	 * @method bool hasLeadBy()
	 * @method bool isLeadByFilled()
	 * @method bool isLeadByChanged()
	 * @method \Bitrix\Crm\EO_Lead fillLeadBy()
	 * @method \int getContactId()
	 * @method \Bitrix\Crm\EO_Deal setContactId(\int|\Bitrix\Main\DB\SqlExpression $contactId)
	 * @method bool hasContactId()
	 * @method bool isContactIdFilled()
	 * @method bool isContactIdChanged()
	 * @method \int remindActualContactId()
	 * @method \int requireContactId()
	 * @method \Bitrix\Crm\EO_Deal resetContactId()
	 * @method \Bitrix\Crm\EO_Deal unsetContactId()
	 * @method \int fillContactId()
	 * @method \Bitrix\Crm\EO_Contact getContactBy()
	 * @method \Bitrix\Crm\EO_Contact remindActualContactBy()
	 * @method \Bitrix\Crm\EO_Contact requireContactBy()
	 * @method \Bitrix\Crm\EO_Deal setContactBy(\Bitrix\Crm\EO_Contact $object)
	 * @method \Bitrix\Crm\EO_Deal resetContactBy()
	 * @method \Bitrix\Crm\EO_Deal unsetContactBy()
	 * @method bool hasContactBy()
	 * @method bool isContactByFilled()
	 * @method bool isContactByChanged()
	 * @method \Bitrix\Crm\EO_Contact fillContactBy()
	 * @method \Bitrix\Crm\EO_Contact getContact()
	 * @method \Bitrix\Crm\EO_Contact remindActualContact()
	 * @method \Bitrix\Crm\EO_Contact requireContact()
	 * @method \Bitrix\Crm\EO_Deal setContact(\Bitrix\Crm\EO_Contact $object)
	 * @method \Bitrix\Crm\EO_Deal resetContact()
	 * @method \Bitrix\Crm\EO_Deal unsetContact()
	 * @method bool hasContact()
	 * @method bool isContactFilled()
	 * @method bool isContactChanged()
	 * @method \Bitrix\Crm\EO_Contact fillContact()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Crm\EO_Deal setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Crm\EO_Deal resetCompanyId()
	 * @method \Bitrix\Crm\EO_Deal unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \Bitrix\Crm\EO_Company getCompanyBy()
	 * @method \Bitrix\Crm\EO_Company remindActualCompanyBy()
	 * @method \Bitrix\Crm\EO_Company requireCompanyBy()
	 * @method \Bitrix\Crm\EO_Deal setCompanyBy(\Bitrix\Crm\EO_Company $object)
	 * @method \Bitrix\Crm\EO_Deal resetCompanyBy()
	 * @method \Bitrix\Crm\EO_Deal unsetCompanyBy()
	 * @method bool hasCompanyBy()
	 * @method bool isCompanyByFilled()
	 * @method bool isCompanyByChanged()
	 * @method \Bitrix\Crm\EO_Company fillCompanyBy()
	 * @method \Bitrix\Crm\EO_Company getCompany()
	 * @method \Bitrix\Crm\EO_Company remindActualCompany()
	 * @method \Bitrix\Crm\EO_Company requireCompany()
	 * @method \Bitrix\Crm\EO_Deal setCompany(\Bitrix\Crm\EO_Company $object)
	 * @method \Bitrix\Crm\EO_Deal resetCompany()
	 * @method \Bitrix\Crm\EO_Deal unsetCompany()
	 * @method bool hasCompany()
	 * @method bool isCompanyFilled()
	 * @method bool isCompanyChanged()
	 * @method \Bitrix\Crm\EO_Company fillCompany()
	 * @method \boolean getIsWork()
	 * @method \boolean remindActualIsWork()
	 * @method \boolean requireIsWork()
	 * @method bool hasIsWork()
	 * @method bool isIsWorkFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetIsWork()
	 * @method \boolean fillIsWork()
	 * @method \boolean getIsWon()
	 * @method \boolean remindActualIsWon()
	 * @method \boolean requireIsWon()
	 * @method bool hasIsWon()
	 * @method bool isIsWonFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetIsWon()
	 * @method \boolean fillIsWon()
	 * @method \boolean getIsLose()
	 * @method \boolean remindActualIsLose()
	 * @method \boolean requireIsLose()
	 * @method bool hasIsLose()
	 * @method bool isIsLoseFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetIsLose()
	 * @method \boolean fillIsLose()
	 * @method \int getReceivedAmount()
	 * @method \int remindActualReceivedAmount()
	 * @method \int requireReceivedAmount()
	 * @method bool hasReceivedAmount()
	 * @method bool isReceivedAmountFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetReceivedAmount()
	 * @method \int fillReceivedAmount()
	 * @method \int getLostAmount()
	 * @method \int remindActualLostAmount()
	 * @method \int requireLostAmount()
	 * @method bool hasLostAmount()
	 * @method bool isLostAmountFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetLostAmount()
	 * @method \int fillLostAmount()
	 * @method \boolean getHasProducts()
	 * @method \boolean remindActualHasProducts()
	 * @method \boolean requireHasProducts()
	 * @method bool hasHasProducts()
	 * @method bool isHasProductsFilled()
	 * @method \Bitrix\Crm\EO_Deal unsetHasProducts()
	 * @method \boolean fillHasProducts()
	 * @method \int getCategoryId()
	 * @method \Bitrix\Crm\EO_Deal setCategoryId(\int|\Bitrix\Main\DB\SqlExpression $categoryId)
	 * @method bool hasCategoryId()
	 * @method bool isCategoryIdFilled()
	 * @method bool isCategoryIdChanged()
	 * @method \int remindActualCategoryId()
	 * @method \int requireCategoryId()
	 * @method \Bitrix\Crm\EO_Deal resetCategoryId()
	 * @method \Bitrix\Crm\EO_Deal unsetCategoryId()
	 * @method \int fillCategoryId()
	 * @method \string getStageSemanticId()
	 * @method \Bitrix\Crm\EO_Deal setStageSemanticId(\string|\Bitrix\Main\DB\SqlExpression $stageSemanticId)
	 * @method bool hasStageSemanticId()
	 * @method bool isStageSemanticIdFilled()
	 * @method bool isStageSemanticIdChanged()
	 * @method \string remindActualStageSemanticId()
	 * @method \string requireStageSemanticId()
	 * @method \Bitrix\Crm\EO_Deal resetStageSemanticId()
	 * @method \Bitrix\Crm\EO_Deal unsetStageSemanticId()
	 * @method \string fillStageSemanticId()
	 * @method \string getSourceId()
	 * @method \Bitrix\Crm\EO_Deal setSourceId(\string|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \string remindActualSourceId()
	 * @method \string requireSourceId()
	 * @method \Bitrix\Crm\EO_Deal resetSourceId()
	 * @method \Bitrix\Crm\EO_Deal unsetSourceId()
	 * @method \string fillSourceId()
	 * @method \Bitrix\Crm\EO_Status getSourceBy()
	 * @method \Bitrix\Crm\EO_Status remindActualSourceBy()
	 * @method \Bitrix\Crm\EO_Status requireSourceBy()
	 * @method \Bitrix\Crm\EO_Deal setSourceBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Deal resetSourceBy()
	 * @method \Bitrix\Crm\EO_Deal unsetSourceBy()
	 * @method bool hasSourceBy()
	 * @method bool isSourceByFilled()
	 * @method bool isSourceByChanged()
	 * @method \Bitrix\Crm\EO_Status fillSourceBy()
	 * @method \string getSourceDescription()
	 * @method \Bitrix\Crm\EO_Deal setSourceDescription(\string|\Bitrix\Main\DB\SqlExpression $sourceDescription)
	 * @method bool hasSourceDescription()
	 * @method bool isSourceDescriptionFilled()
	 * @method bool isSourceDescriptionChanged()
	 * @method \string remindActualSourceDescription()
	 * @method \string requireSourceDescription()
	 * @method \Bitrix\Crm\EO_Deal resetSourceDescription()
	 * @method \Bitrix\Crm\EO_Deal unsetSourceDescription()
	 * @method \string fillSourceDescription()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Crm\EO_Deal setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Crm\EO_Deal resetSearchContent()
	 * @method \Bitrix\Crm\EO_Deal unsetSearchContent()
	 * @method \string fillSearchContent()
	 * @method \string getOriginId()
	 * @method \Bitrix\Crm\EO_Deal setOriginId(\string|\Bitrix\Main\DB\SqlExpression $originId)
	 * @method bool hasOriginId()
	 * @method bool isOriginIdFilled()
	 * @method bool isOriginIdChanged()
	 * @method \string remindActualOriginId()
	 * @method \string requireOriginId()
	 * @method \Bitrix\Crm\EO_Deal resetOriginId()
	 * @method \Bitrix\Crm\EO_Deal unsetOriginId()
	 * @method \string fillOriginId()
	 * @method \string getOrderStage()
	 * @method \Bitrix\Crm\EO_Deal setOrderStage(\string|\Bitrix\Main\DB\SqlExpression $orderStage)
	 * @method bool hasOrderStage()
	 * @method bool isOrderStageFilled()
	 * @method bool isOrderStageChanged()
	 * @method \string remindActualOrderStage()
	 * @method \string requireOrderStage()
	 * @method \Bitrix\Crm\EO_Deal resetOrderStage()
	 * @method \Bitrix\Crm\EO_Deal unsetOrderStage()
	 * @method \string fillOrderStage()
	 * @method \string getOriginatorId()
	 * @method \Bitrix\Crm\EO_Deal setOriginatorId(\string|\Bitrix\Main\DB\SqlExpression $originatorId)
	 * @method bool hasOriginatorId()
	 * @method bool isOriginatorIdFilled()
	 * @method bool isOriginatorIdChanged()
	 * @method \string remindActualOriginatorId()
	 * @method \string requireOriginatorId()
	 * @method \Bitrix\Crm\EO_Deal resetOriginatorId()
	 * @method \Bitrix\Crm\EO_Deal unsetOriginatorId()
	 * @method \string fillOriginatorId()
	 * @method \Bitrix\Crm\EO_ExternalSale getOriginatorBy()
	 * @method \Bitrix\Crm\EO_ExternalSale remindActualOriginatorBy()
	 * @method \Bitrix\Crm\EO_ExternalSale requireOriginatorBy()
	 * @method \Bitrix\Crm\EO_Deal setOriginatorBy(\Bitrix\Crm\EO_ExternalSale $object)
	 * @method \Bitrix\Crm\EO_Deal resetOriginatorBy()
	 * @method \Bitrix\Crm\EO_Deal unsetOriginatorBy()
	 * @method bool hasOriginatorBy()
	 * @method bool isOriginatorByFilled()
	 * @method bool isOriginatorByChanged()
	 * @method \Bitrix\Crm\EO_ExternalSale fillOriginatorBy()
	 * @method \string getLocationId()
	 * @method \Bitrix\Crm\EO_Deal setLocationId(\string|\Bitrix\Main\DB\SqlExpression $locationId)
	 * @method bool hasLocationId()
	 * @method bool isLocationIdFilled()
	 * @method bool isLocationIdChanged()
	 * @method \string remindActualLocationId()
	 * @method \string requireLocationId()
	 * @method \Bitrix\Crm\EO_Deal resetLocationId()
	 * @method \Bitrix\Crm\EO_Deal unsetLocationId()
	 * @method \string fillLocationId()
	 * @method \string getIsNew()
	 * @method \Bitrix\Crm\EO_Deal setIsNew(\string|\Bitrix\Main\DB\SqlExpression $isNew)
	 * @method bool hasIsNew()
	 * @method bool isIsNewFilled()
	 * @method bool isIsNewChanged()
	 * @method \string remindActualIsNew()
	 * @method \string requireIsNew()
	 * @method \Bitrix\Crm\EO_Deal resetIsNew()
	 * @method \Bitrix\Crm\EO_Deal unsetIsNew()
	 * @method \string fillIsNew()
	 * @method \int getWebformId()
	 * @method \Bitrix\Crm\EO_Deal setWebformId(\int|\Bitrix\Main\DB\SqlExpression $webformId)
	 * @method bool hasWebformId()
	 * @method bool isWebformIdFilled()
	 * @method bool isWebformIdChanged()
	 * @method \int remindActualWebformId()
	 * @method \int requireWebformId()
	 * @method \Bitrix\Crm\EO_Deal resetWebformId()
	 * @method \Bitrix\Crm\EO_Deal unsetWebformId()
	 * @method \int fillWebformId()
	 * @method \Bitrix\Crm\EO_DealRecur getCrmDealRecurring()
	 * @method \Bitrix\Crm\EO_DealRecur remindActualCrmDealRecurring()
	 * @method \Bitrix\Crm\EO_DealRecur requireCrmDealRecurring()
	 * @method \Bitrix\Crm\EO_Deal setCrmDealRecurring(\Bitrix\Crm\EO_DealRecur $object)
	 * @method \Bitrix\Crm\EO_Deal resetCrmDealRecurring()
	 * @method \Bitrix\Crm\EO_Deal unsetCrmDealRecurring()
	 * @method bool hasCrmDealRecurring()
	 * @method bool isCrmDealRecurringFilled()
	 * @method bool isCrmDealRecurringChanged()
	 * @method \Bitrix\Crm\EO_DealRecur fillCrmDealRecurring()
	 * @method \Bitrix\Crm\EO_ProductRow getProductRow()
	 * @method \Bitrix\Crm\EO_ProductRow remindActualProductRow()
	 * @method \Bitrix\Crm\EO_ProductRow requireProductRow()
	 * @method \Bitrix\Crm\EO_Deal setProductRow(\Bitrix\Crm\EO_ProductRow $object)
	 * @method \Bitrix\Crm\EO_Deal resetProductRow()
	 * @method \Bitrix\Crm\EO_Deal unsetProductRow()
	 * @method bool hasProductRow()
	 * @method bool isProductRowFilled()
	 * @method bool isProductRowChanged()
	 * @method \Bitrix\Crm\EO_ProductRow fillProductRow()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory getHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory remindActualHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory requireHistory()
	 * @method \Bitrix\Crm\EO_Deal setHistory(\Bitrix\Crm\History\Entity\EO_DealStageHistory $object)
	 * @method \Bitrix\Crm\EO_Deal resetHistory()
	 * @method \Bitrix\Crm\EO_Deal unsetHistory()
	 * @method bool hasHistory()
	 * @method bool isHistoryFilled()
	 * @method bool isHistoryChanged()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory fillHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed getFullHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed remindActualFullHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed requireFullHistory()
	 * @method \Bitrix\Crm\EO_Deal setFullHistory(\Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed $object)
	 * @method \Bitrix\Crm\EO_Deal resetFullHistory()
	 * @method \Bitrix\Crm\EO_Deal unsetFullHistory()
	 * @method bool hasFullHistory()
	 * @method bool isFullHistoryFilled()
	 * @method bool isFullHistoryChanged()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed fillFullHistory()
	 * @method \Bitrix\Crm\Binding\EO_DealContact getBindingContact()
	 * @method \Bitrix\Crm\Binding\EO_DealContact remindActualBindingContact()
	 * @method \Bitrix\Crm\Binding\EO_DealContact requireBindingContact()
	 * @method \Bitrix\Crm\EO_Deal setBindingContact(\Bitrix\Crm\Binding\EO_DealContact $object)
	 * @method \Bitrix\Crm\EO_Deal resetBindingContact()
	 * @method \Bitrix\Crm\EO_Deal unsetBindingContact()
	 * @method bool hasBindingContact()
	 * @method bool isBindingContactFilled()
	 * @method bool isBindingContactChanged()
	 * @method \Bitrix\Crm\Binding\EO_DealContact fillBindingContact()
	 * @method \Bitrix\Crm\EO_Utm getUtmSource()
	 * @method \Bitrix\Crm\EO_Utm remindActualUtmSource()
	 * @method \Bitrix\Crm\EO_Utm requireUtmSource()
	 * @method \Bitrix\Crm\EO_Deal setUtmSource(\Bitrix\Crm\EO_Utm $object)
	 * @method \Bitrix\Crm\EO_Deal resetUtmSource()
	 * @method \Bitrix\Crm\EO_Deal unsetUtmSource()
	 * @method bool hasUtmSource()
	 * @method bool isUtmSourceFilled()
	 * @method bool isUtmSourceChanged()
	 * @method \Bitrix\Crm\EO_Utm fillUtmSource()
	 * @method \Bitrix\Crm\EO_Utm getUtmMedium()
	 * @method \Bitrix\Crm\EO_Utm remindActualUtmMedium()
	 * @method \Bitrix\Crm\EO_Utm requireUtmMedium()
	 * @method \Bitrix\Crm\EO_Deal setUtmMedium(\Bitrix\Crm\EO_Utm $object)
	 * @method \Bitrix\Crm\EO_Deal resetUtmMedium()
	 * @method \Bitrix\Crm\EO_Deal unsetUtmMedium()
	 * @method bool hasUtmMedium()
	 * @method bool isUtmMediumFilled()
	 * @method bool isUtmMediumChanged()
	 * @method \Bitrix\Crm\EO_Utm fillUtmMedium()
	 * @method \Bitrix\Crm\EO_Utm getUtmCampaign()
	 * @method \Bitrix\Crm\EO_Utm remindActualUtmCampaign()
	 * @method \Bitrix\Crm\EO_Utm requireUtmCampaign()
	 * @method \Bitrix\Crm\EO_Deal setUtmCampaign(\Bitrix\Crm\EO_Utm $object)
	 * @method \Bitrix\Crm\EO_Deal resetUtmCampaign()
	 * @method \Bitrix\Crm\EO_Deal unsetUtmCampaign()
	 * @method bool hasUtmCampaign()
	 * @method bool isUtmCampaignFilled()
	 * @method bool isUtmCampaignChanged()
	 * @method \Bitrix\Crm\EO_Utm fillUtmCampaign()
	 * @method \Bitrix\Crm\EO_Utm getUtmContent()
	 * @method \Bitrix\Crm\EO_Utm remindActualUtmContent()
	 * @method \Bitrix\Crm\EO_Utm requireUtmContent()
	 * @method \Bitrix\Crm\EO_Deal setUtmContent(\Bitrix\Crm\EO_Utm $object)
	 * @method \Bitrix\Crm\EO_Deal resetUtmContent()
	 * @method \Bitrix\Crm\EO_Deal unsetUtmContent()
	 * @method bool hasUtmContent()
	 * @method bool isUtmContentFilled()
	 * @method bool isUtmContentChanged()
	 * @method \Bitrix\Crm\EO_Utm fillUtmContent()
	 * @method \Bitrix\Crm\EO_Utm getUtmTerm()
	 * @method \Bitrix\Crm\EO_Utm remindActualUtmTerm()
	 * @method \Bitrix\Crm\EO_Utm requireUtmTerm()
	 * @method \Bitrix\Crm\EO_Deal setUtmTerm(\Bitrix\Crm\EO_Utm $object)
	 * @method \Bitrix\Crm\EO_Deal resetUtmTerm()
	 * @method \Bitrix\Crm\EO_Deal unsetUtmTerm()
	 * @method bool hasUtmTerm()
	 * @method bool isUtmTermFilled()
	 * @method bool isUtmTermChanged()
	 * @method \Bitrix\Crm\EO_Utm fillUtmTerm()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Deal set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Deal reset($fieldName)
	 * @method \Bitrix\Crm\EO_Deal unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Deal wakeUp($data)
	 */
	class EO_Deal {
		/* @var \Bitrix\Crm\DealTable */
		static public $dataClass = '\Bitrix\Crm\DealTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Deal_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \float[] getOpportunityList()
	 * @method \float[] fillOpportunity()
	 * @method \boolean[] getIsManualOpportunityList()
	 * @method \boolean[] fillIsManualOpportunity()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \float[] getOpportunityAccountList()
	 * @method \float[] fillOpportunityAccount()
	 * @method \string[] getAccountCurrencyIdList()
	 * @method \string[] fillAccountCurrencyId()
	 * @method \float[] getExchRateList()
	 * @method \float[] fillExchRate()
	 * @method \int[] getProbabilityList()
	 * @method \int[] fillProbability()
	 * @method \string[] getStageIdList()
	 * @method \string[] fillStageId()
	 * @method \Bitrix\Crm\EO_Status[] getStageByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getStageByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillStageBy()
	 * @method \boolean[] getClosedList()
	 * @method \boolean[] fillClosed()
	 * @method \boolean[] getIsRepeatedApproachList()
	 * @method \boolean[] fillIsRepeatedApproach()
	 * @method \boolean[] getIsReturnCustomerList()
	 * @method \boolean[] fillIsReturnCustomer()
	 * @method \boolean[] getIsRecurringList()
	 * @method \boolean[] fillIsRecurring()
	 * @method \string[] getTypeIdList()
	 * @method \string[] fillTypeId()
	 * @method \Bitrix\Crm\EO_Status[] getTypeByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getTypeByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillTypeBy()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \Bitrix\Main\Type\DateTime[] getBegindateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillBegindate()
	 * @method \Bitrix\Main\Type\DateTime[] getBegindateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillBegindateShort()
	 * @method \Bitrix\Main\Type\DateTime[] getClosedateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillClosedate()
	 * @method \Bitrix\Main\Type\DateTime[] getClosedateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillClosedateShort()
	 * @method \Bitrix\Main\Type\DateTime[] getEventDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillEventDate()
	 * @method \Bitrix\Main\Type\DateTime[] getEventDateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillEventDateShort()
	 * @method \string[] getEventIdList()
	 * @method \string[] fillEventId()
	 * @method \Bitrix\Crm\EO_Status[] getEventByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getEventByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillEventBy()
	 * @method \string[] getEventDescriptionList()
	 * @method \string[] fillEventDescription()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModifyShort()
	 * @method \int[] getAssignedByIdList()
	 * @method \int[] fillAssignedById()
	 * @method \Bitrix\Main\EO_User[] getAssignedByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getAssignedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillAssignedBy()
	 * @method \int[] getCreatedByIdList()
	 * @method \int[] fillCreatedById()
	 * @method \Bitrix\Main\EO_User[] getCreatedByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getCreatedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedBy()
	 * @method \int[] getModifyByIdList()
	 * @method \int[] fillModifyById()
	 * @method \Bitrix\Main\EO_User[] getModifyByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getModifyByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifyBy()
	 * @method \Bitrix\Crm\EO_EventRelations[] getEventRelationList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getEventRelationCollection()
	 * @method \Bitrix\Crm\EO_EventRelations_Collection fillEventRelation()
	 * @method \int[] getLeadIdList()
	 * @method \int[] fillLeadId()
	 * @method \Bitrix\Crm\EO_Lead[] getLeadByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getLeadByCollection()
	 * @method \Bitrix\Crm\EO_Lead_Collection fillLeadBy()
	 * @method \int[] getContactIdList()
	 * @method \int[] fillContactId()
	 * @method \Bitrix\Crm\EO_Contact[] getContactByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getContactByCollection()
	 * @method \Bitrix\Crm\EO_Contact_Collection fillContactBy()
	 * @method \Bitrix\Crm\EO_Contact[] getContactList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getContactCollection()
	 * @method \Bitrix\Crm\EO_Contact_Collection fillContact()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \Bitrix\Crm\EO_Company[] getCompanyByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getCompanyByCollection()
	 * @method \Bitrix\Crm\EO_Company_Collection fillCompanyBy()
	 * @method \Bitrix\Crm\EO_Company[] getCompanyList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getCompanyCollection()
	 * @method \Bitrix\Crm\EO_Company_Collection fillCompany()
	 * @method \boolean[] getIsWorkList()
	 * @method \boolean[] fillIsWork()
	 * @method \boolean[] getIsWonList()
	 * @method \boolean[] fillIsWon()
	 * @method \boolean[] getIsLoseList()
	 * @method \boolean[] fillIsLose()
	 * @method \int[] getReceivedAmountList()
	 * @method \int[] fillReceivedAmount()
	 * @method \int[] getLostAmountList()
	 * @method \int[] fillLostAmount()
	 * @method \boolean[] getHasProductsList()
	 * @method \boolean[] fillHasProducts()
	 * @method \int[] getCategoryIdList()
	 * @method \int[] fillCategoryId()
	 * @method \string[] getStageSemanticIdList()
	 * @method \string[] fillStageSemanticId()
	 * @method \string[] getSourceIdList()
	 * @method \string[] fillSourceId()
	 * @method \Bitrix\Crm\EO_Status[] getSourceByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getSourceByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillSourceBy()
	 * @method \string[] getSourceDescriptionList()
	 * @method \string[] fillSourceDescription()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 * @method \string[] getOriginIdList()
	 * @method \string[] fillOriginId()
	 * @method \string[] getOrderStageList()
	 * @method \string[] fillOrderStage()
	 * @method \string[] getOriginatorIdList()
	 * @method \string[] fillOriginatorId()
	 * @method \Bitrix\Crm\EO_ExternalSale[] getOriginatorByList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getOriginatorByCollection()
	 * @method \Bitrix\Crm\EO_ExternalSale_Collection fillOriginatorBy()
	 * @method \string[] getLocationIdList()
	 * @method \string[] fillLocationId()
	 * @method \string[] getIsNewList()
	 * @method \string[] fillIsNew()
	 * @method \int[] getWebformIdList()
	 * @method \int[] fillWebformId()
	 * @method \Bitrix\Crm\EO_DealRecur[] getCrmDealRecurringList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getCrmDealRecurringCollection()
	 * @method \Bitrix\Crm\EO_DealRecur_Collection fillCrmDealRecurring()
	 * @method \Bitrix\Crm\EO_ProductRow[] getProductRowList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getProductRowCollection()
	 * @method \Bitrix\Crm\EO_ProductRow_Collection fillProductRow()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory[] getHistoryList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getHistoryCollection()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory_Collection fillHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed[] getFullHistoryList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getFullHistoryCollection()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed_Collection fillFullHistory()
	 * @method \Bitrix\Crm\Binding\EO_DealContact[] getBindingContactList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getBindingContactCollection()
	 * @method \Bitrix\Crm\Binding\EO_DealContact_Collection fillBindingContact()
	 * @method \Bitrix\Crm\EO_Utm[] getUtmSourceList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getUtmSourceCollection()
	 * @method \Bitrix\Crm\EO_Utm_Collection fillUtmSource()
	 * @method \Bitrix\Crm\EO_Utm[] getUtmMediumList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getUtmMediumCollection()
	 * @method \Bitrix\Crm\EO_Utm_Collection fillUtmMedium()
	 * @method \Bitrix\Crm\EO_Utm[] getUtmCampaignList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getUtmCampaignCollection()
	 * @method \Bitrix\Crm\EO_Utm_Collection fillUtmCampaign()
	 * @method \Bitrix\Crm\EO_Utm[] getUtmContentList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getUtmContentCollection()
	 * @method \Bitrix\Crm\EO_Utm_Collection fillUtmContent()
	 * @method \Bitrix\Crm\EO_Utm[] getUtmTermList()
	 * @method \Bitrix\Crm\EO_Deal_Collection getUtmTermCollection()
	 * @method \Bitrix\Crm\EO_Utm_Collection fillUtmTerm()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Deal $object)
	 * @method bool has(\Bitrix\Crm\EO_Deal $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Deal getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Deal[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Deal $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Deal_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Deal current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Deal_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\DealTable */
		static public $dataClass = '\Bitrix\Crm\DealTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Deal_Query query()
	 * @method static EO_Deal_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Deal_Result getById($id)
	 * @method static EO_Deal_Result getList(array $parameters = array())
	 * @method static EO_Deal_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Deal createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Deal_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Deal wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Deal_Collection wakeUpCollection($rows)
	 */
	class DealTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Deal_Result exec()
	 * @method \Bitrix\Crm\EO_Deal fetchObject()
	 * @method \Bitrix\Crm\EO_Deal_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Deal_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Deal fetchObject()
	 * @method \Bitrix\Crm\EO_Deal_Collection fetchCollection()
	 */
	class EO_Deal_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Deal createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Deal_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Deal wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Deal_Collection wakeUpCollection($rows)
	 */
	class EO_Deal_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\DealRecurTable:crm/lib/dealrecur.php:b1a11e76d505f9755940c11a52f5c9f6 */
namespace Bitrix\Crm {
	/**
	 * EO_DealRecur
	 * @see \Bitrix\Crm\DealRecurTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_DealRecur setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getDealId()
	 * @method \Bitrix\Crm\EO_DealRecur setDealId(\int|\Bitrix\Main\DB\SqlExpression $dealId)
	 * @method bool hasDealId()
	 * @method bool isDealIdFilled()
	 * @method bool isDealIdChanged()
	 * @method \int remindActualDealId()
	 * @method \int requireDealId()
	 * @method \Bitrix\Crm\EO_DealRecur resetDealId()
	 * @method \Bitrix\Crm\EO_DealRecur unsetDealId()
	 * @method \int fillDealId()
	 * @method \int getBasedId()
	 * @method \Bitrix\Crm\EO_DealRecur setBasedId(\int|\Bitrix\Main\DB\SqlExpression $basedId)
	 * @method bool hasBasedId()
	 * @method bool isBasedIdFilled()
	 * @method bool isBasedIdChanged()
	 * @method \int remindActualBasedId()
	 * @method \int requireBasedId()
	 * @method \Bitrix\Crm\EO_DealRecur resetBasedId()
	 * @method \Bitrix\Crm\EO_DealRecur unsetBasedId()
	 * @method \int fillBasedId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Crm\EO_DealRecur setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Crm\EO_DealRecur resetActive()
	 * @method \Bitrix\Crm\EO_DealRecur unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getCategoryId()
	 * @method \Bitrix\Crm\EO_DealRecur setCategoryId(\int|\Bitrix\Main\DB\SqlExpression $categoryId)
	 * @method bool hasCategoryId()
	 * @method bool isCategoryIdFilled()
	 * @method bool isCategoryIdChanged()
	 * @method \int remindActualCategoryId()
	 * @method \int requireCategoryId()
	 * @method \Bitrix\Crm\EO_DealRecur resetCategoryId()
	 * @method \Bitrix\Crm\EO_DealRecur unsetCategoryId()
	 * @method \int fillCategoryId()
	 * @method \string getIsLimit()
	 * @method \Bitrix\Crm\EO_DealRecur setIsLimit(\string|\Bitrix\Main\DB\SqlExpression $isLimit)
	 * @method bool hasIsLimit()
	 * @method bool isIsLimitFilled()
	 * @method bool isIsLimitChanged()
	 * @method \string remindActualIsLimit()
	 * @method \string requireIsLimit()
	 * @method \Bitrix\Crm\EO_DealRecur resetIsLimit()
	 * @method \Bitrix\Crm\EO_DealRecur unsetIsLimit()
	 * @method \string fillIsLimit()
	 * @method \int getCounterRepeat()
	 * @method \Bitrix\Crm\EO_DealRecur setCounterRepeat(\int|\Bitrix\Main\DB\SqlExpression $counterRepeat)
	 * @method bool hasCounterRepeat()
	 * @method bool isCounterRepeatFilled()
	 * @method bool isCounterRepeatChanged()
	 * @method \int remindActualCounterRepeat()
	 * @method \int requireCounterRepeat()
	 * @method \Bitrix\Crm\EO_DealRecur resetCounterRepeat()
	 * @method \Bitrix\Crm\EO_DealRecur unsetCounterRepeat()
	 * @method \int fillCounterRepeat()
	 * @method \int getLimitRepeat()
	 * @method \Bitrix\Crm\EO_DealRecur setLimitRepeat(\int|\Bitrix\Main\DB\SqlExpression $limitRepeat)
	 * @method bool hasLimitRepeat()
	 * @method bool isLimitRepeatFilled()
	 * @method bool isLimitRepeatChanged()
	 * @method \int remindActualLimitRepeat()
	 * @method \int requireLimitRepeat()
	 * @method \Bitrix\Crm\EO_DealRecur resetLimitRepeat()
	 * @method \Bitrix\Crm\EO_DealRecur unsetLimitRepeat()
	 * @method \int fillLimitRepeat()
	 * @method \Bitrix\Main\Type\Date getLimitDate()
	 * @method \Bitrix\Crm\EO_DealRecur setLimitDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $limitDate)
	 * @method bool hasLimitDate()
	 * @method bool isLimitDateFilled()
	 * @method bool isLimitDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualLimitDate()
	 * @method \Bitrix\Main\Type\Date requireLimitDate()
	 * @method \Bitrix\Crm\EO_DealRecur resetLimitDate()
	 * @method \Bitrix\Crm\EO_DealRecur unsetLimitDate()
	 * @method \Bitrix\Main\Type\Date fillLimitDate()
	 * @method \Bitrix\Main\Type\Date getStartDate()
	 * @method \Bitrix\Crm\EO_DealRecur setStartDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $startDate)
	 * @method bool hasStartDate()
	 * @method bool isStartDateFilled()
	 * @method bool isStartDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualStartDate()
	 * @method \Bitrix\Main\Type\Date requireStartDate()
	 * @method \Bitrix\Crm\EO_DealRecur resetStartDate()
	 * @method \Bitrix\Crm\EO_DealRecur unsetStartDate()
	 * @method \Bitrix\Main\Type\Date fillStartDate()
	 * @method \Bitrix\Main\Type\Date getNextExecution()
	 * @method \Bitrix\Crm\EO_DealRecur setNextExecution(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $nextExecution)
	 * @method bool hasNextExecution()
	 * @method bool isNextExecutionFilled()
	 * @method bool isNextExecutionChanged()
	 * @method \Bitrix\Main\Type\Date remindActualNextExecution()
	 * @method \Bitrix\Main\Type\Date requireNextExecution()
	 * @method \Bitrix\Crm\EO_DealRecur resetNextExecution()
	 * @method \Bitrix\Crm\EO_DealRecur unsetNextExecution()
	 * @method \Bitrix\Main\Type\Date fillNextExecution()
	 * @method \Bitrix\Main\Type\Date getLastExecution()
	 * @method \Bitrix\Crm\EO_DealRecur setLastExecution(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $lastExecution)
	 * @method bool hasLastExecution()
	 * @method bool isLastExecutionFilled()
	 * @method bool isLastExecutionChanged()
	 * @method \Bitrix\Main\Type\Date remindActualLastExecution()
	 * @method \Bitrix\Main\Type\Date requireLastExecution()
	 * @method \Bitrix\Crm\EO_DealRecur resetLastExecution()
	 * @method \Bitrix\Crm\EO_DealRecur unsetLastExecution()
	 * @method \Bitrix\Main\Type\Date fillLastExecution()
	 * @method \string getParams()
	 * @method \Bitrix\Crm\EO_DealRecur setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Crm\EO_DealRecur resetParams()
	 * @method \Bitrix\Crm\EO_DealRecur unsetParams()
	 * @method \string fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_DealRecur set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_DealRecur reset($fieldName)
	 * @method \Bitrix\Crm\EO_DealRecur unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_DealRecur wakeUp($data)
	 */
	class EO_DealRecur {
		/* @var \Bitrix\Crm\DealRecurTable */
		static public $dataClass = '\Bitrix\Crm\DealRecurTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_DealRecur_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getDealIdList()
	 * @method \int[] fillDealId()
	 * @method \int[] getBasedIdList()
	 * @method \int[] fillBasedId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getCategoryIdList()
	 * @method \int[] fillCategoryId()
	 * @method \string[] getIsLimitList()
	 * @method \string[] fillIsLimit()
	 * @method \int[] getCounterRepeatList()
	 * @method \int[] fillCounterRepeat()
	 * @method \int[] getLimitRepeatList()
	 * @method \int[] fillLimitRepeat()
	 * @method \Bitrix\Main\Type\Date[] getLimitDateList()
	 * @method \Bitrix\Main\Type\Date[] fillLimitDate()
	 * @method \Bitrix\Main\Type\Date[] getStartDateList()
	 * @method \Bitrix\Main\Type\Date[] fillStartDate()
	 * @method \Bitrix\Main\Type\Date[] getNextExecutionList()
	 * @method \Bitrix\Main\Type\Date[] fillNextExecution()
	 * @method \Bitrix\Main\Type\Date[] getLastExecutionList()
	 * @method \Bitrix\Main\Type\Date[] fillLastExecution()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_DealRecur $object)
	 * @method bool has(\Bitrix\Crm\EO_DealRecur $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_DealRecur getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_DealRecur[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_DealRecur $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_DealRecur_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_DealRecur current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DealRecur_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\DealRecurTable */
		static public $dataClass = '\Bitrix\Crm\DealRecurTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_DealRecur_Query query()
	 * @method static EO_DealRecur_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DealRecur_Result getById($id)
	 * @method static EO_DealRecur_Result getList(array $parameters = array())
	 * @method static EO_DealRecur_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_DealRecur createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_DealRecur_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_DealRecur wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_DealRecur_Collection wakeUpCollection($rows)
	 */
	class DealRecurTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DealRecur_Result exec()
	 * @method \Bitrix\Crm\EO_DealRecur fetchObject()
	 * @method \Bitrix\Crm\EO_DealRecur_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DealRecur_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_DealRecur fetchObject()
	 * @method \Bitrix\Crm\EO_DealRecur_Collection fetchCollection()
	 */
	class EO_DealRecur_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_DealRecur createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_DealRecur_Collection createCollection()
	 * @method \Bitrix\Crm\EO_DealRecur wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_DealRecur_Collection wakeUpCollection($rows)
	 */
	class EO_DealRecur_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\EventRelationsTable:crm/lib/event.php:8ae6f67c1541b2e06b20d55b006ee2ff */
namespace Bitrix\Crm {
	/**
	 * EO_EventRelations
	 * @see \Bitrix\Crm\EventRelationsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_EventRelations setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEventId()
	 * @method \Bitrix\Crm\EO_EventRelations setEventId(\int|\Bitrix\Main\DB\SqlExpression $eventId)
	 * @method bool hasEventId()
	 * @method bool isEventIdFilled()
	 * @method bool isEventIdChanged()
	 * @method \Bitrix\Crm\EO_Event getEventBy()
	 * @method \Bitrix\Crm\EO_Event remindActualEventBy()
	 * @method \Bitrix\Crm\EO_Event requireEventBy()
	 * @method \Bitrix\Crm\EO_EventRelations setEventBy(\Bitrix\Crm\EO_Event $object)
	 * @method \Bitrix\Crm\EO_EventRelations resetEventBy()
	 * @method \Bitrix\Crm\EO_EventRelations unsetEventBy()
	 * @method bool hasEventBy()
	 * @method bool isEventByFilled()
	 * @method bool isEventByChanged()
	 * @method \Bitrix\Crm\EO_Event fillEventBy()
	 * @method \string getEntityType()
	 * @method \Bitrix\Crm\EO_EventRelations setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Crm\EO_EventRelations resetEntityType()
	 * @method \Bitrix\Crm\EO_EventRelations unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\EO_EventRelations setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int getAssignedById()
	 * @method \Bitrix\Crm\EO_EventRelations setAssignedById(\int|\Bitrix\Main\DB\SqlExpression $assignedById)
	 * @method bool hasAssignedById()
	 * @method bool isAssignedByIdFilled()
	 * @method bool isAssignedByIdChanged()
	 * @method \int remindActualAssignedById()
	 * @method \int requireAssignedById()
	 * @method \Bitrix\Crm\EO_EventRelations resetAssignedById()
	 * @method \Bitrix\Crm\EO_EventRelations unsetAssignedById()
	 * @method \int fillAssignedById()
	 * @method \Bitrix\Main\EO_User getAssignedBy()
	 * @method \Bitrix\Main\EO_User remindActualAssignedBy()
	 * @method \Bitrix\Main\EO_User requireAssignedBy()
	 * @method \Bitrix\Crm\EO_EventRelations setAssignedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_EventRelations resetAssignedBy()
	 * @method \Bitrix\Crm\EO_EventRelations unsetAssignedBy()
	 * @method bool hasAssignedBy()
	 * @method bool isAssignedByFilled()
	 * @method bool isAssignedByChanged()
	 * @method \Bitrix\Main\EO_User fillAssignedBy()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_EventRelations set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_EventRelations reset($fieldName)
	 * @method \Bitrix\Crm\EO_EventRelations unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_EventRelations wakeUp($data)
	 */
	class EO_EventRelations {
		/* @var \Bitrix\Crm\EventRelationsTable */
		static public $dataClass = '\Bitrix\Crm\EventRelationsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_EventRelations_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEventIdList()
	 * @method \Bitrix\Crm\EO_Event[] getEventByList()
	 * @method \Bitrix\Crm\EO_EventRelations_Collection getEventByCollection()
	 * @method \Bitrix\Crm\EO_Event_Collection fillEventBy()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getEntityIdList()
	 * @method \int[] getAssignedByIdList()
	 * @method \int[] fillAssignedById()
	 * @method \Bitrix\Main\EO_User[] getAssignedByList()
	 * @method \Bitrix\Crm\EO_EventRelations_Collection getAssignedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillAssignedBy()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_EventRelations $object)
	 * @method bool has(\Bitrix\Crm\EO_EventRelations $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_EventRelations getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_EventRelations[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_EventRelations $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_EventRelations_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_EventRelations current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EventRelations_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\EventRelationsTable */
		static public $dataClass = '\Bitrix\Crm\EventRelationsTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_EventRelations_Query query()
	 * @method static EO_EventRelations_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EventRelations_Result getById($id)
	 * @method static EO_EventRelations_Result getList(array $parameters = array())
	 * @method static EO_EventRelations_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_EventRelations createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_EventRelations_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_EventRelations wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_EventRelations_Collection wakeUpCollection($rows)
	 */
	class EventRelationsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_EventRelations_Result exec()
	 * @method \Bitrix\Crm\EO_EventRelations fetchObject()
	 * @method \Bitrix\Crm\EO_EventRelations_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_EventRelations_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_EventRelations fetchObject()
	 * @method \Bitrix\Crm\EO_EventRelations_Collection fetchCollection()
	 */
	class EO_EventRelations_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_EventRelations createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_EventRelations_Collection createCollection()
	 * @method \Bitrix\Crm\EO_EventRelations wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_EventRelations_Collection wakeUpCollection($rows)
	 */
	class EO_EventRelations_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\EventTable:crm/lib/event.php:8ae6f67c1541b2e06b20d55b006ee2ff */
namespace Bitrix\Crm {
	/**
	 * EO_Event
	 * @see \Bitrix\Crm\EventTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Event setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getEventId()
	 * @method \Bitrix\Crm\EO_Event setEventId(\string|\Bitrix\Main\DB\SqlExpression $eventId)
	 * @method bool hasEventId()
	 * @method bool isEventIdFilled()
	 * @method bool isEventIdChanged()
	 * @method \string remindActualEventId()
	 * @method \string requireEventId()
	 * @method \Bitrix\Crm\EO_Event resetEventId()
	 * @method \Bitrix\Crm\EO_Event unsetEventId()
	 * @method \string fillEventId()
	 * @method \Bitrix\Crm\EO_Status getEventBy()
	 * @method \Bitrix\Crm\EO_Status remindActualEventBy()
	 * @method \Bitrix\Crm\EO_Status requireEventBy()
	 * @method \Bitrix\Crm\EO_Event setEventBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Event resetEventBy()
	 * @method \Bitrix\Crm\EO_Event unsetEventBy()
	 * @method bool hasEventBy()
	 * @method bool isEventByFilled()
	 * @method bool isEventByChanged()
	 * @method \Bitrix\Crm\EO_Status fillEventBy()
	 * @method \string getEventName()
	 * @method \Bitrix\Crm\EO_Event setEventName(\string|\Bitrix\Main\DB\SqlExpression $eventName)
	 * @method bool hasEventName()
	 * @method bool isEventNameFilled()
	 * @method bool isEventNameChanged()
	 * @method \string remindActualEventName()
	 * @method \string requireEventName()
	 * @method \Bitrix\Crm\EO_Event resetEventName()
	 * @method \Bitrix\Crm\EO_Event unsetEventName()
	 * @method \string fillEventName()
	 * @method \int getEventType()
	 * @method \Bitrix\Crm\EO_Event setEventType(\int|\Bitrix\Main\DB\SqlExpression $eventType)
	 * @method bool hasEventType()
	 * @method bool isEventTypeFilled()
	 * @method bool isEventTypeChanged()
	 * @method \int remindActualEventType()
	 * @method \int requireEventType()
	 * @method \Bitrix\Crm\EO_Event resetEventType()
	 * @method \Bitrix\Crm\EO_Event unsetEventType()
	 * @method \int fillEventType()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\EO_Event setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\EO_Event resetDateCreate()
	 * @method \Bitrix\Crm\EO_Event unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getCreatedById()
	 * @method \Bitrix\Crm\EO_Event setCreatedById(\int|\Bitrix\Main\DB\SqlExpression $createdById)
	 * @method bool hasCreatedById()
	 * @method bool isCreatedByIdFilled()
	 * @method bool isCreatedByIdChanged()
	 * @method \int remindActualCreatedById()
	 * @method \int requireCreatedById()
	 * @method \Bitrix\Crm\EO_Event resetCreatedById()
	 * @method \Bitrix\Crm\EO_Event unsetCreatedById()
	 * @method \int fillCreatedById()
	 * @method \Bitrix\Main\EO_User getCreatedBy()
	 * @method \Bitrix\Main\EO_User remindActualCreatedBy()
	 * @method \Bitrix\Main\EO_User requireCreatedBy()
	 * @method \Bitrix\Crm\EO_Event setCreatedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Event resetCreatedBy()
	 * @method \Bitrix\Crm\EO_Event unsetCreatedBy()
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedBy()
	 * @method \string getFiles()
	 * @method \Bitrix\Crm\EO_Event setFiles(\string|\Bitrix\Main\DB\SqlExpression $files)
	 * @method bool hasFiles()
	 * @method bool isFilesFilled()
	 * @method bool isFilesChanged()
	 * @method \string remindActualFiles()
	 * @method \string requireFiles()
	 * @method \Bitrix\Crm\EO_Event resetFiles()
	 * @method \Bitrix\Crm\EO_Event unsetFiles()
	 * @method \string fillFiles()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Event set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Event reset($fieldName)
	 * @method \Bitrix\Crm\EO_Event unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Event wakeUp($data)
	 */
	class EO_Event {
		/* @var \Bitrix\Crm\EventTable */
		static public $dataClass = '\Bitrix\Crm\EventTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Event_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getEventIdList()
	 * @method \string[] fillEventId()
	 * @method \Bitrix\Crm\EO_Status[] getEventByList()
	 * @method \Bitrix\Crm\EO_Event_Collection getEventByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillEventBy()
	 * @method \string[] getEventNameList()
	 * @method \string[] fillEventName()
	 * @method \int[] getEventTypeList()
	 * @method \int[] fillEventType()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getCreatedByIdList()
	 * @method \int[] fillCreatedById()
	 * @method \Bitrix\Main\EO_User[] getCreatedByList()
	 * @method \Bitrix\Crm\EO_Event_Collection getCreatedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedBy()
	 * @method \string[] getFilesList()
	 * @method \string[] fillFiles()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Event $object)
	 * @method bool has(\Bitrix\Crm\EO_Event $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Event getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Event[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Event $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Event_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Event current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Event_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\EventTable */
		static public $dataClass = '\Bitrix\Crm\EventTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Event_Query query()
	 * @method static EO_Event_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Event_Result getById($id)
	 * @method static EO_Event_Result getList(array $parameters = array())
	 * @method static EO_Event_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Event createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Event_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Event wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Event_Collection wakeUpCollection($rows)
	 */
	class EventTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Event_Result exec()
	 * @method \Bitrix\Crm\EO_Event fetchObject()
	 * @method \Bitrix\Crm\EO_Event_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Event_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Event fetchObject()
	 * @method \Bitrix\Crm\EO_Event_Collection fetchCollection()
	 */
	class EO_Event_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Event createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Event_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Event wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Event_Collection wakeUpCollection($rows)
	 */
	class EO_Event_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Exclusion\Entity\ExclusionTable:crm/lib/exclusion/entity/exclusion.php:cd7f917fadfd3b370a6eed0aa48d52f8 */
namespace Bitrix\Crm\Exclusion\Entity {
	/**
	 * EO_Exclusion
	 * @see \Bitrix\Crm\Exclusion\Entity\ExclusionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion resetDateInsert()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion resetTypeId()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion resetCode()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion unsetCode()
	 * @method \string fillCode()
	 * @method \string getComment()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion setComment(\string|\Bitrix\Main\DB\SqlExpression $comment)
	 * @method bool hasComment()
	 * @method bool isCommentFilled()
	 * @method bool isCommentChanged()
	 * @method \string remindActualComment()
	 * @method \string requireComment()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion resetComment()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion unsetComment()
	 * @method \string fillComment()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion set($fieldName, $value)
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion reset($fieldName)
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Exclusion\Entity\EO_Exclusion wakeUp($data)
	 */
	class EO_Exclusion {
		/* @var \Bitrix\Crm\Exclusion\Entity\ExclusionTable */
		static public $dataClass = '\Bitrix\Crm\Exclusion\Entity\ExclusionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Exclusion\Entity {
	/**
	 * EO_Exclusion_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getCommentList()
	 * @method \string[] fillComment()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Exclusion\Entity\EO_Exclusion $object)
	 * @method bool has(\Bitrix\Crm\Exclusion\Entity\EO_Exclusion $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion getByPrimary($primary)
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion[] getAll()
	 * @method bool remove(\Bitrix\Crm\Exclusion\Entity\EO_Exclusion $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Exclusion\Entity\EO_Exclusion_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Exclusion_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Exclusion\Entity\ExclusionTable */
		static public $dataClass = '\Bitrix\Crm\Exclusion\Entity\ExclusionTable';
	}
}
namespace Bitrix\Crm\Exclusion\Entity {
	/**
	 * @method static EO_Exclusion_Query query()
	 * @method static EO_Exclusion_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Exclusion_Result getById($id)
	 * @method static EO_Exclusion_Result getList(array $parameters = array())
	 * @method static EO_Exclusion_Entity getEntity()
	 * @method static \Bitrix\Crm\Exclusion\Entity\EO_Exclusion createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Exclusion\Entity\EO_Exclusion_Collection createCollection()
	 * @method static \Bitrix\Crm\Exclusion\Entity\EO_Exclusion wakeUpObject($row)
	 * @method static \Bitrix\Crm\Exclusion\Entity\EO_Exclusion_Collection wakeUpCollection($rows)
	 */
	class ExclusionTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Exclusion_Result exec()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion fetchObject()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Exclusion_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion fetchObject()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion_Collection fetchCollection()
	 */
	class EO_Exclusion_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion_Collection createCollection()
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion wakeUpObject($row)
	 * @method \Bitrix\Crm\Exclusion\Entity\EO_Exclusion_Collection wakeUpCollection($rows)
	 */
	class EO_Exclusion_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\ExternalChannelConnectorTable:crm/lib/externalchannelconnector.php:099323ae62bdec2219bad8a5b29f1182 */
namespace Bitrix\Crm {
	/**
	 * EO_ExternalChannelConnector
	 * @see \Bitrix\Crm\ExternalChannelConnectorTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getTypeId()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector setTypeId(\string|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector resetName()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector unsetName()
	 * @method \string fillName()
	 * @method \string getAppId()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector setAppId(\string|\Bitrix\Main\DB\SqlExpression $appId)
	 * @method bool hasAppId()
	 * @method bool isAppIdFilled()
	 * @method bool isAppIdChanged()
	 * @method \string remindActualAppId()
	 * @method \string requireAppId()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector resetAppId()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector unsetAppId()
	 * @method \string fillAppId()
	 * @method \string getChannelId()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector setChannelId(\string|\Bitrix\Main\DB\SqlExpression $channelId)
	 * @method bool hasChannelId()
	 * @method bool isChannelIdFilled()
	 * @method bool isChannelIdChanged()
	 * @method \string remindActualChannelId()
	 * @method \string requireChannelId()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector resetChannelId()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector unsetChannelId()
	 * @method \string fillChannelId()
	 * @method \string getOriginatorId()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector setOriginatorId(\string|\Bitrix\Main\DB\SqlExpression $originatorId)
	 * @method bool hasOriginatorId()
	 * @method bool isOriginatorIdFilled()
	 * @method bool isOriginatorIdChanged()
	 * @method \string getExternalServerHost()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector setExternalServerHost(\string|\Bitrix\Main\DB\SqlExpression $externalServerHost)
	 * @method bool hasExternalServerHost()
	 * @method bool isExternalServerHostFilled()
	 * @method bool isExternalServerHostChanged()
	 * @method \string remindActualExternalServerHost()
	 * @method \string requireExternalServerHost()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector resetExternalServerHost()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector unsetExternalServerHost()
	 * @method \string fillExternalServerHost()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector reset($fieldName)
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_ExternalChannelConnector wakeUp($data)
	 */
	class EO_ExternalChannelConnector {
		/* @var \Bitrix\Crm\ExternalChannelConnectorTable */
		static public $dataClass = '\Bitrix\Crm\ExternalChannelConnectorTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_ExternalChannelConnector_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getTypeIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getAppIdList()
	 * @method \string[] fillAppId()
	 * @method \string[] getChannelIdList()
	 * @method \string[] fillChannelId()
	 * @method \string[] getOriginatorIdList()
	 * @method \string[] getExternalServerHostList()
	 * @method \string[] fillExternalServerHost()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_ExternalChannelConnector $object)
	 * @method bool has(\Bitrix\Crm\EO_ExternalChannelConnector $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_ExternalChannelConnector $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_ExternalChannelConnector_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ExternalChannelConnector_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\ExternalChannelConnectorTable */
		static public $dataClass = '\Bitrix\Crm\ExternalChannelConnectorTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_ExternalChannelConnector_Query query()
	 * @method static EO_ExternalChannelConnector_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ExternalChannelConnector_Result getById($id)
	 * @method static EO_ExternalChannelConnector_Result getList(array $parameters = array())
	 * @method static EO_ExternalChannelConnector_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_ExternalChannelConnector createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_ExternalChannelConnector_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_ExternalChannelConnector wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_ExternalChannelConnector_Collection wakeUpCollection($rows)
	 */
	class ExternalChannelConnectorTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ExternalChannelConnector_Result exec()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector fetchObject()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ExternalChannelConnector_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector fetchObject()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector_Collection fetchCollection()
	 */
	class EO_ExternalChannelConnector_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector_Collection createCollection()
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_ExternalChannelConnector_Collection wakeUpCollection($rows)
	 */
	class EO_ExternalChannelConnector_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\ExternalSaleTable:crm/lib/externalsale.php:ac0645895782de68a27144a37f62c37e */
namespace Bitrix\Crm {
	/**
	 * EO_ExternalSale
	 * @see \Bitrix\Crm\ExternalSaleTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_ExternalSale setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_ExternalSale setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_ExternalSale resetName()
	 * @method \Bitrix\Crm\EO_ExternalSale unsetName()
	 * @method \string fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_ExternalSale set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_ExternalSale reset($fieldName)
	 * @method \Bitrix\Crm\EO_ExternalSale unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_ExternalSale wakeUp($data)
	 */
	class EO_ExternalSale {
		/* @var \Bitrix\Crm\ExternalSaleTable */
		static public $dataClass = '\Bitrix\Crm\ExternalSaleTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_ExternalSale_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_ExternalSale $object)
	 * @method bool has(\Bitrix\Crm\EO_ExternalSale $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_ExternalSale getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_ExternalSale[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_ExternalSale $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_ExternalSale_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_ExternalSale current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ExternalSale_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\ExternalSaleTable */
		static public $dataClass = '\Bitrix\Crm\ExternalSaleTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_ExternalSale_Query query()
	 * @method static EO_ExternalSale_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ExternalSale_Result getById($id)
	 * @method static EO_ExternalSale_Result getList(array $parameters = array())
	 * @method static EO_ExternalSale_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_ExternalSale createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_ExternalSale_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_ExternalSale wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_ExternalSale_Collection wakeUpCollection($rows)
	 */
	class ExternalSaleTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ExternalSale_Result exec()
	 * @method \Bitrix\Crm\EO_ExternalSale fetchObject()
	 * @method \Bitrix\Crm\EO_ExternalSale_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ExternalSale_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_ExternalSale fetchObject()
	 * @method \Bitrix\Crm\EO_ExternalSale_Collection fetchCollection()
	 */
	class EO_ExternalSale_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_ExternalSale createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_ExternalSale_Collection createCollection()
	 * @method \Bitrix\Crm\EO_ExternalSale wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_ExternalSale_Collection wakeUpCollection($rows)
	 */
	class EO_ExternalSale_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\FieldMultiTable:crm/lib/fieldmulti.php:ee4df1a1930a910b3fd1732b9b8935a5 */
namespace Bitrix\Crm {
	/**
	 * EO_FieldMulti
	 * @see \Bitrix\Crm\FieldMultiTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_FieldMulti setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getEntityId()
	 * @method \Bitrix\Crm\EO_FieldMulti setEntityId(\string|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \string remindActualEntityId()
	 * @method \string requireEntityId()
	 * @method \Bitrix\Crm\EO_FieldMulti resetEntityId()
	 * @method \Bitrix\Crm\EO_FieldMulti unsetEntityId()
	 * @method \string fillEntityId()
	 * @method \int getElementId()
	 * @method \Bitrix\Crm\EO_FieldMulti setElementId(\int|\Bitrix\Main\DB\SqlExpression $elementId)
	 * @method bool hasElementId()
	 * @method bool isElementIdFilled()
	 * @method bool isElementIdChanged()
	 * @method \int remindActualElementId()
	 * @method \int requireElementId()
	 * @method \Bitrix\Crm\EO_FieldMulti resetElementId()
	 * @method \Bitrix\Crm\EO_FieldMulti unsetElementId()
	 * @method \int fillElementId()
	 * @method \string getTypeId()
	 * @method \Bitrix\Crm\EO_FieldMulti setTypeId(\string|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string remindActualTypeId()
	 * @method \string requireTypeId()
	 * @method \Bitrix\Crm\EO_FieldMulti resetTypeId()
	 * @method \Bitrix\Crm\EO_FieldMulti unsetTypeId()
	 * @method \string fillTypeId()
	 * @method \string getValueType()
	 * @method \Bitrix\Crm\EO_FieldMulti setValueType(\string|\Bitrix\Main\DB\SqlExpression $valueType)
	 * @method bool hasValueType()
	 * @method bool isValueTypeFilled()
	 * @method bool isValueTypeChanged()
	 * @method \string remindActualValueType()
	 * @method \string requireValueType()
	 * @method \Bitrix\Crm\EO_FieldMulti resetValueType()
	 * @method \Bitrix\Crm\EO_FieldMulti unsetValueType()
	 * @method \string fillValueType()
	 * @method \string getComplexId()
	 * @method \Bitrix\Crm\EO_FieldMulti setComplexId(\string|\Bitrix\Main\DB\SqlExpression $complexId)
	 * @method bool hasComplexId()
	 * @method bool isComplexIdFilled()
	 * @method bool isComplexIdChanged()
	 * @method \string remindActualComplexId()
	 * @method \string requireComplexId()
	 * @method \Bitrix\Crm\EO_FieldMulti resetComplexId()
	 * @method \Bitrix\Crm\EO_FieldMulti unsetComplexId()
	 * @method \string fillComplexId()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\EO_FieldMulti setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\EO_FieldMulti resetValue()
	 * @method \Bitrix\Crm\EO_FieldMulti unsetValue()
	 * @method \string fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_FieldMulti set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_FieldMulti reset($fieldName)
	 * @method \Bitrix\Crm\EO_FieldMulti unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_FieldMulti wakeUp($data)
	 */
	class EO_FieldMulti {
		/* @var \Bitrix\Crm\FieldMultiTable */
		static public $dataClass = '\Bitrix\Crm\FieldMultiTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_FieldMulti_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getEntityIdList()
	 * @method \string[] fillEntityId()
	 * @method \int[] getElementIdList()
	 * @method \int[] fillElementId()
	 * @method \string[] getTypeIdList()
	 * @method \string[] fillTypeId()
	 * @method \string[] getValueTypeList()
	 * @method \string[] fillValueType()
	 * @method \string[] getComplexIdList()
	 * @method \string[] fillComplexId()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_FieldMulti $object)
	 * @method bool has(\Bitrix\Crm\EO_FieldMulti $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_FieldMulti getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_FieldMulti[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_FieldMulti $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_FieldMulti_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_FieldMulti current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_FieldMulti_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\FieldMultiTable */
		static public $dataClass = '\Bitrix\Crm\FieldMultiTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_FieldMulti_Query query()
	 * @method static EO_FieldMulti_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_FieldMulti_Result getById($id)
	 * @method static EO_FieldMulti_Result getList(array $parameters = array())
	 * @method static EO_FieldMulti_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_FieldMulti createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_FieldMulti_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_FieldMulti wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_FieldMulti_Collection wakeUpCollection($rows)
	 */
	class FieldMultiTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_FieldMulti_Result exec()
	 * @method \Bitrix\Crm\EO_FieldMulti fetchObject()
	 * @method \Bitrix\Crm\EO_FieldMulti_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_FieldMulti_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_FieldMulti fetchObject()
	 * @method \Bitrix\Crm\EO_FieldMulti_Collection fetchCollection()
	 */
	class EO_FieldMulti_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_FieldMulti createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_FieldMulti_Collection createCollection()
	 * @method \Bitrix\Crm\EO_FieldMulti wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_FieldMulti_Collection wakeUpCollection($rows)
	 */
	class EO_FieldMulti_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\History\Entity\DealStageHistoryTable:crm/lib/history/entity/dealstagehistory.php:07056127d808bf146c145a748dc196a1 */
namespace Bitrix\Crm\History\Entity {
	/**
	 * EO_DealStageHistory
	 * @see \Bitrix\Crm\History\Entity\DealStageHistoryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetTypeId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \Bitrix\Main\Type\Date getEffectiveDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setEffectiveDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $effectiveDate)
	 * @method bool hasEffectiveDate()
	 * @method bool isEffectiveDateFilled()
	 * @method bool isEffectiveDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualEffectiveDate()
	 * @method \Bitrix\Main\Type\Date requireEffectiveDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetEffectiveDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetEffectiveDate()
	 * @method \Bitrix\Main\Type\Date fillEffectiveDate()
	 * @method \Bitrix\Main\Type\Date getStartDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setStartDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $startDate)
	 * @method bool hasStartDate()
	 * @method bool isStartDateFilled()
	 * @method bool isStartDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualStartDate()
	 * @method \Bitrix\Main\Type\Date requireStartDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetStartDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetStartDate()
	 * @method \Bitrix\Main\Type\Date fillStartDate()
	 * @method \Bitrix\Main\Type\Date getEndDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setEndDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $endDate)
	 * @method bool hasEndDate()
	 * @method bool isEndDateFilled()
	 * @method bool isEndDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualEndDate()
	 * @method \Bitrix\Main\Type\Date requireEndDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetEndDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetEndDate()
	 * @method \Bitrix\Main\Type\Date fillEndDate()
	 * @method \int getPeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setPeriodYear(\int|\Bitrix\Main\DB\SqlExpression $periodYear)
	 * @method bool hasPeriodYear()
	 * @method bool isPeriodYearFilled()
	 * @method bool isPeriodYearChanged()
	 * @method \int remindActualPeriodYear()
	 * @method \int requirePeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetPeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetPeriodYear()
	 * @method \int fillPeriodYear()
	 * @method \int getPeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setPeriodQuarter(\int|\Bitrix\Main\DB\SqlExpression $periodQuarter)
	 * @method bool hasPeriodQuarter()
	 * @method bool isPeriodQuarterFilled()
	 * @method bool isPeriodQuarterChanged()
	 * @method \int remindActualPeriodQuarter()
	 * @method \int requirePeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetPeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetPeriodQuarter()
	 * @method \int fillPeriodQuarter()
	 * @method \int getPeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setPeriodMonth(\int|\Bitrix\Main\DB\SqlExpression $periodMonth)
	 * @method bool hasPeriodMonth()
	 * @method bool isPeriodMonthFilled()
	 * @method bool isPeriodMonthChanged()
	 * @method \int remindActualPeriodMonth()
	 * @method \int requirePeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetPeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetPeriodMonth()
	 * @method \int fillPeriodMonth()
	 * @method \int getStartPeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setStartPeriodYear(\int|\Bitrix\Main\DB\SqlExpression $startPeriodYear)
	 * @method bool hasStartPeriodYear()
	 * @method bool isStartPeriodYearFilled()
	 * @method bool isStartPeriodYearChanged()
	 * @method \int remindActualStartPeriodYear()
	 * @method \int requireStartPeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetStartPeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetStartPeriodYear()
	 * @method \int fillStartPeriodYear()
	 * @method \int getStartPeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setStartPeriodQuarter(\int|\Bitrix\Main\DB\SqlExpression $startPeriodQuarter)
	 * @method bool hasStartPeriodQuarter()
	 * @method bool isStartPeriodQuarterFilled()
	 * @method bool isStartPeriodQuarterChanged()
	 * @method \int remindActualStartPeriodQuarter()
	 * @method \int requireStartPeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetStartPeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetStartPeriodQuarter()
	 * @method \int fillStartPeriodQuarter()
	 * @method \int getStartPeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setStartPeriodMonth(\int|\Bitrix\Main\DB\SqlExpression $startPeriodMonth)
	 * @method bool hasStartPeriodMonth()
	 * @method bool isStartPeriodMonthFilled()
	 * @method bool isStartPeriodMonthChanged()
	 * @method \int remindActualStartPeriodMonth()
	 * @method \int requireStartPeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetStartPeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetStartPeriodMonth()
	 * @method \int fillStartPeriodMonth()
	 * @method \int getEndPeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setEndPeriodYear(\int|\Bitrix\Main\DB\SqlExpression $endPeriodYear)
	 * @method bool hasEndPeriodYear()
	 * @method bool isEndPeriodYearFilled()
	 * @method bool isEndPeriodYearChanged()
	 * @method \int remindActualEndPeriodYear()
	 * @method \int requireEndPeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetEndPeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetEndPeriodYear()
	 * @method \int fillEndPeriodYear()
	 * @method \int getEndPeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setEndPeriodQuarter(\int|\Bitrix\Main\DB\SqlExpression $endPeriodQuarter)
	 * @method bool hasEndPeriodQuarter()
	 * @method bool isEndPeriodQuarterFilled()
	 * @method bool isEndPeriodQuarterChanged()
	 * @method \int remindActualEndPeriodQuarter()
	 * @method \int requireEndPeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetEndPeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetEndPeriodQuarter()
	 * @method \int fillEndPeriodQuarter()
	 * @method \int getEndPeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setEndPeriodMonth(\int|\Bitrix\Main\DB\SqlExpression $endPeriodMonth)
	 * @method bool hasEndPeriodMonth()
	 * @method bool isEndPeriodMonthFilled()
	 * @method bool isEndPeriodMonthChanged()
	 * @method \int remindActualEndPeriodMonth()
	 * @method \int requireEndPeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetEndPeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetEndPeriodMonth()
	 * @method \int fillEndPeriodMonth()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetResponsibleId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getCategoryId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setCategoryId(\int|\Bitrix\Main\DB\SqlExpression $categoryId)
	 * @method bool hasCategoryId()
	 * @method bool isCategoryIdFilled()
	 * @method bool isCategoryIdChanged()
	 * @method \int remindActualCategoryId()
	 * @method \int requireCategoryId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetCategoryId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetCategoryId()
	 * @method \int fillCategoryId()
	 * @method \string getStageSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setStageSemanticId(\string|\Bitrix\Main\DB\SqlExpression $stageSemanticId)
	 * @method bool hasStageSemanticId()
	 * @method bool isStageSemanticIdFilled()
	 * @method bool isStageSemanticIdChanged()
	 * @method \string remindActualStageSemanticId()
	 * @method \string requireStageSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetStageSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetStageSemanticId()
	 * @method \string fillStageSemanticId()
	 * @method \string getStageId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setStageId(\string|\Bitrix\Main\DB\SqlExpression $stageId)
	 * @method bool hasStageId()
	 * @method bool isStageIdFilled()
	 * @method bool isStageIdChanged()
	 * @method \string remindActualStageId()
	 * @method \string requireStageId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetStageId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetStageId()
	 * @method \string fillStageId()
	 * @method \boolean getIsLost()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory setIsLost(\boolean|\Bitrix\Main\DB\SqlExpression $isLost)
	 * @method bool hasIsLost()
	 * @method bool isIsLostFilled()
	 * @method bool isIsLostChanged()
	 * @method \boolean remindActualIsLost()
	 * @method \boolean requireIsLost()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory resetIsLost()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unsetIsLost()
	 * @method \boolean fillIsLost()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory set($fieldName, $value)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory reset($fieldName)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistory wakeUp($data)
	 */
	class EO_DealStageHistory {
		/* @var \Bitrix\Crm\History\Entity\DealStageHistoryTable */
		static public $dataClass = '\Bitrix\Crm\History\Entity\DealStageHistoryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\History\Entity {
	/**
	 * EO_DealStageHistory_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \Bitrix\Main\Type\Date[] getEffectiveDateList()
	 * @method \Bitrix\Main\Type\Date[] fillEffectiveDate()
	 * @method \Bitrix\Main\Type\Date[] getStartDateList()
	 * @method \Bitrix\Main\Type\Date[] fillStartDate()
	 * @method \Bitrix\Main\Type\Date[] getEndDateList()
	 * @method \Bitrix\Main\Type\Date[] fillEndDate()
	 * @method \int[] getPeriodYearList()
	 * @method \int[] fillPeriodYear()
	 * @method \int[] getPeriodQuarterList()
	 * @method \int[] fillPeriodQuarter()
	 * @method \int[] getPeriodMonthList()
	 * @method \int[] fillPeriodMonth()
	 * @method \int[] getStartPeriodYearList()
	 * @method \int[] fillStartPeriodYear()
	 * @method \int[] getStartPeriodQuarterList()
	 * @method \int[] fillStartPeriodQuarter()
	 * @method \int[] getStartPeriodMonthList()
	 * @method \int[] fillStartPeriodMonth()
	 * @method \int[] getEndPeriodYearList()
	 * @method \int[] fillEndPeriodYear()
	 * @method \int[] getEndPeriodQuarterList()
	 * @method \int[] fillEndPeriodQuarter()
	 * @method \int[] getEndPeriodMonthList()
	 * @method \int[] fillEndPeriodMonth()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getCategoryIdList()
	 * @method \int[] fillCategoryId()
	 * @method \string[] getStageSemanticIdList()
	 * @method \string[] fillStageSemanticId()
	 * @method \string[] getStageIdList()
	 * @method \string[] fillStageId()
	 * @method \boolean[] getIsLostList()
	 * @method \boolean[] fillIsLost()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\History\Entity\EO_DealStageHistory $object)
	 * @method bool has(\Bitrix\Crm\History\Entity\EO_DealStageHistory $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory getByPrimary($primary)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory[] getAll()
	 * @method bool remove(\Bitrix\Crm\History\Entity\EO_DealStageHistory $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistory_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DealStageHistory_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\History\Entity\DealStageHistoryTable */
		static public $dataClass = '\Bitrix\Crm\History\Entity\DealStageHistoryTable';
	}
}
namespace Bitrix\Crm\History\Entity {
	/**
	 * @method static EO_DealStageHistory_Query query()
	 * @method static EO_DealStageHistory_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DealStageHistory_Result getById($id)
	 * @method static EO_DealStageHistory_Result getList(array $parameters = array())
	 * @method static EO_DealStageHistory_Entity getEntity()
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistory createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistory_Collection createCollection()
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistory wakeUpObject($row)
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistory_Collection wakeUpCollection($rows)
	 */
	class DealStageHistoryTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DealStageHistory_Result exec()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory fetchObject()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DealStageHistory_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory fetchObject()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory_Collection fetchCollection()
	 */
	class EO_DealStageHistory_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory_Collection createCollection()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory wakeUpObject($row)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistory_Collection wakeUpCollection($rows)
	 */
	class EO_DealStageHistory_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\History\Entity\DealStageHistoryWithSupposedTable:crm/lib/history/entity/dealstagehistorywithsupposed.php:b6161423a94bef40b3e5e7be90b47cc7 */
namespace Bitrix\Crm\History\Entity {
	/**
	 * EO_DealStageHistoryWithSupposed
	 * @see \Bitrix\Crm\History\Entity\DealStageHistoryWithSupposedTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \int getCategoryId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setCategoryId(\int|\Bitrix\Main\DB\SqlExpression $categoryId)
	 * @method bool hasCategoryId()
	 * @method bool isCategoryIdFilled()
	 * @method bool isCategoryIdChanged()
	 * @method \int remindActualCategoryId()
	 * @method \int requireCategoryId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetCategoryId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetCategoryId()
	 * @method \int fillCategoryId()
	 * @method \string getStageSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setStageSemanticId(\string|\Bitrix\Main\DB\SqlExpression $stageSemanticId)
	 * @method bool hasStageSemanticId()
	 * @method bool isStageSemanticIdFilled()
	 * @method bool isStageSemanticIdChanged()
	 * @method \string remindActualStageSemanticId()
	 * @method \string requireStageSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetStageSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetStageSemanticId()
	 * @method \string fillStageSemanticId()
	 * @method \string getStageId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setStageId(\string|\Bitrix\Main\DB\SqlExpression $stageId)
	 * @method bool hasStageId()
	 * @method bool isStageIdFilled()
	 * @method bool isStageIdChanged()
	 * @method \string remindActualStageId()
	 * @method \string requireStageId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetStageId()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetStageId()
	 * @method \string fillStageId()
	 * @method \string getIsLost()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setIsLost(\string|\Bitrix\Main\DB\SqlExpression $isLost)
	 * @method bool hasIsLost()
	 * @method bool isIsLostFilled()
	 * @method bool isIsLostChanged()
	 * @method \string remindActualIsLost()
	 * @method \string requireIsLost()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetIsLost()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetIsLost()
	 * @method \string fillIsLost()
	 * @method \string getIsSupposed()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setIsSupposed(\string|\Bitrix\Main\DB\SqlExpression $isSupposed)
	 * @method bool hasIsSupposed()
	 * @method bool isIsSupposedFilled()
	 * @method bool isIsSupposedChanged()
	 * @method \string remindActualIsSupposed()
	 * @method \string requireIsSupposed()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetIsSupposed()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetIsSupposed()
	 * @method \string fillIsSupposed()
	 * @method \Bitrix\Main\Type\Date getLastUpdateDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setLastUpdateDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $lastUpdateDate)
	 * @method bool hasLastUpdateDate()
	 * @method bool isLastUpdateDateFilled()
	 * @method bool isLastUpdateDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualLastUpdateDate()
	 * @method \Bitrix\Main\Type\Date requireLastUpdateDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetLastUpdateDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetLastUpdateDate()
	 * @method \Bitrix\Main\Type\Date fillLastUpdateDate()
	 * @method \Bitrix\Main\Type\Date getCloseDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setCloseDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $closeDate)
	 * @method bool hasCloseDate()
	 * @method bool isCloseDateFilled()
	 * @method bool isCloseDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCloseDate()
	 * @method \Bitrix\Main\Type\Date requireCloseDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetCloseDate()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetCloseDate()
	 * @method \Bitrix\Main\Type\Date fillCloseDate()
	 * @method \int getSpentTime()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed setSpentTime(\int|\Bitrix\Main\DB\SqlExpression $spentTime)
	 * @method bool hasSpentTime()
	 * @method bool isSpentTimeFilled()
	 * @method bool isSpentTimeChanged()
	 * @method \int remindActualSpentTime()
	 * @method \int requireSpentTime()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed resetSpentTime()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unsetSpentTime()
	 * @method \int fillSpentTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed set($fieldName, $value)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed reset($fieldName)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed wakeUp($data)
	 */
	class EO_DealStageHistoryWithSupposed {
		/* @var \Bitrix\Crm\History\Entity\DealStageHistoryWithSupposedTable */
		static public $dataClass = '\Bitrix\Crm\History\Entity\DealStageHistoryWithSupposedTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\History\Entity {
	/**
	 * EO_DealStageHistoryWithSupposed_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \int[] getCategoryIdList()
	 * @method \int[] fillCategoryId()
	 * @method \string[] getStageSemanticIdList()
	 * @method \string[] fillStageSemanticId()
	 * @method \string[] getStageIdList()
	 * @method \string[] fillStageId()
	 * @method \string[] getIsLostList()
	 * @method \string[] fillIsLost()
	 * @method \string[] getIsSupposedList()
	 * @method \string[] fillIsSupposed()
	 * @method \Bitrix\Main\Type\Date[] getLastUpdateDateList()
	 * @method \Bitrix\Main\Type\Date[] fillLastUpdateDate()
	 * @method \Bitrix\Main\Type\Date[] getCloseDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCloseDate()
	 * @method \int[] getSpentTimeList()
	 * @method \int[] fillSpentTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed $object)
	 * @method bool has(\Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed getByPrimary($primary)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed[] getAll()
	 * @method bool remove(\Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DealStageHistoryWithSupposed_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\History\Entity\DealStageHistoryWithSupposedTable */
		static public $dataClass = '\Bitrix\Crm\History\Entity\DealStageHistoryWithSupposedTable';
	}
}
namespace Bitrix\Crm\History\Entity {
	/**
	 * @method static EO_DealStageHistoryWithSupposed_Query query()
	 * @method static EO_DealStageHistoryWithSupposed_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DealStageHistoryWithSupposed_Result getById($id)
	 * @method static EO_DealStageHistoryWithSupposed_Result getList(array $parameters = array())
	 * @method static EO_DealStageHistoryWithSupposed_Entity getEntity()
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed_Collection createCollection()
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed wakeUpObject($row)
	 * @method static \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed_Collection wakeUpCollection($rows)
	 */
	class DealStageHistoryWithSupposedTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DealStageHistoryWithSupposed_Result exec()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed fetchObject()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DealStageHistoryWithSupposed_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed fetchObject()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed_Collection fetchCollection()
	 */
	class EO_DealStageHistoryWithSupposed_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed_Collection createCollection()
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed wakeUpObject($row)
	 * @method \Bitrix\Crm\History\Entity\EO_DealStageHistoryWithSupposed_Collection wakeUpCollection($rows)
	 */
	class EO_DealStageHistoryWithSupposed_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\History\Entity\InvoiceStatusHistoryTable:crm/lib/history/entity/invoicestatushistory.php:289651655a992f6b45073f5bfb32b3a9 */
namespace Bitrix\Crm\History\Entity {
	/**
	 * EO_InvoiceStatusHistory
	 * @see \Bitrix\Crm\History\Entity\InvoiceStatusHistoryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetTypeId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \Bitrix\Main\Type\Date getBillDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setBillDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $billDate)
	 * @method bool hasBillDate()
	 * @method bool isBillDateFilled()
	 * @method bool isBillDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualBillDate()
	 * @method \Bitrix\Main\Type\Date requireBillDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetBillDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetBillDate()
	 * @method \Bitrix\Main\Type\Date fillBillDate()
	 * @method \Bitrix\Main\Type\Date getPayBeforeDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setPayBeforeDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $payBeforeDate)
	 * @method bool hasPayBeforeDate()
	 * @method bool isPayBeforeDateFilled()
	 * @method bool isPayBeforeDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPayBeforeDate()
	 * @method \Bitrix\Main\Type\Date requirePayBeforeDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetPayBeforeDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetPayBeforeDate()
	 * @method \Bitrix\Main\Type\Date fillPayBeforeDate()
	 * @method \Bitrix\Main\Type\Date getActivityDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setActivityDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $activityDate)
	 * @method bool hasActivityDate()
	 * @method bool isActivityDateFilled()
	 * @method bool isActivityDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualActivityDate()
	 * @method \Bitrix\Main\Type\Date requireActivityDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetActivityDate()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetActivityDate()
	 * @method \Bitrix\Main\Type\Date fillActivityDate()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetResponsibleId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \string getStatusSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setStatusSemanticId(\string|\Bitrix\Main\DB\SqlExpression $statusSemanticId)
	 * @method bool hasStatusSemanticId()
	 * @method bool isStatusSemanticIdFilled()
	 * @method bool isStatusSemanticIdChanged()
	 * @method \string remindActualStatusSemanticId()
	 * @method \string requireStatusSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetStatusSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetStatusSemanticId()
	 * @method \string fillStatusSemanticId()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetStatusId()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \boolean getIsNew()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setIsNew(\boolean|\Bitrix\Main\DB\SqlExpression $isNew)
	 * @method bool hasIsNew()
	 * @method bool isIsNewFilled()
	 * @method bool isIsNewChanged()
	 * @method \boolean remindActualIsNew()
	 * @method \boolean requireIsNew()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetIsNew()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetIsNew()
	 * @method \boolean fillIsNew()
	 * @method \boolean getIsJunk()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory setIsJunk(\boolean|\Bitrix\Main\DB\SqlExpression $isJunk)
	 * @method bool hasIsJunk()
	 * @method bool isIsJunkFilled()
	 * @method bool isIsJunkChanged()
	 * @method \boolean remindActualIsJunk()
	 * @method \boolean requireIsJunk()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory resetIsJunk()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unsetIsJunk()
	 * @method \boolean fillIsJunk()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory set($fieldName, $value)
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory reset($fieldName)
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory wakeUp($data)
	 */
	class EO_InvoiceStatusHistory {
		/* @var \Bitrix\Crm\History\Entity\InvoiceStatusHistoryTable */
		static public $dataClass = '\Bitrix\Crm\History\Entity\InvoiceStatusHistoryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\History\Entity {
	/**
	 * EO_InvoiceStatusHistory_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \Bitrix\Main\Type\Date[] getBillDateList()
	 * @method \Bitrix\Main\Type\Date[] fillBillDate()
	 * @method \Bitrix\Main\Type\Date[] getPayBeforeDateList()
	 * @method \Bitrix\Main\Type\Date[] fillPayBeforeDate()
	 * @method \Bitrix\Main\Type\Date[] getActivityDateList()
	 * @method \Bitrix\Main\Type\Date[] fillActivityDate()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \string[] getStatusSemanticIdList()
	 * @method \string[] fillStatusSemanticId()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \boolean[] getIsNewList()
	 * @method \boolean[] fillIsNew()
	 * @method \boolean[] getIsJunkList()
	 * @method \boolean[] fillIsJunk()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory $object)
	 * @method bool has(\Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory getByPrimary($primary)
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory[] getAll()
	 * @method bool remove(\Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceStatusHistory_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\History\Entity\InvoiceStatusHistoryTable */
		static public $dataClass = '\Bitrix\Crm\History\Entity\InvoiceStatusHistoryTable';
	}
}
namespace Bitrix\Crm\History\Entity {
	/**
	 * @method static EO_InvoiceStatusHistory_Query query()
	 * @method static EO_InvoiceStatusHistory_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceStatusHistory_Result getById($id)
	 * @method static EO_InvoiceStatusHistory_Result getList(array $parameters = array())
	 * @method static EO_InvoiceStatusHistory_Entity getEntity()
	 * @method static \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory_Collection createCollection()
	 * @method static \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory wakeUpObject($row)
	 * @method static \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory_Collection wakeUpCollection($rows)
	 */
	class InvoiceStatusHistoryTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceStatusHistory_Result exec()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory fetchObject()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceStatusHistory_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory fetchObject()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory_Collection fetchCollection()
	 */
	class EO_InvoiceStatusHistory_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory_Collection createCollection()
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory wakeUpObject($row)
	 * @method \Bitrix\Crm\History\Entity\EO_InvoiceStatusHistory_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceStatusHistory_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\History\Entity\LeadStatusHistoryTable:crm/lib/history/entity/leadstatushistory.php:8046a8c7ca79588fe8a84c774cc62b17 */
namespace Bitrix\Crm\History\Entity {
	/**
	 * EO_LeadStatusHistory
	 * @see \Bitrix\Crm\History\Entity\LeadStatusHistoryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetTypeId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \int getPeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setPeriodYear(\int|\Bitrix\Main\DB\SqlExpression $periodYear)
	 * @method bool hasPeriodYear()
	 * @method bool isPeriodYearFilled()
	 * @method bool isPeriodYearChanged()
	 * @method \int remindActualPeriodYear()
	 * @method \int requirePeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetPeriodYear()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetPeriodYear()
	 * @method \int fillPeriodYear()
	 * @method \int getPeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setPeriodQuarter(\int|\Bitrix\Main\DB\SqlExpression $periodQuarter)
	 * @method bool hasPeriodQuarter()
	 * @method bool isPeriodQuarterFilled()
	 * @method bool isPeriodQuarterChanged()
	 * @method \int remindActualPeriodQuarter()
	 * @method \int requirePeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetPeriodQuarter()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetPeriodQuarter()
	 * @method \int fillPeriodQuarter()
	 * @method \int getPeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setPeriodMonth(\int|\Bitrix\Main\DB\SqlExpression $periodMonth)
	 * @method bool hasPeriodMonth()
	 * @method bool isPeriodMonthFilled()
	 * @method bool isPeriodMonthChanged()
	 * @method \int remindActualPeriodMonth()
	 * @method \int requirePeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetPeriodMonth()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetPeriodMonth()
	 * @method \int fillPeriodMonth()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetResponsibleId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \string getStatusSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setStatusSemanticId(\string|\Bitrix\Main\DB\SqlExpression $statusSemanticId)
	 * @method bool hasStatusSemanticId()
	 * @method bool isStatusSemanticIdFilled()
	 * @method bool isStatusSemanticIdChanged()
	 * @method \string remindActualStatusSemanticId()
	 * @method \string requireStatusSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetStatusSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetStatusSemanticId()
	 * @method \string fillStatusSemanticId()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetStatusId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \boolean getIsInWork()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setIsInWork(\boolean|\Bitrix\Main\DB\SqlExpression $isInWork)
	 * @method bool hasIsInWork()
	 * @method bool isIsInWorkFilled()
	 * @method bool isIsInWorkChanged()
	 * @method \boolean remindActualIsInWork()
	 * @method \boolean requireIsInWork()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetIsInWork()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetIsInWork()
	 * @method \boolean fillIsInWork()
	 * @method \boolean getIsJunk()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory setIsJunk(\boolean|\Bitrix\Main\DB\SqlExpression $isJunk)
	 * @method bool hasIsJunk()
	 * @method bool isIsJunkFilled()
	 * @method bool isIsJunkChanged()
	 * @method \boolean remindActualIsJunk()
	 * @method \boolean requireIsJunk()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory resetIsJunk()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unsetIsJunk()
	 * @method \boolean fillIsJunk()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory set($fieldName, $value)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory reset($fieldName)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistory wakeUp($data)
	 */
	class EO_LeadStatusHistory {
		/* @var \Bitrix\Crm\History\Entity\LeadStatusHistoryTable */
		static public $dataClass = '\Bitrix\Crm\History\Entity\LeadStatusHistoryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\History\Entity {
	/**
	 * EO_LeadStatusHistory_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \int[] getPeriodYearList()
	 * @method \int[] fillPeriodYear()
	 * @method \int[] getPeriodQuarterList()
	 * @method \int[] fillPeriodQuarter()
	 * @method \int[] getPeriodMonthList()
	 * @method \int[] fillPeriodMonth()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \string[] getStatusSemanticIdList()
	 * @method \string[] fillStatusSemanticId()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \boolean[] getIsInWorkList()
	 * @method \boolean[] fillIsInWork()
	 * @method \boolean[] getIsJunkList()
	 * @method \boolean[] fillIsJunk()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\History\Entity\EO_LeadStatusHistory $object)
	 * @method bool has(\Bitrix\Crm\History\Entity\EO_LeadStatusHistory $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory getByPrimary($primary)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory[] getAll()
	 * @method bool remove(\Bitrix\Crm\History\Entity\EO_LeadStatusHistory $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistory_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_LeadStatusHistory_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\History\Entity\LeadStatusHistoryTable */
		static public $dataClass = '\Bitrix\Crm\History\Entity\LeadStatusHistoryTable';
	}
}
namespace Bitrix\Crm\History\Entity {
	/**
	 * @method static EO_LeadStatusHistory_Query query()
	 * @method static EO_LeadStatusHistory_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_LeadStatusHistory_Result getById($id)
	 * @method static EO_LeadStatusHistory_Result getList(array $parameters = array())
	 * @method static EO_LeadStatusHistory_Entity getEntity()
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistory createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistory_Collection createCollection()
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistory wakeUpObject($row)
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistory_Collection wakeUpCollection($rows)
	 */
	class LeadStatusHistoryTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_LeadStatusHistory_Result exec()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory fetchObject()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_LeadStatusHistory_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory fetchObject()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory_Collection fetchCollection()
	 */
	class EO_LeadStatusHistory_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory_Collection createCollection()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory wakeUpObject($row)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory_Collection wakeUpCollection($rows)
	 */
	class EO_LeadStatusHistory_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\History\Entity\LeadStatusHistoryWithSupposedTable:crm/lib/history/entity/leadstatushistorywithsupposed.php:628b1aa30de0d7698847bbcb0352e0c5 */
namespace Bitrix\Crm\History\Entity {
	/**
	 * EO_LeadStatusHistoryWithSupposed
	 * @see \Bitrix\Crm\History\Entity\LeadStatusHistoryWithSupposedTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed resetOwnerId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed resetCreatedTime()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed resetCreatedDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \string getStatusSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setStatusSemanticId(\string|\Bitrix\Main\DB\SqlExpression $statusSemanticId)
	 * @method bool hasStatusSemanticId()
	 * @method bool isStatusSemanticIdFilled()
	 * @method bool isStatusSemanticIdChanged()
	 * @method \string remindActualStatusSemanticId()
	 * @method \string requireStatusSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed resetStatusSemanticId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unsetStatusSemanticId()
	 * @method \string fillStatusSemanticId()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed resetStatusId()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \string getIsLost()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setIsLost(\string|\Bitrix\Main\DB\SqlExpression $isLost)
	 * @method bool hasIsLost()
	 * @method bool isIsLostFilled()
	 * @method bool isIsLostChanged()
	 * @method \string remindActualIsLost()
	 * @method \string requireIsLost()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed resetIsLost()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unsetIsLost()
	 * @method \string fillIsLost()
	 * @method \string getIsSupposed()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setIsSupposed(\string|\Bitrix\Main\DB\SqlExpression $isSupposed)
	 * @method bool hasIsSupposed()
	 * @method bool isIsSupposedFilled()
	 * @method bool isIsSupposedChanged()
	 * @method \string remindActualIsSupposed()
	 * @method \string requireIsSupposed()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed resetIsSupposed()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unsetIsSupposed()
	 * @method \string fillIsSupposed()
	 * @method \Bitrix\Main\Type\Date getLastUpdateDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setLastUpdateDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $lastUpdateDate)
	 * @method bool hasLastUpdateDate()
	 * @method bool isLastUpdateDateFilled()
	 * @method bool isLastUpdateDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualLastUpdateDate()
	 * @method \Bitrix\Main\Type\Date requireLastUpdateDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed resetLastUpdateDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unsetLastUpdateDate()
	 * @method \Bitrix\Main\Type\Date fillLastUpdateDate()
	 * @method \Bitrix\Main\Type\Date getCloseDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setCloseDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $closeDate)
	 * @method bool hasCloseDate()
	 * @method bool isCloseDateFilled()
	 * @method bool isCloseDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCloseDate()
	 * @method \Bitrix\Main\Type\Date requireCloseDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed resetCloseDate()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unsetCloseDate()
	 * @method \Bitrix\Main\Type\Date fillCloseDate()
	 * @method \int getSpentTime()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed setSpentTime(\int|\Bitrix\Main\DB\SqlExpression $spentTime)
	 * @method bool hasSpentTime()
	 * @method bool isSpentTimeFilled()
	 * @method bool isSpentTimeChanged()
	 * @method \int remindActualSpentTime()
	 * @method \int requireSpentTime()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed resetSpentTime()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unsetSpentTime()
	 * @method \int fillSpentTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed set($fieldName, $value)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed reset($fieldName)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed wakeUp($data)
	 */
	class EO_LeadStatusHistoryWithSupposed {
		/* @var \Bitrix\Crm\History\Entity\LeadStatusHistoryWithSupposedTable */
		static public $dataClass = '\Bitrix\Crm\History\Entity\LeadStatusHistoryWithSupposedTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\History\Entity {
	/**
	 * EO_LeadStatusHistoryWithSupposed_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \string[] getStatusSemanticIdList()
	 * @method \string[] fillStatusSemanticId()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \string[] getIsLostList()
	 * @method \string[] fillIsLost()
	 * @method \string[] getIsSupposedList()
	 * @method \string[] fillIsSupposed()
	 * @method \Bitrix\Main\Type\Date[] getLastUpdateDateList()
	 * @method \Bitrix\Main\Type\Date[] fillLastUpdateDate()
	 * @method \Bitrix\Main\Type\Date[] getCloseDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCloseDate()
	 * @method \int[] getSpentTimeList()
	 * @method \int[] fillSpentTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed $object)
	 * @method bool has(\Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed getByPrimary($primary)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed[] getAll()
	 * @method bool remove(\Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_LeadStatusHistoryWithSupposed_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\History\Entity\LeadStatusHistoryWithSupposedTable */
		static public $dataClass = '\Bitrix\Crm\History\Entity\LeadStatusHistoryWithSupposedTable';
	}
}
namespace Bitrix\Crm\History\Entity {
	/**
	 * @method static EO_LeadStatusHistoryWithSupposed_Query query()
	 * @method static EO_LeadStatusHistoryWithSupposed_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_LeadStatusHistoryWithSupposed_Result getById($id)
	 * @method static EO_LeadStatusHistoryWithSupposed_Result getList(array $parameters = array())
	 * @method static EO_LeadStatusHistoryWithSupposed_Entity getEntity()
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed_Collection createCollection()
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed wakeUpObject($row)
	 * @method static \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed_Collection wakeUpCollection($rows)
	 */
	class LeadStatusHistoryWithSupposedTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_LeadStatusHistoryWithSupposed_Result exec()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed fetchObject()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_LeadStatusHistoryWithSupposed_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed fetchObject()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed_Collection fetchCollection()
	 */
	class EO_LeadStatusHistoryWithSupposed_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed_Collection createCollection()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed wakeUpObject($row)
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed_Collection wakeUpCollection($rows)
	 */
	class EO_LeadStatusHistoryWithSupposed_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\IBlockElementProxyTable:crm/lib/iblockelementproxy.php:df5365a7df6b98b664c5c27d1f4f264b */
namespace Bitrix\Crm {
	/**
	 * EO_IBlockElementProxy
	 * @see \Bitrix\Crm\IBlockElementProxyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getIblockId()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy setIblockId(\int|\Bitrix\Main\DB\SqlExpression $iblockId)
	 * @method bool hasIblockId()
	 * @method bool isIblockIdFilled()
	 * @method bool isIblockIdChanged()
	 * @method \int remindActualIblockId()
	 * @method \int requireIblockId()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy resetIblockId()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy unsetIblockId()
	 * @method \int fillIblockId()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy resetName()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy unsetName()
	 * @method \string fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_IBlockElementProxy set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_IBlockElementProxy reset($fieldName)
	 * @method \Bitrix\Crm\EO_IBlockElementProxy unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_IBlockElementProxy wakeUp($data)
	 */
	class EO_IBlockElementProxy {
		/* @var \Bitrix\Crm\IBlockElementProxyTable */
		static public $dataClass = '\Bitrix\Crm\IBlockElementProxyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_IBlockElementProxy_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getIblockIdList()
	 * @method \int[] fillIblockId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_IBlockElementProxy $object)
	 * @method bool has(\Bitrix\Crm\EO_IBlockElementProxy $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_IBlockElementProxy getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_IBlockElementProxy[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_IBlockElementProxy $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_IBlockElementProxy_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_IBlockElementProxy current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_IBlockElementProxy_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\IBlockElementProxyTable */
		static public $dataClass = '\Bitrix\Crm\IBlockElementProxyTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_IBlockElementProxy_Query query()
	 * @method static EO_IBlockElementProxy_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_IBlockElementProxy_Result getById($id)
	 * @method static EO_IBlockElementProxy_Result getList(array $parameters = array())
	 * @method static EO_IBlockElementProxy_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_IBlockElementProxy createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_IBlockElementProxy_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_IBlockElementProxy wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_IBlockElementProxy_Collection wakeUpCollection($rows)
	 */
	class IBlockElementProxyTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_IBlockElementProxy_Result exec()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy fetchObject()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_IBlockElementProxy_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_IBlockElementProxy fetchObject()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy_Collection fetchCollection()
	 */
	class EO_IBlockElementProxy_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_IBlockElementProxy createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_IBlockElementProxy_Collection createCollection()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_IBlockElementProxy_Collection wakeUpCollection($rows)
	 */
	class EO_IBlockElementProxy_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\IBlockElementGrcProxyTable:crm/lib/iblockelementproxy.php:df5365a7df6b98b664c5c27d1f4f264b */
namespace Bitrix\Crm {
	/**
	 * EO_IBlockElementGrcProxy
	 * @see \Bitrix\Crm\IBlockElementGrcProxyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy resetName()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy unsetName()
	 * @method \string fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy reset($fieldName)
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_IBlockElementGrcProxy wakeUp($data)
	 */
	class EO_IBlockElementGrcProxy {
		/* @var \Bitrix\Crm\IBlockElementGrcProxyTable */
		static public $dataClass = '\Bitrix\Crm\IBlockElementGrcProxyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_IBlockElementGrcProxy_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_IBlockElementGrcProxy $object)
	 * @method bool has(\Bitrix\Crm\EO_IBlockElementGrcProxy $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_IBlockElementGrcProxy $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_IBlockElementGrcProxy_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_IBlockElementGrcProxy_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\IBlockElementGrcProxyTable */
		static public $dataClass = '\Bitrix\Crm\IBlockElementGrcProxyTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_IBlockElementGrcProxy_Query query()
	 * @method static EO_IBlockElementGrcProxy_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_IBlockElementGrcProxy_Result getById($id)
	 * @method static EO_IBlockElementGrcProxy_Result getList(array $parameters = array())
	 * @method static EO_IBlockElementGrcProxy_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_IBlockElementGrcProxy createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_IBlockElementGrcProxy_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_IBlockElementGrcProxy wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_IBlockElementGrcProxy_Collection wakeUpCollection($rows)
	 */
	class IBlockElementGrcProxyTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_IBlockElementGrcProxy_Result exec()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy fetchObject()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_IBlockElementGrcProxy_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy fetchObject()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy_Collection fetchCollection()
	 */
	class EO_IBlockElementGrcProxy_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy_Collection createCollection()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy_Collection wakeUpCollection($rows)
	 */
	class EO_IBlockElementGrcProxy_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Integration\Channel\Entity\EntityChannelTable:crm/lib/integration/channel/entity/entitychannel.php:c32aa68cc7604cd991508d029ebe5731 */
namespace Bitrix\Crm\Integration\Channel\Entity {
	/**
	 * EO_EntityChannel
	 * @see \Bitrix\Crm\Integration\Channel\Entity\EntityChannelTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string getOriginId()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel setOriginId(\string|\Bitrix\Main\DB\SqlExpression $originId)
	 * @method bool hasOriginId()
	 * @method bool isOriginIdFilled()
	 * @method bool isOriginIdChanged()
	 * @method \string remindActualOriginId()
	 * @method \string requireOriginId()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel resetOriginId()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel unsetOriginId()
	 * @method \string fillOriginId()
	 * @method \string getComponentId()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel setComponentId(\string|\Bitrix\Main\DB\SqlExpression $componentId)
	 * @method bool hasComponentId()
	 * @method bool isComponentIdFilled()
	 * @method bool isComponentIdChanged()
	 * @method \string remindActualComponentId()
	 * @method \string requireComponentId()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel resetComponentId()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel unsetComponentId()
	 * @method \string fillComponentId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel set($fieldName, $value)
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel reset($fieldName)
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel wakeUp($data)
	 */
	class EO_EntityChannel {
		/* @var \Bitrix\Crm\Integration\Channel\Entity\EntityChannelTable */
		static public $dataClass = '\Bitrix\Crm\Integration\Channel\Entity\EntityChannelTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Integration\Channel\Entity {
	/**
	 * EO_EntityChannel_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEntityIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getTypeIdList()
	 * @method \string[] getOriginIdList()
	 * @method \string[] fillOriginId()
	 * @method \string[] getComponentIdList()
	 * @method \string[] fillComponentId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel $object)
	 * @method bool has(\Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel getByPrimary($primary)
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel[] getAll()
	 * @method bool remove(\Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EntityChannel_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Integration\Channel\Entity\EntityChannelTable */
		static public $dataClass = '\Bitrix\Crm\Integration\Channel\Entity\EntityChannelTable';
	}
}
namespace Bitrix\Crm\Integration\Channel\Entity {
	/**
	 * @method static EO_EntityChannel_Query query()
	 * @method static EO_EntityChannel_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EntityChannel_Result getById($id)
	 * @method static EO_EntityChannel_Result getList(array $parameters = array())
	 * @method static EO_EntityChannel_Entity getEntity()
	 * @method static \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel_Collection createCollection()
	 * @method static \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel wakeUpObject($row)
	 * @method static \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel_Collection wakeUpCollection($rows)
	 */
	class EntityChannelTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_EntityChannel_Result exec()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel fetchObject()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_EntityChannel_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel fetchObject()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel_Collection fetchCollection()
	 */
	class EO_EntityChannel_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel_Collection createCollection()
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel wakeUpObject($row)
	 * @method \Bitrix\Crm\Integration\Channel\Entity\EO_EntityChannel_Collection wakeUpCollection($rows)
	 */
	class EO_EntityChannel_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Integrity\DuplicateBankDetailMatchCodeTable:crm/lib/integrity/duplicatebankdetailmatchcode.php:dbe12e54a69fb82044abddfdc6e9aa8a */
namespace Bitrix\Crm\Integrity {
	/**
	 * EO_DuplicateBankDetailMatchCode
	 * @see \Bitrix\Crm\Integrity\DuplicateBankDetailMatchCodeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode resetEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode resetEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getBdCountryId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode setBdCountryId(\int|\Bitrix\Main\DB\SqlExpression $bdCountryId)
	 * @method bool hasBdCountryId()
	 * @method bool isBdCountryIdFilled()
	 * @method bool isBdCountryIdChanged()
	 * @method \int remindActualBdCountryId()
	 * @method \int requireBdCountryId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode resetBdCountryId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode unsetBdCountryId()
	 * @method \int fillBdCountryId()
	 * @method \string getBdFieldName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode setBdFieldName(\string|\Bitrix\Main\DB\SqlExpression $bdFieldName)
	 * @method bool hasBdFieldName()
	 * @method bool isBdFieldNameFilled()
	 * @method bool isBdFieldNameChanged()
	 * @method \string remindActualBdFieldName()
	 * @method \string requireBdFieldName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode resetBdFieldName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode unsetBdFieldName()
	 * @method \string fillBdFieldName()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode resetValue()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode unsetValue()
	 * @method \string fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode set($fieldName, $value)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode reset($fieldName)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode wakeUp($data)
	 */
	class EO_DuplicateBankDetailMatchCode {
		/* @var \Bitrix\Crm\Integrity\DuplicateBankDetailMatchCodeTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\DuplicateBankDetailMatchCodeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Integrity {
	/**
	 * EO_DuplicateBankDetailMatchCode_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getBdCountryIdList()
	 * @method \int[] fillBdCountryId()
	 * @method \string[] getBdFieldNameList()
	 * @method \string[] fillBdFieldName()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode $object)
	 * @method bool has(\Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode getByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode[] getAll()
	 * @method bool remove(\Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DuplicateBankDetailMatchCode_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Integrity\DuplicateBankDetailMatchCodeTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\DuplicateBankDetailMatchCodeTable';
	}
}
namespace Bitrix\Crm\Integrity {
	/**
	 * @method static EO_DuplicateBankDetailMatchCode_Query query()
	 * @method static EO_DuplicateBankDetailMatchCode_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DuplicateBankDetailMatchCode_Result getById($id)
	 * @method static EO_DuplicateBankDetailMatchCode_Result getList(array $parameters = array())
	 * @method static EO_DuplicateBankDetailMatchCode_Entity getEntity()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode_Collection createCollection()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode wakeUpObject($row)
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode_Collection wakeUpCollection($rows)
	 */
	class DuplicateBankDetailMatchCodeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DuplicateBankDetailMatchCode_Result exec()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode fetchObject()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DuplicateBankDetailMatchCode_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode fetchObject()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode_Collection fetchCollection()
	 */
	class EO_DuplicateBankDetailMatchCode_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode_Collection createCollection()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode wakeUpObject($row)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateBankDetailMatchCode_Collection wakeUpCollection($rows)
	 */
	class EO_DuplicateBankDetailMatchCode_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Integrity\DuplicateCommunicationMatchCodeTable:crm/lib/integrity/duplicatecommunicationmatchcode.php:32bfa0e5dfc125fa5d8b94def841f892 */
namespace Bitrix\Crm\Integrity {
	/**
	 * EO_DuplicateCommunicationMatchCode
	 * @see \Bitrix\Crm\Integrity\DuplicateCommunicationMatchCodeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode resetEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode resetEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \string getType()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode resetType()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode unsetType()
	 * @method \string fillType()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode resetValue()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode unsetValue()
	 * @method \string fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode set($fieldName, $value)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode reset($fieldName)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode wakeUp($data)
	 */
	class EO_DuplicateCommunicationMatchCode {
		/* @var \Bitrix\Crm\Integrity\DuplicateCommunicationMatchCodeTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\DuplicateCommunicationMatchCodeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Integrity {
	/**
	 * EO_DuplicateCommunicationMatchCode_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode $object)
	 * @method bool has(\Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode getByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode[] getAll()
	 * @method bool remove(\Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DuplicateCommunicationMatchCode_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Integrity\DuplicateCommunicationMatchCodeTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\DuplicateCommunicationMatchCodeTable';
	}
}
namespace Bitrix\Crm\Integrity {
	/**
	 * @method static EO_DuplicateCommunicationMatchCode_Query query()
	 * @method static EO_DuplicateCommunicationMatchCode_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DuplicateCommunicationMatchCode_Result getById($id)
	 * @method static EO_DuplicateCommunicationMatchCode_Result getList(array $parameters = array())
	 * @method static EO_DuplicateCommunicationMatchCode_Entity getEntity()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode_Collection createCollection()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode wakeUpObject($row)
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode_Collection wakeUpCollection($rows)
	 */
	class DuplicateCommunicationMatchCodeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DuplicateCommunicationMatchCode_Result exec()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode fetchObject()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DuplicateCommunicationMatchCode_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode fetchObject()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode_Collection fetchCollection()
	 */
	class EO_DuplicateCommunicationMatchCode_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode_Collection createCollection()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode wakeUpObject($row)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateCommunicationMatchCode_Collection wakeUpCollection($rows)
	 */
	class EO_DuplicateCommunicationMatchCode_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Integrity\DuplicateOrganizationMatchCodeTable:crm/lib/integrity/duplicateorganizationmatchcode.php:908a29a1f46eb65cfaa90139f28cddac */
namespace Bitrix\Crm\Integrity {
	/**
	 * EO_DuplicateOrganizationMatchCode
	 * @see \Bitrix\Crm\Integrity\DuplicateOrganizationMatchCodeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode resetEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode resetEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \string getTitle()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode resetTitle()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode unsetTitle()
	 * @method \string fillTitle()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode set($fieldName, $value)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode reset($fieldName)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode wakeUp($data)
	 */
	class EO_DuplicateOrganizationMatchCode {
		/* @var \Bitrix\Crm\Integrity\DuplicateOrganizationMatchCodeTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\DuplicateOrganizationMatchCodeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Integrity {
	/**
	 * EO_DuplicateOrganizationMatchCode_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode $object)
	 * @method bool has(\Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode getByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode[] getAll()
	 * @method bool remove(\Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DuplicateOrganizationMatchCode_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Integrity\DuplicateOrganizationMatchCodeTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\DuplicateOrganizationMatchCodeTable';
	}
}
namespace Bitrix\Crm\Integrity {
	/**
	 * @method static EO_DuplicateOrganizationMatchCode_Query query()
	 * @method static EO_DuplicateOrganizationMatchCode_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DuplicateOrganizationMatchCode_Result getById($id)
	 * @method static EO_DuplicateOrganizationMatchCode_Result getList(array $parameters = array())
	 * @method static EO_DuplicateOrganizationMatchCode_Entity getEntity()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode_Collection createCollection()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode wakeUpObject($row)
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode_Collection wakeUpCollection($rows)
	 */
	class DuplicateOrganizationMatchCodeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DuplicateOrganizationMatchCode_Result exec()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode fetchObject()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DuplicateOrganizationMatchCode_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode fetchObject()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode_Collection fetchCollection()
	 */
	class EO_DuplicateOrganizationMatchCode_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode_Collection createCollection()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode wakeUpObject($row)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateOrganizationMatchCode_Collection wakeUpCollection($rows)
	 */
	class EO_DuplicateOrganizationMatchCode_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Integrity\DuplicatePersonMatchCodeTable:crm/lib/integrity/duplicatepersonmatchcode.php:830a20de280fa2b6f0e6f0afd92f26c5 */
namespace Bitrix\Crm\Integrity {
	/**
	 * EO_DuplicatePersonMatchCode
	 * @see \Bitrix\Crm\Integrity\DuplicatePersonMatchCodeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode resetEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode resetEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \string getLastName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode setLastName(\string|\Bitrix\Main\DB\SqlExpression $lastName)
	 * @method bool hasLastName()
	 * @method bool isLastNameFilled()
	 * @method bool isLastNameChanged()
	 * @method \string remindActualLastName()
	 * @method \string requireLastName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode resetLastName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode unsetLastName()
	 * @method \string fillLastName()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode resetName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode unsetName()
	 * @method \string fillName()
	 * @method \string getSecondName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode setSecondName(\string|\Bitrix\Main\DB\SqlExpression $secondName)
	 * @method bool hasSecondName()
	 * @method bool isSecondNameFilled()
	 * @method bool isSecondNameChanged()
	 * @method \string remindActualSecondName()
	 * @method \string requireSecondName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode resetSecondName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode unsetSecondName()
	 * @method \string fillSecondName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode set($fieldName, $value)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode reset($fieldName)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode wakeUp($data)
	 */
	class EO_DuplicatePersonMatchCode {
		/* @var \Bitrix\Crm\Integrity\DuplicatePersonMatchCodeTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\DuplicatePersonMatchCodeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Integrity {
	/**
	 * EO_DuplicatePersonMatchCode_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \string[] getLastNameList()
	 * @method \string[] fillLastName()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getSecondNameList()
	 * @method \string[] fillSecondName()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode $object)
	 * @method bool has(\Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode getByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode[] getAll()
	 * @method bool remove(\Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DuplicatePersonMatchCode_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Integrity\DuplicatePersonMatchCodeTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\DuplicatePersonMatchCodeTable';
	}
}
namespace Bitrix\Crm\Integrity {
	/**
	 * @method static EO_DuplicatePersonMatchCode_Query query()
	 * @method static EO_DuplicatePersonMatchCode_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DuplicatePersonMatchCode_Result getById($id)
	 * @method static EO_DuplicatePersonMatchCode_Result getList(array $parameters = array())
	 * @method static EO_DuplicatePersonMatchCode_Entity getEntity()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode_Collection createCollection()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode wakeUpObject($row)
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode_Collection wakeUpCollection($rows)
	 */
	class DuplicatePersonMatchCodeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DuplicatePersonMatchCode_Result exec()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode fetchObject()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DuplicatePersonMatchCode_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode fetchObject()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode_Collection fetchCollection()
	 */
	class EO_DuplicatePersonMatchCode_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode_Collection createCollection()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode wakeUpObject($row)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicatePersonMatchCode_Collection wakeUpCollection($rows)
	 */
	class EO_DuplicatePersonMatchCode_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Integrity\DuplicateRequisiteMatchCodeTable:crm/lib/integrity/duplicaterequisitematchcode.php:5e1ab8bbf68a26ac2e158d1103036323 */
namespace Bitrix\Crm\Integrity {
	/**
	 * EO_DuplicateRequisiteMatchCode
	 * @see \Bitrix\Crm\Integrity\DuplicateRequisiteMatchCodeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode resetEntityId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode resetEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getRqCountryId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode setRqCountryId(\int|\Bitrix\Main\DB\SqlExpression $rqCountryId)
	 * @method bool hasRqCountryId()
	 * @method bool isRqCountryIdFilled()
	 * @method bool isRqCountryIdChanged()
	 * @method \int remindActualRqCountryId()
	 * @method \int requireRqCountryId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode resetRqCountryId()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode unsetRqCountryId()
	 * @method \int fillRqCountryId()
	 * @method \string getRqFieldName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode setRqFieldName(\string|\Bitrix\Main\DB\SqlExpression $rqFieldName)
	 * @method bool hasRqFieldName()
	 * @method bool isRqFieldNameFilled()
	 * @method bool isRqFieldNameChanged()
	 * @method \string remindActualRqFieldName()
	 * @method \string requireRqFieldName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode resetRqFieldName()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode unsetRqFieldName()
	 * @method \string fillRqFieldName()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode resetValue()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode unsetValue()
	 * @method \string fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode set($fieldName, $value)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode reset($fieldName)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode wakeUp($data)
	 */
	class EO_DuplicateRequisiteMatchCode {
		/* @var \Bitrix\Crm\Integrity\DuplicateRequisiteMatchCodeTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\DuplicateRequisiteMatchCodeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Integrity {
	/**
	 * EO_DuplicateRequisiteMatchCode_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getRqCountryIdList()
	 * @method \int[] fillRqCountryId()
	 * @method \string[] getRqFieldNameList()
	 * @method \string[] fillRqFieldName()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode $object)
	 * @method bool has(\Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode getByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode[] getAll()
	 * @method bool remove(\Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DuplicateRequisiteMatchCode_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Integrity\DuplicateRequisiteMatchCodeTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\DuplicateRequisiteMatchCodeTable';
	}
}
namespace Bitrix\Crm\Integrity {
	/**
	 * @method static EO_DuplicateRequisiteMatchCode_Query query()
	 * @method static EO_DuplicateRequisiteMatchCode_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DuplicateRequisiteMatchCode_Result getById($id)
	 * @method static EO_DuplicateRequisiteMatchCode_Result getList(array $parameters = array())
	 * @method static EO_DuplicateRequisiteMatchCode_Entity getEntity()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode_Collection createCollection()
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode wakeUpObject($row)
	 * @method static \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode_Collection wakeUpCollection($rows)
	 */
	class DuplicateRequisiteMatchCodeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DuplicateRequisiteMatchCode_Result exec()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode fetchObject()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DuplicateRequisiteMatchCode_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode fetchObject()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode_Collection fetchCollection()
	 */
	class EO_DuplicateRequisiteMatchCode_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode_Collection createCollection()
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode wakeUpObject($row)
	 * @method \Bitrix\Crm\Integrity\EO_DuplicateRequisiteMatchCode_Collection wakeUpCollection($rows)
	 */
	class EO_DuplicateRequisiteMatchCode_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Integrity\Entity\DuplicateEntityMatchHashTable:crm/lib/integrity/entity/duplicateentitymatchhash.php:48ee30b3f4e6e76344b0ea7869fea56c */
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * EO_DuplicateEntityMatchHash
	 * @see \Bitrix\Crm\Integrity\Entity\DuplicateEntityMatchHashTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string getMatchHash()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash setMatchHash(\string|\Bitrix\Main\DB\SqlExpression $matchHash)
	 * @method bool hasMatchHash()
	 * @method bool isMatchHashFilled()
	 * @method bool isMatchHashChanged()
	 * @method \string getScope()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash setScope(\string|\Bitrix\Main\DB\SqlExpression $scope)
	 * @method bool hasScope()
	 * @method bool isScopeFilled()
	 * @method bool isScopeChanged()
	 * @method \boolean getIsPrimary()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash setIsPrimary(\boolean|\Bitrix\Main\DB\SqlExpression $isPrimary)
	 * @method bool hasIsPrimary()
	 * @method bool isIsPrimaryFilled()
	 * @method bool isIsPrimaryChanged()
	 * @method \boolean remindActualIsPrimary()
	 * @method \boolean requireIsPrimary()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash resetIsPrimary()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash unsetIsPrimary()
	 * @method \boolean fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash set($fieldName, $value)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash reset($fieldName)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash wakeUp($data)
	 */
	class EO_DuplicateEntityMatchHash {
		/* @var \Bitrix\Crm\Integrity\Entity\DuplicateEntityMatchHashTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\Entity\DuplicateEntityMatchHashTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * EO_DuplicateEntityMatchHash_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEntityIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getTypeIdList()
	 * @method \string[] getMatchHashList()
	 * @method \string[] getScopeList()
	 * @method \boolean[] getIsPrimaryList()
	 * @method \boolean[] fillIsPrimary()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash $object)
	 * @method bool has(\Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash getByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash[] getAll()
	 * @method bool remove(\Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DuplicateEntityMatchHash_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Integrity\Entity\DuplicateEntityMatchHashTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\Entity\DuplicateEntityMatchHashTable';
	}
}
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * @method static EO_DuplicateEntityMatchHash_Query query()
	 * @method static EO_DuplicateEntityMatchHash_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DuplicateEntityMatchHash_Result getById($id)
	 * @method static EO_DuplicateEntityMatchHash_Result getList(array $parameters = array())
	 * @method static EO_DuplicateEntityMatchHash_Entity getEntity()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash_Collection createCollection()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash wakeUpObject($row)
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash_Collection wakeUpCollection($rows)
	 */
	class DuplicateEntityMatchHashTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DuplicateEntityMatchHash_Result exec()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash fetchObject()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DuplicateEntityMatchHash_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash fetchObject()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash_Collection fetchCollection()
	 */
	class EO_DuplicateEntityMatchHash_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash_Collection createCollection()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash wakeUpObject($row)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityMatchHash_Collection wakeUpCollection($rows)
	 */
	class EO_DuplicateEntityMatchHash_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Integrity\Entity\DuplicateEntityStatisticsTable:crm/lib/integrity/entity/duplicateentitystatistics.php:9358cff029124ae8a84f7046f4760ad4 */
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * EO_DuplicateEntityStatistics
	 * @see \Bitrix\Crm\Integrity\Entity\DuplicateEntityStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \string getRankingData()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics setRankingData(\string|\Bitrix\Main\DB\SqlExpression $rankingData)
	 * @method bool hasRankingData()
	 * @method bool isRankingDataFilled()
	 * @method bool isRankingDataChanged()
	 * @method \string remindActualRankingData()
	 * @method \string requireRankingData()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics resetRankingData()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics unsetRankingData()
	 * @method \string fillRankingData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics wakeUp($data)
	 */
	class EO_DuplicateEntityStatistics {
		/* @var \Bitrix\Crm\Integrity\Entity\DuplicateEntityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\Entity\DuplicateEntityStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * EO_DuplicateEntityStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEntityIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \string[] getRankingDataList()
	 * @method \string[] fillRankingData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics $object)
	 * @method bool has(\Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DuplicateEntityStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Integrity\Entity\DuplicateEntityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\Entity\DuplicateEntityStatisticsTable';
	}
}
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * @method static EO_DuplicateEntityStatistics_Query query()
	 * @method static EO_DuplicateEntityStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DuplicateEntityStatistics_Result getById($id)
	 * @method static EO_DuplicateEntityStatistics_Result getList(array $parameters = array())
	 * @method static EO_DuplicateEntityStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics_Collection wakeUpCollection($rows)
	 */
	class DuplicateEntityStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DuplicateEntityStatistics_Result exec()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics fetchObject()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DuplicateEntityStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics fetchObject()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics_Collection fetchCollection()
	 */
	class EO_DuplicateEntityStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateEntityStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_DuplicateEntityStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Integrity\Entity\DuplicateIndexTable:crm/lib/integrity/entity/duplicateindex.php:fa30f2b3b5d4166ed5d929d15b86e9b1 */
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * EO_DuplicateIndex
	 * @see \Bitrix\Crm\Integrity\Entity\DuplicateIndexTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string getMatchHash()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setMatchHash(\string|\Bitrix\Main\DB\SqlExpression $matchHash)
	 * @method bool hasMatchHash()
	 * @method bool isMatchHashFilled()
	 * @method bool isMatchHashChanged()
	 * @method \string getScope()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setScope(\string|\Bitrix\Main\DB\SqlExpression $scope)
	 * @method bool hasScope()
	 * @method bool isScopeFilled()
	 * @method bool isScopeChanged()
	 * @method \string getMatches()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setMatches(\string|\Bitrix\Main\DB\SqlExpression $matches)
	 * @method bool hasMatches()
	 * @method bool isMatchesFilled()
	 * @method bool isMatchesChanged()
	 * @method \string remindActualMatches()
	 * @method \string requireMatches()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetMatches()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetMatches()
	 * @method \string fillMatches()
	 * @method \int getQuantity()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setQuantity(\int|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \int remindActualQuantity()
	 * @method \int requireQuantity()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetQuantity()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetQuantity()
	 * @method \int fillQuantity()
	 * @method \int getRootEntityId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityId(\int|\Bitrix\Main\DB\SqlExpression $rootEntityId)
	 * @method bool hasRootEntityId()
	 * @method bool isRootEntityIdFilled()
	 * @method bool isRootEntityIdChanged()
	 * @method \int remindActualRootEntityId()
	 * @method \int requireRootEntityId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityId()
	 * @method \int fillRootEntityId()
	 * @method \string getRootEntityNameFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityNameFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityNameFlag)
	 * @method bool hasRootEntityNameFlag()
	 * @method bool isRootEntityNameFlagFilled()
	 * @method bool isRootEntityNameFlagChanged()
	 * @method \string remindActualRootEntityNameFlag()
	 * @method \string requireRootEntityNameFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityNameFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityNameFlag()
	 * @method \string fillRootEntityNameFlag()
	 * @method \string getRootEntityName()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityName(\string|\Bitrix\Main\DB\SqlExpression $rootEntityName)
	 * @method bool hasRootEntityName()
	 * @method bool isRootEntityNameFilled()
	 * @method bool isRootEntityNameChanged()
	 * @method \string remindActualRootEntityName()
	 * @method \string requireRootEntityName()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityName()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityName()
	 * @method \string fillRootEntityName()
	 * @method \string getRootEntityTitleFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityTitleFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityTitleFlag)
	 * @method bool hasRootEntityTitleFlag()
	 * @method bool isRootEntityTitleFlagFilled()
	 * @method bool isRootEntityTitleFlagChanged()
	 * @method \string remindActualRootEntityTitleFlag()
	 * @method \string requireRootEntityTitleFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityTitleFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityTitleFlag()
	 * @method \string fillRootEntityTitleFlag()
	 * @method \string getRootEntityTitle()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityTitle(\string|\Bitrix\Main\DB\SqlExpression $rootEntityTitle)
	 * @method bool hasRootEntityTitle()
	 * @method bool isRootEntityTitleFilled()
	 * @method bool isRootEntityTitleChanged()
	 * @method \string remindActualRootEntityTitle()
	 * @method \string requireRootEntityTitle()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityTitle()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityTitle()
	 * @method \string fillRootEntityTitle()
	 * @method \string getRootEntityPhoneFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityPhoneFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityPhoneFlag)
	 * @method bool hasRootEntityPhoneFlag()
	 * @method bool isRootEntityPhoneFlagFilled()
	 * @method bool isRootEntityPhoneFlagChanged()
	 * @method \string remindActualRootEntityPhoneFlag()
	 * @method \string requireRootEntityPhoneFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityPhoneFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityPhoneFlag()
	 * @method \string fillRootEntityPhoneFlag()
	 * @method \string getRootEntityPhone()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityPhone(\string|\Bitrix\Main\DB\SqlExpression $rootEntityPhone)
	 * @method bool hasRootEntityPhone()
	 * @method bool isRootEntityPhoneFilled()
	 * @method bool isRootEntityPhoneChanged()
	 * @method \string remindActualRootEntityPhone()
	 * @method \string requireRootEntityPhone()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityPhone()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityPhone()
	 * @method \string fillRootEntityPhone()
	 * @method \string getRootEntityEmailFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityEmailFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityEmailFlag)
	 * @method bool hasRootEntityEmailFlag()
	 * @method bool isRootEntityEmailFlagFilled()
	 * @method bool isRootEntityEmailFlagChanged()
	 * @method \string remindActualRootEntityEmailFlag()
	 * @method \string requireRootEntityEmailFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityEmailFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityEmailFlag()
	 * @method \string fillRootEntityEmailFlag()
	 * @method \string getRootEntityEmail()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityEmail(\string|\Bitrix\Main\DB\SqlExpression $rootEntityEmail)
	 * @method bool hasRootEntityEmail()
	 * @method bool isRootEntityEmailFilled()
	 * @method bool isRootEntityEmailChanged()
	 * @method \string remindActualRootEntityEmail()
	 * @method \string requireRootEntityEmail()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityEmail()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityEmail()
	 * @method \string fillRootEntityEmail()
	 * @method \string getRootEntityRqInnFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqInnFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqInnFlag)
	 * @method bool hasRootEntityRqInnFlag()
	 * @method bool isRootEntityRqInnFlagFilled()
	 * @method bool isRootEntityRqInnFlagChanged()
	 * @method \string remindActualRootEntityRqInnFlag()
	 * @method \string requireRootEntityRqInnFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqInnFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqInnFlag()
	 * @method \string fillRootEntityRqInnFlag()
	 * @method \string getRootEntityRqInn()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqInn(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqInn)
	 * @method bool hasRootEntityRqInn()
	 * @method bool isRootEntityRqInnFilled()
	 * @method bool isRootEntityRqInnChanged()
	 * @method \string remindActualRootEntityRqInn()
	 * @method \string requireRootEntityRqInn()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqInn()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqInn()
	 * @method \string fillRootEntityRqInn()
	 * @method \string getRootEntityRqOgrnFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqOgrnFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqOgrnFlag)
	 * @method bool hasRootEntityRqOgrnFlag()
	 * @method bool isRootEntityRqOgrnFlagFilled()
	 * @method bool isRootEntityRqOgrnFlagChanged()
	 * @method \string remindActualRootEntityRqOgrnFlag()
	 * @method \string requireRootEntityRqOgrnFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqOgrnFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqOgrnFlag()
	 * @method \string fillRootEntityRqOgrnFlag()
	 * @method \string getRootEntityRqOgrn()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqOgrn(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqOgrn)
	 * @method bool hasRootEntityRqOgrn()
	 * @method bool isRootEntityRqOgrnFilled()
	 * @method bool isRootEntityRqOgrnChanged()
	 * @method \string remindActualRootEntityRqOgrn()
	 * @method \string requireRootEntityRqOgrn()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqOgrn()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqOgrn()
	 * @method \string fillRootEntityRqOgrn()
	 * @method \string getRootEntityRqOgrnipFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqOgrnipFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqOgrnipFlag)
	 * @method bool hasRootEntityRqOgrnipFlag()
	 * @method bool isRootEntityRqOgrnipFlagFilled()
	 * @method bool isRootEntityRqOgrnipFlagChanged()
	 * @method \string remindActualRootEntityRqOgrnipFlag()
	 * @method \string requireRootEntityRqOgrnipFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqOgrnipFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqOgrnipFlag()
	 * @method \string fillRootEntityRqOgrnipFlag()
	 * @method \string getRootEntityRqOgrnip()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqOgrnip(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqOgrnip)
	 * @method bool hasRootEntityRqOgrnip()
	 * @method bool isRootEntityRqOgrnipFilled()
	 * @method bool isRootEntityRqOgrnipChanged()
	 * @method \string remindActualRootEntityRqOgrnip()
	 * @method \string requireRootEntityRqOgrnip()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqOgrnip()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqOgrnip()
	 * @method \string fillRootEntityRqOgrnip()
	 * @method \string getRootEntityRqBinFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqBinFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqBinFlag)
	 * @method bool hasRootEntityRqBinFlag()
	 * @method bool isRootEntityRqBinFlagFilled()
	 * @method bool isRootEntityRqBinFlagChanged()
	 * @method \string remindActualRootEntityRqBinFlag()
	 * @method \string requireRootEntityRqBinFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqBinFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqBinFlag()
	 * @method \string fillRootEntityRqBinFlag()
	 * @method \string getRootEntityRqBin()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqBin(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqBin)
	 * @method bool hasRootEntityRqBin()
	 * @method bool isRootEntityRqBinFilled()
	 * @method bool isRootEntityRqBinChanged()
	 * @method \string remindActualRootEntityRqBin()
	 * @method \string requireRootEntityRqBin()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqBin()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqBin()
	 * @method \string fillRootEntityRqBin()
	 * @method \string getRootEntityRqEdrpouFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqEdrpouFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqEdrpouFlag)
	 * @method bool hasRootEntityRqEdrpouFlag()
	 * @method bool isRootEntityRqEdrpouFlagFilled()
	 * @method bool isRootEntityRqEdrpouFlagChanged()
	 * @method \string remindActualRootEntityRqEdrpouFlag()
	 * @method \string requireRootEntityRqEdrpouFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqEdrpouFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqEdrpouFlag()
	 * @method \string fillRootEntityRqEdrpouFlag()
	 * @method \string getRootEntityRqEdrpou()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqEdrpou(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqEdrpou)
	 * @method bool hasRootEntityRqEdrpou()
	 * @method bool isRootEntityRqEdrpouFilled()
	 * @method bool isRootEntityRqEdrpouChanged()
	 * @method \string remindActualRootEntityRqEdrpou()
	 * @method \string requireRootEntityRqEdrpou()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqEdrpou()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqEdrpou()
	 * @method \string fillRootEntityRqEdrpou()
	 * @method \string getRootEntityRqVatIdFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqVatIdFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqVatIdFlag)
	 * @method bool hasRootEntityRqVatIdFlag()
	 * @method bool isRootEntityRqVatIdFlagFilled()
	 * @method bool isRootEntityRqVatIdFlagChanged()
	 * @method \string remindActualRootEntityRqVatIdFlag()
	 * @method \string requireRootEntityRqVatIdFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqVatIdFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqVatIdFlag()
	 * @method \string fillRootEntityRqVatIdFlag()
	 * @method \string getRootEntityRqVatId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqVatId(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqVatId)
	 * @method bool hasRootEntityRqVatId()
	 * @method bool isRootEntityRqVatIdFilled()
	 * @method bool isRootEntityRqVatIdChanged()
	 * @method \string remindActualRootEntityRqVatId()
	 * @method \string requireRootEntityRqVatId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqVatId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqVatId()
	 * @method \string fillRootEntityRqVatId()
	 * @method \string getRootEntityRqAccNumFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqAccNumFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqAccNumFlag)
	 * @method bool hasRootEntityRqAccNumFlag()
	 * @method bool isRootEntityRqAccNumFlagFilled()
	 * @method bool isRootEntityRqAccNumFlagChanged()
	 * @method \string remindActualRootEntityRqAccNumFlag()
	 * @method \string requireRootEntityRqAccNumFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqAccNumFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqAccNumFlag()
	 * @method \string fillRootEntityRqAccNumFlag()
	 * @method \string getRootEntityRqAccNum()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqAccNum(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqAccNum)
	 * @method bool hasRootEntityRqAccNum()
	 * @method bool isRootEntityRqAccNumFilled()
	 * @method bool isRootEntityRqAccNumChanged()
	 * @method \string remindActualRootEntityRqAccNum()
	 * @method \string requireRootEntityRqAccNum()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqAccNum()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqAccNum()
	 * @method \string fillRootEntityRqAccNum()
	 * @method \string getRootEntityRqIbanFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqIbanFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqIbanFlag)
	 * @method bool hasRootEntityRqIbanFlag()
	 * @method bool isRootEntityRqIbanFlagFilled()
	 * @method bool isRootEntityRqIbanFlagChanged()
	 * @method \string remindActualRootEntityRqIbanFlag()
	 * @method \string requireRootEntityRqIbanFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqIbanFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqIbanFlag()
	 * @method \string fillRootEntityRqIbanFlag()
	 * @method \string getRootEntityRqIban()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqIban(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqIban)
	 * @method bool hasRootEntityRqIban()
	 * @method bool isRootEntityRqIbanFilled()
	 * @method bool isRootEntityRqIbanChanged()
	 * @method \string remindActualRootEntityRqIban()
	 * @method \string requireRootEntityRqIban()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqIban()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqIban()
	 * @method \string fillRootEntityRqIban()
	 * @method \string getRootEntityRqIikFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqIikFlag(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqIikFlag)
	 * @method bool hasRootEntityRqIikFlag()
	 * @method bool isRootEntityRqIikFlagFilled()
	 * @method bool isRootEntityRqIikFlagChanged()
	 * @method \string remindActualRootEntityRqIikFlag()
	 * @method \string requireRootEntityRqIikFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqIikFlag()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqIikFlag()
	 * @method \string fillRootEntityRqIikFlag()
	 * @method \string getRootEntityRqIik()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setRootEntityRqIik(\string|\Bitrix\Main\DB\SqlExpression $rootEntityRqIik)
	 * @method bool hasRootEntityRqIik()
	 * @method bool isRootEntityRqIikFilled()
	 * @method bool isRootEntityRqIikChanged()
	 * @method \string remindActualRootEntityRqIik()
	 * @method \string requireRootEntityRqIik()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetRootEntityRqIik()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetRootEntityRqIik()
	 * @method \string fillRootEntityRqIik()
	 * @method \string getIsJunk()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setIsJunk(\string|\Bitrix\Main\DB\SqlExpression $isJunk)
	 * @method bool hasIsJunk()
	 * @method bool isIsJunkFilled()
	 * @method bool isIsJunkChanged()
	 * @method \string remindActualIsJunk()
	 * @method \string requireIsJunk()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetIsJunk()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetIsJunk()
	 * @method \string fillIsJunk()
	 * @method \int getStatusId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex setStatusId(\int|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \int remindActualStatusId()
	 * @method \int requireStatusId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex resetStatusId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unsetStatusId()
	 * @method \int fillStatusId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex set($fieldName, $value)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex reset($fieldName)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex wakeUp($data)
	 */
	class EO_DuplicateIndex {
		/* @var \Bitrix\Crm\Integrity\Entity\DuplicateIndexTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\Entity\DuplicateIndexTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * EO_DuplicateIndex_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getTypeIdList()
	 * @method \string[] getMatchHashList()
	 * @method \string[] getScopeList()
	 * @method \string[] getMatchesList()
	 * @method \string[] fillMatches()
	 * @method \int[] getQuantityList()
	 * @method \int[] fillQuantity()
	 * @method \int[] getRootEntityIdList()
	 * @method \int[] fillRootEntityId()
	 * @method \string[] getRootEntityNameFlagList()
	 * @method \string[] fillRootEntityNameFlag()
	 * @method \string[] getRootEntityNameList()
	 * @method \string[] fillRootEntityName()
	 * @method \string[] getRootEntityTitleFlagList()
	 * @method \string[] fillRootEntityTitleFlag()
	 * @method \string[] getRootEntityTitleList()
	 * @method \string[] fillRootEntityTitle()
	 * @method \string[] getRootEntityPhoneFlagList()
	 * @method \string[] fillRootEntityPhoneFlag()
	 * @method \string[] getRootEntityPhoneList()
	 * @method \string[] fillRootEntityPhone()
	 * @method \string[] getRootEntityEmailFlagList()
	 * @method \string[] fillRootEntityEmailFlag()
	 * @method \string[] getRootEntityEmailList()
	 * @method \string[] fillRootEntityEmail()
	 * @method \string[] getRootEntityRqInnFlagList()
	 * @method \string[] fillRootEntityRqInnFlag()
	 * @method \string[] getRootEntityRqInnList()
	 * @method \string[] fillRootEntityRqInn()
	 * @method \string[] getRootEntityRqOgrnFlagList()
	 * @method \string[] fillRootEntityRqOgrnFlag()
	 * @method \string[] getRootEntityRqOgrnList()
	 * @method \string[] fillRootEntityRqOgrn()
	 * @method \string[] getRootEntityRqOgrnipFlagList()
	 * @method \string[] fillRootEntityRqOgrnipFlag()
	 * @method \string[] getRootEntityRqOgrnipList()
	 * @method \string[] fillRootEntityRqOgrnip()
	 * @method \string[] getRootEntityRqBinFlagList()
	 * @method \string[] fillRootEntityRqBinFlag()
	 * @method \string[] getRootEntityRqBinList()
	 * @method \string[] fillRootEntityRqBin()
	 * @method \string[] getRootEntityRqEdrpouFlagList()
	 * @method \string[] fillRootEntityRqEdrpouFlag()
	 * @method \string[] getRootEntityRqEdrpouList()
	 * @method \string[] fillRootEntityRqEdrpou()
	 * @method \string[] getRootEntityRqVatIdFlagList()
	 * @method \string[] fillRootEntityRqVatIdFlag()
	 * @method \string[] getRootEntityRqVatIdList()
	 * @method \string[] fillRootEntityRqVatId()
	 * @method \string[] getRootEntityRqAccNumFlagList()
	 * @method \string[] fillRootEntityRqAccNumFlag()
	 * @method \string[] getRootEntityRqAccNumList()
	 * @method \string[] fillRootEntityRqAccNum()
	 * @method \string[] getRootEntityRqIbanFlagList()
	 * @method \string[] fillRootEntityRqIbanFlag()
	 * @method \string[] getRootEntityRqIbanList()
	 * @method \string[] fillRootEntityRqIban()
	 * @method \string[] getRootEntityRqIikFlagList()
	 * @method \string[] fillRootEntityRqIikFlag()
	 * @method \string[] getRootEntityRqIikList()
	 * @method \string[] fillRootEntityRqIik()
	 * @method \string[] getIsJunkList()
	 * @method \string[] fillIsJunk()
	 * @method \int[] getStatusIdList()
	 * @method \int[] fillStatusId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex $object)
	 * @method bool has(\Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex getByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex[] getAll()
	 * @method bool remove(\Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DuplicateIndex_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Integrity\Entity\DuplicateIndexTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\Entity\DuplicateIndexTable';
	}
}
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * @method static EO_DuplicateIndex_Query query()
	 * @method static EO_DuplicateIndex_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DuplicateIndex_Result getById($id)
	 * @method static EO_DuplicateIndex_Result getList(array $parameters = array())
	 * @method static EO_DuplicateIndex_Entity getEntity()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex_Collection createCollection()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex wakeUpObject($row)
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex_Collection wakeUpCollection($rows)
	 */
	class DuplicateIndexTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DuplicateIndex_Result exec()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex fetchObject()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DuplicateIndex_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex fetchObject()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex_Collection fetchCollection()
	 */
	class EO_DuplicateIndex_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex_Collection createCollection()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex wakeUpObject($row)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndex_Collection wakeUpCollection($rows)
	 */
	class EO_DuplicateIndex_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Integrity\Entity\DuplicateIndexMismatchTable:crm/lib/integrity/entity/duplicateindexmismatch.php:1a50f734755ff30825b07cf9ea869a44 */
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * EO_DuplicateIndexMismatch
	 * @see \Bitrix\Crm\Integrity\Entity\DuplicateIndexMismatchTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string getMatchHash()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch setMatchHash(\string|\Bitrix\Main\DB\SqlExpression $matchHash)
	 * @method bool hasMatchHash()
	 * @method bool isMatchHashFilled()
	 * @method bool isMatchHashChanged()
	 * @method \int getLEntityId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch setLEntityId(\int|\Bitrix\Main\DB\SqlExpression $lEntityId)
	 * @method bool hasLEntityId()
	 * @method bool isLEntityIdFilled()
	 * @method bool isLEntityIdChanged()
	 * @method \int getREntityId()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch setREntityId(\int|\Bitrix\Main\DB\SqlExpression $rEntityId)
	 * @method bool hasREntityId()
	 * @method bool isREntityIdFilled()
	 * @method bool isREntityIdChanged()
	 * @method \string getScope()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch setScope(\string|\Bitrix\Main\DB\SqlExpression $scope)
	 * @method bool hasScope()
	 * @method bool isScopeFilled()
	 * @method bool isScopeChanged()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch set($fieldName, $value)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch reset($fieldName)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch wakeUp($data)
	 */
	class EO_DuplicateIndexMismatch {
		/* @var \Bitrix\Crm\Integrity\Entity\DuplicateIndexMismatchTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\Entity\DuplicateIndexMismatchTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * EO_DuplicateIndexMismatch_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getTypeIdList()
	 * @method \string[] getMatchHashList()
	 * @method \int[] getLEntityIdList()
	 * @method \int[] getREntityIdList()
	 * @method \string[] getScopeList()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch $object)
	 * @method bool has(\Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch getByPrimary($primary)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch[] getAll()
	 * @method bool remove(\Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DuplicateIndexMismatch_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Integrity\Entity\DuplicateIndexMismatchTable */
		static public $dataClass = '\Bitrix\Crm\Integrity\Entity\DuplicateIndexMismatchTable';
	}
}
namespace Bitrix\Crm\Integrity\Entity {
	/**
	 * @method static EO_DuplicateIndexMismatch_Query query()
	 * @method static EO_DuplicateIndexMismatch_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DuplicateIndexMismatch_Result getById($id)
	 * @method static EO_DuplicateIndexMismatch_Result getList(array $parameters = array())
	 * @method static EO_DuplicateIndexMismatch_Entity getEntity()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch_Collection createCollection()
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch wakeUpObject($row)
	 * @method static \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch_Collection wakeUpCollection($rows)
	 */
	class DuplicateIndexMismatchTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DuplicateIndexMismatch_Result exec()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch fetchObject()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DuplicateIndexMismatch_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch fetchObject()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch_Collection fetchCollection()
	 */
	class EO_DuplicateIndexMismatch_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch_Collection createCollection()
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch wakeUpObject($row)
	 * @method \Bitrix\Crm\Integrity\Entity\EO_DuplicateIndexMismatch_Collection wakeUpCollection($rows)
	 */
	class EO_DuplicateIndexMismatch_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\BasketTable:crm/lib/invoice/internals/basket.php:0198adab63e0f66d1826ed21c8959673 */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_Basket
	 * @see \Bitrix\Crm\Invoice\Internals\BasketTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetLid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetLid()
	 * @method \string fillLid()
	 * @method \int getFuserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setFuserId(\int|\Bitrix\Main\DB\SqlExpression $fuserId)
	 * @method bool hasFuserId()
	 * @method bool isFuserIdFilled()
	 * @method bool isFuserIdChanged()
	 * @method \int remindActualFuserId()
	 * @method \int requireFuserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetFuserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetFuserId()
	 * @method \int fillFuserId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser getFuser()
	 * @method \Bitrix\Sale\Internals\EO_Fuser remindActualFuser()
	 * @method \Bitrix\Sale\Internals\EO_Fuser requireFuser()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setFuser(\Bitrix\Sale\Internals\EO_Fuser $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetFuser()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetFuser()
	 * @method bool hasFuser()
	 * @method bool isFuserFilled()
	 * @method bool isFuserChanged()
	 * @method \Bitrix\Sale\Internals\EO_Fuser fillFuser()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetUser()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice getOrder()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice remindActualOrder()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice requireOrder()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setOrder(\Bitrix\Crm\Invoice\Internals\EO_Invoice $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetOrder()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetOrder()
	 * @method bool hasOrder()
	 * @method bool isOrderFilled()
	 * @method bool isOrderChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice fillOrder()
	 * @method \int getProductId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setProductId(\int|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \int remindActualProductId()
	 * @method \int requireProductId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetProductId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetProductId()
	 * @method \int fillProductId()
	 * @method \int getProductPriceId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setProductPriceId(\int|\Bitrix\Main\DB\SqlExpression $productPriceId)
	 * @method bool hasProductPriceId()
	 * @method bool isProductPriceIdFilled()
	 * @method bool isProductPriceIdChanged()
	 * @method \int remindActualProductPriceId()
	 * @method \int requireProductPriceId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetProductPriceId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetProductPriceId()
	 * @method \int fillProductPriceId()
	 * @method \int getPriceTypeId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setPriceTypeId(\int|\Bitrix\Main\DB\SqlExpression $priceTypeId)
	 * @method bool hasPriceTypeId()
	 * @method bool isPriceTypeIdFilled()
	 * @method bool isPriceTypeIdChanged()
	 * @method \int remindActualPriceTypeId()
	 * @method \int requirePriceTypeId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetPriceTypeId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetPriceTypeId()
	 * @method \int fillPriceTypeId()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetName()
	 * @method \string fillName()
	 * @method \string getNameWithIdent()
	 * @method \string remindActualNameWithIdent()
	 * @method \string requireNameWithIdent()
	 * @method bool hasNameWithIdent()
	 * @method bool isNameWithIdentFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetNameWithIdent()
	 * @method \string fillNameWithIdent()
	 * @method \float getPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setPrice(\float|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetPrice()
	 * @method \float fillPrice()
	 * @method \string getCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getBasePrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setBasePrice(\float|\Bitrix\Main\DB\SqlExpression $basePrice)
	 * @method bool hasBasePrice()
	 * @method bool isBasePriceFilled()
	 * @method bool isBasePriceChanged()
	 * @method \float remindActualBasePrice()
	 * @method \float requireBasePrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetBasePrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetBasePrice()
	 * @method \float fillBasePrice()
	 * @method \boolean getVatIncluded()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setVatIncluded(\boolean|\Bitrix\Main\DB\SqlExpression $vatIncluded)
	 * @method bool hasVatIncluded()
	 * @method bool isVatIncludedFilled()
	 * @method bool isVatIncludedChanged()
	 * @method \boolean remindActualVatIncluded()
	 * @method \boolean requireVatIncluded()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetVatIncluded()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetVatIncluded()
	 * @method \boolean fillVatIncluded()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateIns()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateIns()
	 * @method \Bitrix\Main\Type\DateTime requireDateIns()
	 * @method bool hasDateIns()
	 * @method bool isDateInsFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDateIns()
	 * @method \Bitrix\Main\Type\DateTime fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetDateUpdate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpd()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpd()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpd()
	 * @method bool hasDateUpd()
	 * @method bool isDateUpdFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDateUpd()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpd()
	 * @method \Bitrix\Main\Type\DateTime getDateRefresh()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setDateRefresh(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateRefresh)
	 * @method bool hasDateRefresh()
	 * @method bool isDateRefreshFilled()
	 * @method bool isDateRefreshChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRefresh()
	 * @method \Bitrix\Main\Type\DateTime requireDateRefresh()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetDateRefresh()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDateRefresh()
	 * @method \Bitrix\Main\Type\DateTime fillDateRefresh()
	 * @method \Bitrix\Main\Type\DateTime getDateRef()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateRef()
	 * @method \Bitrix\Main\Type\DateTime requireDateRef()
	 * @method bool hasDateRef()
	 * @method bool isDateRefFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDateRef()
	 * @method \Bitrix\Main\Type\DateTime fillDateRef()
	 * @method \float getWeight()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setWeight(\float|\Bitrix\Main\DB\SqlExpression $weight)
	 * @method bool hasWeight()
	 * @method bool isWeightFilled()
	 * @method bool isWeightChanged()
	 * @method \float remindActualWeight()
	 * @method \float requireWeight()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetWeight()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetWeight()
	 * @method \float fillWeight()
	 * @method \float getQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \boolean getDelay()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setDelay(\boolean|\Bitrix\Main\DB\SqlExpression $delay)
	 * @method bool hasDelay()
	 * @method bool isDelayFilled()
	 * @method bool isDelayChanged()
	 * @method \boolean remindActualDelay()
	 * @method \boolean requireDelay()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetDelay()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDelay()
	 * @method \boolean fillDelay()
	 * @method \float getSummaryPrice()
	 * @method \float remindActualSummaryPrice()
	 * @method \float requireSummaryPrice()
	 * @method bool hasSummaryPrice()
	 * @method bool isSummaryPriceFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetSummaryPrice()
	 * @method \float fillSummaryPrice()
	 * @method \boolean getCanBuy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setCanBuy(\boolean|\Bitrix\Main\DB\SqlExpression $canBuy)
	 * @method bool hasCanBuy()
	 * @method bool isCanBuyFilled()
	 * @method bool isCanBuyChanged()
	 * @method \boolean remindActualCanBuy()
	 * @method \boolean requireCanBuy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetCanBuy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetCanBuy()
	 * @method \boolean fillCanBuy()
	 * @method \string getMarkingCodeGroup()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setMarkingCodeGroup(\string|\Bitrix\Main\DB\SqlExpression $markingCodeGroup)
	 * @method bool hasMarkingCodeGroup()
	 * @method bool isMarkingCodeGroupFilled()
	 * @method bool isMarkingCodeGroupChanged()
	 * @method \string remindActualMarkingCodeGroup()
	 * @method \string requireMarkingCodeGroup()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetMarkingCodeGroup()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetMarkingCodeGroup()
	 * @method \string fillMarkingCodeGroup()
	 * @method \string getModule()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setModule(\string|\Bitrix\Main\DB\SqlExpression $module)
	 * @method bool hasModule()
	 * @method bool isModuleFilled()
	 * @method bool isModuleChanged()
	 * @method \string remindActualModule()
	 * @method \string requireModule()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetModule()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetModule()
	 * @method \string fillModule()
	 * @method \string getProductProviderClass()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setProductProviderClass(\string|\Bitrix\Main\DB\SqlExpression $productProviderClass)
	 * @method bool hasProductProviderClass()
	 * @method bool isProductProviderClassFilled()
	 * @method bool isProductProviderClassChanged()
	 * @method \string remindActualProductProviderClass()
	 * @method \string requireProductProviderClass()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetProductProviderClass()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetProductProviderClass()
	 * @method \string fillProductProviderClass()
	 * @method \string getNotes()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setNotes(\string|\Bitrix\Main\DB\SqlExpression $notes)
	 * @method bool hasNotes()
	 * @method bool isNotesFilled()
	 * @method bool isNotesChanged()
	 * @method \string remindActualNotes()
	 * @method \string requireNotes()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetNotes()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetNotes()
	 * @method \string fillNotes()
	 * @method \string getDetailPageUrl()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setDetailPageUrl(\string|\Bitrix\Main\DB\SqlExpression $detailPageUrl)
	 * @method bool hasDetailPageUrl()
	 * @method bool isDetailPageUrlFilled()
	 * @method bool isDetailPageUrlChanged()
	 * @method \string remindActualDetailPageUrl()
	 * @method \string requireDetailPageUrl()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetDetailPageUrl()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDetailPageUrl()
	 * @method \string fillDetailPageUrl()
	 * @method \float getDiscountPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setDiscountPrice(\float|\Bitrix\Main\DB\SqlExpression $discountPrice)
	 * @method bool hasDiscountPrice()
	 * @method bool isDiscountPriceFilled()
	 * @method bool isDiscountPriceChanged()
	 * @method \float remindActualDiscountPrice()
	 * @method \float requireDiscountPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetDiscountPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDiscountPrice()
	 * @method \float fillDiscountPrice()
	 * @method \string getCatalogXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setCatalogXmlId(\string|\Bitrix\Main\DB\SqlExpression $catalogXmlId)
	 * @method bool hasCatalogXmlId()
	 * @method bool isCatalogXmlIdFilled()
	 * @method bool isCatalogXmlIdChanged()
	 * @method \string remindActualCatalogXmlId()
	 * @method \string requireCatalogXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetCatalogXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetCatalogXmlId()
	 * @method \string fillCatalogXmlId()
	 * @method \string getProductXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setProductXmlId(\string|\Bitrix\Main\DB\SqlExpression $productXmlId)
	 * @method bool hasProductXmlId()
	 * @method bool isProductXmlIdFilled()
	 * @method bool isProductXmlIdChanged()
	 * @method \string remindActualProductXmlId()
	 * @method \string requireProductXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetProductXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetProductXmlId()
	 * @method \string fillProductXmlId()
	 * @method \string getDiscountName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setDiscountName(\string|\Bitrix\Main\DB\SqlExpression $discountName)
	 * @method bool hasDiscountName()
	 * @method bool isDiscountNameFilled()
	 * @method bool isDiscountNameChanged()
	 * @method \string remindActualDiscountName()
	 * @method \string requireDiscountName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetDiscountName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDiscountName()
	 * @method \string fillDiscountName()
	 * @method \string getDiscountValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setDiscountValue(\string|\Bitrix\Main\DB\SqlExpression $discountValue)
	 * @method bool hasDiscountValue()
	 * @method bool isDiscountValueFilled()
	 * @method bool isDiscountValueChanged()
	 * @method \string remindActualDiscountValue()
	 * @method \string requireDiscountValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetDiscountValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDiscountValue()
	 * @method \string fillDiscountValue()
	 * @method \string getDiscountCoupon()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setDiscountCoupon(\string|\Bitrix\Main\DB\SqlExpression $discountCoupon)
	 * @method bool hasDiscountCoupon()
	 * @method bool isDiscountCouponFilled()
	 * @method bool isDiscountCouponChanged()
	 * @method \string remindActualDiscountCoupon()
	 * @method \string requireDiscountCoupon()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetDiscountCoupon()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDiscountCoupon()
	 * @method \string fillDiscountCoupon()
	 * @method \float getVatRate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setVatRate(\float|\Bitrix\Main\DB\SqlExpression $vatRate)
	 * @method bool hasVatRate()
	 * @method bool isVatRateFilled()
	 * @method bool isVatRateChanged()
	 * @method \float remindActualVatRate()
	 * @method \float requireVatRate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetVatRate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetVatRate()
	 * @method \float fillVatRate()
	 * @method \string getVatRatePrc()
	 * @method \string remindActualVatRatePrc()
	 * @method \string requireVatRatePrc()
	 * @method bool hasVatRatePrc()
	 * @method bool isVatRatePrcFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetVatRatePrc()
	 * @method \string fillVatRatePrc()
	 * @method \boolean getSubscribe()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setSubscribe(\boolean|\Bitrix\Main\DB\SqlExpression $subscribe)
	 * @method bool hasSubscribe()
	 * @method bool isSubscribeFilled()
	 * @method bool isSubscribeChanged()
	 * @method \boolean remindActualSubscribe()
	 * @method \boolean requireSubscribe()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetSubscribe()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetSubscribe()
	 * @method \boolean fillSubscribe()
	 * @method \int getNSubscribe()
	 * @method \int remindActualNSubscribe()
	 * @method \int requireNSubscribe()
	 * @method bool hasNSubscribe()
	 * @method bool isNSubscribeFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetNSubscribe()
	 * @method \int fillNSubscribe()
	 * @method \boolean getReserved()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setReserved(\boolean|\Bitrix\Main\DB\SqlExpression $reserved)
	 * @method bool hasReserved()
	 * @method bool isReservedFilled()
	 * @method bool isReservedChanged()
	 * @method \boolean remindActualReserved()
	 * @method \boolean requireReserved()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetReserved()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetReserved()
	 * @method \boolean fillReserved()
	 * @method \float getReserveQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setReserveQuantity(\float|\Bitrix\Main\DB\SqlExpression $reserveQuantity)
	 * @method bool hasReserveQuantity()
	 * @method bool isReserveQuantityFilled()
	 * @method bool isReserveQuantityChanged()
	 * @method \float remindActualReserveQuantity()
	 * @method \float requireReserveQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetReserveQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetReserveQuantity()
	 * @method \float fillReserveQuantity()
	 * @method \boolean getBarcodeMulti()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setBarcodeMulti(\boolean|\Bitrix\Main\DB\SqlExpression $barcodeMulti)
	 * @method bool hasBarcodeMulti()
	 * @method bool isBarcodeMultiFilled()
	 * @method bool isBarcodeMultiChanged()
	 * @method \boolean remindActualBarcodeMulti()
	 * @method \boolean requireBarcodeMulti()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetBarcodeMulti()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetBarcodeMulti()
	 * @method \boolean fillBarcodeMulti()
	 * @method \boolean getCustomPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setCustomPrice(\boolean|\Bitrix\Main\DB\SqlExpression $customPrice)
	 * @method bool hasCustomPrice()
	 * @method bool isCustomPriceFilled()
	 * @method bool isCustomPriceChanged()
	 * @method \boolean remindActualCustomPrice()
	 * @method \boolean requireCustomPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetCustomPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetCustomPrice()
	 * @method \boolean fillCustomPrice()
	 * @method \string getDimensions()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setDimensions(\string|\Bitrix\Main\DB\SqlExpression $dimensions)
	 * @method bool hasDimensions()
	 * @method bool isDimensionsFilled()
	 * @method bool isDimensionsChanged()
	 * @method \string remindActualDimensions()
	 * @method \string requireDimensions()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetDimensions()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetDimensions()
	 * @method \string fillDimensions()
	 * @method \int getType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setType(\int|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \int remindActualType()
	 * @method \int requireType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetType()
	 * @method \int fillType()
	 * @method \int getSetParentId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setSetParentId(\int|\Bitrix\Main\DB\SqlExpression $setParentId)
	 * @method bool hasSetParentId()
	 * @method bool isSetParentIdFilled()
	 * @method bool isSetParentIdChanged()
	 * @method \int remindActualSetParentId()
	 * @method \int requireSetParentId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetSetParentId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetSetParentId()
	 * @method \int fillSetParentId()
	 * @method \int getMeasureCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setMeasureCode(\int|\Bitrix\Main\DB\SqlExpression $measureCode)
	 * @method bool hasMeasureCode()
	 * @method bool isMeasureCodeFilled()
	 * @method bool isMeasureCodeChanged()
	 * @method \int remindActualMeasureCode()
	 * @method \int requireMeasureCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetMeasureCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetMeasureCode()
	 * @method \int fillMeasureCode()
	 * @method \string getMeasureName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setMeasureName(\string|\Bitrix\Main\DB\SqlExpression $measureName)
	 * @method bool hasMeasureName()
	 * @method bool isMeasureNameFilled()
	 * @method bool isMeasureNameChanged()
	 * @method \string remindActualMeasureName()
	 * @method \string requireMeasureName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetMeasureName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetMeasureName()
	 * @method \string fillMeasureName()
	 * @method \string getCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setCallbackFunc(\string|\Bitrix\Main\DB\SqlExpression $callbackFunc)
	 * @method bool hasCallbackFunc()
	 * @method bool isCallbackFuncFilled()
	 * @method bool isCallbackFuncChanged()
	 * @method \string remindActualCallbackFunc()
	 * @method \string requireCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetCallbackFunc()
	 * @method \string fillCallbackFunc()
	 * @method \string getOrderCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setOrderCallbackFunc(\string|\Bitrix\Main\DB\SqlExpression $orderCallbackFunc)
	 * @method bool hasOrderCallbackFunc()
	 * @method bool isOrderCallbackFuncFilled()
	 * @method bool isOrderCallbackFuncChanged()
	 * @method \string remindActualOrderCallbackFunc()
	 * @method \string requireOrderCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetOrderCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetOrderCallbackFunc()
	 * @method \string fillOrderCallbackFunc()
	 * @method \string getCancelCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setCancelCallbackFunc(\string|\Bitrix\Main\DB\SqlExpression $cancelCallbackFunc)
	 * @method bool hasCancelCallbackFunc()
	 * @method bool isCancelCallbackFuncFilled()
	 * @method bool isCancelCallbackFuncChanged()
	 * @method \string remindActualCancelCallbackFunc()
	 * @method \string requireCancelCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetCancelCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetCancelCallbackFunc()
	 * @method \string fillCancelCallbackFunc()
	 * @method \string getPayCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setPayCallbackFunc(\string|\Bitrix\Main\DB\SqlExpression $payCallbackFunc)
	 * @method bool hasPayCallbackFunc()
	 * @method bool isPayCallbackFuncFilled()
	 * @method bool isPayCallbackFuncChanged()
	 * @method \string remindActualPayCallbackFunc()
	 * @method \string requirePayCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetPayCallbackFunc()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetPayCallbackFunc()
	 * @method \string fillPayCallbackFunc()
	 * @method \string getRecommendation()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setRecommendation(\string|\Bitrix\Main\DB\SqlExpression $recommendation)
	 * @method bool hasRecommendation()
	 * @method bool isRecommendationFilled()
	 * @method bool isRecommendationChanged()
	 * @method \string remindActualRecommendation()
	 * @method \string requireRecommendation()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetRecommendation()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetRecommendation()
	 * @method \string fillRecommendation()
	 * @method \float getAllPrice()
	 * @method \float remindActualAllPrice()
	 * @method \float requireAllPrice()
	 * @method bool hasAllPrice()
	 * @method bool isAllPriceFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetAllPrice()
	 * @method \float fillAllPrice()
	 * @method \float getSummaryPurchasingPrice()
	 * @method \float remindActualSummaryPurchasingPrice()
	 * @method \float requireSummaryPurchasingPrice()
	 * @method bool hasSummaryPurchasingPrice()
	 * @method bool isSummaryPurchasingPriceFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetSummaryPurchasingPrice()
	 * @method \float fillSummaryPurchasingPrice()
	 * @method \float getGrossProfit()
	 * @method \float remindActualGrossProfit()
	 * @method \float requireGrossProfit()
	 * @method bool hasGrossProfit()
	 * @method bool isGrossProfitFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetGrossProfit()
	 * @method \float fillGrossProfit()
	 * @method \float getProfitability()
	 * @method \float remindActualProfitability()
	 * @method \float requireProfitability()
	 * @method bool hasProfitability()
	 * @method bool isProfitabilityFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetProfitability()
	 * @method \float fillProfitability()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem getShipmentItem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem remindActualShipmentItem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem requireShipmentItem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setShipmentItem(\Bitrix\Crm\Invoice\Internals\EO_ShipmentItem $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetShipmentItem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetShipmentItem()
	 * @method bool hasShipmentItem()
	 * @method bool isShipmentItemFilled()
	 * @method bool isShipmentItemChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem fillShipmentItem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment getShipment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment remindActualShipment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment requireShipment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setShipment(\Bitrix\Crm\Invoice\Internals\EO_Shipment $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetShipment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetShipment()
	 * @method bool hasShipment()
	 * @method bool isShipmentFilled()
	 * @method bool isShipmentChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment fillShipment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment getPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment remindActualPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment requirePayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setPayment(\Bitrix\Crm\Invoice\Internals\EO_Payment $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetPayment()
	 * @method bool hasPayment()
	 * @method bool isPaymentFilled()
	 * @method bool isPaymentChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment fillPayment()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket resetSort()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unsetSort()
	 * @method \int fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Basket wakeUp($data)
	 */
	class EO_Basket {
		/* @var \Bitrix\Crm\Invoice\Internals\BasketTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\BasketTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_Basket_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \int[] getFuserIdList()
	 * @method \int[] fillFuserId()
	 * @method \Bitrix\Sale\Internals\EO_Fuser[] getFuserList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection getFuserCollection()
	 * @method \Bitrix\Sale\Internals\EO_Fuser_Collection fillFuser()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice[] getOrderList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection getOrderCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection fillOrder()
	 * @method \int[] getProductIdList()
	 * @method \int[] fillProductId()
	 * @method \int[] getProductPriceIdList()
	 * @method \int[] fillProductPriceId()
	 * @method \int[] getPriceTypeIdList()
	 * @method \int[] fillPriceTypeId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getNameWithIdentList()
	 * @method \string[] fillNameWithIdent()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getBasePriceList()
	 * @method \float[] fillBasePrice()
	 * @method \boolean[] getVatIncludedList()
	 * @method \boolean[] fillVatIncluded()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpd()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRefreshList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRefresh()
	 * @method \Bitrix\Main\Type\DateTime[] getDateRefList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateRef()
	 * @method \float[] getWeightList()
	 * @method \float[] fillWeight()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \boolean[] getDelayList()
	 * @method \boolean[] fillDelay()
	 * @method \float[] getSummaryPriceList()
	 * @method \float[] fillSummaryPrice()
	 * @method \boolean[] getCanBuyList()
	 * @method \boolean[] fillCanBuy()
	 * @method \string[] getMarkingCodeGroupList()
	 * @method \string[] fillMarkingCodeGroup()
	 * @method \string[] getModuleList()
	 * @method \string[] fillModule()
	 * @method \string[] getProductProviderClassList()
	 * @method \string[] fillProductProviderClass()
	 * @method \string[] getNotesList()
	 * @method \string[] fillNotes()
	 * @method \string[] getDetailPageUrlList()
	 * @method \string[] fillDetailPageUrl()
	 * @method \float[] getDiscountPriceList()
	 * @method \float[] fillDiscountPrice()
	 * @method \string[] getCatalogXmlIdList()
	 * @method \string[] fillCatalogXmlId()
	 * @method \string[] getProductXmlIdList()
	 * @method \string[] fillProductXmlId()
	 * @method \string[] getDiscountNameList()
	 * @method \string[] fillDiscountName()
	 * @method \string[] getDiscountValueList()
	 * @method \string[] fillDiscountValue()
	 * @method \string[] getDiscountCouponList()
	 * @method \string[] fillDiscountCoupon()
	 * @method \float[] getVatRateList()
	 * @method \float[] fillVatRate()
	 * @method \string[] getVatRatePrcList()
	 * @method \string[] fillVatRatePrc()
	 * @method \boolean[] getSubscribeList()
	 * @method \boolean[] fillSubscribe()
	 * @method \int[] getNSubscribeList()
	 * @method \int[] fillNSubscribe()
	 * @method \boolean[] getReservedList()
	 * @method \boolean[] fillReserved()
	 * @method \float[] getReserveQuantityList()
	 * @method \float[] fillReserveQuantity()
	 * @method \boolean[] getBarcodeMultiList()
	 * @method \boolean[] fillBarcodeMulti()
	 * @method \boolean[] getCustomPriceList()
	 * @method \boolean[] fillCustomPrice()
	 * @method \string[] getDimensionsList()
	 * @method \string[] fillDimensions()
	 * @method \int[] getTypeList()
	 * @method \int[] fillType()
	 * @method \int[] getSetParentIdList()
	 * @method \int[] fillSetParentId()
	 * @method \int[] getMeasureCodeList()
	 * @method \int[] fillMeasureCode()
	 * @method \string[] getMeasureNameList()
	 * @method \string[] fillMeasureName()
	 * @method \string[] getCallbackFuncList()
	 * @method \string[] fillCallbackFunc()
	 * @method \string[] getOrderCallbackFuncList()
	 * @method \string[] fillOrderCallbackFunc()
	 * @method \string[] getCancelCallbackFuncList()
	 * @method \string[] fillCancelCallbackFunc()
	 * @method \string[] getPayCallbackFuncList()
	 * @method \string[] fillPayCallbackFunc()
	 * @method \string[] getRecommendationList()
	 * @method \string[] fillRecommendation()
	 * @method \float[] getAllPriceList()
	 * @method \float[] fillAllPrice()
	 * @method \float[] getSummaryPurchasingPriceList()
	 * @method \float[] fillSummaryPurchasingPrice()
	 * @method \float[] getGrossProfitList()
	 * @method \float[] fillGrossProfit()
	 * @method \float[] getProfitabilityList()
	 * @method \float[] fillProfitability()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem[] getShipmentItemList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection getShipmentItemCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection fillShipmentItem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment[] getShipmentList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection getShipmentCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection fillShipment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment[] getPaymentList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection getPaymentCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection fillPayment()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_Basket $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_Basket $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_Basket $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Basket_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\BasketTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\BasketTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_Basket_Query query()
	 * @method static EO_Basket_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Basket_Result getById($id)
	 * @method static EO_Basket_Result getList(array $parameters = array())
	 * @method static EO_Basket_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Basket createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Basket wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection wakeUpCollection($rows)
	 */
	class BasketTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Basket_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Basket_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection fetchCollection()
	 */
	class EO_Basket_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection wakeUpCollection($rows)
	 */
	class EO_Basket_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\BasketPropertyTable:crm/lib/invoice/internals/basketproperty.php:8bd097af7638cd3aa9f586ca80ec7cf6 */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_BasketProperty
	 * @see \Bitrix\Crm\Invoice\Internals\BasketPropertyTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getBasketId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty setBasketId(\int|\Bitrix\Main\DB\SqlExpression $basketId)
	 * @method bool hasBasketId()
	 * @method bool isBasketIdFilled()
	 * @method bool isBasketIdChanged()
	 * @method \int remindActualBasketId()
	 * @method \int requireBasketId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty resetBasketId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty unsetBasketId()
	 * @method \int fillBasketId()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty resetName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty unsetName()
	 * @method \string fillName()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty resetValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty unsetValue()
	 * @method \string fillValue()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty resetCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty unsetCode()
	 * @method \string fillCode()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty resetXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty resetSort()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty unsetSort()
	 * @method \int fillSort()
	 * @method \Bitrix\Sale\Internals\EO_Basket getBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket remindActualBasket()
	 * @method \Bitrix\Sale\Internals\EO_Basket requireBasket()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty setBasket(\Bitrix\Sale\Internals\EO_Basket $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty resetBasket()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty unsetBasket()
	 * @method bool hasBasket()
	 * @method bool isBasketFilled()
	 * @method bool isBasketChanged()
	 * @method \Bitrix\Sale\Internals\EO_Basket fillBasket()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_BasketProperty wakeUp($data)
	 */
	class EO_BasketProperty {
		/* @var \Bitrix\Crm\Invoice\Internals\BasketPropertyTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\BasketPropertyTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_BasketProperty_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getBasketIdList()
	 * @method \int[] fillBasketId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \Bitrix\Sale\Internals\EO_Basket[] getBasketList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty_Collection getBasketCollection()
	 * @method \Bitrix\Sale\Internals\EO_Basket_Collection fillBasket()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_BasketProperty $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_BasketProperty $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_BasketProperty $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_BasketProperty_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_BasketProperty_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\BasketPropertyTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\BasketPropertyTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_BasketProperty_Query query()
	 * @method static EO_BasketProperty_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_BasketProperty_Result getById($id)
	 * @method static EO_BasketProperty_Result getList(array $parameters = array())
	 * @method static EO_BasketProperty_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_BasketProperty createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_BasketProperty_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_BasketProperty wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_BasketProperty_Collection wakeUpCollection($rows)
	 */
	class BasketPropertyTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_BasketProperty_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_BasketProperty_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty_Collection fetchCollection()
	 */
	class EO_BasketProperty_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_BasketProperty_Collection wakeUpCollection($rows)
	 */
	class EO_BasketProperty_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\EntityMarkerTable:crm/lib/invoice/internals/entitymarker.php:13cf94792d2f49a56ca3f0997e466369 */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_EntityMarker
	 * @see \Bitrix\Crm\Invoice\Internals\EntityMarkerTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetType()
	 * @method \string fillType()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetCode()
	 * @method \string fillCode()
	 * @method \string getMessage()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setMessage(\string|\Bitrix\Main\DB\SqlExpression $message)
	 * @method bool hasMessage()
	 * @method bool isMessageFilled()
	 * @method bool isMessageChanged()
	 * @method \string remindActualMessage()
	 * @method \string requireMessage()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetMessage()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetMessage()
	 * @method \string fillMessage()
	 * @method \string getComment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setComment(\string|\Bitrix\Main\DB\SqlExpression $comment)
	 * @method bool hasComment()
	 * @method bool isCommentFilled()
	 * @method bool isCommentChanged()
	 * @method \string remindActualComment()
	 * @method \string requireComment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetComment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetComment()
	 * @method \string fillComment()
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetDateCreate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetDateUpdate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \boolean getSuccess()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker setSuccess(\boolean|\Bitrix\Main\DB\SqlExpression $success)
	 * @method bool hasSuccess()
	 * @method bool isSuccessFilled()
	 * @method bool isSuccessChanged()
	 * @method \boolean remindActualSuccess()
	 * @method \boolean requireSuccess()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker resetSuccess()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unsetSuccess()
	 * @method \boolean fillSuccess()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_EntityMarker wakeUp($data)
	 */
	class EO_EntityMarker {
		/* @var \Bitrix\Crm\Invoice\Internals\EntityMarkerTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\EntityMarkerTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_EntityMarker_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getMessageList()
	 * @method \string[] fillMessage()
	 * @method \string[] getCommentList()
	 * @method \string[] fillComment()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \boolean[] getSuccessList()
	 * @method \boolean[] fillSuccess()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_EntityMarker $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_EntityMarker $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_EntityMarker $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_EntityMarker_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EntityMarker_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\EntityMarkerTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\EntityMarkerTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_EntityMarker_Query query()
	 * @method static EO_EntityMarker_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EntityMarker_Result getById($id)
	 * @method static EO_EntityMarker_Result getList(array $parameters = array())
	 * @method static EO_EntityMarker_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_EntityMarker createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_EntityMarker_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_EntityMarker wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_EntityMarker_Collection wakeUpCollection($rows)
	 */
	class EntityMarkerTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_EntityMarker_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_EntityMarker_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker_Collection fetchCollection()
	 */
	class EO_EntityMarker_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_EntityMarker_Collection wakeUpCollection($rows)
	 */
	class EO_EntityMarker_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\InvoiceTable:crm/lib/invoice/internals/invoice.php:0a0f5cc70cd24ddacadf59e6d8a33d0c */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_Invoice
	 * @see \Bitrix\Crm\Invoice\Internals\InvoiceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getLid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetLid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetLid()
	 * @method \string fillLid()
	 * @method \string getAccountNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setAccountNumber(\string|\Bitrix\Main\DB\SqlExpression $accountNumber)
	 * @method bool hasAccountNumber()
	 * @method bool isAccountNumberFilled()
	 * @method bool isAccountNumberChanged()
	 * @method \string remindActualAccountNumber()
	 * @method \string requireAccountNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetAccountNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetAccountNumber()
	 * @method \string fillAccountNumber()
	 * @method \string getTrackingNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setTrackingNumber(\string|\Bitrix\Main\DB\SqlExpression $trackingNumber)
	 * @method bool hasTrackingNumber()
	 * @method bool isTrackingNumberFilled()
	 * @method bool isTrackingNumberChanged()
	 * @method \string remindActualTrackingNumber()
	 * @method \string requireTrackingNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetTrackingNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetTrackingNumber()
	 * @method \string fillTrackingNumber()
	 * @method \int getPaySystemId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setPaySystemId(\int|\Bitrix\Main\DB\SqlExpression $paySystemId)
	 * @method bool hasPaySystemId()
	 * @method bool isPaySystemIdFilled()
	 * @method bool isPaySystemIdChanged()
	 * @method \int remindActualPaySystemId()
	 * @method \int requirePaySystemId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetPaySystemId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetPaySystemId()
	 * @method \int fillPaySystemId()
	 * @method \int getDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $deliveryId)
	 * @method bool hasDeliveryId()
	 * @method bool isDeliveryIdFilled()
	 * @method bool isDeliveryIdChanged()
	 * @method \int remindActualDeliveryId()
	 * @method \int requireDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDeliveryId()
	 * @method \int fillDeliveryId()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsertShort()
	 * @method bool hasDateInsertShort()
	 * @method bool isDateInsertShortFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime getDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsertFormat()
	 * @method bool hasDateInsertFormat()
	 * @method bool isDateInsertFormatFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDateUpdate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdateShort()
	 * @method bool hasDateUpdateShort()
	 * @method bool isDateUpdateShortFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdateShort()
	 * @method \string getProductsQuant()
	 * @method \string remindActualProductsQuant()
	 * @method \string requireProductsQuant()
	 * @method bool hasProductsQuant()
	 * @method bool isProductsQuantFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetProductsQuant()
	 * @method \string fillProductsQuant()
	 * @method \string getPersonTypeId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setPersonTypeId(\string|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \string remindActualPersonTypeId()
	 * @method \string requirePersonTypeId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetPersonTypeId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetPersonTypeId()
	 * @method \string fillPersonTypeId()
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetUser()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 * @method \boolean getPayed()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setPayed(\boolean|\Bitrix\Main\DB\SqlExpression $payed)
	 * @method bool hasPayed()
	 * @method bool isPayedFilled()
	 * @method bool isPayedChanged()
	 * @method \boolean remindActualPayed()
	 * @method \boolean requirePayed()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetPayed()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetPayed()
	 * @method \boolean fillPayed()
	 * @method \Bitrix\Main\Type\DateTime getDatePayed()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDatePayed(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $datePayed)
	 * @method bool hasDatePayed()
	 * @method bool isDatePayedFilled()
	 * @method bool isDatePayedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePayed()
	 * @method \Bitrix\Main\Type\DateTime requireDatePayed()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDatePayed()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDatePayed()
	 * @method \Bitrix\Main\Type\DateTime fillDatePayed()
	 * @method \int getEmpPayedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setEmpPayedId(\int|\Bitrix\Main\DB\SqlExpression $empPayedId)
	 * @method bool hasEmpPayedId()
	 * @method bool isEmpPayedIdFilled()
	 * @method bool isEmpPayedIdChanged()
	 * @method \int remindActualEmpPayedId()
	 * @method \int requireEmpPayedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetEmpPayedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetEmpPayedId()
	 * @method \int fillEmpPayedId()
	 * @method \boolean getDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDeducted(\boolean|\Bitrix\Main\DB\SqlExpression $deducted)
	 * @method bool hasDeducted()
	 * @method bool isDeductedFilled()
	 * @method bool isDeductedChanged()
	 * @method \boolean remindActualDeducted()
	 * @method \boolean requireDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDeducted()
	 * @method \boolean fillDeducted()
	 * @method \Bitrix\Main\Type\DateTime getDateDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDateDeducted(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateDeducted)
	 * @method bool hasDateDeducted()
	 * @method bool isDateDeductedFilled()
	 * @method bool isDateDeductedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateDeducted()
	 * @method \Bitrix\Main\Type\DateTime requireDateDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDateDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateDeducted()
	 * @method \Bitrix\Main\Type\DateTime fillDateDeducted()
	 * @method \int getEmpDeductedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setEmpDeductedId(\int|\Bitrix\Main\DB\SqlExpression $empDeductedId)
	 * @method bool hasEmpDeductedId()
	 * @method bool isEmpDeductedIdFilled()
	 * @method bool isEmpDeductedIdChanged()
	 * @method \int remindActualEmpDeductedId()
	 * @method \int requireEmpDeductedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetEmpDeductedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetEmpDeductedId()
	 * @method \int fillEmpDeductedId()
	 * @method \string getReasonUndoDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setReasonUndoDeducted(\string|\Bitrix\Main\DB\SqlExpression $reasonUndoDeducted)
	 * @method bool hasReasonUndoDeducted()
	 * @method bool isReasonUndoDeductedFilled()
	 * @method bool isReasonUndoDeductedChanged()
	 * @method \string remindActualReasonUndoDeducted()
	 * @method \string requireReasonUndoDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetReasonUndoDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetReasonUndoDeducted()
	 * @method \string fillReasonUndoDeducted()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetStatusId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang getStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang remindActualStatus()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang requireStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setStatus(\Bitrix\Sale\Internals\EO_StatusLang $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetStatus()
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang fillStatus()
	 * @method \Bitrix\Main\Type\DateTime getDateStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDateStatus(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateStatus)
	 * @method bool hasDateStatus()
	 * @method bool isDateStatusFilled()
	 * @method bool isDateStatusChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStatus()
	 * @method \Bitrix\Main\Type\DateTime requireDateStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDateStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateStatus()
	 * @method \Bitrix\Main\Type\DateTime fillDateStatus()
	 * @method \Bitrix\Main\Type\DateTime getDateStatusShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStatusShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateStatusShort()
	 * @method bool hasDateStatusShort()
	 * @method bool isDateStatusShortFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateStatusShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateStatusShort()
	 * @method \int getEmpStatusId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setEmpStatusId(\int|\Bitrix\Main\DB\SqlExpression $empStatusId)
	 * @method bool hasEmpStatusId()
	 * @method bool isEmpStatusIdFilled()
	 * @method bool isEmpStatusIdChanged()
	 * @method \int remindActualEmpStatusId()
	 * @method \int requireEmpStatusId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetEmpStatusId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetEmpStatusId()
	 * @method \int fillEmpStatusId()
	 * @method \Bitrix\Main\EO_User getEmpStatusBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpStatusBy()
	 * @method \Bitrix\Main\EO_User requireEmpStatusBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setEmpStatusBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetEmpStatusBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetEmpStatusBy()
	 * @method bool hasEmpStatusBy()
	 * @method bool isEmpStatusByFilled()
	 * @method bool isEmpStatusByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpStatusBy()
	 * @method \boolean getMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setMarked(\boolean|\Bitrix\Main\DB\SqlExpression $marked)
	 * @method bool hasMarked()
	 * @method bool isMarkedFilled()
	 * @method bool isMarkedChanged()
	 * @method \boolean remindActualMarked()
	 * @method \boolean requireMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetMarked()
	 * @method \boolean fillMarked()
	 * @method \Bitrix\Main\Type\DateTime getDateMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDateMarked(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateMarked)
	 * @method bool hasDateMarked()
	 * @method bool isDateMarkedFilled()
	 * @method bool isDateMarkedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateMarked()
	 * @method \Bitrix\Main\Type\DateTime requireDateMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDateMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateMarked()
	 * @method \Bitrix\Main\Type\DateTime fillDateMarked()
	 * @method \int getEmpMarkedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setEmpMarkedId(\int|\Bitrix\Main\DB\SqlExpression $empMarkedId)
	 * @method bool hasEmpMarkedId()
	 * @method bool isEmpMarkedIdFilled()
	 * @method bool isEmpMarkedIdChanged()
	 * @method \int remindActualEmpMarkedId()
	 * @method \int requireEmpMarkedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetEmpMarkedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetEmpMarkedId()
	 * @method \int fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User getEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User requireEmpMarkedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setEmpMarkedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetEmpMarkedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetEmpMarkedBy()
	 * @method bool hasEmpMarkedBy()
	 * @method bool isEmpMarkedByFilled()
	 * @method bool isEmpMarkedByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpMarkedBy()
	 * @method \string getReasonMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setReasonMarked(\string|\Bitrix\Main\DB\SqlExpression $reasonMarked)
	 * @method bool hasReasonMarked()
	 * @method bool isReasonMarkedFilled()
	 * @method bool isReasonMarkedChanged()
	 * @method \string remindActualReasonMarked()
	 * @method \string requireReasonMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetReasonMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetReasonMarked()
	 * @method \string fillReasonMarked()
	 * @method \float getPriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setPriceDelivery(\float|\Bitrix\Main\DB\SqlExpression $priceDelivery)
	 * @method bool hasPriceDelivery()
	 * @method bool isPriceDeliveryFilled()
	 * @method bool isPriceDeliveryChanged()
	 * @method \float remindActualPriceDelivery()
	 * @method \float requirePriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetPriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetPriceDelivery()
	 * @method \float fillPriceDelivery()
	 * @method \boolean getAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setAllowDelivery(\boolean|\Bitrix\Main\DB\SqlExpression $allowDelivery)
	 * @method bool hasAllowDelivery()
	 * @method bool isAllowDeliveryFilled()
	 * @method bool isAllowDeliveryChanged()
	 * @method \boolean remindActualAllowDelivery()
	 * @method \boolean requireAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetAllowDelivery()
	 * @method \boolean fillAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime getDateAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDateAllowDelivery(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateAllowDelivery)
	 * @method bool hasDateAllowDelivery()
	 * @method bool isDateAllowDeliveryFilled()
	 * @method bool isDateAllowDeliveryChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime requireDateAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDateAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime fillDateAllowDelivery()
	 * @method \int getEmpAllowDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setEmpAllowDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $empAllowDeliveryId)
	 * @method bool hasEmpAllowDeliveryId()
	 * @method bool isEmpAllowDeliveryIdFilled()
	 * @method bool isEmpAllowDeliveryIdChanged()
	 * @method \int remindActualEmpAllowDeliveryId()
	 * @method \int requireEmpAllowDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetEmpAllowDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetEmpAllowDeliveryId()
	 * @method \int fillEmpAllowDeliveryId()
	 * @method \boolean getReserved()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setReserved(\boolean|\Bitrix\Main\DB\SqlExpression $reserved)
	 * @method bool hasReserved()
	 * @method bool isReservedFilled()
	 * @method bool isReservedChanged()
	 * @method \boolean remindActualReserved()
	 * @method \boolean requireReserved()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetReserved()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetReserved()
	 * @method \boolean fillReserved()
	 * @method \float getPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setPrice(\float|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetPrice()
	 * @method \float fillPrice()
	 * @method \string getCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getDiscountValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDiscountValue(\float|\Bitrix\Main\DB\SqlExpression $discountValue)
	 * @method bool hasDiscountValue()
	 * @method bool isDiscountValueFilled()
	 * @method bool isDiscountValueChanged()
	 * @method \float remindActualDiscountValue()
	 * @method \float requireDiscountValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDiscountValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDiscountValue()
	 * @method \float fillDiscountValue()
	 * @method \string getDiscountAll()
	 * @method \string remindActualDiscountAll()
	 * @method \string requireDiscountAll()
	 * @method bool hasDiscountAll()
	 * @method bool isDiscountAllFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDiscountAll()
	 * @method \string fillDiscountAll()
	 * @method \float getTaxValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setTaxValue(\float|\Bitrix\Main\DB\SqlExpression $taxValue)
	 * @method bool hasTaxValue()
	 * @method bool isTaxValueFilled()
	 * @method bool isTaxValueChanged()
	 * @method \float remindActualTaxValue()
	 * @method \float requireTaxValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetTaxValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetTaxValue()
	 * @method \float fillTaxValue()
	 * @method \float getSumPaid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setSumPaid(\float|\Bitrix\Main\DB\SqlExpression $sumPaid)
	 * @method bool hasSumPaid()
	 * @method bool isSumPaidFilled()
	 * @method bool isSumPaidChanged()
	 * @method \float remindActualSumPaid()
	 * @method \float requireSumPaid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetSumPaid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetSumPaid()
	 * @method \float fillSumPaid()
	 * @method \string getSumPaidForrep()
	 * @method \string remindActualSumPaidForrep()
	 * @method \string requireSumPaidForrep()
	 * @method bool hasSumPaidForrep()
	 * @method bool isSumPaidForrepFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetSumPaidForrep()
	 * @method \string fillSumPaidForrep()
	 * @method \string getUserDescription()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setUserDescription(\string|\Bitrix\Main\DB\SqlExpression $userDescription)
	 * @method bool hasUserDescription()
	 * @method bool isUserDescriptionFilled()
	 * @method bool isUserDescriptionChanged()
	 * @method \string remindActualUserDescription()
	 * @method \string requireUserDescription()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetUserDescription()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetUserDescription()
	 * @method \string fillUserDescription()
	 * @method \string getPayVoucherNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setPayVoucherNum(\string|\Bitrix\Main\DB\SqlExpression $payVoucherNum)
	 * @method bool hasPayVoucherNum()
	 * @method bool isPayVoucherNumFilled()
	 * @method bool isPayVoucherNumChanged()
	 * @method \string remindActualPayVoucherNum()
	 * @method \string requirePayVoucherNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetPayVoucherNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetPayVoucherNum()
	 * @method \string fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\Date getPayVoucherDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setPayVoucherDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $payVoucherDate)
	 * @method bool hasPayVoucherDate()
	 * @method bool isPayVoucherDateFilled()
	 * @method bool isPayVoucherDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date requirePayVoucherDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetPayVoucherDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date fillPayVoucherDate()
	 * @method \string getAdditionalInfo()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setAdditionalInfo(\string|\Bitrix\Main\DB\SqlExpression $additionalInfo)
	 * @method bool hasAdditionalInfo()
	 * @method bool isAdditionalInfoFilled()
	 * @method bool isAdditionalInfoChanged()
	 * @method \string remindActualAdditionalInfo()
	 * @method \string requireAdditionalInfo()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetAdditionalInfo()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetAdditionalInfo()
	 * @method \string fillAdditionalInfo()
	 * @method \string getComments()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetComments()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetComments()
	 * @method \string fillComments()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetCompanyId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetCreatedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \Bitrix\Main\EO_User getCreatedUser()
	 * @method \Bitrix\Main\EO_User remindActualCreatedUser()
	 * @method \Bitrix\Main\EO_User requireCreatedUser()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setCreatedUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetCreatedUser()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetCreatedUser()
	 * @method bool hasCreatedUser()
	 * @method bool isCreatedUserFilled()
	 * @method bool isCreatedUserChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedUser()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\EO_User getResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireResponsibleBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetResponsibleBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetResponsibleBy()
	 * @method bool hasResponsibleBy()
	 * @method bool isResponsibleByFilled()
	 * @method bool isResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillResponsibleBy()
	 * @method \string getStatGid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setStatGid(\string|\Bitrix\Main\DB\SqlExpression $statGid)
	 * @method bool hasStatGid()
	 * @method bool isStatGidFilled()
	 * @method bool isStatGidChanged()
	 * @method \string remindActualStatGid()
	 * @method \string requireStatGid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetStatGid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetStatGid()
	 * @method \string fillStatGid()
	 * @method \Bitrix\Main\Type\Date getDatePayBefore()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDatePayBefore(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $datePayBefore)
	 * @method bool hasDatePayBefore()
	 * @method bool isDatePayBeforeFilled()
	 * @method bool isDatePayBeforeChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDatePayBefore()
	 * @method \Bitrix\Main\Type\Date requireDatePayBefore()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDatePayBefore()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDatePayBefore()
	 * @method \Bitrix\Main\Type\Date fillDatePayBefore()
	 * @method \Bitrix\Main\Type\Date getDateBill()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDateBill(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $dateBill)
	 * @method bool hasDateBill()
	 * @method bool isDateBillFilled()
	 * @method bool isDateBillChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDateBill()
	 * @method \Bitrix\Main\Type\Date requireDateBill()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDateBill()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateBill()
	 * @method \Bitrix\Main\Type\Date fillDateBill()
	 * @method \boolean getIsRecurring()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setIsRecurring(\boolean|\Bitrix\Main\DB\SqlExpression $isRecurring)
	 * @method bool hasIsRecurring()
	 * @method bool isIsRecurringFilled()
	 * @method bool isIsRecurringChanged()
	 * @method \boolean remindActualIsRecurring()
	 * @method \boolean requireIsRecurring()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetIsRecurring()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetIsRecurring()
	 * @method \boolean fillIsRecurring()
	 * @method \int getRecurringId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setRecurringId(\int|\Bitrix\Main\DB\SqlExpression $recurringId)
	 * @method bool hasRecurringId()
	 * @method bool isRecurringIdFilled()
	 * @method bool isRecurringIdChanged()
	 * @method \int remindActualRecurringId()
	 * @method \int requireRecurringId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetRecurringId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetRecurringId()
	 * @method \int fillRecurringId()
	 * @method \int getLockedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setLockedBy(\int|\Bitrix\Main\DB\SqlExpression $lockedBy)
	 * @method bool hasLockedBy()
	 * @method bool isLockedByFilled()
	 * @method bool isLockedByChanged()
	 * @method \int remindActualLockedBy()
	 * @method \int requireLockedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetLockedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetLockedBy()
	 * @method \int fillLockedBy()
	 * @method \Bitrix\Main\EO_User getLockUser()
	 * @method \Bitrix\Main\EO_User remindActualLockUser()
	 * @method \Bitrix\Main\EO_User requireLockUser()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setLockUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetLockUser()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetLockUser()
	 * @method bool hasLockUser()
	 * @method bool isLockUserFilled()
	 * @method bool isLockUserChanged()
	 * @method \Bitrix\Main\EO_User fillLockUser()
	 * @method \Bitrix\Main\Type\DateTime getDateLock()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDateLock(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateLock)
	 * @method bool hasDateLock()
	 * @method bool isDateLockFilled()
	 * @method bool isDateLockChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateLock()
	 * @method \Bitrix\Main\Type\DateTime requireDateLock()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDateLock()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateLock()
	 * @method \Bitrix\Main\Type\DateTime fillDateLock()
	 * @method \string getLockUserName()
	 * @method \string remindActualLockUserName()
	 * @method \string requireLockUserName()
	 * @method bool hasLockUserName()
	 * @method bool isLockUserNameFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetLockUserName()
	 * @method \string fillLockUserName()
	 * @method \string getLockStatus()
	 * @method \string remindActualLockStatus()
	 * @method \string requireLockStatus()
	 * @method bool hasLockStatus()
	 * @method bool isLockStatusFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetLockStatus()
	 * @method \string fillLockStatus()
	 * @method \Bitrix\Main\EO_UserGroup getUserGroup()
	 * @method \Bitrix\Main\EO_UserGroup remindActualUserGroup()
	 * @method \Bitrix\Main\EO_UserGroup requireUserGroup()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setUserGroup(\Bitrix\Main\EO_UserGroup $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetUserGroup()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetUserGroup()
	 * @method bool hasUserGroup()
	 * @method bool isUserGroupFilled()
	 * @method bool isUserGroupChanged()
	 * @method \Bitrix\Main\EO_UserGroup fillUserGroup()
	 * @method \Bitrix\Main\EO_User getResponsible()
	 * @method \Bitrix\Main\EO_User remindActualResponsible()
	 * @method \Bitrix\Main\EO_User requireResponsible()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setResponsible(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetResponsible()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetResponsible()
	 * @method bool hasResponsible()
	 * @method bool isResponsibleFilled()
	 * @method bool isResponsibleChanged()
	 * @method \Bitrix\Main\EO_User fillResponsible()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket getBasket()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket remindActualBasket()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket requireBasket()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setBasket(\Bitrix\Crm\Invoice\Internals\EO_Basket $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetBasket()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetBasket()
	 * @method bool hasBasket()
	 * @method bool isBasketFilled()
	 * @method bool isBasketChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket fillBasket()
	 * @method \string getBasketPriceTotal()
	 * @method \string remindActualBasketPriceTotal()
	 * @method \string requireBasketPriceTotal()
	 * @method bool hasBasketPriceTotal()
	 * @method bool isBasketPriceTotalFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetBasketPriceTotal()
	 * @method \string fillBasketPriceTotal()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment getPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment remindActualPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment requirePayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setPayment(\Bitrix\Crm\Invoice\Internals\EO_Payment $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetPayment()
	 * @method bool hasPayment()
	 * @method bool isPaymentFilled()
	 * @method bool isPaymentChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment fillPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment getShipment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment remindActualShipment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment requireShipment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setShipment(\Bitrix\Crm\Invoice\Internals\EO_Shipment $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetShipment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetShipment()
	 * @method bool hasShipment()
	 * @method bool isShipmentFilled()
	 * @method bool isShipmentChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment fillShipment()
	 * @method \boolean getRecountFlag()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setRecountFlag(\boolean|\Bitrix\Main\DB\SqlExpression $recountFlag)
	 * @method bool hasRecountFlag()
	 * @method bool isRecountFlagFilled()
	 * @method bool isRecountFlagChanged()
	 * @method \boolean remindActualRecountFlag()
	 * @method \boolean requireRecountFlag()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetRecountFlag()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetRecountFlag()
	 * @method \boolean fillRecountFlag()
	 * @method \int getAffiliateId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setAffiliateId(\int|\Bitrix\Main\DB\SqlExpression $affiliateId)
	 * @method bool hasAffiliateId()
	 * @method bool isAffiliateIdFilled()
	 * @method bool isAffiliateIdChanged()
	 * @method \int remindActualAffiliateId()
	 * @method \int requireAffiliateId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetAffiliateId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetAffiliateId()
	 * @method \int fillAffiliateId()
	 * @method \string getDeliveryDocNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDeliveryDocNum(\string|\Bitrix\Main\DB\SqlExpression $deliveryDocNum)
	 * @method bool hasDeliveryDocNum()
	 * @method bool isDeliveryDocNumFilled()
	 * @method bool isDeliveryDocNumChanged()
	 * @method \string remindActualDeliveryDocNum()
	 * @method \string requireDeliveryDocNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDeliveryDocNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDeliveryDocNum()
	 * @method \string fillDeliveryDocNum()
	 * @method \Bitrix\Main\Type\DateTime getDeliveryDocDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDeliveryDocDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $deliveryDocDate)
	 * @method bool hasDeliveryDocDate()
	 * @method bool isDeliveryDocDateFilled()
	 * @method bool isDeliveryDocDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDeliveryDocDate()
	 * @method \Bitrix\Main\Type\DateTime requireDeliveryDocDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDeliveryDocDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDeliveryDocDate()
	 * @method \Bitrix\Main\Type\DateTime fillDeliveryDocDate()
	 * @method \boolean getUpdated1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setUpdated1c(\boolean|\Bitrix\Main\DB\SqlExpression $updated1c)
	 * @method bool hasUpdated1c()
	 * @method bool isUpdated1cFilled()
	 * @method bool isUpdated1cChanged()
	 * @method \boolean remindActualUpdated1c()
	 * @method \boolean requireUpdated1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetUpdated1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetUpdated1c()
	 * @method \boolean fillUpdated1c()
	 * @method \string getOrderTopic()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setOrderTopic(\string|\Bitrix\Main\DB\SqlExpression $orderTopic)
	 * @method bool hasOrderTopic()
	 * @method bool isOrderTopicFilled()
	 * @method bool isOrderTopicChanged()
	 * @method \string remindActualOrderTopic()
	 * @method \string requireOrderTopic()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetOrderTopic()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetOrderTopic()
	 * @method \string fillOrderTopic()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getId1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setId1c(\string|\Bitrix\Main\DB\SqlExpression $id1c)
	 * @method bool hasId1c()
	 * @method bool isId1cFilled()
	 * @method bool isId1cChanged()
	 * @method \string remindActualId1c()
	 * @method \string requireId1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetId1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetId1c()
	 * @method \string fillId1c()
	 * @method \string getVersion1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setVersion1c(\string|\Bitrix\Main\DB\SqlExpression $version1c)
	 * @method bool hasVersion1c()
	 * @method bool isVersion1cFilled()
	 * @method bool isVersion1cChanged()
	 * @method \string remindActualVersion1c()
	 * @method \string requireVersion1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetVersion1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetVersion1c()
	 * @method \string fillVersion1c()
	 * @method \int getVersion()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setVersion(\int|\Bitrix\Main\DB\SqlExpression $version)
	 * @method bool hasVersion()
	 * @method bool isVersionFilled()
	 * @method bool isVersionChanged()
	 * @method \int remindActualVersion()
	 * @method \int requireVersion()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetVersion()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetVersion()
	 * @method \int fillVersion()
	 * @method \boolean getExternalOrder()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setExternalOrder(\boolean|\Bitrix\Main\DB\SqlExpression $externalOrder)
	 * @method bool hasExternalOrder()
	 * @method bool isExternalOrderFilled()
	 * @method bool isExternalOrderChanged()
	 * @method \boolean remindActualExternalOrder()
	 * @method \boolean requireExternalOrder()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetExternalOrder()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetExternalOrder()
	 * @method \boolean fillExternalOrder()
	 * @method \int getStoreId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setStoreId(\int|\Bitrix\Main\DB\SqlExpression $storeId)
	 * @method bool hasStoreId()
	 * @method bool isStoreIdFilled()
	 * @method bool isStoreIdChanged()
	 * @method \int remindActualStoreId()
	 * @method \int requireStoreId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetStoreId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetStoreId()
	 * @method \int fillStoreId()
	 * @method \boolean getCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setCanceled(\boolean|\Bitrix\Main\DB\SqlExpression $canceled)
	 * @method bool hasCanceled()
	 * @method bool isCanceledFilled()
	 * @method bool isCanceledChanged()
	 * @method \boolean remindActualCanceled()
	 * @method \boolean requireCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetCanceled()
	 * @method \boolean fillCanceled()
	 * @method \int getEmpCanceledId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setEmpCanceledId(\int|\Bitrix\Main\DB\SqlExpression $empCanceledId)
	 * @method bool hasEmpCanceledId()
	 * @method bool isEmpCanceledIdFilled()
	 * @method bool isEmpCanceledIdChanged()
	 * @method \int remindActualEmpCanceledId()
	 * @method \int requireEmpCanceledId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetEmpCanceledId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetEmpCanceledId()
	 * @method \int fillEmpCanceledId()
	 * @method \Bitrix\Main\EO_User getEmpCanceledBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpCanceledBy()
	 * @method \Bitrix\Main\EO_User requireEmpCanceledBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setEmpCanceledBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetEmpCanceledBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetEmpCanceledBy()
	 * @method bool hasEmpCanceledBy()
	 * @method bool isEmpCanceledByFilled()
	 * @method bool isEmpCanceledByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpCanceledBy()
	 * @method \Bitrix\Main\Type\DateTime getDateCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setDateCanceled(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCanceled)
	 * @method bool hasDateCanceled()
	 * @method bool isDateCanceledFilled()
	 * @method bool isDateCanceledChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCanceled()
	 * @method \Bitrix\Main\Type\DateTime requireDateCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetDateCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateCanceled()
	 * @method \Bitrix\Main\Type\DateTime fillDateCanceled()
	 * @method \string getDateCanceledShort()
	 * @method \string remindActualDateCanceledShort()
	 * @method \string requireDateCanceledShort()
	 * @method bool hasDateCanceledShort()
	 * @method bool isDateCanceledShortFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetDateCanceledShort()
	 * @method \string fillDateCanceledShort()
	 * @method \string getReasonCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setReasonCanceled(\string|\Bitrix\Main\DB\SqlExpression $reasonCanceled)
	 * @method bool hasReasonCanceled()
	 * @method bool isReasonCanceledFilled()
	 * @method bool isReasonCanceledChanged()
	 * @method \string remindActualReasonCanceled()
	 * @method \string requireReasonCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetReasonCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetReasonCanceled()
	 * @method \string fillReasonCanceled()
	 * @method \string getBxUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setBxUserId(\string|\Bitrix\Main\DB\SqlExpression $bxUserId)
	 * @method bool hasBxUserId()
	 * @method bool isBxUserIdFilled()
	 * @method bool isBxUserIdChanged()
	 * @method \string remindActualBxUserId()
	 * @method \string requireBxUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetBxUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetBxUserId()
	 * @method \string fillBxUserId()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetSearchContent()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetSearchContent()
	 * @method \string fillSearchContent()
	 * @method \boolean getRunning()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setRunning(\boolean|\Bitrix\Main\DB\SqlExpression $running)
	 * @method bool hasRunning()
	 * @method bool isRunningFilled()
	 * @method bool isRunningChanged()
	 * @method \boolean remindActualRunning()
	 * @method \boolean requireRunning()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetRunning()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetRunning()
	 * @method \boolean fillRunning()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons getOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons remindActualOrderCoupons()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons requireOrderCoupons()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice setOrderCoupons(\Bitrix\Sale\Internals\EO_OrderCoupons $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice resetOrderCoupons()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetOrderCoupons()
	 * @method bool hasOrderCoupons()
	 * @method bool isOrderCouponsFilled()
	 * @method bool isOrderCouponsChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons fillOrderCoupons()
	 * @method \string getByRecommendation()
	 * @method \string remindActualByRecommendation()
	 * @method \string requireByRecommendation()
	 * @method bool hasByRecommendation()
	 * @method bool isByRecommendationFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unsetByRecommendation()
	 * @method \string fillByRecommendation()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Invoice wakeUp($data)
	 */
	class EO_Invoice {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_Invoice_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getAccountNumberList()
	 * @method \string[] fillAccountNumber()
	 * @method \string[] getTrackingNumberList()
	 * @method \string[] fillTrackingNumber()
	 * @method \int[] getPaySystemIdList()
	 * @method \int[] fillPaySystemId()
	 * @method \int[] getDeliveryIdList()
	 * @method \int[] fillDeliveryId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertFormatList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsertFormat()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdateShort()
	 * @method \string[] getProductsQuantList()
	 * @method \string[] fillProductsQuant()
	 * @method \string[] getPersonTypeIdList()
	 * @method \string[] fillPersonTypeId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 * @method \boolean[] getPayedList()
	 * @method \boolean[] fillPayed()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePayedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePayed()
	 * @method \int[] getEmpPayedIdList()
	 * @method \int[] fillEmpPayedId()
	 * @method \boolean[] getDeductedList()
	 * @method \boolean[] fillDeducted()
	 * @method \Bitrix\Main\Type\DateTime[] getDateDeductedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateDeducted()
	 * @method \int[] getEmpDeductedIdList()
	 * @method \int[] fillEmpDeductedId()
	 * @method \string[] getReasonUndoDeductedList()
	 * @method \string[] fillReasonUndoDeducted()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang[] getStatusList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getStatusCollection()
	 * @method \Bitrix\Sale\Internals\EO_StatusLang_Collection fillStatus()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStatusList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStatus()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStatusShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStatusShort()
	 * @method \int[] getEmpStatusIdList()
	 * @method \int[] fillEmpStatusId()
	 * @method \Bitrix\Main\EO_User[] getEmpStatusByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getEmpStatusByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpStatusBy()
	 * @method \boolean[] getMarkedList()
	 * @method \boolean[] fillMarked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateMarkedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateMarked()
	 * @method \int[] getEmpMarkedIdList()
	 * @method \int[] fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User[] getEmpMarkedByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getEmpMarkedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpMarkedBy()
	 * @method \string[] getReasonMarkedList()
	 * @method \string[] fillReasonMarked()
	 * @method \float[] getPriceDeliveryList()
	 * @method \float[] fillPriceDelivery()
	 * @method \boolean[] getAllowDeliveryList()
	 * @method \boolean[] fillAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime[] getDateAllowDeliveryList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateAllowDelivery()
	 * @method \int[] getEmpAllowDeliveryIdList()
	 * @method \int[] fillEmpAllowDeliveryId()
	 * @method \boolean[] getReservedList()
	 * @method \boolean[] fillReserved()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getDiscountValueList()
	 * @method \float[] fillDiscountValue()
	 * @method \string[] getDiscountAllList()
	 * @method \string[] fillDiscountAll()
	 * @method \float[] getTaxValueList()
	 * @method \float[] fillTaxValue()
	 * @method \float[] getSumPaidList()
	 * @method \float[] fillSumPaid()
	 * @method \string[] getSumPaidForrepList()
	 * @method \string[] fillSumPaidForrep()
	 * @method \string[] getUserDescriptionList()
	 * @method \string[] fillUserDescription()
	 * @method \string[] getPayVoucherNumList()
	 * @method \string[] fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\Date[] getPayVoucherDateList()
	 * @method \Bitrix\Main\Type\Date[] fillPayVoucherDate()
	 * @method \string[] getAdditionalInfoList()
	 * @method \string[] fillAdditionalInfo()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \Bitrix\Main\EO_User[] getCreatedUserList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getCreatedUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedUser()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getResponsibleByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsibleBy()
	 * @method \string[] getStatGidList()
	 * @method \string[] fillStatGid()
	 * @method \Bitrix\Main\Type\Date[] getDatePayBeforeList()
	 * @method \Bitrix\Main\Type\Date[] fillDatePayBefore()
	 * @method \Bitrix\Main\Type\Date[] getDateBillList()
	 * @method \Bitrix\Main\Type\Date[] fillDateBill()
	 * @method \boolean[] getIsRecurringList()
	 * @method \boolean[] fillIsRecurring()
	 * @method \int[] getRecurringIdList()
	 * @method \int[] fillRecurringId()
	 * @method \int[] getLockedByList()
	 * @method \int[] fillLockedBy()
	 * @method \Bitrix\Main\EO_User[] getLockUserList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getLockUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillLockUser()
	 * @method \Bitrix\Main\Type\DateTime[] getDateLockList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateLock()
	 * @method \string[] getLockUserNameList()
	 * @method \string[] fillLockUserName()
	 * @method \string[] getLockStatusList()
	 * @method \string[] fillLockStatus()
	 * @method \Bitrix\Main\EO_UserGroup[] getUserGroupList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getUserGroupCollection()
	 * @method \Bitrix\Main\EO_UserGroup_Collection fillUserGroup()
	 * @method \Bitrix\Main\EO_User[] getResponsibleList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getResponsibleCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsible()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket[] getBasketList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getBasketCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection fillBasket()
	 * @method \string[] getBasketPriceTotalList()
	 * @method \string[] fillBasketPriceTotal()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment[] getPaymentList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getPaymentCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection fillPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment[] getShipmentList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getShipmentCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection fillShipment()
	 * @method \boolean[] getRecountFlagList()
	 * @method \boolean[] fillRecountFlag()
	 * @method \int[] getAffiliateIdList()
	 * @method \int[] fillAffiliateId()
	 * @method \string[] getDeliveryDocNumList()
	 * @method \string[] fillDeliveryDocNum()
	 * @method \Bitrix\Main\Type\DateTime[] getDeliveryDocDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDeliveryDocDate()
	 * @method \boolean[] getUpdated1cList()
	 * @method \boolean[] fillUpdated1c()
	 * @method \string[] getOrderTopicList()
	 * @method \string[] fillOrderTopic()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getId1cList()
	 * @method \string[] fillId1c()
	 * @method \string[] getVersion1cList()
	 * @method \string[] fillVersion1c()
	 * @method \int[] getVersionList()
	 * @method \int[] fillVersion()
	 * @method \boolean[] getExternalOrderList()
	 * @method \boolean[] fillExternalOrder()
	 * @method \int[] getStoreIdList()
	 * @method \int[] fillStoreId()
	 * @method \boolean[] getCanceledList()
	 * @method \boolean[] fillCanceled()
	 * @method \int[] getEmpCanceledIdList()
	 * @method \int[] fillEmpCanceledId()
	 * @method \Bitrix\Main\EO_User[] getEmpCanceledByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getEmpCanceledByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpCanceledBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCanceledList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCanceled()
	 * @method \string[] getDateCanceledShortList()
	 * @method \string[] fillDateCanceledShort()
	 * @method \string[] getReasonCanceledList()
	 * @method \string[] fillReasonCanceled()
	 * @method \string[] getBxUserIdList()
	 * @method \string[] fillBxUserId()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 * @method \boolean[] getRunningList()
	 * @method \boolean[] fillRunning()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons[] getOrderCouponsList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection getOrderCouponsCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderCoupons_Collection fillOrderCoupons()
	 * @method \string[] getByRecommendationList()
	 * @method \string[] fillByRecommendation()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_Invoice $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_Invoice $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_Invoice $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Invoice_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_Invoice_Query query()
	 * @method static EO_Invoice_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Invoice_Result getById($id)
	 * @method static EO_Invoice_Result getList(array $parameters = array())
	 * @method static EO_Invoice_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Invoice createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Invoice wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection wakeUpCollection($rows)
	 */
	class InvoiceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Invoice_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Invoice_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection fetchCollection()
	 */
	class EO_Invoice_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Invoice_Collection wakeUpCollection($rows)
	 */
	class EO_Invoice_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\InvoiceChangeTable:crm/lib/invoice/internals/invoicechange.php:e1e060ffcd46c4f3cd84fb91a4064114 */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceChange
	 * @see \Bitrix\Crm\Invoice\Internals\InvoiceChangeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange resetType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange unsetType()
	 * @method \string fillType()
	 * @method \string getData()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange setData(\string|\Bitrix\Main\DB\SqlExpression $data)
	 * @method bool hasData()
	 * @method bool isDataFilled()
	 * @method bool isDataChanged()
	 * @method \string remindActualData()
	 * @method \string requireData()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange resetData()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange unsetData()
	 * @method \string fillData()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange resetDateCreate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange resetDateModify()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange resetUserId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange unsetUserId()
	 * @method \int fillUserId()
	 * @method \string getEntity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange setEntity(\string|\Bitrix\Main\DB\SqlExpression $entity)
	 * @method bool hasEntity()
	 * @method bool isEntityFilled()
	 * @method bool isEntityChanged()
	 * @method \string remindActualEntity()
	 * @method \string requireEntity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange resetEntity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange unsetEntity()
	 * @method \string fillEntity()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange resetEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange unsetEntityId()
	 * @method \int fillEntityId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange wakeUp($data)
	 */
	class EO_InvoiceChange {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceChangeTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceChangeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceChange_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getDataList()
	 * @method \string[] fillData()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \string[] getEntityList()
	 * @method \string[] fillEntity()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_InvoiceChange $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_InvoiceChange $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_InvoiceChange $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceChange_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceChangeTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceChangeTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_InvoiceChange_Query query()
	 * @method static EO_InvoiceChange_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceChange_Result getById($id)
	 * @method static EO_InvoiceChange_Result getList(array $parameters = array())
	 * @method static EO_InvoiceChange_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange_Collection wakeUpCollection($rows)
	 */
	class InvoiceChangeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceChange_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceChange_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange_Collection fetchCollection()
	 */
	class EO_InvoiceChange_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceChange_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceChange_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\InvoiceDiscountTable:crm/lib/invoice/internals/invoicediscount.php:4a66856fc10cb8b8320ca551c3b6925d */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceDiscount
	 * @see \Bitrix\Crm\Invoice\Internals\InvoiceDiscountTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \int getDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setDiscountId(\int|\Bitrix\Main\DB\SqlExpression $discountId)
	 * @method bool hasDiscountId()
	 * @method bool isDiscountIdFilled()
	 * @method bool isDiscountIdChanged()
	 * @method \int remindActualDiscountId()
	 * @method \int requireDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetDiscountId()
	 * @method \int fillDiscountId()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetName()
	 * @method \string fillName()
	 * @method \string getDiscountHash()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setDiscountHash(\string|\Bitrix\Main\DB\SqlExpression $discountHash)
	 * @method bool hasDiscountHash()
	 * @method bool isDiscountHashFilled()
	 * @method bool isDiscountHashChanged()
	 * @method \string remindActualDiscountHash()
	 * @method \string requireDiscountHash()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetDiscountHash()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetDiscountHash()
	 * @method \string fillDiscountHash()
	 * @method \string getConditions()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setConditions(\string|\Bitrix\Main\DB\SqlExpression $conditions)
	 * @method bool hasConditions()
	 * @method bool isConditionsFilled()
	 * @method bool isConditionsChanged()
	 * @method \string remindActualConditions()
	 * @method \string requireConditions()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetConditions()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetConditions()
	 * @method \string fillConditions()
	 * @method \string getUnpack()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setUnpack(\string|\Bitrix\Main\DB\SqlExpression $unpack)
	 * @method bool hasUnpack()
	 * @method bool isUnpackFilled()
	 * @method bool isUnpackChanged()
	 * @method \string remindActualUnpack()
	 * @method \string requireUnpack()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetUnpack()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetUnpack()
	 * @method \string fillUnpack()
	 * @method \string getActions()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setActions(\string|\Bitrix\Main\DB\SqlExpression $actions)
	 * @method bool hasActions()
	 * @method bool isActionsFilled()
	 * @method bool isActionsChanged()
	 * @method \string remindActualActions()
	 * @method \string requireActions()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetActions()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetActions()
	 * @method \string fillActions()
	 * @method \string getApplication()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setApplication(\string|\Bitrix\Main\DB\SqlExpression $application)
	 * @method bool hasApplication()
	 * @method bool isApplicationFilled()
	 * @method bool isApplicationChanged()
	 * @method \string remindActualApplication()
	 * @method \string requireApplication()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetApplication()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetApplication()
	 * @method \string fillApplication()
	 * @method \boolean getUseCoupons()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setUseCoupons(\boolean|\Bitrix\Main\DB\SqlExpression $useCoupons)
	 * @method bool hasUseCoupons()
	 * @method bool isUseCouponsFilled()
	 * @method bool isUseCouponsChanged()
	 * @method \boolean remindActualUseCoupons()
	 * @method \boolean requireUseCoupons()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetUseCoupons()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetUseCoupons()
	 * @method \boolean fillUseCoupons()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetSort()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetSort()
	 * @method \int fillSort()
	 * @method \int getPriority()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setPriority(\int|\Bitrix\Main\DB\SqlExpression $priority)
	 * @method bool hasPriority()
	 * @method bool isPriorityFilled()
	 * @method bool isPriorityChanged()
	 * @method \int remindActualPriority()
	 * @method \int requirePriority()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetPriority()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetPriority()
	 * @method \int fillPriority()
	 * @method \boolean getLastDiscount()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setLastDiscount(\boolean|\Bitrix\Main\DB\SqlExpression $lastDiscount)
	 * @method bool hasLastDiscount()
	 * @method bool isLastDiscountFilled()
	 * @method bool isLastDiscountChanged()
	 * @method \boolean remindActualLastDiscount()
	 * @method \boolean requireLastDiscount()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetLastDiscount()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetLastDiscount()
	 * @method \boolean fillLastDiscount()
	 * @method \string getActionsDescr()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount setActionsDescr(\string|\Bitrix\Main\DB\SqlExpression $actionsDescr)
	 * @method bool hasActionsDescr()
	 * @method bool isActionsDescrFilled()
	 * @method bool isActionsDescrChanged()
	 * @method \string remindActualActionsDescr()
	 * @method \string requireActionsDescr()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount resetActionsDescr()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unsetActionsDescr()
	 * @method \string fillActionsDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount wakeUp($data)
	 */
	class EO_InvoiceDiscount {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceDiscountTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceDiscountTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceDiscount_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \int[] getDiscountIdList()
	 * @method \int[] fillDiscountId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getDiscountHashList()
	 * @method \string[] fillDiscountHash()
	 * @method \string[] getConditionsList()
	 * @method \string[] fillConditions()
	 * @method \string[] getUnpackList()
	 * @method \string[] fillUnpack()
	 * @method \string[] getActionsList()
	 * @method \string[] fillActions()
	 * @method \string[] getApplicationList()
	 * @method \string[] fillApplication()
	 * @method \boolean[] getUseCouponsList()
	 * @method \boolean[] fillUseCoupons()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \int[] getPriorityList()
	 * @method \int[] fillPriority()
	 * @method \boolean[] getLastDiscountList()
	 * @method \boolean[] fillLastDiscount()
	 * @method \string[] getActionsDescrList()
	 * @method \string[] fillActionsDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceDiscount_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceDiscountTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceDiscountTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_InvoiceDiscount_Query query()
	 * @method static EO_InvoiceDiscount_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceDiscount_Result getById($id)
	 * @method static EO_InvoiceDiscount_Result getList(array $parameters = array())
	 * @method static EO_InvoiceDiscount_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount_Collection wakeUpCollection($rows)
	 */
	class InvoiceDiscountTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceDiscount_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceDiscount_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount_Collection fetchCollection()
	 */
	class EO_InvoiceDiscount_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceDiscount_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\InvoiceCouponsTable:crm/lib/invoice/internals/invoicediscount.php:4a66856fc10cb8b8320ca551c3b6925d */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceCoupons
	 * @see \Bitrix\Crm\Invoice\Internals\InvoiceCouponsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \int getOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons setOrderDiscountId(\int|\Bitrix\Main\DB\SqlExpression $orderDiscountId)
	 * @method bool hasOrderDiscountId()
	 * @method bool isOrderDiscountIdFilled()
	 * @method bool isOrderDiscountIdChanged()
	 * @method \int remindActualOrderDiscountId()
	 * @method \int requireOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons resetOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons unsetOrderDiscountId()
	 * @method \int fillOrderDiscountId()
	 * @method \string getCoupon()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons setCoupon(\string|\Bitrix\Main\DB\SqlExpression $coupon)
	 * @method bool hasCoupon()
	 * @method bool isCouponFilled()
	 * @method bool isCouponChanged()
	 * @method \string remindActualCoupon()
	 * @method \string requireCoupon()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons resetCoupon()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons unsetCoupon()
	 * @method \string fillCoupon()
	 * @method \int getType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons setType(\int|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \int remindActualType()
	 * @method \int requireType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons resetType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons unsetType()
	 * @method \int fillType()
	 * @method \string getData()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons setData(\string|\Bitrix\Main\DB\SqlExpression $data)
	 * @method bool hasData()
	 * @method bool isDataFilled()
	 * @method bool isDataChanged()
	 * @method \string remindActualData()
	 * @method \string requireData()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons resetData()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons unsetData()
	 * @method \string fillData()
	 * @method \int getCouponId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons setCouponId(\int|\Bitrix\Main\DB\SqlExpression $couponId)
	 * @method bool hasCouponId()
	 * @method bool isCouponIdFilled()
	 * @method bool isCouponIdChanged()
	 * @method \int remindActualCouponId()
	 * @method \int requireCouponId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons resetCouponId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons unsetCouponId()
	 * @method \int fillCouponId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons wakeUp($data)
	 */
	class EO_InvoiceCoupons {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceCouponsTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceCouponsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceCoupons_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \int[] getOrderDiscountIdList()
	 * @method \int[] fillOrderDiscountId()
	 * @method \string[] getCouponList()
	 * @method \string[] fillCoupon()
	 * @method \int[] getTypeList()
	 * @method \int[] fillType()
	 * @method \string[] getDataList()
	 * @method \string[] fillData()
	 * @method \int[] getCouponIdList()
	 * @method \int[] fillCouponId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceCoupons_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceCouponsTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceCouponsTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_InvoiceCoupons_Query query()
	 * @method static EO_InvoiceCoupons_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceCoupons_Result getById($id)
	 * @method static EO_InvoiceCoupons_Result getList(array $parameters = array())
	 * @method static EO_InvoiceCoupons_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons_Collection wakeUpCollection($rows)
	 */
	class InvoiceCouponsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceCoupons_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceCoupons_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons_Collection fetchCollection()
	 */
	class EO_InvoiceCoupons_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceCoupons_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceCoupons_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\InvoiceModulesTable:crm/lib/invoice/internals/invoicediscount.php:4a66856fc10cb8b8320ca551c3b6925d */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceModules
	 * @see \Bitrix\Crm\Invoice\Internals\InvoiceModulesTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules setOrderDiscountId(\int|\Bitrix\Main\DB\SqlExpression $orderDiscountId)
	 * @method bool hasOrderDiscountId()
	 * @method bool isOrderDiscountIdFilled()
	 * @method bool isOrderDiscountIdChanged()
	 * @method \int remindActualOrderDiscountId()
	 * @method \int requireOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules resetOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules unsetOrderDiscountId()
	 * @method \int fillOrderDiscountId()
	 * @method \string getModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules resetModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules unsetModuleId()
	 * @method \string fillModuleId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules wakeUp($data)
	 */
	class EO_InvoiceModules {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceModulesTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceModulesTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceModules_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderDiscountIdList()
	 * @method \int[] fillOrderDiscountId()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_InvoiceModules $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_InvoiceModules $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_InvoiceModules $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceModules_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceModulesTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceModulesTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_InvoiceModules_Query query()
	 * @method static EO_InvoiceModules_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceModules_Result getById($id)
	 * @method static EO_InvoiceModules_Result getList(array $parameters = array())
	 * @method static EO_InvoiceModules_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules_Collection wakeUpCollection($rows)
	 */
	class InvoiceModulesTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceModules_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceModules_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules_Collection fetchCollection()
	 */
	class EO_InvoiceModules_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceModules_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceModules_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\InvoiceDiscountDataTable:crm/lib/invoice/internals/invoicediscount.php:4a66856fc10cb8b8320ca551c3b6925d */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceDiscountData
	 * @see \Bitrix\Crm\Invoice\Internals\InvoiceDiscountDataTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData resetEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData resetEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData setEntityValue(\string|\Bitrix\Main\DB\SqlExpression $entityValue)
	 * @method bool hasEntityValue()
	 * @method bool isEntityValueFilled()
	 * @method bool isEntityValueChanged()
	 * @method \string remindActualEntityValue()
	 * @method \string requireEntityValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData resetEntityValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData unsetEntityValue()
	 * @method \string fillEntityValue()
	 * @method \string getEntityData()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData setEntityData(\string|\Bitrix\Main\DB\SqlExpression $entityData)
	 * @method bool hasEntityData()
	 * @method bool isEntityDataFilled()
	 * @method bool isEntityDataChanged()
	 * @method \string remindActualEntityData()
	 * @method \string requireEntityData()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData resetEntityData()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData unsetEntityData()
	 * @method \string fillEntityData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData wakeUp($data)
	 */
	class EO_InvoiceDiscountData {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceDiscountDataTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceDiscountDataTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceDiscountData_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityValueList()
	 * @method \string[] fillEntityValue()
	 * @method \string[] getEntityDataList()
	 * @method \string[] fillEntityData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceDiscountData_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceDiscountDataTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceDiscountDataTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_InvoiceDiscountData_Query query()
	 * @method static EO_InvoiceDiscountData_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceDiscountData_Result getById($id)
	 * @method static EO_InvoiceDiscountData_Result getList(array $parameters = array())
	 * @method static EO_InvoiceDiscountData_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData_Collection wakeUpCollection($rows)
	 */
	class InvoiceDiscountDataTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceDiscountData_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceDiscountData_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData_Collection fetchCollection()
	 */
	class EO_InvoiceDiscountData_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscountData_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceDiscountData_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\InvoiceRulesTable:crm/lib/invoice/internals/invoicediscount.php:4a66856fc10cb8b8320ca551c3b6925d */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceRules
	 * @see \Bitrix\Crm\Invoice\Internals\InvoiceRulesTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \int getOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setOrderDiscountId(\int|\Bitrix\Main\DB\SqlExpression $orderDiscountId)
	 * @method bool hasOrderDiscountId()
	 * @method bool isOrderDiscountIdFilled()
	 * @method bool isOrderDiscountIdChanged()
	 * @method \int remindActualOrderDiscountId()
	 * @method \int requireOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetOrderDiscountId()
	 * @method \int fillOrderDiscountId()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setEntityValue(\string|\Bitrix\Main\DB\SqlExpression $entityValue)
	 * @method bool hasEntityValue()
	 * @method bool isEntityValueFilled()
	 * @method bool isEntityValueChanged()
	 * @method \string remindActualEntityValue()
	 * @method \string requireEntityValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetEntityValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetEntityValue()
	 * @method \string fillEntityValue()
	 * @method \int getCouponId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setCouponId(\int|\Bitrix\Main\DB\SqlExpression $couponId)
	 * @method bool hasCouponId()
	 * @method bool isCouponIdFilled()
	 * @method bool isCouponIdChanged()
	 * @method \int remindActualCouponId()
	 * @method \int requireCouponId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetCouponId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetCouponId()
	 * @method \int fillCouponId()
	 * @method \boolean getApply()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setApply(\boolean|\Bitrix\Main\DB\SqlExpression $apply)
	 * @method bool hasApply()
	 * @method bool isApplyFilled()
	 * @method bool isApplyChanged()
	 * @method \boolean remindActualApply()
	 * @method \boolean requireApply()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetApply()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetApply()
	 * @method \boolean fillApply()
	 * @method \string getActionBlockList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setActionBlockList(\string|\Bitrix\Main\DB\SqlExpression $actionBlockList)
	 * @method bool hasActionBlockList()
	 * @method bool isActionBlockListFilled()
	 * @method bool isActionBlockListChanged()
	 * @method \string remindActualActionBlockList()
	 * @method \string requireActionBlockList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetActionBlockList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetActionBlockList()
	 * @method \string fillActionBlockList()
	 * @method \int getApplyBlockCounter()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setApplyBlockCounter(\int|\Bitrix\Main\DB\SqlExpression $applyBlockCounter)
	 * @method bool hasApplyBlockCounter()
	 * @method bool isApplyBlockCounterFilled()
	 * @method bool isApplyBlockCounterChanged()
	 * @method \int remindActualApplyBlockCounter()
	 * @method \int requireApplyBlockCounter()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetApplyBlockCounter()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetApplyBlockCounter()
	 * @method \int fillApplyBlockCounter()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount getOrderDiscount()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount remindActualOrderDiscount()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount requireOrderDiscount()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setOrderDiscount(\Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetOrderDiscount()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetOrderDiscount()
	 * @method bool hasOrderDiscount()
	 * @method bool isOrderDiscountFilled()
	 * @method bool isOrderDiscountChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount fillOrderDiscount()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr getDescr()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr remindActualDescr()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr requireDescr()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules setDescr(\Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules resetDescr()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unsetDescr()
	 * @method bool hasDescr()
	 * @method bool isDescrFilled()
	 * @method bool isDescrChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr fillDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules wakeUp($data)
	 */
	class EO_InvoiceRules {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceRulesTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceRulesTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceRules_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \int[] getOrderDiscountIdList()
	 * @method \int[] fillOrderDiscountId()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityValueList()
	 * @method \string[] fillEntityValue()
	 * @method \int[] getCouponIdList()
	 * @method \int[] fillCouponId()
	 * @method \boolean[] getApplyList()
	 * @method \boolean[] fillApply()
	 * @method \string[] getActionBlockListList()
	 * @method \string[] fillActionBlockList()
	 * @method \int[] getApplyBlockCounterList()
	 * @method \int[] fillApplyBlockCounter()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount[] getOrderDiscountList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules_Collection getOrderDiscountCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceDiscount_Collection fillOrderDiscount()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr[] getDescrList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules_Collection getDescrCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr_Collection fillDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_InvoiceRules $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_InvoiceRules $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_InvoiceRules $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceRules_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceRulesTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceRulesTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_InvoiceRules_Query query()
	 * @method static EO_InvoiceRules_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceRules_Result getById($id)
	 * @method static EO_InvoiceRules_Result getList(array $parameters = array())
	 * @method static EO_InvoiceRules_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules_Collection wakeUpCollection($rows)
	 */
	class InvoiceRulesTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceRules_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceRules_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules_Collection fetchCollection()
	 */
	class EO_InvoiceRules_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRules_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceRules_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\InvoiceRulesDescrTable:crm/lib/invoice/internals/invoicediscount.php:4a66856fc10cb8b8320ca551c3b6925d */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceRulesDescr
	 * @see \Bitrix\Crm\Invoice\Internals\InvoiceRulesDescrTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr setModuleId(\string|\Bitrix\Main\DB\SqlExpression $moduleId)
	 * @method bool hasModuleId()
	 * @method bool isModuleIdFilled()
	 * @method bool isModuleIdChanged()
	 * @method \string remindActualModuleId()
	 * @method \string requireModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr resetModuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr unsetModuleId()
	 * @method \string fillModuleId()
	 * @method \int getOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr setOrderDiscountId(\int|\Bitrix\Main\DB\SqlExpression $orderDiscountId)
	 * @method bool hasOrderDiscountId()
	 * @method bool isOrderDiscountIdFilled()
	 * @method bool isOrderDiscountIdChanged()
	 * @method \int remindActualOrderDiscountId()
	 * @method \int requireOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr resetOrderDiscountId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr unsetOrderDiscountId()
	 * @method \int fillOrderDiscountId()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \int getRuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr setRuleId(\int|\Bitrix\Main\DB\SqlExpression $ruleId)
	 * @method bool hasRuleId()
	 * @method bool isRuleIdFilled()
	 * @method bool isRuleIdChanged()
	 * @method \int remindActualRuleId()
	 * @method \int requireRuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr resetRuleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr unsetRuleId()
	 * @method \int fillRuleId()
	 * @method \string getDescr()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr setDescr(\string|\Bitrix\Main\DB\SqlExpression $descr)
	 * @method bool hasDescr()
	 * @method bool isDescrFilled()
	 * @method bool isDescrChanged()
	 * @method \string remindActualDescr()
	 * @method \string requireDescr()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr resetDescr()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr unsetDescr()
	 * @method \string fillDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr wakeUp($data)
	 */
	class EO_InvoiceRulesDescr {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceRulesDescrTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceRulesDescrTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceRulesDescr_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getModuleIdList()
	 * @method \string[] fillModuleId()
	 * @method \int[] getOrderDiscountIdList()
	 * @method \int[] fillOrderDiscountId()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \int[] getRuleIdList()
	 * @method \int[] fillRuleId()
	 * @method \string[] getDescrList()
	 * @method \string[] fillDescr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceRulesDescr_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceRulesDescrTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceRulesDescrTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_InvoiceRulesDescr_Query query()
	 * @method static EO_InvoiceRulesDescr_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceRulesDescr_Result getById($id)
	 * @method static EO_InvoiceRulesDescr_Result getList(array $parameters = array())
	 * @method static EO_InvoiceRulesDescr_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr_Collection wakeUpCollection($rows)
	 */
	class InvoiceRulesDescrTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceRulesDescr_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceRulesDescr_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr_Collection fetchCollection()
	 */
	class EO_InvoiceRulesDescr_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRulesDescr_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceRulesDescr_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\InvoicePropsValueTable:crm/lib/invoice/internals/invoicepropsvalue.php:842999ed194b3bcc09a9b60c3b9d01d9 */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoicePropsValue
	 * @see \Bitrix\Crm\Invoice\Internals\InvoicePropsValueTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \int getOrderPropsId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue setOrderPropsId(\int|\Bitrix\Main\DB\SqlExpression $orderPropsId)
	 * @method bool hasOrderPropsId()
	 * @method bool isOrderPropsIdFilled()
	 * @method bool isOrderPropsIdChanged()
	 * @method \int remindActualOrderPropsId()
	 * @method \int requireOrderPropsId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue resetOrderPropsId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue unsetOrderPropsId()
	 * @method \int fillOrderPropsId()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue resetName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue unsetName()
	 * @method \string fillName()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue resetValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue unsetValue()
	 * @method \string fillValue()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue resetCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue unsetCode()
	 * @method \string fillCode()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue resetXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps getProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps remindActualProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps requireProperty()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue setProperty(\Bitrix\Sale\Internals\EO_OrderProps $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue resetProperty()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue unsetProperty()
	 * @method bool hasProperty()
	 * @method bool isPropertyFilled()
	 * @method bool isPropertyChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps fillProperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue wakeUp($data)
	 */
	class EO_InvoicePropsValue {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoicePropsValueTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoicePropsValueTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoicePropsValue_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \int[] getOrderPropsIdList()
	 * @method \int[] fillOrderPropsId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps[] getPropertyList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue_Collection getPropertyCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection fillProperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoicePropsValue_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoicePropsValueTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoicePropsValueTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_InvoicePropsValue_Query query()
	 * @method static EO_InvoicePropsValue_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoicePropsValue_Result getById($id)
	 * @method static EO_InvoicePropsValue_Result getList(array $parameters = array())
	 * @method static EO_InvoicePropsValue_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue_Collection wakeUpCollection($rows)
	 */
	class InvoicePropsValueTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoicePropsValue_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoicePropsValue_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue_Collection fetchCollection()
	 */
	class EO_InvoicePropsValue_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoicePropsValue_Collection wakeUpCollection($rows)
	 */
	class EO_InvoicePropsValue_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\InvoiceRoundTable:crm/lib/invoice/internals/invoiceround.php:73e26848510d9ec3402cedbbffcdba0a */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceRound
	 * @see \Bitrix\Crm\Invoice\Internals\InvoiceRoundTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \int getApplyBlockCounter()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound setApplyBlockCounter(\int|\Bitrix\Main\DB\SqlExpression $applyBlockCounter)
	 * @method bool hasApplyBlockCounter()
	 * @method bool isApplyBlockCounterFilled()
	 * @method bool isApplyBlockCounterChanged()
	 * @method \int remindActualApplyBlockCounter()
	 * @method \int requireApplyBlockCounter()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound resetApplyBlockCounter()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound unsetApplyBlockCounter()
	 * @method \int fillApplyBlockCounter()
	 * @method \boolean getOrderRound()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound setOrderRound(\boolean|\Bitrix\Main\DB\SqlExpression $orderRound)
	 * @method bool hasOrderRound()
	 * @method bool isOrderRoundFilled()
	 * @method bool isOrderRoundChanged()
	 * @method \boolean remindActualOrderRound()
	 * @method \boolean requireOrderRound()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound resetOrderRound()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound unsetOrderRound()
	 * @method \boolean fillOrderRound()
	 * @method \string getEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \string remindActualEntityType()
	 * @method \string requireEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound resetEntityType()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound unsetEntityType()
	 * @method \string fillEntityType()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound resetEntityId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getEntityValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound setEntityValue(\string|\Bitrix\Main\DB\SqlExpression $entityValue)
	 * @method bool hasEntityValue()
	 * @method bool isEntityValueFilled()
	 * @method bool isEntityValueChanged()
	 * @method \string remindActualEntityValue()
	 * @method \string requireEntityValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound resetEntityValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound unsetEntityValue()
	 * @method \string fillEntityValue()
	 * @method \boolean getApply()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound setApply(\boolean|\Bitrix\Main\DB\SqlExpression $apply)
	 * @method bool hasApply()
	 * @method bool isApplyFilled()
	 * @method bool isApplyChanged()
	 * @method \boolean remindActualApply()
	 * @method \boolean requireApply()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound resetApply()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound unsetApply()
	 * @method \boolean fillApply()
	 * @method \string getRoundRule()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound setRoundRule(\string|\Bitrix\Main\DB\SqlExpression $roundRule)
	 * @method bool hasRoundRule()
	 * @method bool isRoundRuleFilled()
	 * @method bool isRoundRuleChanged()
	 * @method \string remindActualRoundRule()
	 * @method \string requireRoundRule()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound resetRoundRule()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound unsetRoundRule()
	 * @method \string fillRoundRule()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound wakeUp($data)
	 */
	class EO_InvoiceRound {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceRoundTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceRoundTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_InvoiceRound_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \int[] getApplyBlockCounterList()
	 * @method \int[] fillApplyBlockCounter()
	 * @method \boolean[] getOrderRoundList()
	 * @method \boolean[] fillOrderRound()
	 * @method \string[] getEntityTypeList()
	 * @method \string[] fillEntityType()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getEntityValueList()
	 * @method \string[] fillEntityValue()
	 * @method \boolean[] getApplyList()
	 * @method \boolean[] fillApply()
	 * @method \string[] getRoundRuleList()
	 * @method \string[] fillRoundRule()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_InvoiceRound $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_InvoiceRound $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_InvoiceRound $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceRound_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\InvoiceRoundTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\InvoiceRoundTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_InvoiceRound_Query query()
	 * @method static EO_InvoiceRound_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceRound_Result getById($id)
	 * @method static EO_InvoiceRound_Result getList(array $parameters = array())
	 * @method static EO_InvoiceRound_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound_Collection wakeUpCollection($rows)
	 */
	class InvoiceRoundTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceRound_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceRound_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound_Collection fetchCollection()
	 */
	class EO_InvoiceRound_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_InvoiceRound_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceRound_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\PaymentTable:crm/lib/invoice/internals/payment.php:3450ac9466567ac89747b8cb8570d18d */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_Payment
	 * @see \Bitrix\Crm\Invoice\Internals\PaymentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getAccountNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setAccountNumber(\string|\Bitrix\Main\DB\SqlExpression $accountNumber)
	 * @method bool hasAccountNumber()
	 * @method bool isAccountNumberFilled()
	 * @method bool isAccountNumberChanged()
	 * @method \string remindActualAccountNumber()
	 * @method \string requireAccountNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetAccountNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetAccountNumber()
	 * @method \string fillAccountNumber()
	 * @method \boolean getPaid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPaid(\boolean|\Bitrix\Main\DB\SqlExpression $paid)
	 * @method bool hasPaid()
	 * @method bool isPaidFilled()
	 * @method bool isPaidChanged()
	 * @method \boolean remindActualPaid()
	 * @method \boolean requirePaid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPaid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPaid()
	 * @method \boolean fillPaid()
	 * @method \Bitrix\Main\Type\DateTime getDatePaid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setDatePaid(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $datePaid)
	 * @method bool hasDatePaid()
	 * @method bool isDatePaidFilled()
	 * @method bool isDatePaidChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePaid()
	 * @method \Bitrix\Main\Type\DateTime requireDatePaid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetDatePaid()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetDatePaid()
	 * @method \Bitrix\Main\Type\DateTime fillDatePaid()
	 * @method \int getEmpPaidId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setEmpPaidId(\int|\Bitrix\Main\DB\SqlExpression $empPaidId)
	 * @method bool hasEmpPaidId()
	 * @method bool isEmpPaidIdFilled()
	 * @method bool isEmpPaidIdChanged()
	 * @method \int remindActualEmpPaidId()
	 * @method \int requireEmpPaidId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetEmpPaidId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetEmpPaidId()
	 * @method \int fillEmpPaidId()
	 * @method \Bitrix\Main\EO_User getEmpPaidBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpPaidBy()
	 * @method \Bitrix\Main\EO_User requireEmpPaidBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setEmpPaidBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetEmpPaidBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetEmpPaidBy()
	 * @method bool hasEmpPaidBy()
	 * @method bool isEmpPaidByFilled()
	 * @method bool isEmpPaidByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpPaidBy()
	 * @method \int getPaySystemId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPaySystemId(\int|\Bitrix\Main\DB\SqlExpression $paySystemId)
	 * @method bool hasPaySystemId()
	 * @method bool isPaySystemIdFilled()
	 * @method bool isPaySystemIdChanged()
	 * @method \int remindActualPaySystemId()
	 * @method \int requirePaySystemId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPaySystemId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPaySystemId()
	 * @method \int fillPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction getPaySystem()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction remindActualPaySystem()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction requirePaySystem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPaySystem(\Bitrix\Sale\Internals\EO_PaySystemAction $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPaySystem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPaySystem()
	 * @method bool hasPaySystem()
	 * @method bool isPaySystemFilled()
	 * @method bool isPaySystemChanged()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction fillPaySystem()
	 * @method \boolean getPsStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPsStatus(\boolean|\Bitrix\Main\DB\SqlExpression $psStatus)
	 * @method bool hasPsStatus()
	 * @method bool isPsStatusFilled()
	 * @method bool isPsStatusChanged()
	 * @method \boolean remindActualPsStatus()
	 * @method \boolean requirePsStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPsStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPsStatus()
	 * @method \boolean fillPsStatus()
	 * @method \string getPsStatusCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPsStatusCode(\string|\Bitrix\Main\DB\SqlExpression $psStatusCode)
	 * @method bool hasPsStatusCode()
	 * @method bool isPsStatusCodeFilled()
	 * @method bool isPsStatusCodeChanged()
	 * @method \string remindActualPsStatusCode()
	 * @method \string requirePsStatusCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPsStatusCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPsStatusCode()
	 * @method \string fillPsStatusCode()
	 * @method \string getPsInvoiceId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPsInvoiceId(\string|\Bitrix\Main\DB\SqlExpression $psInvoiceId)
	 * @method bool hasPsInvoiceId()
	 * @method bool isPsInvoiceIdFilled()
	 * @method bool isPsInvoiceIdChanged()
	 * @method \string remindActualPsInvoiceId()
	 * @method \string requirePsInvoiceId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPsInvoiceId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPsInvoiceId()
	 * @method \string fillPsInvoiceId()
	 * @method \string getPsStatusDescription()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPsStatusDescription(\string|\Bitrix\Main\DB\SqlExpression $psStatusDescription)
	 * @method bool hasPsStatusDescription()
	 * @method bool isPsStatusDescriptionFilled()
	 * @method bool isPsStatusDescriptionChanged()
	 * @method \string remindActualPsStatusDescription()
	 * @method \string requirePsStatusDescription()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPsStatusDescription()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPsStatusDescription()
	 * @method \string fillPsStatusDescription()
	 * @method \string getPsStatusMessage()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPsStatusMessage(\string|\Bitrix\Main\DB\SqlExpression $psStatusMessage)
	 * @method bool hasPsStatusMessage()
	 * @method bool isPsStatusMessageFilled()
	 * @method bool isPsStatusMessageChanged()
	 * @method \string remindActualPsStatusMessage()
	 * @method \string requirePsStatusMessage()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPsStatusMessage()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPsStatusMessage()
	 * @method \string fillPsStatusMessage()
	 * @method \float getPsSum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPsSum(\float|\Bitrix\Main\DB\SqlExpression $psSum)
	 * @method bool hasPsSum()
	 * @method bool isPsSumFilled()
	 * @method bool isPsSumChanged()
	 * @method \float remindActualPsSum()
	 * @method \float requirePsSum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPsSum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPsSum()
	 * @method \float fillPsSum()
	 * @method \string getPsCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPsCurrency(\string|\Bitrix\Main\DB\SqlExpression $psCurrency)
	 * @method bool hasPsCurrency()
	 * @method bool isPsCurrencyFilled()
	 * @method bool isPsCurrencyChanged()
	 * @method \string remindActualPsCurrency()
	 * @method \string requirePsCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPsCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPsCurrency()
	 * @method \string fillPsCurrency()
	 * @method \Bitrix\Main\Type\DateTime getPsResponseDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPsResponseDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $psResponseDate)
	 * @method bool hasPsResponseDate()
	 * @method bool isPsResponseDateFilled()
	 * @method bool isPsResponseDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualPsResponseDate()
	 * @method \Bitrix\Main\Type\DateTime requirePsResponseDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPsResponseDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPsResponseDate()
	 * @method \Bitrix\Main\Type\DateTime fillPsResponseDate()
	 * @method \string getPsRecurringToken()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPsRecurringToken(\string|\Bitrix\Main\DB\SqlExpression $psRecurringToken)
	 * @method bool hasPsRecurringToken()
	 * @method bool isPsRecurringTokenFilled()
	 * @method bool isPsRecurringTokenChanged()
	 * @method \string remindActualPsRecurringToken()
	 * @method \string requirePsRecurringToken()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPsRecurringToken()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPsRecurringToken()
	 * @method \string fillPsRecurringToken()
	 * @method \string getPayVoucherNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPayVoucherNum(\string|\Bitrix\Main\DB\SqlExpression $payVoucherNum)
	 * @method bool hasPayVoucherNum()
	 * @method bool isPayVoucherNumFilled()
	 * @method bool isPayVoucherNumChanged()
	 * @method \string remindActualPayVoucherNum()
	 * @method \string requirePayVoucherNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPayVoucherNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPayVoucherNum()
	 * @method \string fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\Date getPayVoucherDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPayVoucherDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $payVoucherDate)
	 * @method bool hasPayVoucherDate()
	 * @method bool isPayVoucherDateFilled()
	 * @method bool isPayVoucherDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date requirePayVoucherDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPayVoucherDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date fillPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date getDatePayBefore()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setDatePayBefore(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $datePayBefore)
	 * @method bool hasDatePayBefore()
	 * @method bool isDatePayBeforeFilled()
	 * @method bool isDatePayBeforeChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDatePayBefore()
	 * @method \Bitrix\Main\Type\Date requireDatePayBefore()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetDatePayBefore()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetDatePayBefore()
	 * @method \Bitrix\Main\Type\Date fillDatePayBefore()
	 * @method \Bitrix\Main\Type\DateTime getDateBill()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setDateBill(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateBill)
	 * @method bool hasDateBill()
	 * @method bool isDateBillFilled()
	 * @method bool isDateBillChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateBill()
	 * @method \Bitrix\Main\Type\DateTime requireDateBill()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetDateBill()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetDateBill()
	 * @method \Bitrix\Main\Type\DateTime fillDateBill()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \float getSum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setSum(\float|\Bitrix\Main\DB\SqlExpression $sum)
	 * @method bool hasSum()
	 * @method bool isSumFilled()
	 * @method bool isSumChanged()
	 * @method \float remindActualSum()
	 * @method \float requireSum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetSum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetSum()
	 * @method \float fillSum()
	 * @method \float getPriceCod()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPriceCod(\float|\Bitrix\Main\DB\SqlExpression $priceCod)
	 * @method bool hasPriceCod()
	 * @method bool isPriceCodFilled()
	 * @method bool isPriceCodChanged()
	 * @method \float remindActualPriceCod()
	 * @method \float requirePriceCod()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPriceCod()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPriceCod()
	 * @method \float fillPriceCod()
	 * @method \string getCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \string getPaySystemName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPaySystemName(\string|\Bitrix\Main\DB\SqlExpression $paySystemName)
	 * @method bool hasPaySystemName()
	 * @method bool isPaySystemNameFilled()
	 * @method bool isPaySystemNameChanged()
	 * @method \string remindActualPaySystemName()
	 * @method \string requirePaySystemName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPaySystemName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPaySystemName()
	 * @method \string fillPaySystemName()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\EO_User getResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireResponsibleBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetResponsibleBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetResponsibleBy()
	 * @method bool hasResponsibleBy()
	 * @method bool isResponsibleByFilled()
	 * @method bool isResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillResponsibleBy()
	 * @method \int getEmpResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setEmpResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $empResponsibleId)
	 * @method bool hasEmpResponsibleId()
	 * @method bool isEmpResponsibleIdFilled()
	 * @method bool isEmpResponsibleIdChanged()
	 * @method \int remindActualEmpResponsibleId()
	 * @method \int requireEmpResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetEmpResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetEmpResponsibleId()
	 * @method \int fillEmpResponsibleId()
	 * @method \Bitrix\Main\EO_User getEmpResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireEmpResponsibleBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setEmpResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetEmpResponsibleBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetEmpResponsibleBy()
	 * @method bool hasEmpResponsibleBy()
	 * @method bool isEmpResponsibleByFilled()
	 * @method bool isEmpResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpResponsibleBy()
	 * @method \Bitrix\Main\Type\DateTime getDateResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setDateResponsibleId(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateResponsibleId)
	 * @method bool hasDateResponsibleId()
	 * @method bool isDateResponsibleIdFilled()
	 * @method bool isDateResponsibleIdChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime requireDateResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetDateResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetDateResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime fillDateResponsibleId()
	 * @method \string getComments()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetComments()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetComments()
	 * @method \string fillComments()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetCompanyId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Company getCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Company remindActualCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Company requireCompanyBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setCompanyBy(\Bitrix\Sale\Internals\EO_Company $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetCompanyBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetCompanyBy()
	 * @method bool hasCompanyBy()
	 * @method bool isCompanyByFilled()
	 * @method bool isCompanyByChanged()
	 * @method \Bitrix\Sale\Internals\EO_Company fillCompanyBy()
	 * @method \string getPayReturnNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPayReturnNum(\string|\Bitrix\Main\DB\SqlExpression $payReturnNum)
	 * @method bool hasPayReturnNum()
	 * @method bool isPayReturnNumFilled()
	 * @method bool isPayReturnNumChanged()
	 * @method \string remindActualPayReturnNum()
	 * @method \string requirePayReturnNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPayReturnNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPayReturnNum()
	 * @method \string fillPayReturnNum()
	 * @method \Bitrix\Main\Type\Date getPayReturnDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPayReturnDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $payReturnDate)
	 * @method bool hasPayReturnDate()
	 * @method bool isPayReturnDateFilled()
	 * @method bool isPayReturnDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPayReturnDate()
	 * @method \Bitrix\Main\Type\Date requirePayReturnDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPayReturnDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPayReturnDate()
	 * @method \Bitrix\Main\Type\Date fillPayReturnDate()
	 * @method \int getEmpReturnId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setEmpReturnId(\int|\Bitrix\Main\DB\SqlExpression $empReturnId)
	 * @method bool hasEmpReturnId()
	 * @method bool isEmpReturnIdFilled()
	 * @method bool isEmpReturnIdChanged()
	 * @method \int remindActualEmpReturnId()
	 * @method \int requireEmpReturnId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetEmpReturnId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetEmpReturnId()
	 * @method \int fillEmpReturnId()
	 * @method \Bitrix\Main\EO_User getEmpReturnBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpReturnBy()
	 * @method \Bitrix\Main\EO_User requireEmpReturnBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setEmpReturnBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetEmpReturnBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetEmpReturnBy()
	 * @method bool hasEmpReturnBy()
	 * @method bool isEmpReturnByFilled()
	 * @method bool isEmpReturnByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpReturnBy()
	 * @method \string getPayReturnComment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setPayReturnComment(\string|\Bitrix\Main\DB\SqlExpression $payReturnComment)
	 * @method bool hasPayReturnComment()
	 * @method bool isPayReturnCommentFilled()
	 * @method bool isPayReturnCommentChanged()
	 * @method \string remindActualPayReturnComment()
	 * @method \string requirePayReturnComment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetPayReturnComment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetPayReturnComment()
	 * @method \string fillPayReturnComment()
	 * @method \string getIsReturn()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setIsReturn(\string|\Bitrix\Main\DB\SqlExpression $isReturn)
	 * @method bool hasIsReturn()
	 * @method bool isIsReturnFilled()
	 * @method bool isIsReturnChanged()
	 * @method \string remindActualIsReturn()
	 * @method \string requireIsReturn()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetIsReturn()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetIsReturn()
	 * @method \string fillIsReturn()
	 * @method \boolean getMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setMarked(\boolean|\Bitrix\Main\DB\SqlExpression $marked)
	 * @method bool hasMarked()
	 * @method bool isMarkedFilled()
	 * @method bool isMarkedChanged()
	 * @method \boolean remindActualMarked()
	 * @method \boolean requireMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetMarked()
	 * @method \boolean fillMarked()
	 * @method \Bitrix\Main\Type\DateTime getDateMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setDateMarked(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateMarked)
	 * @method bool hasDateMarked()
	 * @method bool isDateMarkedFilled()
	 * @method bool isDateMarkedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateMarked()
	 * @method \Bitrix\Main\Type\DateTime requireDateMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetDateMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetDateMarked()
	 * @method \Bitrix\Main\Type\DateTime fillDateMarked()
	 * @method \int getEmpMarkedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setEmpMarkedId(\int|\Bitrix\Main\DB\SqlExpression $empMarkedId)
	 * @method bool hasEmpMarkedId()
	 * @method bool isEmpMarkedIdFilled()
	 * @method bool isEmpMarkedIdChanged()
	 * @method \int remindActualEmpMarkedId()
	 * @method \int requireEmpMarkedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetEmpMarkedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetEmpMarkedId()
	 * @method \int fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User getEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User requireEmpMarkedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setEmpMarkedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetEmpMarkedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetEmpMarkedBy()
	 * @method bool hasEmpMarkedBy()
	 * @method bool isEmpMarkedByFilled()
	 * @method bool isEmpMarkedByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpMarkedBy()
	 * @method \string getReasonMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setReasonMarked(\string|\Bitrix\Main\DB\SqlExpression $reasonMarked)
	 * @method bool hasReasonMarked()
	 * @method bool isReasonMarkedFilled()
	 * @method bool isReasonMarkedChanged()
	 * @method \string remindActualReasonMarked()
	 * @method \string requireReasonMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetReasonMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetReasonMarked()
	 * @method \string fillReasonMarked()
	 * @method \boolean getUpdated1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setUpdated1c(\boolean|\Bitrix\Main\DB\SqlExpression $updated1c)
	 * @method bool hasUpdated1c()
	 * @method bool isUpdated1cFilled()
	 * @method bool isUpdated1cChanged()
	 * @method \boolean remindActualUpdated1c()
	 * @method \boolean requireUpdated1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetUpdated1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetUpdated1c()
	 * @method \boolean fillUpdated1c()
	 * @method \string getId1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setId1c(\string|\Bitrix\Main\DB\SqlExpression $id1c)
	 * @method bool hasId1c()
	 * @method bool isId1cFilled()
	 * @method bool isId1cChanged()
	 * @method \string remindActualId1c()
	 * @method \string requireId1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetId1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetId1c()
	 * @method \string fillId1c()
	 * @method \string getVersion1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setVersion1c(\string|\Bitrix\Main\DB\SqlExpression $version1c)
	 * @method bool hasVersion1c()
	 * @method bool isVersion1cFilled()
	 * @method bool isVersion1cChanged()
	 * @method \string remindActualVersion1c()
	 * @method \string requireVersion1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetVersion1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetVersion1c()
	 * @method \string fillVersion1c()
	 * @method \string getExternalPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment setExternalPayment(\string|\Bitrix\Main\DB\SqlExpression $externalPayment)
	 * @method bool hasExternalPayment()
	 * @method bool isExternalPaymentFilled()
	 * @method bool isExternalPaymentChanged()
	 * @method \string remindActualExternalPayment()
	 * @method \string requireExternalPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment resetExternalPayment()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unsetExternalPayment()
	 * @method \string fillExternalPayment()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Payment wakeUp($data)
	 */
	class EO_Payment {
		/* @var \Bitrix\Crm\Invoice\Internals\PaymentTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\PaymentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_Payment_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getAccountNumberList()
	 * @method \string[] fillAccountNumber()
	 * @method \boolean[] getPaidList()
	 * @method \boolean[] fillPaid()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePaidList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePaid()
	 * @method \int[] getEmpPaidIdList()
	 * @method \int[] fillEmpPaidId()
	 * @method \Bitrix\Main\EO_User[] getEmpPaidByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection getEmpPaidByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpPaidBy()
	 * @method \int[] getPaySystemIdList()
	 * @method \int[] fillPaySystemId()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction[] getPaySystemList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection getPaySystemCollection()
	 * @method \Bitrix\Sale\Internals\EO_PaySystemAction_Collection fillPaySystem()
	 * @method \boolean[] getPsStatusList()
	 * @method \boolean[] fillPsStatus()
	 * @method \string[] getPsStatusCodeList()
	 * @method \string[] fillPsStatusCode()
	 * @method \string[] getPsInvoiceIdList()
	 * @method \string[] fillPsInvoiceId()
	 * @method \string[] getPsStatusDescriptionList()
	 * @method \string[] fillPsStatusDescription()
	 * @method \string[] getPsStatusMessageList()
	 * @method \string[] fillPsStatusMessage()
	 * @method \float[] getPsSumList()
	 * @method \float[] fillPsSum()
	 * @method \string[] getPsCurrencyList()
	 * @method \string[] fillPsCurrency()
	 * @method \Bitrix\Main\Type\DateTime[] getPsResponseDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillPsResponseDate()
	 * @method \string[] getPsRecurringTokenList()
	 * @method \string[] fillPsRecurringToken()
	 * @method \string[] getPayVoucherNumList()
	 * @method \string[] fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\Date[] getPayVoucherDateList()
	 * @method \Bitrix\Main\Type\Date[] fillPayVoucherDate()
	 * @method \Bitrix\Main\Type\Date[] getDatePayBeforeList()
	 * @method \Bitrix\Main\Type\Date[] fillDatePayBefore()
	 * @method \Bitrix\Main\Type\DateTime[] getDateBillList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateBill()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \float[] getSumList()
	 * @method \float[] fillSum()
	 * @method \float[] getPriceCodList()
	 * @method \float[] fillPriceCod()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \string[] getPaySystemNameList()
	 * @method \string[] fillPaySystemName()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getResponsibleByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection getResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsibleBy()
	 * @method \int[] getEmpResponsibleIdList()
	 * @method \int[] fillEmpResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getEmpResponsibleByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection getEmpResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpResponsibleBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateResponsibleIdList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateResponsibleId()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Company[] getCompanyByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection getCompanyByCollection()
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection fillCompanyBy()
	 * @method \string[] getPayReturnNumList()
	 * @method \string[] fillPayReturnNum()
	 * @method \Bitrix\Main\Type\Date[] getPayReturnDateList()
	 * @method \Bitrix\Main\Type\Date[] fillPayReturnDate()
	 * @method \int[] getEmpReturnIdList()
	 * @method \int[] fillEmpReturnId()
	 * @method \Bitrix\Main\EO_User[] getEmpReturnByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection getEmpReturnByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpReturnBy()
	 * @method \string[] getPayReturnCommentList()
	 * @method \string[] fillPayReturnComment()
	 * @method \string[] getIsReturnList()
	 * @method \string[] fillIsReturn()
	 * @method \boolean[] getMarkedList()
	 * @method \boolean[] fillMarked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateMarkedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateMarked()
	 * @method \int[] getEmpMarkedIdList()
	 * @method \int[] fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User[] getEmpMarkedByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection getEmpMarkedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpMarkedBy()
	 * @method \string[] getReasonMarkedList()
	 * @method \string[] fillReasonMarked()
	 * @method \boolean[] getUpdated1cList()
	 * @method \boolean[] fillUpdated1c()
	 * @method \string[] getId1cList()
	 * @method \string[] fillId1c()
	 * @method \string[] getVersion1cList()
	 * @method \string[] fillVersion1c()
	 * @method \string[] getExternalPaymentList()
	 * @method \string[] fillExternalPayment()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_Payment $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_Payment $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_Payment $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Payment_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\PaymentTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\PaymentTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_Payment_Query query()
	 * @method static EO_Payment_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Payment_Result getById($id)
	 * @method static EO_Payment_Result getList(array $parameters = array())
	 * @method static EO_Payment_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Payment createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Payment wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection wakeUpCollection($rows)
	 */
	class PaymentTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Payment_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Payment_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection fetchCollection()
	 */
	class EO_Payment_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Payment_Collection wakeUpCollection($rows)
	 */
	class EO_Payment_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\ShipmentTable:crm/lib/invoice/internals/shipment.php:b70f723c168cbc3c5097c71c0c2ea4c2 */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_Shipment
	 * @see \Bitrix\Crm\Invoice\Internals\ShipmentTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getAccountNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setAccountNumber(\string|\Bitrix\Main\DB\SqlExpression $accountNumber)
	 * @method bool hasAccountNumber()
	 * @method bool isAccountNumberFilled()
	 * @method bool isAccountNumberChanged()
	 * @method \string remindActualAccountNumber()
	 * @method \string requireAccountNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetAccountNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetAccountNumber()
	 * @method \string fillAccountNumber()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \string getDateInsertShort()
	 * @method \string remindActualDateInsertShort()
	 * @method \string requireDateInsertShort()
	 * @method bool hasDateInsertShort()
	 * @method bool isDateInsertShortFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDateInsertShort()
	 * @method \string fillDateInsertShort()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetStatusId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \string getDeliveryLocation()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDeliveryLocation(\string|\Bitrix\Main\DB\SqlExpression $deliveryLocation)
	 * @method bool hasDeliveryLocation()
	 * @method bool isDeliveryLocationFilled()
	 * @method bool isDeliveryLocationChanged()
	 * @method \string remindActualDeliveryLocation()
	 * @method \string requireDeliveryLocation()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDeliveryLocation()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDeliveryLocation()
	 * @method \string fillDeliveryLocation()
	 * @method \float getBasePriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setBasePriceDelivery(\float|\Bitrix\Main\DB\SqlExpression $basePriceDelivery)
	 * @method bool hasBasePriceDelivery()
	 * @method bool isBasePriceDeliveryFilled()
	 * @method bool isBasePriceDeliveryChanged()
	 * @method \float remindActualBasePriceDelivery()
	 * @method \float requireBasePriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetBasePriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetBasePriceDelivery()
	 * @method \float fillBasePriceDelivery()
	 * @method \float getPriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setPriceDelivery(\float|\Bitrix\Main\DB\SqlExpression $priceDelivery)
	 * @method bool hasPriceDelivery()
	 * @method bool isPriceDeliveryFilled()
	 * @method bool isPriceDeliveryChanged()
	 * @method \float remindActualPriceDelivery()
	 * @method \float requirePriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetPriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetPriceDelivery()
	 * @method \float fillPriceDelivery()
	 * @method \float getWeight()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setWeight(\float|\Bitrix\Main\DB\SqlExpression $weight)
	 * @method bool hasWeight()
	 * @method bool isWeightFilled()
	 * @method bool isWeightChanged()
	 * @method \float remindActualWeight()
	 * @method \float requireWeight()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetWeight()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetWeight()
	 * @method \float fillWeight()
	 * @method \boolean getCustomPriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setCustomPriceDelivery(\boolean|\Bitrix\Main\DB\SqlExpression $customPriceDelivery)
	 * @method bool hasCustomPriceDelivery()
	 * @method bool isCustomPriceDeliveryFilled()
	 * @method bool isCustomPriceDeliveryChanged()
	 * @method \boolean remindActualCustomPriceDelivery()
	 * @method \boolean requireCustomPriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetCustomPriceDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetCustomPriceDelivery()
	 * @method \boolean fillCustomPriceDelivery()
	 * @method \string getCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetCurrency()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \float getDiscountPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDiscountPrice(\float|\Bitrix\Main\DB\SqlExpression $discountPrice)
	 * @method bool hasDiscountPrice()
	 * @method bool isDiscountPriceFilled()
	 * @method bool isDiscountPriceChanged()
	 * @method \float remindActualDiscountPrice()
	 * @method \float requireDiscountPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDiscountPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDiscountPrice()
	 * @method \float fillDiscountPrice()
	 * @method \boolean getAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setAllowDelivery(\boolean|\Bitrix\Main\DB\SqlExpression $allowDelivery)
	 * @method bool hasAllowDelivery()
	 * @method bool isAllowDeliveryFilled()
	 * @method bool isAllowDeliveryChanged()
	 * @method \boolean remindActualAllowDelivery()
	 * @method \boolean requireAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetAllowDelivery()
	 * @method \boolean fillAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime getDateAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDateAllowDelivery(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateAllowDelivery)
	 * @method bool hasDateAllowDelivery()
	 * @method bool isDateAllowDeliveryFilled()
	 * @method bool isDateAllowDeliveryChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime requireDateAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDateAllowDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDateAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime fillDateAllowDelivery()
	 * @method \string getDateAllowDeliveryShort()
	 * @method \string remindActualDateAllowDeliveryShort()
	 * @method \string requireDateAllowDeliveryShort()
	 * @method bool hasDateAllowDeliveryShort()
	 * @method bool isDateAllowDeliveryShortFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDateAllowDeliveryShort()
	 * @method \string fillDateAllowDeliveryShort()
	 * @method \int getEmpAllowDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setEmpAllowDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $empAllowDeliveryId)
	 * @method bool hasEmpAllowDeliveryId()
	 * @method bool isEmpAllowDeliveryIdFilled()
	 * @method bool isEmpAllowDeliveryIdChanged()
	 * @method \int remindActualEmpAllowDeliveryId()
	 * @method \int requireEmpAllowDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetEmpAllowDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetEmpAllowDeliveryId()
	 * @method \int fillEmpAllowDeliveryId()
	 * @method \Bitrix\Main\EO_User getEmpAllowDeliveryBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpAllowDeliveryBy()
	 * @method \Bitrix\Main\EO_User requireEmpAllowDeliveryBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setEmpAllowDeliveryBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetEmpAllowDeliveryBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetEmpAllowDeliveryBy()
	 * @method bool hasEmpAllowDeliveryBy()
	 * @method bool isEmpAllowDeliveryByFilled()
	 * @method bool isEmpAllowDeliveryByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpAllowDeliveryBy()
	 * @method \boolean getDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDeducted(\boolean|\Bitrix\Main\DB\SqlExpression $deducted)
	 * @method bool hasDeducted()
	 * @method bool isDeductedFilled()
	 * @method bool isDeductedChanged()
	 * @method \boolean remindActualDeducted()
	 * @method \boolean requireDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDeducted()
	 * @method \boolean fillDeducted()
	 * @method \Bitrix\Main\Type\DateTime getDateDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDateDeducted(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateDeducted)
	 * @method bool hasDateDeducted()
	 * @method bool isDateDeductedFilled()
	 * @method bool isDateDeductedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateDeducted()
	 * @method \Bitrix\Main\Type\DateTime requireDateDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDateDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDateDeducted()
	 * @method \Bitrix\Main\Type\DateTime fillDateDeducted()
	 * @method \string getDateDeductedShort()
	 * @method \string remindActualDateDeductedShort()
	 * @method \string requireDateDeductedShort()
	 * @method bool hasDateDeductedShort()
	 * @method bool isDateDeductedShortFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDateDeductedShort()
	 * @method \string fillDateDeductedShort()
	 * @method \int getEmpDeductedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setEmpDeductedId(\int|\Bitrix\Main\DB\SqlExpression $empDeductedId)
	 * @method bool hasEmpDeductedId()
	 * @method bool isEmpDeductedIdFilled()
	 * @method bool isEmpDeductedIdChanged()
	 * @method \int remindActualEmpDeductedId()
	 * @method \int requireEmpDeductedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetEmpDeductedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetEmpDeductedId()
	 * @method \int fillEmpDeductedId()
	 * @method \Bitrix\Main\EO_User getEmpDeductedBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpDeductedBy()
	 * @method \Bitrix\Main\EO_User requireEmpDeductedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setEmpDeductedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetEmpDeductedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetEmpDeductedBy()
	 * @method bool hasEmpDeductedBy()
	 * @method bool isEmpDeductedByFilled()
	 * @method bool isEmpDeductedByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpDeductedBy()
	 * @method \string getReasonUndoDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setReasonUndoDeducted(\string|\Bitrix\Main\DB\SqlExpression $reasonUndoDeducted)
	 * @method bool hasReasonUndoDeducted()
	 * @method bool isReasonUndoDeductedFilled()
	 * @method bool isReasonUndoDeductedChanged()
	 * @method \string remindActualReasonUndoDeducted()
	 * @method \string requireReasonUndoDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetReasonUndoDeducted()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetReasonUndoDeducted()
	 * @method \string fillReasonUndoDeducted()
	 * @method \boolean getReserved()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setReserved(\boolean|\Bitrix\Main\DB\SqlExpression $reserved)
	 * @method bool hasReserved()
	 * @method bool isReservedFilled()
	 * @method bool isReservedChanged()
	 * @method \boolean remindActualReserved()
	 * @method \boolean requireReserved()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetReserved()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetReserved()
	 * @method \boolean fillReserved()
	 * @method \int getDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $deliveryId)
	 * @method bool hasDeliveryId()
	 * @method bool isDeliveryIdFilled()
	 * @method bool isDeliveryIdChanged()
	 * @method \int remindActualDeliveryId()
	 * @method \int requireDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDeliveryId()
	 * @method \int fillDeliveryId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object getDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object remindActualDelivery()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object requireDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDelivery(\Bitrix\Sale\Delivery\Services\EO_NNM_Object $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDelivery()
	 * @method bool hasDelivery()
	 * @method bool isDeliveryFilled()
	 * @method bool isDeliveryChanged()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object fillDelivery()
	 * @method \string getDeliveryDocNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDeliveryDocNum(\string|\Bitrix\Main\DB\SqlExpression $deliveryDocNum)
	 * @method bool hasDeliveryDocNum()
	 * @method bool isDeliveryDocNumFilled()
	 * @method bool isDeliveryDocNumChanged()
	 * @method \string remindActualDeliveryDocNum()
	 * @method \string requireDeliveryDocNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDeliveryDocNum()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDeliveryDocNum()
	 * @method \string fillDeliveryDocNum()
	 * @method \Bitrix\Main\Type\DateTime getDeliveryDocDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDeliveryDocDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $deliveryDocDate)
	 * @method bool hasDeliveryDocDate()
	 * @method bool isDeliveryDocDateFilled()
	 * @method bool isDeliveryDocDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDeliveryDocDate()
	 * @method \Bitrix\Main\Type\DateTime requireDeliveryDocDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDeliveryDocDate()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDeliveryDocDate()
	 * @method \Bitrix\Main\Type\DateTime fillDeliveryDocDate()
	 * @method \string getDeliveryDocDateShort()
	 * @method \string remindActualDeliveryDocDateShort()
	 * @method \string requireDeliveryDocDateShort()
	 * @method bool hasDeliveryDocDateShort()
	 * @method bool isDeliveryDocDateShortFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDeliveryDocDateShort()
	 * @method \string fillDeliveryDocDateShort()
	 * @method \string getTrackingNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setTrackingNumber(\string|\Bitrix\Main\DB\SqlExpression $trackingNumber)
	 * @method bool hasTrackingNumber()
	 * @method bool isTrackingNumberFilled()
	 * @method bool isTrackingNumberChanged()
	 * @method \string remindActualTrackingNumber()
	 * @method \string requireTrackingNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetTrackingNumber()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetTrackingNumber()
	 * @method \string fillTrackingNumber()
	 * @method \int getTrackingStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setTrackingStatus(\int|\Bitrix\Main\DB\SqlExpression $trackingStatus)
	 * @method bool hasTrackingStatus()
	 * @method bool isTrackingStatusFilled()
	 * @method bool isTrackingStatusChanged()
	 * @method \int remindActualTrackingStatus()
	 * @method \int requireTrackingStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetTrackingStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetTrackingStatus()
	 * @method \int fillTrackingStatus()
	 * @method \string getTrackingDescription()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setTrackingDescription(\string|\Bitrix\Main\DB\SqlExpression $trackingDescription)
	 * @method bool hasTrackingDescription()
	 * @method bool isTrackingDescriptionFilled()
	 * @method bool isTrackingDescriptionChanged()
	 * @method \string remindActualTrackingDescription()
	 * @method \string requireTrackingDescription()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetTrackingDescription()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetTrackingDescription()
	 * @method \string fillTrackingDescription()
	 * @method \Bitrix\Main\Type\DateTime getTrackingLastCheck()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setTrackingLastCheck(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $trackingLastCheck)
	 * @method bool hasTrackingLastCheck()
	 * @method bool isTrackingLastCheckFilled()
	 * @method bool isTrackingLastCheckChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTrackingLastCheck()
	 * @method \Bitrix\Main\Type\DateTime requireTrackingLastCheck()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetTrackingLastCheck()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetTrackingLastCheck()
	 * @method \Bitrix\Main\Type\DateTime fillTrackingLastCheck()
	 * @method \Bitrix\Main\Type\DateTime getTrackingLastChange()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setTrackingLastChange(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $trackingLastChange)
	 * @method bool hasTrackingLastChange()
	 * @method bool isTrackingLastChangeFilled()
	 * @method bool isTrackingLastChangeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTrackingLastChange()
	 * @method \Bitrix\Main\Type\DateTime requireTrackingLastChange()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetTrackingLastChange()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetTrackingLastChange()
	 * @method \Bitrix\Main\Type\DateTime fillTrackingLastChange()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getParams()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetParams()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetParams()
	 * @method \string fillParams()
	 * @method \string getDeliveryName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDeliveryName(\string|\Bitrix\Main\DB\SqlExpression $deliveryName)
	 * @method bool hasDeliveryName()
	 * @method bool isDeliveryNameFilled()
	 * @method bool isDeliveryNameChanged()
	 * @method \string remindActualDeliveryName()
	 * @method \string requireDeliveryName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDeliveryName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDeliveryName()
	 * @method \string fillDeliveryName()
	 * @method \boolean getCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setCanceled(\boolean|\Bitrix\Main\DB\SqlExpression $canceled)
	 * @method bool hasCanceled()
	 * @method bool isCanceledFilled()
	 * @method bool isCanceledChanged()
	 * @method \boolean remindActualCanceled()
	 * @method \boolean requireCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetCanceled()
	 * @method \boolean fillCanceled()
	 * @method \Bitrix\Main\Type\DateTime getDateCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDateCanceled(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCanceled)
	 * @method bool hasDateCanceled()
	 * @method bool isDateCanceledFilled()
	 * @method bool isDateCanceledChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCanceled()
	 * @method \Bitrix\Main\Type\DateTime requireDateCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDateCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDateCanceled()
	 * @method \Bitrix\Main\Type\DateTime fillDateCanceled()
	 * @method \int getEmpCanceledId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setEmpCanceledId(\int|\Bitrix\Main\DB\SqlExpression $empCanceledId)
	 * @method bool hasEmpCanceledId()
	 * @method bool isEmpCanceledIdFilled()
	 * @method bool isEmpCanceledIdChanged()
	 * @method \int remindActualEmpCanceledId()
	 * @method \int requireEmpCanceledId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetEmpCanceledId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetEmpCanceledId()
	 * @method \int fillEmpCanceledId()
	 * @method \string getReasonCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setReasonCanceled(\string|\Bitrix\Main\DB\SqlExpression $reasonCanceled)
	 * @method bool hasReasonCanceled()
	 * @method bool isReasonCanceledFilled()
	 * @method bool isReasonCanceledChanged()
	 * @method \string remindActualReasonCanceled()
	 * @method \string requireReasonCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetReasonCanceled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetReasonCanceled()
	 * @method \string fillReasonCanceled()
	 * @method \Bitrix\Main\EO_User getEmpCanceledBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpCanceledBy()
	 * @method \Bitrix\Main\EO_User requireEmpCanceledBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setEmpCanceledBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetEmpCanceledBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetEmpCanceledBy()
	 * @method bool hasEmpCanceledBy()
	 * @method bool isEmpCanceledByFilled()
	 * @method bool isEmpCanceledByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpCanceledBy()
	 * @method \boolean getMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setMarked(\boolean|\Bitrix\Main\DB\SqlExpression $marked)
	 * @method bool hasMarked()
	 * @method bool isMarkedFilled()
	 * @method bool isMarkedChanged()
	 * @method \boolean remindActualMarked()
	 * @method \boolean requireMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetMarked()
	 * @method \boolean fillMarked()
	 * @method \Bitrix\Main\Type\DateTime getDateMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDateMarked(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateMarked)
	 * @method bool hasDateMarked()
	 * @method bool isDateMarkedFilled()
	 * @method bool isDateMarkedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateMarked()
	 * @method \Bitrix\Main\Type\DateTime requireDateMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDateMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDateMarked()
	 * @method \Bitrix\Main\Type\DateTime fillDateMarked()
	 * @method \int getEmpMarkedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setEmpMarkedId(\int|\Bitrix\Main\DB\SqlExpression $empMarkedId)
	 * @method bool hasEmpMarkedId()
	 * @method bool isEmpMarkedIdFilled()
	 * @method bool isEmpMarkedIdChanged()
	 * @method \int remindActualEmpMarkedId()
	 * @method \int requireEmpMarkedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetEmpMarkedId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetEmpMarkedId()
	 * @method \int fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User getEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpMarkedBy()
	 * @method \Bitrix\Main\EO_User requireEmpMarkedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setEmpMarkedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetEmpMarkedBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetEmpMarkedBy()
	 * @method bool hasEmpMarkedBy()
	 * @method bool isEmpMarkedByFilled()
	 * @method bool isEmpMarkedByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpMarkedBy()
	 * @method \string getReasonMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setReasonMarked(\string|\Bitrix\Main\DB\SqlExpression $reasonMarked)
	 * @method bool hasReasonMarked()
	 * @method bool isReasonMarkedFilled()
	 * @method bool isReasonMarkedChanged()
	 * @method \string remindActualReasonMarked()
	 * @method \string requireReasonMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetReasonMarked()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetReasonMarked()
	 * @method \string fillReasonMarked()
	 * @method \boolean getSystem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setSystem(\boolean|\Bitrix\Main\DB\SqlExpression $system)
	 * @method bool hasSystem()
	 * @method bool isSystemFilled()
	 * @method bool isSystemChanged()
	 * @method \boolean remindActualSystem()
	 * @method \boolean requireSystem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetSystem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetSystem()
	 * @method \boolean fillSystem()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\EO_User getResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireResponsibleBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetResponsibleBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetResponsibleBy()
	 * @method bool hasResponsibleBy()
	 * @method bool isResponsibleByFilled()
	 * @method bool isResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillResponsibleBy()
	 * @method \int getEmpResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setEmpResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $empResponsibleId)
	 * @method bool hasEmpResponsibleId()
	 * @method bool isEmpResponsibleIdFilled()
	 * @method bool isEmpResponsibleIdChanged()
	 * @method \int remindActualEmpResponsibleId()
	 * @method \int requireEmpResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetEmpResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetEmpResponsibleId()
	 * @method \int fillEmpResponsibleId()
	 * @method \Bitrix\Main\EO_User getEmpResponsibleBy()
	 * @method \Bitrix\Main\EO_User remindActualEmpResponsibleBy()
	 * @method \Bitrix\Main\EO_User requireEmpResponsibleBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setEmpResponsibleBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetEmpResponsibleBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetEmpResponsibleBy()
	 * @method bool hasEmpResponsibleBy()
	 * @method bool isEmpResponsibleByFilled()
	 * @method bool isEmpResponsibleByChanged()
	 * @method \Bitrix\Main\EO_User fillEmpResponsibleBy()
	 * @method \Bitrix\Main\Type\DateTime getDateResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setDateResponsibleId(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateResponsibleId)
	 * @method bool hasDateResponsibleId()
	 * @method bool isDateResponsibleIdFilled()
	 * @method bool isDateResponsibleIdChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime requireDateResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetDateResponsibleId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetDateResponsibleId()
	 * @method \Bitrix\Main\Type\DateTime fillDateResponsibleId()
	 * @method \string getComments()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetComments()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetComments()
	 * @method \string fillComments()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetCompanyId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Company getCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Company remindActualCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Company requireCompanyBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setCompanyBy(\Bitrix\Sale\Internals\EO_Company $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetCompanyBy()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetCompanyBy()
	 * @method bool hasCompanyBy()
	 * @method bool isCompanyByFilled()
	 * @method bool isCompanyByChanged()
	 * @method \Bitrix\Sale\Internals\EO_Company fillCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Status getStatus()
	 * @method \Bitrix\Sale\Internals\EO_Status remindActualStatus()
	 * @method \Bitrix\Sale\Internals\EO_Status requireStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setStatus(\Bitrix\Sale\Internals\EO_Status $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetStatus()
	 * @method bool hasStatus()
	 * @method bool isStatusFilled()
	 * @method bool isStatusChanged()
	 * @method \Bitrix\Sale\Internals\EO_Status fillStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem getShipmentItem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem remindActualShipmentItem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem requireShipmentItem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setShipmentItem(\Bitrix\Crm\Invoice\Internals\EO_ShipmentItem $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetShipmentItem()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetShipmentItem()
	 * @method bool hasShipmentItem()
	 * @method bool isShipmentItemFilled()
	 * @method bool isShipmentItemChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem fillShipmentItem()
	 * @method \boolean getUpdated1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setUpdated1c(\boolean|\Bitrix\Main\DB\SqlExpression $updated1c)
	 * @method bool hasUpdated1c()
	 * @method bool isUpdated1cFilled()
	 * @method bool isUpdated1cChanged()
	 * @method \boolean remindActualUpdated1c()
	 * @method \boolean requireUpdated1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetUpdated1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetUpdated1c()
	 * @method \boolean fillUpdated1c()
	 * @method \string getId1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setId1c(\string|\Bitrix\Main\DB\SqlExpression $id1c)
	 * @method bool hasId1c()
	 * @method bool isId1cFilled()
	 * @method bool isId1cChanged()
	 * @method \string remindActualId1c()
	 * @method \string requireId1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetId1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetId1c()
	 * @method \string fillId1c()
	 * @method \string getVersion1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setVersion1c(\string|\Bitrix\Main\DB\SqlExpression $version1c)
	 * @method bool hasVersion1c()
	 * @method bool isVersion1cFilled()
	 * @method bool isVersion1cChanged()
	 * @method \string remindActualVersion1c()
	 * @method \string requireVersion1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetVersion1c()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetVersion1c()
	 * @method \string fillVersion1c()
	 * @method \boolean getExternalDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment setExternalDelivery(\boolean|\Bitrix\Main\DB\SqlExpression $externalDelivery)
	 * @method bool hasExternalDelivery()
	 * @method bool isExternalDeliveryFilled()
	 * @method bool isExternalDeliveryChanged()
	 * @method \boolean remindActualExternalDelivery()
	 * @method \boolean requireExternalDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment resetExternalDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unsetExternalDelivery()
	 * @method \boolean fillExternalDelivery()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Shipment wakeUp($data)
	 */
	class EO_Shipment {
		/* @var \Bitrix\Crm\Invoice\Internals\ShipmentTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\ShipmentTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_Shipment_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getAccountNumberList()
	 * @method \string[] fillAccountNumber()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \string[] getDateInsertShortList()
	 * @method \string[] fillDateInsertShort()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \string[] getDeliveryLocationList()
	 * @method \string[] fillDeliveryLocation()
	 * @method \float[] getBasePriceDeliveryList()
	 * @method \float[] fillBasePriceDelivery()
	 * @method \float[] getPriceDeliveryList()
	 * @method \float[] fillPriceDelivery()
	 * @method \float[] getWeightList()
	 * @method \float[] fillWeight()
	 * @method \boolean[] getCustomPriceDeliveryList()
	 * @method \boolean[] fillCustomPriceDelivery()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \float[] getDiscountPriceList()
	 * @method \float[] fillDiscountPrice()
	 * @method \boolean[] getAllowDeliveryList()
	 * @method \boolean[] fillAllowDelivery()
	 * @method \Bitrix\Main\Type\DateTime[] getDateAllowDeliveryList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateAllowDelivery()
	 * @method \string[] getDateAllowDeliveryShortList()
	 * @method \string[] fillDateAllowDeliveryShort()
	 * @method \int[] getEmpAllowDeliveryIdList()
	 * @method \int[] fillEmpAllowDeliveryId()
	 * @method \Bitrix\Main\EO_User[] getEmpAllowDeliveryByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection getEmpAllowDeliveryByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpAllowDeliveryBy()
	 * @method \boolean[] getDeductedList()
	 * @method \boolean[] fillDeducted()
	 * @method \Bitrix\Main\Type\DateTime[] getDateDeductedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateDeducted()
	 * @method \string[] getDateDeductedShortList()
	 * @method \string[] fillDateDeductedShort()
	 * @method \int[] getEmpDeductedIdList()
	 * @method \int[] fillEmpDeductedId()
	 * @method \Bitrix\Main\EO_User[] getEmpDeductedByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection getEmpDeductedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpDeductedBy()
	 * @method \string[] getReasonUndoDeductedList()
	 * @method \string[] fillReasonUndoDeducted()
	 * @method \boolean[] getReservedList()
	 * @method \boolean[] fillReserved()
	 * @method \int[] getDeliveryIdList()
	 * @method \int[] fillDeliveryId()
	 * @method \Bitrix\Sale\Delivery\Services\EO_NNM_Object[] getDeliveryList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection getDeliveryCollection()
	 * @method \Bitrix\Sale\Delivery\Services\EO__Collection fillDelivery()
	 * @method \string[] getDeliveryDocNumList()
	 * @method \string[] fillDeliveryDocNum()
	 * @method \Bitrix\Main\Type\DateTime[] getDeliveryDocDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDeliveryDocDate()
	 * @method \string[] getDeliveryDocDateShortList()
	 * @method \string[] fillDeliveryDocDateShort()
	 * @method \string[] getTrackingNumberList()
	 * @method \string[] fillTrackingNumber()
	 * @method \int[] getTrackingStatusList()
	 * @method \int[] fillTrackingStatus()
	 * @method \string[] getTrackingDescriptionList()
	 * @method \string[] fillTrackingDescription()
	 * @method \Bitrix\Main\Type\DateTime[] getTrackingLastCheckList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTrackingLastCheck()
	 * @method \Bitrix\Main\Type\DateTime[] getTrackingLastChangeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTrackingLastChange()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 * @method \string[] getDeliveryNameList()
	 * @method \string[] fillDeliveryName()
	 * @method \boolean[] getCanceledList()
	 * @method \boolean[] fillCanceled()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCanceledList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCanceled()
	 * @method \int[] getEmpCanceledIdList()
	 * @method \int[] fillEmpCanceledId()
	 * @method \string[] getReasonCanceledList()
	 * @method \string[] fillReasonCanceled()
	 * @method \Bitrix\Main\EO_User[] getEmpCanceledByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection getEmpCanceledByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpCanceledBy()
	 * @method \boolean[] getMarkedList()
	 * @method \boolean[] fillMarked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateMarkedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateMarked()
	 * @method \int[] getEmpMarkedIdList()
	 * @method \int[] fillEmpMarkedId()
	 * @method \Bitrix\Main\EO_User[] getEmpMarkedByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection getEmpMarkedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpMarkedBy()
	 * @method \string[] getReasonMarkedList()
	 * @method \string[] fillReasonMarked()
	 * @method \boolean[] getSystemList()
	 * @method \boolean[] fillSystem()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getResponsibleByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection getResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillResponsibleBy()
	 * @method \int[] getEmpResponsibleIdList()
	 * @method \int[] fillEmpResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getEmpResponsibleByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection getEmpResponsibleByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillEmpResponsibleBy()
	 * @method \Bitrix\Main\Type\DateTime[] getDateResponsibleIdList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateResponsibleId()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \Bitrix\Sale\Internals\EO_Company[] getCompanyByList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection getCompanyByCollection()
	 * @method \Bitrix\Sale\Internals\EO_Company_Collection fillCompanyBy()
	 * @method \Bitrix\Sale\Internals\EO_Status[] getStatusList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection getStatusCollection()
	 * @method \Bitrix\Sale\Internals\EO_Status_Collection fillStatus()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem[] getShipmentItemList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection getShipmentItemCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection fillShipmentItem()
	 * @method \boolean[] getUpdated1cList()
	 * @method \boolean[] fillUpdated1c()
	 * @method \string[] getId1cList()
	 * @method \string[] fillId1c()
	 * @method \string[] getVersion1cList()
	 * @method \string[] fillVersion1c()
	 * @method \boolean[] getExternalDeliveryList()
	 * @method \boolean[] fillExternalDelivery()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_Shipment $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_Shipment $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_Shipment $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Shipment_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\ShipmentTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\ShipmentTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_Shipment_Query query()
	 * @method static EO_Shipment_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Shipment_Result getById($id)
	 * @method static EO_Shipment_Result getList(array $parameters = array())
	 * @method static EO_Shipment_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Shipment createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Shipment wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection wakeUpCollection($rows)
	 */
	class ShipmentTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Shipment_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Shipment_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection fetchCollection()
	 */
	class EO_Shipment_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection wakeUpCollection($rows)
	 */
	class EO_Shipment_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\ShipmentItemTable:crm/lib/invoice/internals/shipmentitem.php:9d37d5f5a704428ae736b683bd7c2589 */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_ShipmentItem
	 * @see \Bitrix\Crm\Invoice\Internals\ShipmentItemTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem setOrderDeliveryId(\int|\Bitrix\Main\DB\SqlExpression $orderDeliveryId)
	 * @method bool hasOrderDeliveryId()
	 * @method bool isOrderDeliveryIdFilled()
	 * @method bool isOrderDeliveryIdChanged()
	 * @method \int remindActualOrderDeliveryId()
	 * @method \int requireOrderDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem resetOrderDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem unsetOrderDeliveryId()
	 * @method \int fillOrderDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment getDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment remindActualDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment requireDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem setDelivery(\Bitrix\Crm\Invoice\Internals\EO_Shipment $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem resetDelivery()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem unsetDelivery()
	 * @method bool hasDelivery()
	 * @method bool isDeliveryFilled()
	 * @method bool isDeliveryChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment fillDelivery()
	 * @method \int getBasketId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem setBasketId(\int|\Bitrix\Main\DB\SqlExpression $basketId)
	 * @method bool hasBasketId()
	 * @method bool isBasketIdFilled()
	 * @method bool isBasketIdChanged()
	 * @method \int remindActualBasketId()
	 * @method \int requireBasketId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem resetBasketId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem unsetBasketId()
	 * @method \int fillBasketId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket getBasket()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket remindActualBasket()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket requireBasket()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem setBasket(\Bitrix\Crm\Invoice\Internals\EO_Basket $object)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem resetBasket()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem unsetBasket()
	 * @method bool hasBasket()
	 * @method bool isBasketFilled()
	 * @method bool isBasketChanged()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket fillBasket()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem resetDateInsert()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsertShort()
	 * @method bool hasDateInsertShort()
	 * @method bool isDateInsertShortFilled()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem unsetDateInsertShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsertShort()
	 * @method \float getQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem resetQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \float getReservedQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem setReservedQuantity(\float|\Bitrix\Main\DB\SqlExpression $reservedQuantity)
	 * @method bool hasReservedQuantity()
	 * @method bool isReservedQuantityFilled()
	 * @method bool isReservedQuantityChanged()
	 * @method \float remindActualReservedQuantity()
	 * @method \float requireReservedQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem resetReservedQuantity()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem unsetReservedQuantity()
	 * @method \float fillReservedQuantity()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem resetXmlId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem unsetXmlId()
	 * @method \string fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem wakeUp($data)
	 */
	class EO_ShipmentItem {
		/* @var \Bitrix\Crm\Invoice\Internals\ShipmentItemTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\ShipmentItemTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_ShipmentItem_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderDeliveryIdList()
	 * @method \int[] fillOrderDeliveryId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment[] getDeliveryList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection getDeliveryCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Shipment_Collection fillDelivery()
	 * @method \int[] getBasketIdList()
	 * @method \int[] fillBasketId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket[] getBasketList()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection getBasketCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Basket_Collection fillBasket()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsertShort()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \float[] getReservedQuantityList()
	 * @method \float[] fillReservedQuantity()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_ShipmentItem $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_ShipmentItem $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_ShipmentItem $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ShipmentItem_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\ShipmentItemTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\ShipmentItemTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_ShipmentItem_Query query()
	 * @method static EO_ShipmentItem_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ShipmentItem_Result getById($id)
	 * @method static EO_ShipmentItem_Result getList(array $parameters = array())
	 * @method static EO_ShipmentItem_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection wakeUpCollection($rows)
	 */
	class ShipmentItemTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ShipmentItem_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ShipmentItem_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection fetchCollection()
	 */
	class EO_ShipmentItem_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_ShipmentItem_Collection wakeUpCollection($rows)
	 */
	class EO_ShipmentItem_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Invoice\Internals\TaxTable:crm/lib/invoice/internals/tax.php:90a36bb95cd7c06ed6240204bc641926 */
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_Tax
	 * @see \Bitrix\Crm\Invoice\Internals\TaxTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax resetOrderId()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \string getTaxName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax setTaxName(\string|\Bitrix\Main\DB\SqlExpression $taxName)
	 * @method bool hasTaxName()
	 * @method bool isTaxNameFilled()
	 * @method bool isTaxNameChanged()
	 * @method \string remindActualTaxName()
	 * @method \string requireTaxName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax resetTaxName()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax unsetTaxName()
	 * @method \string fillTaxName()
	 * @method \float getValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax setValue(\float|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \float remindActualValue()
	 * @method \float requireValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax resetValue()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax unsetValue()
	 * @method \float fillValue()
	 * @method \float getValueMoney()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax setValueMoney(\float|\Bitrix\Main\DB\SqlExpression $valueMoney)
	 * @method bool hasValueMoney()
	 * @method bool isValueMoneyFilled()
	 * @method bool isValueMoneyChanged()
	 * @method \float remindActualValueMoney()
	 * @method \float requireValueMoney()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax resetValueMoney()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax unsetValueMoney()
	 * @method \float fillValueMoney()
	 * @method \int getApplyOrder()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax setApplyOrder(\int|\Bitrix\Main\DB\SqlExpression $applyOrder)
	 * @method bool hasApplyOrder()
	 * @method bool isApplyOrderFilled()
	 * @method bool isApplyOrderChanged()
	 * @method \int remindActualApplyOrder()
	 * @method \int requireApplyOrder()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax resetApplyOrder()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax unsetApplyOrder()
	 * @method \int fillApplyOrder()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax resetCode()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax unsetCode()
	 * @method \string fillCode()
	 * @method \boolean getIsPercent()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax setIsPercent(\boolean|\Bitrix\Main\DB\SqlExpression $isPercent)
	 * @method bool hasIsPercent()
	 * @method bool isIsPercentFilled()
	 * @method bool isIsPercentChanged()
	 * @method \boolean remindActualIsPercent()
	 * @method \boolean requireIsPercent()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax resetIsPercent()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax unsetIsPercent()
	 * @method \boolean fillIsPercent()
	 * @method \boolean getIsInPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax setIsInPrice(\boolean|\Bitrix\Main\DB\SqlExpression $isInPrice)
	 * @method bool hasIsInPrice()
	 * @method bool isIsInPriceFilled()
	 * @method bool isIsInPriceChanged()
	 * @method \boolean remindActualIsInPrice()
	 * @method \boolean requireIsInPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax resetIsInPrice()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax unsetIsInPrice()
	 * @method \boolean fillIsInPrice()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax set($fieldName, $value)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax reset($fieldName)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Tax wakeUp($data)
	 */
	class EO_Tax {
		/* @var \Bitrix\Crm\Invoice\Internals\TaxTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\TaxTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * EO_Tax_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \string[] getTaxNameList()
	 * @method \string[] fillTaxName()
	 * @method \float[] getValueList()
	 * @method \float[] fillValue()
	 * @method \float[] getValueMoneyList()
	 * @method \float[] fillValueMoney()
	 * @method \int[] getApplyOrderList()
	 * @method \int[] fillApplyOrder()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \boolean[] getIsPercentList()
	 * @method \boolean[] fillIsPercent()
	 * @method \boolean[] getIsInPriceList()
	 * @method \boolean[] fillIsInPrice()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Invoice\Internals\EO_Tax $object)
	 * @method bool has(\Bitrix\Crm\Invoice\Internals\EO_Tax $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax getByPrimary($primary)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax[] getAll()
	 * @method bool remove(\Bitrix\Crm\Invoice\Internals\EO_Tax $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Tax_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Tax_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Invoice\Internals\TaxTable */
		static public $dataClass = '\Bitrix\Crm\Invoice\Internals\TaxTable';
	}
}
namespace Bitrix\Crm\Invoice\Internals {
	/**
	 * @method static EO_Tax_Query query()
	 * @method static EO_Tax_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Tax_Result getById($id)
	 * @method static EO_Tax_Result getList(array $parameters = array())
	 * @method static EO_Tax_Entity getEntity()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Tax createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Tax_Collection createCollection()
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Tax wakeUpObject($row)
	 * @method static \Bitrix\Crm\Invoice\Internals\EO_Tax_Collection wakeUpCollection($rows)
	 */
	class TaxTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Tax_Result exec()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Tax_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax fetchObject()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax_Collection fetchCollection()
	 */
	class EO_Tax_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax_Collection createCollection()
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax wakeUpObject($row)
	 * @method \Bitrix\Crm\Invoice\Internals\EO_Tax_Collection wakeUpCollection($rows)
	 */
	class EO_Tax_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\InvoiceTable:crm/lib/invoice.php:ab0ee9ea6e1a10bdc973ae7114790e00 */
namespace Bitrix\Crm {
	/**
	 * EO_Invoice
	 * @see \Bitrix\Crm\InvoiceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Invoice setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Crm\EO_Invoice setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Crm\EO_Invoice resetDateInsert()
	 * @method \Bitrix\Crm\EO_Invoice unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateIns()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateIns()
	 * @method \Bitrix\Main\Type\DateTime requireDateIns()
	 * @method bool hasDateIns()
	 * @method bool isDateInsFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetDateIns()
	 * @method \Bitrix\Main\Type\DateTime fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Crm\EO_Invoice setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Crm\EO_Invoice resetDateUpdate()
	 * @method \Bitrix\Crm\EO_Invoice unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdateShort()
	 * @method bool hasDateUpdateShort()
	 * @method bool isDateUpdateShortFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetDateUpdateShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdateShort()
	 * @method \float getProductsQuant()
	 * @method \float remindActualProductsQuant()
	 * @method \float requireProductsQuant()
	 * @method bool hasProductsQuant()
	 * @method bool isProductsQuantFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetProductsQuant()
	 * @method \float fillProductsQuant()
	 * @method \float getPrice()
	 * @method \Bitrix\Crm\EO_Invoice setPrice(\float|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method \Bitrix\Crm\EO_Invoice resetPrice()
	 * @method \Bitrix\Crm\EO_Invoice unsetPrice()
	 * @method \float fillPrice()
	 * @method \float getPricePayed()
	 * @method \float remindActualPricePayed()
	 * @method \float requirePricePayed()
	 * @method bool hasPricePayed()
	 * @method bool isPricePayedFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetPricePayed()
	 * @method \float fillPricePayed()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\EO_Invoice setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\EO_Invoice resetStatusId()
	 * @method \Bitrix\Crm\EO_Invoice unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \Bitrix\Crm\EO_Status getStatusBy()
	 * @method \Bitrix\Crm\EO_Status remindActualStatusBy()
	 * @method \Bitrix\Crm\EO_Status requireStatusBy()
	 * @method \Bitrix\Crm\EO_Invoice setStatusBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Invoice resetStatusBy()
	 * @method \Bitrix\Crm\EO_Invoice unsetStatusBy()
	 * @method bool hasStatusBy()
	 * @method bool isStatusByFilled()
	 * @method bool isStatusByChanged()
	 * @method \Bitrix\Crm\EO_Status fillStatusBy()
	 * @method \int getPaySystemId()
	 * @method \Bitrix\Crm\EO_Invoice setPaySystemId(\int|\Bitrix\Main\DB\SqlExpression $paySystemId)
	 * @method bool hasPaySystemId()
	 * @method bool isPaySystemIdFilled()
	 * @method bool isPaySystemIdChanged()
	 * @method \int remindActualPaySystemId()
	 * @method \int requirePaySystemId()
	 * @method \Bitrix\Crm\EO_Invoice resetPaySystemId()
	 * @method \Bitrix\Crm\EO_Invoice unsetPaySystemId()
	 * @method \int fillPaySystemId()
	 * @method \float getSumPaid()
	 * @method \Bitrix\Crm\EO_Invoice setSumPaid(\float|\Bitrix\Main\DB\SqlExpression $sumPaid)
	 * @method bool hasSumPaid()
	 * @method bool isSumPaidFilled()
	 * @method bool isSumPaidChanged()
	 * @method \float remindActualSumPaid()
	 * @method \float requireSumPaid()
	 * @method \Bitrix\Crm\EO_Invoice resetSumPaid()
	 * @method \Bitrix\Crm\EO_Invoice unsetSumPaid()
	 * @method \float fillSumPaid()
	 * @method \float getSumPaidForrep()
	 * @method \float remindActualSumPaidForrep()
	 * @method \float requireSumPaidForrep()
	 * @method bool hasSumPaidForrep()
	 * @method bool isSumPaidForrepFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetSumPaidForrep()
	 * @method \float fillSumPaidForrep()
	 * @method \string getPayVoucherNum()
	 * @method \Bitrix\Crm\EO_Invoice setPayVoucherNum(\string|\Bitrix\Main\DB\SqlExpression $payVoucherNum)
	 * @method bool hasPayVoucherNum()
	 * @method bool isPayVoucherNumFilled()
	 * @method bool isPayVoucherNumChanged()
	 * @method \string remindActualPayVoucherNum()
	 * @method \string requirePayVoucherNum()
	 * @method \Bitrix\Crm\EO_Invoice resetPayVoucherNum()
	 * @method \Bitrix\Crm\EO_Invoice unsetPayVoucherNum()
	 * @method \string fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\DateTime getPayVoucherDate()
	 * @method \Bitrix\Crm\EO_Invoice setPayVoucherDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $payVoucherDate)
	 * @method bool hasPayVoucherDate()
	 * @method bool isPayVoucherDateFilled()
	 * @method bool isPayVoucherDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualPayVoucherDate()
	 * @method \Bitrix\Main\Type\DateTime requirePayVoucherDate()
	 * @method \Bitrix\Crm\EO_Invoice resetPayVoucherDate()
	 * @method \Bitrix\Crm\EO_Invoice unsetPayVoucherDate()
	 * @method \Bitrix\Main\Type\DateTime fillPayVoucherDate()
	 * @method \Bitrix\Main\Type\DateTime getPayVoucherDateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualPayVoucherDateShort()
	 * @method \Bitrix\Main\Type\DateTime requirePayVoucherDateShort()
	 * @method bool hasPayVoucherDateShort()
	 * @method bool isPayVoucherDateShortFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetPayVoucherDateShort()
	 * @method \Bitrix\Main\Type\DateTime fillPayVoucherDateShort()
	 * @method \string getLid()
	 * @method \Bitrix\Crm\EO_Invoice setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Crm\EO_Invoice resetLid()
	 * @method \Bitrix\Crm\EO_Invoice unsetLid()
	 * @method \string fillLid()
	 * @method \string getComments()
	 * @method \Bitrix\Crm\EO_Invoice setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Crm\EO_Invoice resetComments()
	 * @method \Bitrix\Crm\EO_Invoice unsetComments()
	 * @method \string fillComments()
	 * @method \string getUserDescription()
	 * @method \Bitrix\Crm\EO_Invoice setUserDescription(\string|\Bitrix\Main\DB\SqlExpression $userDescription)
	 * @method bool hasUserDescription()
	 * @method bool isUserDescriptionFilled()
	 * @method bool isUserDescriptionChanged()
	 * @method \string remindActualUserDescription()
	 * @method \string requireUserDescription()
	 * @method \Bitrix\Crm\EO_Invoice resetUserDescription()
	 * @method \Bitrix\Crm\EO_Invoice unsetUserDescription()
	 * @method \string fillUserDescription()
	 * @method \string getPersonTypeId()
	 * @method \Bitrix\Crm\EO_Invoice setPersonTypeId(\string|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \string remindActualPersonTypeId()
	 * @method \string requirePersonTypeId()
	 * @method \Bitrix\Crm\EO_Invoice resetPersonTypeId()
	 * @method \Bitrix\Crm\EO_Invoice unsetPersonTypeId()
	 * @method \string fillPersonTypeId()
	 * @method \boolean getIsPayed()
	 * @method \boolean remindActualIsPayed()
	 * @method \boolean requireIsPayed()
	 * @method bool hasIsPayed()
	 * @method bool isIsPayedFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetIsPayed()
	 * @method \boolean fillIsPayed()
	 * @method \Bitrix\Crm\EO_InvoiceStUts getInvoiceUts()
	 * @method \Bitrix\Crm\EO_InvoiceStUts remindActualInvoiceUts()
	 * @method \Bitrix\Crm\EO_InvoiceStUts requireInvoiceUts()
	 * @method \Bitrix\Crm\EO_Invoice setInvoiceUts(\Bitrix\Crm\EO_InvoiceStUts $object)
	 * @method \Bitrix\Crm\EO_Invoice resetInvoiceUts()
	 * @method \Bitrix\Crm\EO_Invoice unsetInvoiceUts()
	 * @method bool hasInvoiceUts()
	 * @method bool isInvoiceUtsFilled()
	 * @method bool isInvoiceUtsChanged()
	 * @method \Bitrix\Crm\EO_InvoiceStUts fillInvoiceUts()
	 * @method \string getAccountNumber()
	 * @method \Bitrix\Crm\EO_Invoice setAccountNumber(\string|\Bitrix\Main\DB\SqlExpression $accountNumber)
	 * @method bool hasAccountNumber()
	 * @method bool isAccountNumberFilled()
	 * @method bool isAccountNumberChanged()
	 * @method \string remindActualAccountNumber()
	 * @method \string requireAccountNumber()
	 * @method \Bitrix\Crm\EO_Invoice resetAccountNumber()
	 * @method \Bitrix\Crm\EO_Invoice unsetAccountNumber()
	 * @method \string fillAccountNumber()
	 * @method \string getOrderTopic()
	 * @method \Bitrix\Crm\EO_Invoice setOrderTopic(\string|\Bitrix\Main\DB\SqlExpression $orderTopic)
	 * @method bool hasOrderTopic()
	 * @method bool isOrderTopicFilled()
	 * @method bool isOrderTopicChanged()
	 * @method \string remindActualOrderTopic()
	 * @method \string requireOrderTopic()
	 * @method \Bitrix\Crm\EO_Invoice resetOrderTopic()
	 * @method \Bitrix\Crm\EO_Invoice unsetOrderTopic()
	 * @method \string fillOrderTopic()
	 * @method \Bitrix\Main\Type\DateTime getDateBill()
	 * @method \Bitrix\Crm\EO_Invoice setDateBill(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateBill)
	 * @method bool hasDateBill()
	 * @method bool isDateBillFilled()
	 * @method bool isDateBillChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateBill()
	 * @method \Bitrix\Main\Type\DateTime requireDateBill()
	 * @method \Bitrix\Crm\EO_Invoice resetDateBill()
	 * @method \Bitrix\Crm\EO_Invoice unsetDateBill()
	 * @method \Bitrix\Main\Type\DateTime fillDateBill()
	 * @method \Bitrix\Main\Type\DateTime getDateBillShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateBillShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateBillShort()
	 * @method bool hasDateBillShort()
	 * @method bool isDateBillShortFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetDateBillShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateBillShort()
	 * @method \Bitrix\Main\Type\DateTime getDatePayBefore()
	 * @method \Bitrix\Crm\EO_Invoice setDatePayBefore(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $datePayBefore)
	 * @method bool hasDatePayBefore()
	 * @method bool isDatePayBeforeFilled()
	 * @method bool isDatePayBeforeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePayBefore()
	 * @method \Bitrix\Main\Type\DateTime requireDatePayBefore()
	 * @method \Bitrix\Crm\EO_Invoice resetDatePayBefore()
	 * @method \Bitrix\Crm\EO_Invoice unsetDatePayBefore()
	 * @method \Bitrix\Main\Type\DateTime fillDatePayBefore()
	 * @method \Bitrix\Main\Type\DateTime getDatePayBeforeShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDatePayBeforeShort()
	 * @method \Bitrix\Main\Type\DateTime requireDatePayBeforeShort()
	 * @method bool hasDatePayBeforeShort()
	 * @method bool isDatePayBeforeShortFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetDatePayBeforeShort()
	 * @method \Bitrix\Main\Type\DateTime fillDatePayBeforeShort()
	 * @method \Bitrix\Main\Type\DateTime getDateMarked()
	 * @method \Bitrix\Crm\EO_Invoice setDateMarked(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateMarked)
	 * @method bool hasDateMarked()
	 * @method bool isDateMarkedFilled()
	 * @method bool isDateMarkedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateMarked()
	 * @method \Bitrix\Main\Type\DateTime requireDateMarked()
	 * @method \Bitrix\Crm\EO_Invoice resetDateMarked()
	 * @method \Bitrix\Crm\EO_Invoice unsetDateMarked()
	 * @method \Bitrix\Main\Type\DateTime fillDateMarked()
	 * @method \Bitrix\Main\Type\DateTime getDateMarkedShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateMarkedShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateMarkedShort()
	 * @method bool hasDateMarkedShort()
	 * @method bool isDateMarkedShortFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetDateMarkedShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateMarkedShort()
	 * @method \string getReasonMarked()
	 * @method \Bitrix\Crm\EO_Invoice setReasonMarked(\string|\Bitrix\Main\DB\SqlExpression $reasonMarked)
	 * @method bool hasReasonMarked()
	 * @method bool isReasonMarkedFilled()
	 * @method bool isReasonMarkedChanged()
	 * @method \string remindActualReasonMarked()
	 * @method \string requireReasonMarked()
	 * @method \Bitrix\Crm\EO_Invoice resetReasonMarked()
	 * @method \Bitrix\Crm\EO_Invoice unsetReasonMarked()
	 * @method \string fillReasonMarked()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\EO_Invoice setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\EO_Invoice resetResponsibleId()
	 * @method \Bitrix\Crm\EO_Invoice unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \Bitrix\Main\EO_User getAssignedBy()
	 * @method \Bitrix\Main\EO_User remindActualAssignedBy()
	 * @method \Bitrix\Main\EO_User requireAssignedBy()
	 * @method \Bitrix\Crm\EO_Invoice setAssignedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Invoice resetAssignedBy()
	 * @method \Bitrix\Crm\EO_Invoice unsetAssignedBy()
	 * @method bool hasAssignedBy()
	 * @method bool isAssignedByFilled()
	 * @method bool isAssignedByChanged()
	 * @method \Bitrix\Main\EO_User fillAssignedBy()
	 * @method \string getCurrency()
	 * @method \Bitrix\Crm\EO_Invoice setCurrency(\string|\Bitrix\Main\DB\SqlExpression $currency)
	 * @method bool hasCurrency()
	 * @method bool isCurrencyFilled()
	 * @method bool isCurrencyChanged()
	 * @method \string remindActualCurrency()
	 * @method \string requireCurrency()
	 * @method \Bitrix\Crm\EO_Invoice resetCurrency()
	 * @method \Bitrix\Crm\EO_Invoice unsetCurrency()
	 * @method \string fillCurrency()
	 * @method \Bitrix\Main\Type\DateTime getDateBeginShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateBeginShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateBeginShort()
	 * @method bool hasDateBeginShort()
	 * @method bool isDateBeginShortFilled()
	 * @method \Bitrix\Crm\EO_Invoice unsetDateBeginShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateBeginShort()
	 * @method \boolean getIsRecurring()
	 * @method \Bitrix\Crm\EO_Invoice setIsRecurring(\boolean|\Bitrix\Main\DB\SqlExpression $isRecurring)
	 * @method bool hasIsRecurring()
	 * @method bool isIsRecurringFilled()
	 * @method bool isIsRecurringChanged()
	 * @method \boolean remindActualIsRecurring()
	 * @method \boolean requireIsRecurring()
	 * @method \Bitrix\Crm\EO_Invoice resetIsRecurring()
	 * @method \Bitrix\Crm\EO_Invoice unsetIsRecurring()
	 * @method \boolean fillIsRecurring()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Crm\EO_Invoice setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Crm\EO_Invoice resetSearchContent()
	 * @method \Bitrix\Crm\EO_Invoice unsetSearchContent()
	 * @method \string fillSearchContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Invoice set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Invoice reset($fieldName)
	 * @method \Bitrix\Crm\EO_Invoice unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Invoice wakeUp($data)
	 */
	class EO_Invoice {
		/* @var \Bitrix\Crm\InvoiceTable */
		static public $dataClass = '\Bitrix\Crm\InvoiceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Invoice_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdateShort()
	 * @method \float[] getProductsQuantList()
	 * @method \float[] fillProductsQuant()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \float[] getPricePayedList()
	 * @method \float[] fillPricePayed()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \Bitrix\Crm\EO_Status[] getStatusByList()
	 * @method \Bitrix\Crm\EO_Invoice_Collection getStatusByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillStatusBy()
	 * @method \int[] getPaySystemIdList()
	 * @method \int[] fillPaySystemId()
	 * @method \float[] getSumPaidList()
	 * @method \float[] fillSumPaid()
	 * @method \float[] getSumPaidForrepList()
	 * @method \float[] fillSumPaidForrep()
	 * @method \string[] getPayVoucherNumList()
	 * @method \string[] fillPayVoucherNum()
	 * @method \Bitrix\Main\Type\DateTime[] getPayVoucherDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillPayVoucherDate()
	 * @method \Bitrix\Main\Type\DateTime[] getPayVoucherDateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillPayVoucherDateShort()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \string[] getUserDescriptionList()
	 * @method \string[] fillUserDescription()
	 * @method \string[] getPersonTypeIdList()
	 * @method \string[] fillPersonTypeId()
	 * @method \boolean[] getIsPayedList()
	 * @method \boolean[] fillIsPayed()
	 * @method \Bitrix\Crm\EO_InvoiceStUts[] getInvoiceUtsList()
	 * @method \Bitrix\Crm\EO_Invoice_Collection getInvoiceUtsCollection()
	 * @method \Bitrix\Crm\EO_InvoiceStUts_Collection fillInvoiceUts()
	 * @method \string[] getAccountNumberList()
	 * @method \string[] fillAccountNumber()
	 * @method \string[] getOrderTopicList()
	 * @method \string[] fillOrderTopic()
	 * @method \Bitrix\Main\Type\DateTime[] getDateBillList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateBill()
	 * @method \Bitrix\Main\Type\DateTime[] getDateBillShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateBillShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePayBeforeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePayBefore()
	 * @method \Bitrix\Main\Type\DateTime[] getDatePayBeforeShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDatePayBeforeShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateMarkedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateMarked()
	 * @method \Bitrix\Main\Type\DateTime[] getDateMarkedShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateMarkedShort()
	 * @method \string[] getReasonMarkedList()
	 * @method \string[] fillReasonMarked()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \Bitrix\Main\EO_User[] getAssignedByList()
	 * @method \Bitrix\Crm\EO_Invoice_Collection getAssignedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillAssignedBy()
	 * @method \string[] getCurrencyList()
	 * @method \string[] fillCurrency()
	 * @method \Bitrix\Main\Type\DateTime[] getDateBeginShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateBeginShort()
	 * @method \boolean[] getIsRecurringList()
	 * @method \boolean[] fillIsRecurring()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Invoice $object)
	 * @method bool has(\Bitrix\Crm\EO_Invoice $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Invoice getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Invoice[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Invoice $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Invoice_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Invoice current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Invoice_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\InvoiceTable */
		static public $dataClass = '\Bitrix\Crm\InvoiceTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Invoice_Query query()
	 * @method static EO_Invoice_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Invoice_Result getById($id)
	 * @method static EO_Invoice_Result getList(array $parameters = array())
	 * @method static EO_Invoice_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Invoice createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Invoice_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Invoice wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Invoice_Collection wakeUpCollection($rows)
	 */
	class InvoiceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Invoice_Result exec()
	 * @method \Bitrix\Crm\EO_Invoice fetchObject()
	 * @method \Bitrix\Crm\EO_Invoice_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Invoice_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Invoice fetchObject()
	 * @method \Bitrix\Crm\EO_Invoice_Collection fetchCollection()
	 */
	class EO_Invoice_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Invoice createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Invoice_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Invoice wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Invoice_Collection wakeUpCollection($rows)
	 */
	class EO_Invoice_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\InvoiceRecurTable:crm/lib/invoicerecur.php:d9f4c18f98c82516cbddb98f703b6fa8 */
namespace Bitrix\Crm {
	/**
	 * EO_InvoiceRecur
	 * @see \Bitrix\Crm\InvoiceRecurTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getInvoiceId()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setInvoiceId(\int|\Bitrix\Main\DB\SqlExpression $invoiceId)
	 * @method bool hasInvoiceId()
	 * @method bool isInvoiceIdFilled()
	 * @method bool isInvoiceIdChanged()
	 * @method \int remindActualInvoiceId()
	 * @method \int requireInvoiceId()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetInvoiceId()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetInvoiceId()
	 * @method \int fillInvoiceId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetActive()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getIsLimit()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setIsLimit(\string|\Bitrix\Main\DB\SqlExpression $isLimit)
	 * @method bool hasIsLimit()
	 * @method bool isIsLimitFilled()
	 * @method bool isIsLimitChanged()
	 * @method \string remindActualIsLimit()
	 * @method \string requireIsLimit()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetIsLimit()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetIsLimit()
	 * @method \string fillIsLimit()
	 * @method \boolean getSendBill()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setSendBill(\boolean|\Bitrix\Main\DB\SqlExpression $sendBill)
	 * @method bool hasSendBill()
	 * @method bool isSendBillFilled()
	 * @method bool isSendBillChanged()
	 * @method \boolean remindActualSendBill()
	 * @method \boolean requireSendBill()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetSendBill()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetSendBill()
	 * @method \boolean fillSendBill()
	 * @method \int getEmailId()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setEmailId(\int|\Bitrix\Main\DB\SqlExpression $emailId)
	 * @method bool hasEmailId()
	 * @method bool isEmailIdFilled()
	 * @method bool isEmailIdChanged()
	 * @method \int remindActualEmailId()
	 * @method \int requireEmailId()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetEmailId()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetEmailId()
	 * @method \int fillEmailId()
	 * @method \int getCounterRepeat()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setCounterRepeat(\int|\Bitrix\Main\DB\SqlExpression $counterRepeat)
	 * @method bool hasCounterRepeat()
	 * @method bool isCounterRepeatFilled()
	 * @method bool isCounterRepeatChanged()
	 * @method \int remindActualCounterRepeat()
	 * @method \int requireCounterRepeat()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetCounterRepeat()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetCounterRepeat()
	 * @method \int fillCounterRepeat()
	 * @method \int getLimitRepeat()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setLimitRepeat(\int|\Bitrix\Main\DB\SqlExpression $limitRepeat)
	 * @method bool hasLimitRepeat()
	 * @method bool isLimitRepeatFilled()
	 * @method bool isLimitRepeatChanged()
	 * @method \int remindActualLimitRepeat()
	 * @method \int requireLimitRepeat()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetLimitRepeat()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetLimitRepeat()
	 * @method \int fillLimitRepeat()
	 * @method \Bitrix\Main\Type\Date getLimitDate()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setLimitDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $limitDate)
	 * @method bool hasLimitDate()
	 * @method bool isLimitDateFilled()
	 * @method bool isLimitDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualLimitDate()
	 * @method \Bitrix\Main\Type\Date requireLimitDate()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetLimitDate()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetLimitDate()
	 * @method \Bitrix\Main\Type\Date fillLimitDate()
	 * @method \Bitrix\Main\Type\Date getStartDate()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setStartDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $startDate)
	 * @method bool hasStartDate()
	 * @method bool isStartDateFilled()
	 * @method bool isStartDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualStartDate()
	 * @method \Bitrix\Main\Type\Date requireStartDate()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetStartDate()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetStartDate()
	 * @method \Bitrix\Main\Type\Date fillStartDate()
	 * @method \Bitrix\Main\Type\Date getNextExecution()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setNextExecution(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $nextExecution)
	 * @method bool hasNextExecution()
	 * @method bool isNextExecutionFilled()
	 * @method bool isNextExecutionChanged()
	 * @method \Bitrix\Main\Type\Date remindActualNextExecution()
	 * @method \Bitrix\Main\Type\Date requireNextExecution()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetNextExecution()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetNextExecution()
	 * @method \Bitrix\Main\Type\Date fillNextExecution()
	 * @method \Bitrix\Main\Type\Date getLastExecution()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setLastExecution(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $lastExecution)
	 * @method bool hasLastExecution()
	 * @method bool isLastExecutionFilled()
	 * @method bool isLastExecutionChanged()
	 * @method \Bitrix\Main\Type\Date remindActualLastExecution()
	 * @method \Bitrix\Main\Type\Date requireLastExecution()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetLastExecution()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetLastExecution()
	 * @method \Bitrix\Main\Type\Date fillLastExecution()
	 * @method \string getParams()
	 * @method \Bitrix\Crm\EO_InvoiceRecur setParams(\string|\Bitrix\Main\DB\SqlExpression $params)
	 * @method bool hasParams()
	 * @method bool isParamsFilled()
	 * @method bool isParamsChanged()
	 * @method \string remindActualParams()
	 * @method \string requireParams()
	 * @method \Bitrix\Crm\EO_InvoiceRecur resetParams()
	 * @method \Bitrix\Crm\EO_InvoiceRecur unsetParams()
	 * @method \string fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_InvoiceRecur set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_InvoiceRecur reset($fieldName)
	 * @method \Bitrix\Crm\EO_InvoiceRecur unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_InvoiceRecur wakeUp($data)
	 */
	class EO_InvoiceRecur {
		/* @var \Bitrix\Crm\InvoiceRecurTable */
		static public $dataClass = '\Bitrix\Crm\InvoiceRecurTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_InvoiceRecur_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getInvoiceIdList()
	 * @method \int[] fillInvoiceId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getIsLimitList()
	 * @method \string[] fillIsLimit()
	 * @method \boolean[] getSendBillList()
	 * @method \boolean[] fillSendBill()
	 * @method \int[] getEmailIdList()
	 * @method \int[] fillEmailId()
	 * @method \int[] getCounterRepeatList()
	 * @method \int[] fillCounterRepeat()
	 * @method \int[] getLimitRepeatList()
	 * @method \int[] fillLimitRepeat()
	 * @method \Bitrix\Main\Type\Date[] getLimitDateList()
	 * @method \Bitrix\Main\Type\Date[] fillLimitDate()
	 * @method \Bitrix\Main\Type\Date[] getStartDateList()
	 * @method \Bitrix\Main\Type\Date[] fillStartDate()
	 * @method \Bitrix\Main\Type\Date[] getNextExecutionList()
	 * @method \Bitrix\Main\Type\Date[] fillNextExecution()
	 * @method \Bitrix\Main\Type\Date[] getLastExecutionList()
	 * @method \Bitrix\Main\Type\Date[] fillLastExecution()
	 * @method \string[] getParamsList()
	 * @method \string[] fillParams()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_InvoiceRecur $object)
	 * @method bool has(\Bitrix\Crm\EO_InvoiceRecur $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_InvoiceRecur getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_InvoiceRecur[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_InvoiceRecur $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_InvoiceRecur_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_InvoiceRecur current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceRecur_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\InvoiceRecurTable */
		static public $dataClass = '\Bitrix\Crm\InvoiceRecurTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_InvoiceRecur_Query query()
	 * @method static EO_InvoiceRecur_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceRecur_Result getById($id)
	 * @method static EO_InvoiceRecur_Result getList(array $parameters = array())
	 * @method static EO_InvoiceRecur_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_InvoiceRecur createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_InvoiceRecur_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_InvoiceRecur wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_InvoiceRecur_Collection wakeUpCollection($rows)
	 */
	class InvoiceRecurTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceRecur_Result exec()
	 * @method \Bitrix\Crm\EO_InvoiceRecur fetchObject()
	 * @method \Bitrix\Crm\EO_InvoiceRecur_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceRecur_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_InvoiceRecur fetchObject()
	 * @method \Bitrix\Crm\EO_InvoiceRecur_Collection fetchCollection()
	 */
	class EO_InvoiceRecur_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_InvoiceRecur createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_InvoiceRecur_Collection createCollection()
	 * @method \Bitrix\Crm\EO_InvoiceRecur wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_InvoiceRecur_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceRecur_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\InvoiceSpecTable:crm/lib/invoicespec.php:63a62f4c5aa88416348bc1192d1d99fd */
namespace Bitrix\Crm {
	/**
	 * EO_InvoiceSpec
	 * @see \Bitrix\Crm\InvoiceSpecTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetDateInsert()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime getDateIns()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateIns()
	 * @method \Bitrix\Main\Type\DateTime requireDateIns()
	 * @method bool hasDateIns()
	 * @method bool isDateInsFilled()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetDateIns()
	 * @method \Bitrix\Main\Type\DateTime fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime getDateUpdate()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setDateUpdate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUpdate)
	 * @method bool hasDateUpdate()
	 * @method bool isDateUpdateFilled()
	 * @method bool isDateUpdateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpdate()
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetDateUpdate()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime getDateUpd()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUpd()
	 * @method \Bitrix\Main\Type\DateTime requireDateUpd()
	 * @method bool hasDateUpd()
	 * @method bool isDateUpdFilled()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetDateUpd()
	 * @method \Bitrix\Main\Type\DateTime fillDateUpd()
	 * @method \int getProductId()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setProductId(\int|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \int remindActualProductId()
	 * @method \int requireProductId()
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetProductId()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetProductId()
	 * @method \int fillProductId()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetName()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetName()
	 * @method \string fillName()
	 * @method \string getNameWithIdent()
	 * @method \string remindActualNameWithIdent()
	 * @method \string requireNameWithIdent()
	 * @method bool hasNameWithIdent()
	 * @method bool isNameWithIdentFilled()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetNameWithIdent()
	 * @method \string fillNameWithIdent()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy getIblockElement()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy remindActualIblockElement()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy requireIblockElement()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setIblockElement(\Bitrix\Crm\EO_IBlockElementProxy $object)
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetIblockElement()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetIblockElement()
	 * @method bool hasIblockElement()
	 * @method bool isIblockElementFilled()
	 * @method bool isIblockElementChanged()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy fillIblockElement()
	 * @method \int getOrderId()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setOrderId(\int|\Bitrix\Main\DB\SqlExpression $orderId)
	 * @method bool hasOrderId()
	 * @method bool isOrderIdFilled()
	 * @method bool isOrderIdChanged()
	 * @method \int remindActualOrderId()
	 * @method \int requireOrderId()
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetOrderId()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetOrderId()
	 * @method \int fillOrderId()
	 * @method \Bitrix\Crm\EO_Invoice getInvoice()
	 * @method \Bitrix\Crm\EO_Invoice remindActualInvoice()
	 * @method \Bitrix\Crm\EO_Invoice requireInvoice()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setInvoice(\Bitrix\Crm\EO_Invoice $object)
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetInvoice()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetInvoice()
	 * @method bool hasInvoice()
	 * @method bool isInvoiceFilled()
	 * @method bool isInvoiceChanged()
	 * @method \Bitrix\Crm\EO_Invoice fillInvoice()
	 * @method \float getPrice()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setPrice(\float|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \float remindActualPrice()
	 * @method \float requirePrice()
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetPrice()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetPrice()
	 * @method \float fillPrice()
	 * @method \float getVatRate()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setVatRate(\float|\Bitrix\Main\DB\SqlExpression $vatRate)
	 * @method bool hasVatRate()
	 * @method bool isVatRateFilled()
	 * @method bool isVatRateChanged()
	 * @method \float remindActualVatRate()
	 * @method \float requireVatRate()
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetVatRate()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetVatRate()
	 * @method \float fillVatRate()
	 * @method \float getVatRatePrc()
	 * @method \float remindActualVatRatePrc()
	 * @method \float requireVatRatePrc()
	 * @method bool hasVatRatePrc()
	 * @method bool isVatRatePrcFilled()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetVatRatePrc()
	 * @method \float fillVatRatePrc()
	 * @method \float getQuantity()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetQuantity()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \string getNotes()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setNotes(\string|\Bitrix\Main\DB\SqlExpression $notes)
	 * @method bool hasNotes()
	 * @method bool isNotesFilled()
	 * @method bool isNotesChanged()
	 * @method \string remindActualNotes()
	 * @method \string requireNotes()
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetNotes()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetNotes()
	 * @method \string fillNotes()
	 * @method \string getLid()
	 * @method \Bitrix\Crm\EO_InvoiceSpec setLid(\string|\Bitrix\Main\DB\SqlExpression $lid)
	 * @method bool hasLid()
	 * @method bool isLidFilled()
	 * @method bool isLidChanged()
	 * @method \string remindActualLid()
	 * @method \string requireLid()
	 * @method \Bitrix\Crm\EO_InvoiceSpec resetLid()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetLid()
	 * @method \string fillLid()
	 * @method \float getSummaryPrice()
	 * @method \float remindActualSummaryPrice()
	 * @method \float requireSummaryPrice()
	 * @method bool hasSummaryPrice()
	 * @method bool isSummaryPriceFilled()
	 * @method \Bitrix\Crm\EO_InvoiceSpec unsetSummaryPrice()
	 * @method \float fillSummaryPrice()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_InvoiceSpec set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_InvoiceSpec reset($fieldName)
	 * @method \Bitrix\Crm\EO_InvoiceSpec unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_InvoiceSpec wakeUp($data)
	 */
	class EO_InvoiceSpec {
		/* @var \Bitrix\Crm\InvoiceSpecTable */
		static public $dataClass = '\Bitrix\Crm\InvoiceSpecTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_InvoiceSpec_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateIns()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpdate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUpdList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUpd()
	 * @method \int[] getProductIdList()
	 * @method \int[] fillProductId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getNameWithIdentList()
	 * @method \string[] fillNameWithIdent()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy[] getIblockElementList()
	 * @method \Bitrix\Crm\EO_InvoiceSpec_Collection getIblockElementCollection()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy_Collection fillIblockElement()
	 * @method \int[] getOrderIdList()
	 * @method \int[] fillOrderId()
	 * @method \Bitrix\Crm\EO_Invoice[] getInvoiceList()
	 * @method \Bitrix\Crm\EO_InvoiceSpec_Collection getInvoiceCollection()
	 * @method \Bitrix\Crm\EO_Invoice_Collection fillInvoice()
	 * @method \float[] getPriceList()
	 * @method \float[] fillPrice()
	 * @method \float[] getVatRateList()
	 * @method \float[] fillVatRate()
	 * @method \float[] getVatRatePrcList()
	 * @method \float[] fillVatRatePrc()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \string[] getNotesList()
	 * @method \string[] fillNotes()
	 * @method \string[] getLidList()
	 * @method \string[] fillLid()
	 * @method \float[] getSummaryPriceList()
	 * @method \float[] fillSummaryPrice()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_InvoiceSpec $object)
	 * @method bool has(\Bitrix\Crm\EO_InvoiceSpec $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_InvoiceSpec getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_InvoiceSpec[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_InvoiceSpec $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_InvoiceSpec_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_InvoiceSpec current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceSpec_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\InvoiceSpecTable */
		static public $dataClass = '\Bitrix\Crm\InvoiceSpecTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_InvoiceSpec_Query query()
	 * @method static EO_InvoiceSpec_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceSpec_Result getById($id)
	 * @method static EO_InvoiceSpec_Result getList(array $parameters = array())
	 * @method static EO_InvoiceSpec_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_InvoiceSpec createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_InvoiceSpec_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_InvoiceSpec wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_InvoiceSpec_Collection wakeUpCollection($rows)
	 */
	class InvoiceSpecTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceSpec_Result exec()
	 * @method \Bitrix\Crm\EO_InvoiceSpec fetchObject()
	 * @method \Bitrix\Crm\EO_InvoiceSpec_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceSpec_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_InvoiceSpec fetchObject()
	 * @method \Bitrix\Crm\EO_InvoiceSpec_Collection fetchCollection()
	 */
	class EO_InvoiceSpec_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_InvoiceSpec createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_InvoiceSpec_Collection createCollection()
	 * @method \Bitrix\Crm\EO_InvoiceSpec wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_InvoiceSpec_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceSpec_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\InvoiceStUtsTable:crm/lib/invoicestuts.php:7e9a7167981f0033a65ca0d1ee159c33 */
namespace Bitrix\Crm {
	/**
	 * EO_InvoiceStUts
	 * @see \Bitrix\Crm\InvoiceStUtsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getValueId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts setValueId(\int|\Bitrix\Main\DB\SqlExpression $valueId)
	 * @method bool hasValueId()
	 * @method bool isValueIdFilled()
	 * @method bool isValueIdChanged()
	 * @method \int getUfDealId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts setUfDealId(\int|\Bitrix\Main\DB\SqlExpression $ufDealId)
	 * @method bool hasUfDealId()
	 * @method bool isUfDealIdFilled()
	 * @method bool isUfDealIdChanged()
	 * @method \int remindActualUfDealId()
	 * @method \int requireUfDealId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts resetUfDealId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts unsetUfDealId()
	 * @method \int fillUfDealId()
	 * @method \int getUfCompanyId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts setUfCompanyId(\int|\Bitrix\Main\DB\SqlExpression $ufCompanyId)
	 * @method bool hasUfCompanyId()
	 * @method bool isUfCompanyIdFilled()
	 * @method bool isUfCompanyIdChanged()
	 * @method \int remindActualUfCompanyId()
	 * @method \int requireUfCompanyId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts resetUfCompanyId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts unsetUfCompanyId()
	 * @method \int fillUfCompanyId()
	 * @method \int getUfContactId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts setUfContactId(\int|\Bitrix\Main\DB\SqlExpression $ufContactId)
	 * @method bool hasUfContactId()
	 * @method bool isUfContactIdFilled()
	 * @method bool isUfContactIdChanged()
	 * @method \int remindActualUfContactId()
	 * @method \int requireUfContactId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts resetUfContactId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts unsetUfContactId()
	 * @method \int fillUfContactId()
	 * @method \int getUfMycompanyId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts setUfMycompanyId(\int|\Bitrix\Main\DB\SqlExpression $ufMycompanyId)
	 * @method bool hasUfMycompanyId()
	 * @method bool isUfMycompanyIdFilled()
	 * @method bool isUfMycompanyIdChanged()
	 * @method \int remindActualUfMycompanyId()
	 * @method \int requireUfMycompanyId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts resetUfMycompanyId()
	 * @method \Bitrix\Crm\EO_InvoiceStUts unsetUfMycompanyId()
	 * @method \int fillUfMycompanyId()
	 * @method \Bitrix\Crm\EO_Deal getDealBy()
	 * @method \Bitrix\Crm\EO_Deal remindActualDealBy()
	 * @method \Bitrix\Crm\EO_Deal requireDealBy()
	 * @method \Bitrix\Crm\EO_InvoiceStUts setDealBy(\Bitrix\Crm\EO_Deal $object)
	 * @method \Bitrix\Crm\EO_InvoiceStUts resetDealBy()
	 * @method \Bitrix\Crm\EO_InvoiceStUts unsetDealBy()
	 * @method bool hasDealBy()
	 * @method bool isDealByFilled()
	 * @method bool isDealByChanged()
	 * @method \Bitrix\Crm\EO_Deal fillDealBy()
	 * @method \Bitrix\Crm\EO_Contact getContactBy()
	 * @method \Bitrix\Crm\EO_Contact remindActualContactBy()
	 * @method \Bitrix\Crm\EO_Contact requireContactBy()
	 * @method \Bitrix\Crm\EO_InvoiceStUts setContactBy(\Bitrix\Crm\EO_Contact $object)
	 * @method \Bitrix\Crm\EO_InvoiceStUts resetContactBy()
	 * @method \Bitrix\Crm\EO_InvoiceStUts unsetContactBy()
	 * @method bool hasContactBy()
	 * @method bool isContactByFilled()
	 * @method bool isContactByChanged()
	 * @method \Bitrix\Crm\EO_Contact fillContactBy()
	 * @method \Bitrix\Crm\EO_Company getCompanyBy()
	 * @method \Bitrix\Crm\EO_Company remindActualCompanyBy()
	 * @method \Bitrix\Crm\EO_Company requireCompanyBy()
	 * @method \Bitrix\Crm\EO_InvoiceStUts setCompanyBy(\Bitrix\Crm\EO_Company $object)
	 * @method \Bitrix\Crm\EO_InvoiceStUts resetCompanyBy()
	 * @method \Bitrix\Crm\EO_InvoiceStUts unsetCompanyBy()
	 * @method bool hasCompanyBy()
	 * @method bool isCompanyByFilled()
	 * @method bool isCompanyByChanged()
	 * @method \Bitrix\Crm\EO_Company fillCompanyBy()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_InvoiceStUts set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_InvoiceStUts reset($fieldName)
	 * @method \Bitrix\Crm\EO_InvoiceStUts unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_InvoiceStUts wakeUp($data)
	 */
	class EO_InvoiceStUts {
		/* @var \Bitrix\Crm\InvoiceStUtsTable */
		static public $dataClass = '\Bitrix\Crm\InvoiceStUtsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_InvoiceStUts_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getValueIdList()
	 * @method \int[] getUfDealIdList()
	 * @method \int[] fillUfDealId()
	 * @method \int[] getUfCompanyIdList()
	 * @method \int[] fillUfCompanyId()
	 * @method \int[] getUfContactIdList()
	 * @method \int[] fillUfContactId()
	 * @method \int[] getUfMycompanyIdList()
	 * @method \int[] fillUfMycompanyId()
	 * @method \Bitrix\Crm\EO_Deal[] getDealByList()
	 * @method \Bitrix\Crm\EO_InvoiceStUts_Collection getDealByCollection()
	 * @method \Bitrix\Crm\EO_Deal_Collection fillDealBy()
	 * @method \Bitrix\Crm\EO_Contact[] getContactByList()
	 * @method \Bitrix\Crm\EO_InvoiceStUts_Collection getContactByCollection()
	 * @method \Bitrix\Crm\EO_Contact_Collection fillContactBy()
	 * @method \Bitrix\Crm\EO_Company[] getCompanyByList()
	 * @method \Bitrix\Crm\EO_InvoiceStUts_Collection getCompanyByCollection()
	 * @method \Bitrix\Crm\EO_Company_Collection fillCompanyBy()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_InvoiceStUts $object)
	 * @method bool has(\Bitrix\Crm\EO_InvoiceStUts $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_InvoiceStUts getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_InvoiceStUts[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_InvoiceStUts $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_InvoiceStUts_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_InvoiceStUts current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceStUts_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\InvoiceStUtsTable */
		static public $dataClass = '\Bitrix\Crm\InvoiceStUtsTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_InvoiceStUts_Query query()
	 * @method static EO_InvoiceStUts_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceStUts_Result getById($id)
	 * @method static EO_InvoiceStUts_Result getList(array $parameters = array())
	 * @method static EO_InvoiceStUts_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_InvoiceStUts createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_InvoiceStUts_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_InvoiceStUts wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_InvoiceStUts_Collection wakeUpCollection($rows)
	 */
	class InvoiceStUtsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceStUts_Result exec()
	 * @method \Bitrix\Crm\EO_InvoiceStUts fetchObject()
	 * @method \Bitrix\Crm\EO_InvoiceStUts_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceStUts_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_InvoiceStUts fetchObject()
	 * @method \Bitrix\Crm\EO_InvoiceStUts_Collection fetchCollection()
	 */
	class EO_InvoiceStUts_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_InvoiceStUts createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_InvoiceStUts_Collection createCollection()
	 * @method \Bitrix\Crm\EO_InvoiceStUts wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_InvoiceStUts_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceStUts_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Kanban\SortTable:crm/lib/kanban/sort.php:65f88183ab9a0d8444cae61b7354767d */
namespace Bitrix\Crm\Kanban {
	/**
	 * EO_Sort
	 * @see \Bitrix\Crm\Kanban\SortTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort resetEntityTypeId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort resetEntityId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getPrevEntityId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort setPrevEntityId(\int|\Bitrix\Main\DB\SqlExpression $prevEntityId)
	 * @method bool hasPrevEntityId()
	 * @method bool isPrevEntityIdFilled()
	 * @method bool isPrevEntityIdChanged()
	 * @method \int remindActualPrevEntityId()
	 * @method \int requirePrevEntityId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort resetPrevEntityId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort unsetPrevEntityId()
	 * @method \int fillPrevEntityId()
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort resetUserId()
	 * @method \Bitrix\Crm\Kanban\EO_Sort unsetUserId()
	 * @method \int fillUserId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Kanban\EO_Sort set($fieldName, $value)
	 * @method \Bitrix\Crm\Kanban\EO_Sort reset($fieldName)
	 * @method \Bitrix\Crm\Kanban\EO_Sort unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Kanban\EO_Sort wakeUp($data)
	 */
	class EO_Sort {
		/* @var \Bitrix\Crm\Kanban\SortTable */
		static public $dataClass = '\Bitrix\Crm\Kanban\SortTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Kanban {
	/**
	 * EO_Sort_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getPrevEntityIdList()
	 * @method \int[] fillPrevEntityId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Kanban\EO_Sort $object)
	 * @method bool has(\Bitrix\Crm\Kanban\EO_Sort $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Kanban\EO_Sort getByPrimary($primary)
	 * @method \Bitrix\Crm\Kanban\EO_Sort[] getAll()
	 * @method bool remove(\Bitrix\Crm\Kanban\EO_Sort $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Kanban\EO_Sort_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Kanban\EO_Sort current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Sort_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Kanban\SortTable */
		static public $dataClass = '\Bitrix\Crm\Kanban\SortTable';
	}
}
namespace Bitrix\Crm\Kanban {
	/**
	 * @method static EO_Sort_Query query()
	 * @method static EO_Sort_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Sort_Result getById($id)
	 * @method static EO_Sort_Result getList(array $parameters = array())
	 * @method static EO_Sort_Entity getEntity()
	 * @method static \Bitrix\Crm\Kanban\EO_Sort createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Kanban\EO_Sort_Collection createCollection()
	 * @method static \Bitrix\Crm\Kanban\EO_Sort wakeUpObject($row)
	 * @method static \Bitrix\Crm\Kanban\EO_Sort_Collection wakeUpCollection($rows)
	 */
	class SortTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Sort_Result exec()
	 * @method \Bitrix\Crm\Kanban\EO_Sort fetchObject()
	 * @method \Bitrix\Crm\Kanban\EO_Sort_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Sort_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Kanban\EO_Sort fetchObject()
	 * @method \Bitrix\Crm\Kanban\EO_Sort_Collection fetchCollection()
	 */
	class EO_Sort_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Kanban\EO_Sort createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Kanban\EO_Sort_Collection createCollection()
	 * @method \Bitrix\Crm\Kanban\EO_Sort wakeUpObject($row)
	 * @method \Bitrix\Crm\Kanban\EO_Sort_Collection wakeUpCollection($rows)
	 */
	class EO_Sort_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Kanban\SupervisorTable:crm/lib/kanban/supervisor.php:ebec98c2affaf9f38c943ef1de9ec957 */
namespace Bitrix\Crm\Kanban {
	/**
	 * EO_Supervisor
	 * @see \Bitrix\Crm\Kanban\SupervisorTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor resetEntityTypeId()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor resetUserId()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor unsetUserId()
	 * @method \int fillUserId()
	 * @method \Bitrix\Main\EO_User getUser()
	 * @method \Bitrix\Main\EO_User remindActualUser()
	 * @method \Bitrix\Main\EO_User requireUser()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor setUser(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor resetUser()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor unsetUser()
	 * @method bool hasUser()
	 * @method bool isUserFilled()
	 * @method bool isUserChanged()
	 * @method \Bitrix\Main\EO_User fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor set($fieldName, $value)
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor reset($fieldName)
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Kanban\EO_Supervisor wakeUp($data)
	 */
	class EO_Supervisor {
		/* @var \Bitrix\Crm\Kanban\SupervisorTable */
		static public $dataClass = '\Bitrix\Crm\Kanban\SupervisorTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Kanban {
	/**
	 * EO_Supervisor_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \Bitrix\Main\EO_User[] getUserList()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor_Collection getUserCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillUser()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Kanban\EO_Supervisor $object)
	 * @method bool has(\Bitrix\Crm\Kanban\EO_Supervisor $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor getByPrimary($primary)
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor[] getAll()
	 * @method bool remove(\Bitrix\Crm\Kanban\EO_Supervisor $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Kanban\EO_Supervisor_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Supervisor_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Kanban\SupervisorTable */
		static public $dataClass = '\Bitrix\Crm\Kanban\SupervisorTable';
	}
}
namespace Bitrix\Crm\Kanban {
	/**
	 * @method static EO_Supervisor_Query query()
	 * @method static EO_Supervisor_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Supervisor_Result getById($id)
	 * @method static EO_Supervisor_Result getList(array $parameters = array())
	 * @method static EO_Supervisor_Entity getEntity()
	 * @method static \Bitrix\Crm\Kanban\EO_Supervisor createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Kanban\EO_Supervisor_Collection createCollection()
	 * @method static \Bitrix\Crm\Kanban\EO_Supervisor wakeUpObject($row)
	 * @method static \Bitrix\Crm\Kanban\EO_Supervisor_Collection wakeUpCollection($rows)
	 */
	class SupervisorTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Supervisor_Result exec()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor fetchObject()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Supervisor_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor fetchObject()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor_Collection fetchCollection()
	 */
	class EO_Supervisor_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor_Collection createCollection()
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor wakeUpObject($row)
	 * @method \Bitrix\Crm\Kanban\EO_Supervisor_Collection wakeUpCollection($rows)
	 */
	class EO_Supervisor_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\LeadTable:crm/lib/lead.php:0b23364a5121253b2a33ad7ba4e2fb36 */
namespace Bitrix\Crm {
	/**
	 * EO_Lead
	 * @see \Bitrix\Crm\LeadTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Lead setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getTitle()
	 * @method \Bitrix\Crm\EO_Lead setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Crm\EO_Lead resetTitle()
	 * @method \Bitrix\Crm\EO_Lead unsetTitle()
	 * @method \string fillTitle()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\EO_Lead setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\EO_Lead resetStatusId()
	 * @method \Bitrix\Crm\EO_Lead unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \Bitrix\Crm\EO_Status getStatusBy()
	 * @method \Bitrix\Crm\EO_Status remindActualStatusBy()
	 * @method \Bitrix\Crm\EO_Status requireStatusBy()
	 * @method \Bitrix\Crm\EO_Lead setStatusBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Lead resetStatusBy()
	 * @method \Bitrix\Crm\EO_Lead unsetStatusBy()
	 * @method bool hasStatusBy()
	 * @method bool isStatusByFilled()
	 * @method bool isStatusByChanged()
	 * @method \Bitrix\Crm\EO_Status fillStatusBy()
	 * @method \string getStatusDescription()
	 * @method \Bitrix\Crm\EO_Lead setStatusDescription(\string|\Bitrix\Main\DB\SqlExpression $statusDescription)
	 * @method bool hasStatusDescription()
	 * @method bool isStatusDescriptionFilled()
	 * @method bool isStatusDescriptionChanged()
	 * @method \string remindActualStatusDescription()
	 * @method \string requireStatusDescription()
	 * @method \Bitrix\Crm\EO_Lead resetStatusDescription()
	 * @method \Bitrix\Crm\EO_Lead unsetStatusDescription()
	 * @method \string fillStatusDescription()
	 * @method \boolean getIsConvert()
	 * @method \boolean remindActualIsConvert()
	 * @method \boolean requireIsConvert()
	 * @method bool hasIsConvert()
	 * @method bool isIsConvertFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetIsConvert()
	 * @method \boolean fillIsConvert()
	 * @method \string getProductId()
	 * @method \Bitrix\Crm\EO_Lead setProductId(\string|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \string remindActualProductId()
	 * @method \string requireProductId()
	 * @method \Bitrix\Crm\EO_Lead resetProductId()
	 * @method \Bitrix\Crm\EO_Lead unsetProductId()
	 * @method \string fillProductId()
	 * @method \float getOpportunity()
	 * @method \Bitrix\Crm\EO_Lead setOpportunity(\float|\Bitrix\Main\DB\SqlExpression $opportunity)
	 * @method bool hasOpportunity()
	 * @method bool isOpportunityFilled()
	 * @method bool isOpportunityChanged()
	 * @method \float remindActualOpportunity()
	 * @method \float requireOpportunity()
	 * @method \Bitrix\Crm\EO_Lead resetOpportunity()
	 * @method \Bitrix\Crm\EO_Lead unsetOpportunity()
	 * @method \float fillOpportunity()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\EO_Lead setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\EO_Lead resetCurrencyId()
	 * @method \Bitrix\Crm\EO_Lead unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \float getOpportunityAccount()
	 * @method \Bitrix\Crm\EO_Lead setOpportunityAccount(\float|\Bitrix\Main\DB\SqlExpression $opportunityAccount)
	 * @method bool hasOpportunityAccount()
	 * @method bool isOpportunityAccountFilled()
	 * @method bool isOpportunityAccountChanged()
	 * @method \float remindActualOpportunityAccount()
	 * @method \float requireOpportunityAccount()
	 * @method \Bitrix\Crm\EO_Lead resetOpportunityAccount()
	 * @method \Bitrix\Crm\EO_Lead unsetOpportunityAccount()
	 * @method \float fillOpportunityAccount()
	 * @method \string getAccountCurrencyId()
	 * @method \Bitrix\Crm\EO_Lead setAccountCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $accountCurrencyId)
	 * @method bool hasAccountCurrencyId()
	 * @method bool isAccountCurrencyIdFilled()
	 * @method bool isAccountCurrencyIdChanged()
	 * @method \string remindActualAccountCurrencyId()
	 * @method \string requireAccountCurrencyId()
	 * @method \Bitrix\Crm\EO_Lead resetAccountCurrencyId()
	 * @method \Bitrix\Crm\EO_Lead unsetAccountCurrencyId()
	 * @method \string fillAccountCurrencyId()
	 * @method \string getComments()
	 * @method \Bitrix\Crm\EO_Lead setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Crm\EO_Lead resetComments()
	 * @method \Bitrix\Crm\EO_Lead unsetComments()
	 * @method \string fillComments()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_Lead setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_Lead resetName()
	 * @method \Bitrix\Crm\EO_Lead unsetName()
	 * @method \string fillName()
	 * @method \string getLastName()
	 * @method \Bitrix\Crm\EO_Lead setLastName(\string|\Bitrix\Main\DB\SqlExpression $lastName)
	 * @method bool hasLastName()
	 * @method bool isLastNameFilled()
	 * @method bool isLastNameChanged()
	 * @method \string remindActualLastName()
	 * @method \string requireLastName()
	 * @method \Bitrix\Crm\EO_Lead resetLastName()
	 * @method \Bitrix\Crm\EO_Lead unsetLastName()
	 * @method \string fillLastName()
	 * @method \string getSecondName()
	 * @method \Bitrix\Crm\EO_Lead setSecondName(\string|\Bitrix\Main\DB\SqlExpression $secondName)
	 * @method bool hasSecondName()
	 * @method bool isSecondNameFilled()
	 * @method bool isSecondNameChanged()
	 * @method \string remindActualSecondName()
	 * @method \string requireSecondName()
	 * @method \Bitrix\Crm\EO_Lead resetSecondName()
	 * @method \Bitrix\Crm\EO_Lead unsetSecondName()
	 * @method \string fillSecondName()
	 * @method \string getShortName()
	 * @method \string remindActualShortName()
	 * @method \string requireShortName()
	 * @method bool hasShortName()
	 * @method bool isShortNameFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetShortName()
	 * @method \string fillShortName()
	 * @method \string getLogin()
	 * @method \string remindActualLogin()
	 * @method \string requireLogin()
	 * @method bool hasLogin()
	 * @method bool isLoginFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetLogin()
	 * @method \string fillLogin()
	 * @method \string getCompanyTitle()
	 * @method \Bitrix\Crm\EO_Lead setCompanyTitle(\string|\Bitrix\Main\DB\SqlExpression $companyTitle)
	 * @method bool hasCompanyTitle()
	 * @method bool isCompanyTitleFilled()
	 * @method bool isCompanyTitleChanged()
	 * @method \string remindActualCompanyTitle()
	 * @method \string requireCompanyTitle()
	 * @method \Bitrix\Crm\EO_Lead resetCompanyTitle()
	 * @method \Bitrix\Crm\EO_Lead unsetCompanyTitle()
	 * @method \string fillCompanyTitle()
	 * @method \string getPost()
	 * @method \Bitrix\Crm\EO_Lead setPost(\string|\Bitrix\Main\DB\SqlExpression $post)
	 * @method bool hasPost()
	 * @method bool isPostFilled()
	 * @method bool isPostChanged()
	 * @method \string remindActualPost()
	 * @method \string requirePost()
	 * @method \Bitrix\Crm\EO_Lead resetPost()
	 * @method \Bitrix\Crm\EO_Lead unsetPost()
	 * @method \string fillPost()
	 * @method \string getAddress()
	 * @method \Bitrix\Crm\EO_Lead setAddress(\string|\Bitrix\Main\DB\SqlExpression $address)
	 * @method bool hasAddress()
	 * @method bool isAddressFilled()
	 * @method bool isAddressChanged()
	 * @method \string remindActualAddress()
	 * @method \string requireAddress()
	 * @method \Bitrix\Crm\EO_Lead resetAddress()
	 * @method \Bitrix\Crm\EO_Lead unsetAddress()
	 * @method \string fillAddress()
	 * @method \string getSourceId()
	 * @method \Bitrix\Crm\EO_Lead setSourceId(\string|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \string remindActualSourceId()
	 * @method \string requireSourceId()
	 * @method \Bitrix\Crm\EO_Lead resetSourceId()
	 * @method \Bitrix\Crm\EO_Lead unsetSourceId()
	 * @method \string fillSourceId()
	 * @method \Bitrix\Crm\EO_Status getSourceBy()
	 * @method \Bitrix\Crm\EO_Status remindActualSourceBy()
	 * @method \Bitrix\Crm\EO_Status requireSourceBy()
	 * @method \Bitrix\Crm\EO_Lead setSourceBy(\Bitrix\Crm\EO_Status $object)
	 * @method \Bitrix\Crm\EO_Lead resetSourceBy()
	 * @method \Bitrix\Crm\EO_Lead unsetSourceBy()
	 * @method bool hasSourceBy()
	 * @method bool isSourceByFilled()
	 * @method bool isSourceByChanged()
	 * @method \Bitrix\Crm\EO_Status fillSourceBy()
	 * @method \string getSourceDescription()
	 * @method \Bitrix\Crm\EO_Lead setSourceDescription(\string|\Bitrix\Main\DB\SqlExpression $sourceDescription)
	 * @method bool hasSourceDescription()
	 * @method bool isSourceDescriptionFilled()
	 * @method bool isSourceDescriptionChanged()
	 * @method \string remindActualSourceDescription()
	 * @method \string requireSourceDescription()
	 * @method \Bitrix\Crm\EO_Lead resetSourceDescription()
	 * @method \Bitrix\Crm\EO_Lead unsetSourceDescription()
	 * @method \string fillSourceDescription()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Crm\EO_Lead setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Crm\EO_Lead resetCompanyId()
	 * @method \Bitrix\Crm\EO_Lead unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \int getContactId()
	 * @method \Bitrix\Crm\EO_Lead setContactId(\int|\Bitrix\Main\DB\SqlExpression $contactId)
	 * @method bool hasContactId()
	 * @method bool isContactIdFilled()
	 * @method bool isContactIdChanged()
	 * @method \int remindActualContactId()
	 * @method \int requireContactId()
	 * @method \Bitrix\Crm\EO_Lead resetContactId()
	 * @method \Bitrix\Crm\EO_Lead unsetContactId()
	 * @method \int fillContactId()
	 * @method \string getIsReturnCustomer()
	 * @method \Bitrix\Crm\EO_Lead setIsReturnCustomer(\string|\Bitrix\Main\DB\SqlExpression $isReturnCustomer)
	 * @method bool hasIsReturnCustomer()
	 * @method bool isIsReturnCustomerFilled()
	 * @method bool isIsReturnCustomerChanged()
	 * @method \string remindActualIsReturnCustomer()
	 * @method \string requireIsReturnCustomer()
	 * @method \Bitrix\Crm\EO_Lead resetIsReturnCustomer()
	 * @method \Bitrix\Crm\EO_Lead unsetIsReturnCustomer()
	 * @method \string fillIsReturnCustomer()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\EO_Lead setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\EO_Lead resetDateCreate()
	 * @method \Bitrix\Crm\EO_Lead unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreateShort()
	 * @method bool hasDateCreateShort()
	 * @method bool isDateCreateShortFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Crm\EO_Lead setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Crm\EO_Lead resetDateModify()
	 * @method \Bitrix\Crm\EO_Lead unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \Bitrix\Main\Type\DateTime getDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateModifyShort()
	 * @method bool hasDateModifyShort()
	 * @method bool isDateModifyShortFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime getDateClosed()
	 * @method \Bitrix\Crm\EO_Lead setDateClosed(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateClosed)
	 * @method bool hasDateClosed()
	 * @method bool isDateClosedFilled()
	 * @method bool isDateClosedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateClosed()
	 * @method \Bitrix\Main\Type\DateTime requireDateClosed()
	 * @method \Bitrix\Crm\EO_Lead resetDateClosed()
	 * @method \Bitrix\Crm\EO_Lead unsetDateClosed()
	 * @method \Bitrix\Main\Type\DateTime fillDateClosed()
	 * @method \int getAssignedById()
	 * @method \Bitrix\Crm\EO_Lead setAssignedById(\int|\Bitrix\Main\DB\SqlExpression $assignedById)
	 * @method bool hasAssignedById()
	 * @method bool isAssignedByIdFilled()
	 * @method bool isAssignedByIdChanged()
	 * @method \int remindActualAssignedById()
	 * @method \int requireAssignedById()
	 * @method \Bitrix\Crm\EO_Lead resetAssignedById()
	 * @method \Bitrix\Crm\EO_Lead unsetAssignedById()
	 * @method \int fillAssignedById()
	 * @method \Bitrix\Main\EO_User getAssignedBy()
	 * @method \Bitrix\Main\EO_User remindActualAssignedBy()
	 * @method \Bitrix\Main\EO_User requireAssignedBy()
	 * @method \Bitrix\Crm\EO_Lead setAssignedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Lead resetAssignedBy()
	 * @method \Bitrix\Crm\EO_Lead unsetAssignedBy()
	 * @method bool hasAssignedBy()
	 * @method bool isAssignedByFilled()
	 * @method bool isAssignedByChanged()
	 * @method \Bitrix\Main\EO_User fillAssignedBy()
	 * @method \int getCreatedById()
	 * @method \Bitrix\Crm\EO_Lead setCreatedById(\int|\Bitrix\Main\DB\SqlExpression $createdById)
	 * @method bool hasCreatedById()
	 * @method bool isCreatedByIdFilled()
	 * @method bool isCreatedByIdChanged()
	 * @method \int remindActualCreatedById()
	 * @method \int requireCreatedById()
	 * @method \Bitrix\Crm\EO_Lead resetCreatedById()
	 * @method \Bitrix\Crm\EO_Lead unsetCreatedById()
	 * @method \int fillCreatedById()
	 * @method \Bitrix\Main\EO_User getCreatedBy()
	 * @method \Bitrix\Main\EO_User remindActualCreatedBy()
	 * @method \Bitrix\Main\EO_User requireCreatedBy()
	 * @method \Bitrix\Crm\EO_Lead setCreatedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Lead resetCreatedBy()
	 * @method \Bitrix\Crm\EO_Lead unsetCreatedBy()
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedBy()
	 * @method \int getModifyById()
	 * @method \Bitrix\Crm\EO_Lead setModifyById(\int|\Bitrix\Main\DB\SqlExpression $modifyById)
	 * @method bool hasModifyById()
	 * @method bool isModifyByIdFilled()
	 * @method bool isModifyByIdChanged()
	 * @method \int remindActualModifyById()
	 * @method \int requireModifyById()
	 * @method \Bitrix\Crm\EO_Lead resetModifyById()
	 * @method \Bitrix\Crm\EO_Lead unsetModifyById()
	 * @method \int fillModifyById()
	 * @method \Bitrix\Main\EO_User getModifyBy()
	 * @method \Bitrix\Main\EO_User remindActualModifyBy()
	 * @method \Bitrix\Main\EO_User requireModifyBy()
	 * @method \Bitrix\Crm\EO_Lead setModifyBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Lead resetModifyBy()
	 * @method \Bitrix\Crm\EO_Lead unsetModifyBy()
	 * @method bool hasModifyBy()
	 * @method bool isModifyByFilled()
	 * @method bool isModifyByChanged()
	 * @method \Bitrix\Main\EO_User fillModifyBy()
	 * @method \Bitrix\Main\Type\Date getBirthdate()
	 * @method \Bitrix\Crm\EO_Lead setBirthdate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $birthdate)
	 * @method bool hasBirthdate()
	 * @method bool isBirthdateFilled()
	 * @method bool isBirthdateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualBirthdate()
	 * @method \Bitrix\Main\Type\Date requireBirthdate()
	 * @method \Bitrix\Crm\EO_Lead resetBirthdate()
	 * @method \Bitrix\Crm\EO_Lead unsetBirthdate()
	 * @method \Bitrix\Main\Type\Date fillBirthdate()
	 * @method \string getHonorific()
	 * @method \Bitrix\Crm\EO_Lead setHonorific(\string|\Bitrix\Main\DB\SqlExpression $honorific)
	 * @method bool hasHonorific()
	 * @method bool isHonorificFilled()
	 * @method bool isHonorificChanged()
	 * @method \string remindActualHonorific()
	 * @method \string requireHonorific()
	 * @method \Bitrix\Crm\EO_Lead resetHonorific()
	 * @method \Bitrix\Crm\EO_Lead unsetHonorific()
	 * @method \string fillHonorific()
	 * @method \Bitrix\Crm\EO_EventRelations getEventRelation()
	 * @method \Bitrix\Crm\EO_EventRelations remindActualEventRelation()
	 * @method \Bitrix\Crm\EO_EventRelations requireEventRelation()
	 * @method \Bitrix\Crm\EO_Lead setEventRelation(\Bitrix\Crm\EO_EventRelations $object)
	 * @method \Bitrix\Crm\EO_Lead resetEventRelation()
	 * @method \Bitrix\Crm\EO_Lead unsetEventRelation()
	 * @method bool hasEventRelation()
	 * @method bool isEventRelationFilled()
	 * @method bool isEventRelationChanged()
	 * @method \Bitrix\Crm\EO_EventRelations fillEventRelation()
	 * @method \string getStatusSemanticId()
	 * @method \Bitrix\Crm\EO_Lead setStatusSemanticId(\string|\Bitrix\Main\DB\SqlExpression $statusSemanticId)
	 * @method bool hasStatusSemanticId()
	 * @method bool isStatusSemanticIdFilled()
	 * @method bool isStatusSemanticIdChanged()
	 * @method \string remindActualStatusSemanticId()
	 * @method \string requireStatusSemanticId()
	 * @method \Bitrix\Crm\EO_Lead resetStatusSemanticId()
	 * @method \Bitrix\Crm\EO_Lead unsetStatusSemanticId()
	 * @method \string fillStatusSemanticId()
	 * @method \string getOriginId()
	 * @method \Bitrix\Crm\EO_Lead setOriginId(\string|\Bitrix\Main\DB\SqlExpression $originId)
	 * @method bool hasOriginId()
	 * @method bool isOriginIdFilled()
	 * @method bool isOriginIdChanged()
	 * @method \string remindActualOriginId()
	 * @method \string requireOriginId()
	 * @method \Bitrix\Crm\EO_Lead resetOriginId()
	 * @method \Bitrix\Crm\EO_Lead unsetOriginId()
	 * @method \string fillOriginId()
	 * @method \string getOriginatorId()
	 * @method \Bitrix\Crm\EO_Lead setOriginatorId(\string|\Bitrix\Main\DB\SqlExpression $originatorId)
	 * @method bool hasOriginatorId()
	 * @method bool isOriginatorIdFilled()
	 * @method bool isOriginatorIdChanged()
	 * @method \string remindActualOriginatorId()
	 * @method \string requireOriginatorId()
	 * @method \Bitrix\Crm\EO_Lead resetOriginatorId()
	 * @method \Bitrix\Crm\EO_Lead unsetOriginatorId()
	 * @method \string fillOriginatorId()
	 * @method \boolean getHasEmail()
	 * @method \Bitrix\Crm\EO_Lead setHasEmail(\boolean|\Bitrix\Main\DB\SqlExpression $hasEmail)
	 * @method bool hasHasEmail()
	 * @method bool isHasEmailFilled()
	 * @method bool isHasEmailChanged()
	 * @method \boolean remindActualHasEmail()
	 * @method \boolean requireHasEmail()
	 * @method \Bitrix\Crm\EO_Lead resetHasEmail()
	 * @method \Bitrix\Crm\EO_Lead unsetHasEmail()
	 * @method \boolean fillHasEmail()
	 * @method \boolean getHasPhone()
	 * @method \Bitrix\Crm\EO_Lead setHasPhone(\boolean|\Bitrix\Main\DB\SqlExpression $hasPhone)
	 * @method bool hasHasPhone()
	 * @method bool isHasPhoneFilled()
	 * @method bool isHasPhoneChanged()
	 * @method \boolean remindActualHasPhone()
	 * @method \boolean requireHasPhone()
	 * @method \Bitrix\Crm\EO_Lead resetHasPhone()
	 * @method \Bitrix\Crm\EO_Lead unsetHasPhone()
	 * @method \boolean fillHasPhone()
	 * @method \boolean getHasImol()
	 * @method \Bitrix\Crm\EO_Lead setHasImol(\boolean|\Bitrix\Main\DB\SqlExpression $hasImol)
	 * @method bool hasHasImol()
	 * @method bool isHasImolFilled()
	 * @method bool isHasImolChanged()
	 * @method \boolean remindActualHasImol()
	 * @method \boolean requireHasImol()
	 * @method \Bitrix\Crm\EO_Lead resetHasImol()
	 * @method \Bitrix\Crm\EO_Lead unsetHasImol()
	 * @method \boolean fillHasImol()
	 * @method \string getPhoneMobile()
	 * @method \string remindActualPhoneMobile()
	 * @method \string requirePhoneMobile()
	 * @method bool hasPhoneMobile()
	 * @method bool isPhoneMobileFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetPhoneMobile()
	 * @method \string fillPhoneMobile()
	 * @method \string getPhoneWork()
	 * @method \string remindActualPhoneWork()
	 * @method \string requirePhoneWork()
	 * @method bool hasPhoneWork()
	 * @method bool isPhoneWorkFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetPhoneWork()
	 * @method \string fillPhoneWork()
	 * @method \string getPhoneMailing()
	 * @method \string remindActualPhoneMailing()
	 * @method \string requirePhoneMailing()
	 * @method bool hasPhoneMailing()
	 * @method bool isPhoneMailingFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetPhoneMailing()
	 * @method \string fillPhoneMailing()
	 * @method \string getEmailHome()
	 * @method \string remindActualEmailHome()
	 * @method \string requireEmailHome()
	 * @method bool hasEmailHome()
	 * @method bool isEmailHomeFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetEmailHome()
	 * @method \string fillEmailHome()
	 * @method \string getEmailWork()
	 * @method \string remindActualEmailWork()
	 * @method \string requireEmailWork()
	 * @method bool hasEmailWork()
	 * @method bool isEmailWorkFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetEmailWork()
	 * @method \string fillEmailWork()
	 * @method \string getEmailMailing()
	 * @method \string remindActualEmailMailing()
	 * @method \string requireEmailMailing()
	 * @method bool hasEmailMailing()
	 * @method bool isEmailMailingFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetEmailMailing()
	 * @method \string fillEmailMailing()
	 * @method \string getSkype()
	 * @method \string remindActualSkype()
	 * @method \string requireSkype()
	 * @method bool hasSkype()
	 * @method bool isSkypeFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetSkype()
	 * @method \string fillSkype()
	 * @method \string getIcq()
	 * @method \string remindActualIcq()
	 * @method \string requireIcq()
	 * @method bool hasIcq()
	 * @method bool isIcqFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetIcq()
	 * @method \string fillIcq()
	 * @method \string getImol()
	 * @method \string remindActualImol()
	 * @method \string requireImol()
	 * @method bool hasImol()
	 * @method bool isImolFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetImol()
	 * @method \string fillImol()
	 * @method \string getEmail()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetEmail()
	 * @method \string fillEmail()
	 * @method \string getPhone()
	 * @method \string remindActualPhone()
	 * @method \string requirePhone()
	 * @method bool hasPhone()
	 * @method bool isPhoneFilled()
	 * @method \Bitrix\Crm\EO_Lead unsetPhone()
	 * @method \string fillPhone()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Crm\EO_Lead setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Crm\EO_Lead resetSearchContent()
	 * @method \Bitrix\Crm\EO_Lead unsetSearchContent()
	 * @method \string fillSearchContent()
	 * @method \int getFaceId()
	 * @method \Bitrix\Crm\EO_Lead setFaceId(\int|\Bitrix\Main\DB\SqlExpression $faceId)
	 * @method bool hasFaceId()
	 * @method bool isFaceIdFilled()
	 * @method bool isFaceIdChanged()
	 * @method \int remindActualFaceId()
	 * @method \int requireFaceId()
	 * @method \Bitrix\Crm\EO_Lead resetFaceId()
	 * @method \Bitrix\Crm\EO_Lead unsetFaceId()
	 * @method \int fillFaceId()
	 * @method \Bitrix\Crm\EO_Address getAddressEntity()
	 * @method \Bitrix\Crm\EO_Address remindActualAddressEntity()
	 * @method \Bitrix\Crm\EO_Address requireAddressEntity()
	 * @method \Bitrix\Crm\EO_Lead setAddressEntity(\Bitrix\Crm\EO_Address $object)
	 * @method \Bitrix\Crm\EO_Lead resetAddressEntity()
	 * @method \Bitrix\Crm\EO_Lead unsetAddressEntity()
	 * @method bool hasAddressEntity()
	 * @method bool isAddressEntityFilled()
	 * @method bool isAddressEntityChanged()
	 * @method \Bitrix\Crm\EO_Address fillAddressEntity()
	 * @method \Bitrix\Crm\EO_ProductRow getProductRow()
	 * @method \Bitrix\Crm\EO_ProductRow remindActualProductRow()
	 * @method \Bitrix\Crm\EO_ProductRow requireProductRow()
	 * @method \Bitrix\Crm\EO_Lead setProductRow(\Bitrix\Crm\EO_ProductRow $object)
	 * @method \Bitrix\Crm\EO_Lead resetProductRow()
	 * @method \Bitrix\Crm\EO_Lead unsetProductRow()
	 * @method bool hasProductRow()
	 * @method bool isProductRowFilled()
	 * @method bool isProductRowChanged()
	 * @method \Bitrix\Crm\EO_ProductRow fillProductRow()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory getHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory remindActualHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory requireHistory()
	 * @method \Bitrix\Crm\EO_Lead setHistory(\Bitrix\Crm\History\Entity\EO_LeadStatusHistory $object)
	 * @method \Bitrix\Crm\EO_Lead resetHistory()
	 * @method \Bitrix\Crm\EO_Lead unsetHistory()
	 * @method bool hasHistory()
	 * @method bool isHistoryFilled()
	 * @method bool isHistoryChanged()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory fillHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed getFullHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed remindActualFullHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed requireFullHistory()
	 * @method \Bitrix\Crm\EO_Lead setFullHistory(\Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed $object)
	 * @method \Bitrix\Crm\EO_Lead resetFullHistory()
	 * @method \Bitrix\Crm\EO_Lead unsetFullHistory()
	 * @method bool hasFullHistory()
	 * @method bool isFullHistoryFilled()
	 * @method bool isFullHistoryChanged()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed fillFullHistory()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact getBindingContact()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact remindActualBindingContact()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact requireBindingContact()
	 * @method \Bitrix\Crm\EO_Lead setBindingContact(\Bitrix\Crm\Binding\EO_LeadContact $object)
	 * @method \Bitrix\Crm\EO_Lead resetBindingContact()
	 * @method \Bitrix\Crm\EO_Lead unsetBindingContact()
	 * @method bool hasBindingContact()
	 * @method bool isBindingContactFilled()
	 * @method bool isBindingContactChanged()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact fillBindingContact()
	 * @method \int getWebformId()
	 * @method \Bitrix\Crm\EO_Lead setWebformId(\int|\Bitrix\Main\DB\SqlExpression $webformId)
	 * @method bool hasWebformId()
	 * @method bool isWebformIdFilled()
	 * @method bool isWebformIdChanged()
	 * @method \int remindActualWebformId()
	 * @method \int requireWebformId()
	 * @method \Bitrix\Crm\EO_Lead resetWebformId()
	 * @method \Bitrix\Crm\EO_Lead unsetWebformId()
	 * @method \int fillWebformId()
	 * @method \Bitrix\Crm\EO_Utm getUtmSource()
	 * @method \Bitrix\Crm\EO_Utm remindActualUtmSource()
	 * @method \Bitrix\Crm\EO_Utm requireUtmSource()
	 * @method \Bitrix\Crm\EO_Lead setUtmSource(\Bitrix\Crm\EO_Utm $object)
	 * @method \Bitrix\Crm\EO_Lead resetUtmSource()
	 * @method \Bitrix\Crm\EO_Lead unsetUtmSource()
	 * @method bool hasUtmSource()
	 * @method bool isUtmSourceFilled()
	 * @method bool isUtmSourceChanged()
	 * @method \Bitrix\Crm\EO_Utm fillUtmSource()
	 * @method \Bitrix\Crm\EO_Utm getUtmMedium()
	 * @method \Bitrix\Crm\EO_Utm remindActualUtmMedium()
	 * @method \Bitrix\Crm\EO_Utm requireUtmMedium()
	 * @method \Bitrix\Crm\EO_Lead setUtmMedium(\Bitrix\Crm\EO_Utm $object)
	 * @method \Bitrix\Crm\EO_Lead resetUtmMedium()
	 * @method \Bitrix\Crm\EO_Lead unsetUtmMedium()
	 * @method bool hasUtmMedium()
	 * @method bool isUtmMediumFilled()
	 * @method bool isUtmMediumChanged()
	 * @method \Bitrix\Crm\EO_Utm fillUtmMedium()
	 * @method \Bitrix\Crm\EO_Utm getUtmCampaign()
	 * @method \Bitrix\Crm\EO_Utm remindActualUtmCampaign()
	 * @method \Bitrix\Crm\EO_Utm requireUtmCampaign()
	 * @method \Bitrix\Crm\EO_Lead setUtmCampaign(\Bitrix\Crm\EO_Utm $object)
	 * @method \Bitrix\Crm\EO_Lead resetUtmCampaign()
	 * @method \Bitrix\Crm\EO_Lead unsetUtmCampaign()
	 * @method bool hasUtmCampaign()
	 * @method bool isUtmCampaignFilled()
	 * @method bool isUtmCampaignChanged()
	 * @method \Bitrix\Crm\EO_Utm fillUtmCampaign()
	 * @method \Bitrix\Crm\EO_Utm getUtmContent()
	 * @method \Bitrix\Crm\EO_Utm remindActualUtmContent()
	 * @method \Bitrix\Crm\EO_Utm requireUtmContent()
	 * @method \Bitrix\Crm\EO_Lead setUtmContent(\Bitrix\Crm\EO_Utm $object)
	 * @method \Bitrix\Crm\EO_Lead resetUtmContent()
	 * @method \Bitrix\Crm\EO_Lead unsetUtmContent()
	 * @method bool hasUtmContent()
	 * @method bool isUtmContentFilled()
	 * @method bool isUtmContentChanged()
	 * @method \Bitrix\Crm\EO_Utm fillUtmContent()
	 * @method \Bitrix\Crm\EO_Utm getUtmTerm()
	 * @method \Bitrix\Crm\EO_Utm remindActualUtmTerm()
	 * @method \Bitrix\Crm\EO_Utm requireUtmTerm()
	 * @method \Bitrix\Crm\EO_Lead setUtmTerm(\Bitrix\Crm\EO_Utm $object)
	 * @method \Bitrix\Crm\EO_Lead resetUtmTerm()
	 * @method \Bitrix\Crm\EO_Lead unsetUtmTerm()
	 * @method bool hasUtmTerm()
	 * @method bool isUtmTermFilled()
	 * @method bool isUtmTermChanged()
	 * @method \Bitrix\Crm\EO_Utm fillUtmTerm()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Lead set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Lead reset($fieldName)
	 * @method \Bitrix\Crm\EO_Lead unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Lead wakeUp($data)
	 */
	class EO_Lead {
		/* @var \Bitrix\Crm\LeadTable */
		static public $dataClass = '\Bitrix\Crm\LeadTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Lead_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \Bitrix\Crm\EO_Status[] getStatusByList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getStatusByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillStatusBy()
	 * @method \string[] getStatusDescriptionList()
	 * @method \string[] fillStatusDescription()
	 * @method \boolean[] getIsConvertList()
	 * @method \boolean[] fillIsConvert()
	 * @method \string[] getProductIdList()
	 * @method \string[] fillProductId()
	 * @method \float[] getOpportunityList()
	 * @method \float[] fillOpportunity()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \float[] getOpportunityAccountList()
	 * @method \float[] fillOpportunityAccount()
	 * @method \string[] getAccountCurrencyIdList()
	 * @method \string[] fillAccountCurrencyId()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getLastNameList()
	 * @method \string[] fillLastName()
	 * @method \string[] getSecondNameList()
	 * @method \string[] fillSecondName()
	 * @method \string[] getShortNameList()
	 * @method \string[] fillShortName()
	 * @method \string[] getLoginList()
	 * @method \string[] fillLogin()
	 * @method \string[] getCompanyTitleList()
	 * @method \string[] fillCompanyTitle()
	 * @method \string[] getPostList()
	 * @method \string[] fillPost()
	 * @method \string[] getAddressList()
	 * @method \string[] fillAddress()
	 * @method \string[] getSourceIdList()
	 * @method \string[] fillSourceId()
	 * @method \Bitrix\Crm\EO_Status[] getSourceByList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getSourceByCollection()
	 * @method \Bitrix\Crm\EO_Status_Collection fillSourceBy()
	 * @method \string[] getSourceDescriptionList()
	 * @method \string[] fillSourceDescription()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \int[] getContactIdList()
	 * @method \int[] fillContactId()
	 * @method \string[] getIsReturnCustomerList()
	 * @method \string[] fillIsReturnCustomer()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateClosedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateClosed()
	 * @method \int[] getAssignedByIdList()
	 * @method \int[] fillAssignedById()
	 * @method \Bitrix\Main\EO_User[] getAssignedByList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getAssignedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillAssignedBy()
	 * @method \int[] getCreatedByIdList()
	 * @method \int[] fillCreatedById()
	 * @method \Bitrix\Main\EO_User[] getCreatedByList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getCreatedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedBy()
	 * @method \int[] getModifyByIdList()
	 * @method \int[] fillModifyById()
	 * @method \Bitrix\Main\EO_User[] getModifyByList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getModifyByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifyBy()
	 * @method \Bitrix\Main\Type\Date[] getBirthdateList()
	 * @method \Bitrix\Main\Type\Date[] fillBirthdate()
	 * @method \string[] getHonorificList()
	 * @method \string[] fillHonorific()
	 * @method \Bitrix\Crm\EO_EventRelations[] getEventRelationList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getEventRelationCollection()
	 * @method \Bitrix\Crm\EO_EventRelations_Collection fillEventRelation()
	 * @method \string[] getStatusSemanticIdList()
	 * @method \string[] fillStatusSemanticId()
	 * @method \string[] getOriginIdList()
	 * @method \string[] fillOriginId()
	 * @method \string[] getOriginatorIdList()
	 * @method \string[] fillOriginatorId()
	 * @method \boolean[] getHasEmailList()
	 * @method \boolean[] fillHasEmail()
	 * @method \boolean[] getHasPhoneList()
	 * @method \boolean[] fillHasPhone()
	 * @method \boolean[] getHasImolList()
	 * @method \boolean[] fillHasImol()
	 * @method \string[] getPhoneMobileList()
	 * @method \string[] fillPhoneMobile()
	 * @method \string[] getPhoneWorkList()
	 * @method \string[] fillPhoneWork()
	 * @method \string[] getPhoneMailingList()
	 * @method \string[] fillPhoneMailing()
	 * @method \string[] getEmailHomeList()
	 * @method \string[] fillEmailHome()
	 * @method \string[] getEmailWorkList()
	 * @method \string[] fillEmailWork()
	 * @method \string[] getEmailMailingList()
	 * @method \string[] fillEmailMailing()
	 * @method \string[] getSkypeList()
	 * @method \string[] fillSkype()
	 * @method \string[] getIcqList()
	 * @method \string[] fillIcq()
	 * @method \string[] getImolList()
	 * @method \string[] fillImol()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \string[] getPhoneList()
	 * @method \string[] fillPhone()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 * @method \int[] getFaceIdList()
	 * @method \int[] fillFaceId()
	 * @method \Bitrix\Crm\EO_Address[] getAddressEntityList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getAddressEntityCollection()
	 * @method \Bitrix\Crm\EO_Address_Collection fillAddressEntity()
	 * @method \Bitrix\Crm\EO_ProductRow[] getProductRowList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getProductRowCollection()
	 * @method \Bitrix\Crm\EO_ProductRow_Collection fillProductRow()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory[] getHistoryList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getHistoryCollection()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistory_Collection fillHistory()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed[] getFullHistoryList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getFullHistoryCollection()
	 * @method \Bitrix\Crm\History\Entity\EO_LeadStatusHistoryWithSupposed_Collection fillFullHistory()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact[] getBindingContactList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getBindingContactCollection()
	 * @method \Bitrix\Crm\Binding\EO_LeadContact_Collection fillBindingContact()
	 * @method \int[] getWebformIdList()
	 * @method \int[] fillWebformId()
	 * @method \Bitrix\Crm\EO_Utm[] getUtmSourceList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getUtmSourceCollection()
	 * @method \Bitrix\Crm\EO_Utm_Collection fillUtmSource()
	 * @method \Bitrix\Crm\EO_Utm[] getUtmMediumList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getUtmMediumCollection()
	 * @method \Bitrix\Crm\EO_Utm_Collection fillUtmMedium()
	 * @method \Bitrix\Crm\EO_Utm[] getUtmCampaignList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getUtmCampaignCollection()
	 * @method \Bitrix\Crm\EO_Utm_Collection fillUtmCampaign()
	 * @method \Bitrix\Crm\EO_Utm[] getUtmContentList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getUtmContentCollection()
	 * @method \Bitrix\Crm\EO_Utm_Collection fillUtmContent()
	 * @method \Bitrix\Crm\EO_Utm[] getUtmTermList()
	 * @method \Bitrix\Crm\EO_Lead_Collection getUtmTermCollection()
	 * @method \Bitrix\Crm\EO_Utm_Collection fillUtmTerm()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Lead $object)
	 * @method bool has(\Bitrix\Crm\EO_Lead $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Lead getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Lead[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Lead $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Lead_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Lead current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Lead_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\LeadTable */
		static public $dataClass = '\Bitrix\Crm\LeadTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Lead_Query query()
	 * @method static EO_Lead_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Lead_Result getById($id)
	 * @method static EO_Lead_Result getList(array $parameters = array())
	 * @method static EO_Lead_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Lead createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Lead_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Lead wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Lead_Collection wakeUpCollection($rows)
	 */
	class LeadTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Lead_Result exec()
	 * @method \Bitrix\Crm\EO_Lead fetchObject()
	 * @method \Bitrix\Crm\EO_Lead_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Lead_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Lead fetchObject()
	 * @method \Bitrix\Crm\EO_Lead_Collection fetchCollection()
	 */
	class EO_Lead_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Lead createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Lead_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Lead wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Lead_Collection wakeUpCollection($rows)
	 */
	class EO_Lead_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Ml\Internals\ModelTrainingTable:crm/lib/ml/internals/modeltrainingtable.php:75a13095ada3e05ff4df9f04922a2f70 */
namespace Bitrix\Crm\Ml\Internals {
	/**
	 * EO_ModelTraining
	 * @see \Bitrix\Crm\Ml\Internals\ModelTrainingTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getModelName()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining setModelName(\string|\Bitrix\Main\DB\SqlExpression $modelName)
	 * @method bool hasModelName()
	 * @method bool isModelNameFilled()
	 * @method bool isModelNameChanged()
	 * @method \string remindActualModelName()
	 * @method \string requireModelName()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining resetModelName()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining unsetModelName()
	 * @method \string fillModelName()
	 * @method \int getRecordsSuccess()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining setRecordsSuccess(\int|\Bitrix\Main\DB\SqlExpression $recordsSuccess)
	 * @method bool hasRecordsSuccess()
	 * @method bool isRecordsSuccessFilled()
	 * @method bool isRecordsSuccessChanged()
	 * @method \int remindActualRecordsSuccess()
	 * @method \int requireRecordsSuccess()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining resetRecordsSuccess()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining unsetRecordsSuccess()
	 * @method \int fillRecordsSuccess()
	 * @method \int getRecordsFailed()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining setRecordsFailed(\int|\Bitrix\Main\DB\SqlExpression $recordsFailed)
	 * @method bool hasRecordsFailed()
	 * @method bool isRecordsFailedFilled()
	 * @method bool isRecordsFailedChanged()
	 * @method \int remindActualRecordsFailed()
	 * @method \int requireRecordsFailed()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining resetRecordsFailed()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining unsetRecordsFailed()
	 * @method \int fillRecordsFailed()
	 * @method \Bitrix\Main\Type\DateTime getDateStart()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining setDateStart(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateStart)
	 * @method bool hasDateStart()
	 * @method bool isDateStartFilled()
	 * @method bool isDateStartChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateStart()
	 * @method \Bitrix\Main\Type\DateTime requireDateStart()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining resetDateStart()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining unsetDateStart()
	 * @method \Bitrix\Main\Type\DateTime fillDateStart()
	 * @method \Bitrix\Main\Type\DateTime getDateFinish()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining setDateFinish(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateFinish)
	 * @method bool hasDateFinish()
	 * @method bool isDateFinishFilled()
	 * @method bool isDateFinishChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateFinish()
	 * @method \Bitrix\Main\Type\DateTime requireDateFinish()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining resetDateFinish()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining unsetDateFinish()
	 * @method \Bitrix\Main\Type\DateTime fillDateFinish()
	 * @method \string getState()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining setState(\string|\Bitrix\Main\DB\SqlExpression $state)
	 * @method bool hasState()
	 * @method bool isStateFilled()
	 * @method bool isStateChanged()
	 * @method \string remindActualState()
	 * @method \string requireState()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining resetState()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining unsetState()
	 * @method \string fillState()
	 * @method \float getAreaUnderCurve()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining setAreaUnderCurve(\float|\Bitrix\Main\DB\SqlExpression $areaUnderCurve)
	 * @method bool hasAreaUnderCurve()
	 * @method bool isAreaUnderCurveFilled()
	 * @method bool isAreaUnderCurveChanged()
	 * @method \float remindActualAreaUnderCurve()
	 * @method \float requireAreaUnderCurve()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining resetAreaUnderCurve()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining unsetAreaUnderCurve()
	 * @method \float fillAreaUnderCurve()
	 * @method \int getLastId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining setLastId(\int|\Bitrix\Main\DB\SqlExpression $lastId)
	 * @method bool hasLastId()
	 * @method bool isLastIdFilled()
	 * @method bool isLastIdChanged()
	 * @method \int remindActualLastId()
	 * @method \int requireLastId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining resetLastId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining unsetLastId()
	 * @method \int fillLastId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining set($fieldName, $value)
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining reset($fieldName)
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Ml\Internals\EO_ModelTraining wakeUp($data)
	 */
	class EO_ModelTraining {
		/* @var \Bitrix\Crm\Ml\Internals\ModelTrainingTable */
		static public $dataClass = '\Bitrix\Crm\Ml\Internals\ModelTrainingTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Ml\Internals {
	/**
	 * EO_ModelTraining_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getModelNameList()
	 * @method \string[] fillModelName()
	 * @method \int[] getRecordsSuccessList()
	 * @method \int[] fillRecordsSuccess()
	 * @method \int[] getRecordsFailedList()
	 * @method \int[] fillRecordsFailed()
	 * @method \Bitrix\Main\Type\DateTime[] getDateStartList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateStart()
	 * @method \Bitrix\Main\Type\DateTime[] getDateFinishList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateFinish()
	 * @method \string[] getStateList()
	 * @method \string[] fillState()
	 * @method \float[] getAreaUnderCurveList()
	 * @method \float[] fillAreaUnderCurve()
	 * @method \int[] getLastIdList()
	 * @method \int[] fillLastId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Ml\Internals\EO_ModelTraining $object)
	 * @method bool has(\Bitrix\Crm\Ml\Internals\EO_ModelTraining $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining getByPrimary($primary)
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining[] getAll()
	 * @method bool remove(\Bitrix\Crm\Ml\Internals\EO_ModelTraining $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Ml\Internals\EO_ModelTraining_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ModelTraining_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Ml\Internals\ModelTrainingTable */
		static public $dataClass = '\Bitrix\Crm\Ml\Internals\ModelTrainingTable';
	}
}
namespace Bitrix\Crm\Ml\Internals {
	/**
	 * @method static EO_ModelTraining_Query query()
	 * @method static EO_ModelTraining_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ModelTraining_Result getById($id)
	 * @method static EO_ModelTraining_Result getList(array $parameters = array())
	 * @method static EO_ModelTraining_Entity getEntity()
	 * @method static \Bitrix\Crm\Ml\Internals\EO_ModelTraining createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Ml\Internals\EO_ModelTraining_Collection createCollection()
	 * @method static \Bitrix\Crm\Ml\Internals\EO_ModelTraining wakeUpObject($row)
	 * @method static \Bitrix\Crm\Ml\Internals\EO_ModelTraining_Collection wakeUpCollection($rows)
	 */
	class ModelTrainingTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ModelTraining_Result exec()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining fetchObject()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ModelTraining_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining fetchObject()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining_Collection fetchCollection()
	 */
	class EO_ModelTraining_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining_Collection createCollection()
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining wakeUpObject($row)
	 * @method \Bitrix\Crm\Ml\Internals\EO_ModelTraining_Collection wakeUpCollection($rows)
	 */
	class EO_ModelTraining_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Ml\Internals\PredictionHistoryTable:crm/lib/ml/internals/predictionhistorytable.php:b6443a342a921b0eaf2faf62a01dc239 */
namespace Bitrix\Crm\Ml\Internals {
	/**
	 * EO_PredictionHistory
	 * @see \Bitrix\Crm\Ml\Internals\PredictionHistoryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory resetCreated()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory resetEntityTypeId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory resetEntityId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getModelName()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setModelName(\string|\Bitrix\Main\DB\SqlExpression $modelName)
	 * @method bool hasModelName()
	 * @method bool isModelNameFilled()
	 * @method bool isModelNameChanged()
	 * @method \string remindActualModelName()
	 * @method \string requireModelName()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory resetModelName()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unsetModelName()
	 * @method \string fillModelName()
	 * @method \boolean getIsPending()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setIsPending(\boolean|\Bitrix\Main\DB\SqlExpression $isPending)
	 * @method bool hasIsPending()
	 * @method bool isIsPendingFilled()
	 * @method bool isIsPendingChanged()
	 * @method \boolean remindActualIsPending()
	 * @method \boolean requireIsPending()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory resetIsPending()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unsetIsPending()
	 * @method \boolean fillIsPending()
	 * @method \string getAnswer()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setAnswer(\string|\Bitrix\Main\DB\SqlExpression $answer)
	 * @method bool hasAnswer()
	 * @method bool isAnswerFilled()
	 * @method bool isAnswerChanged()
	 * @method \string remindActualAnswer()
	 * @method \string requireAnswer()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory resetAnswer()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unsetAnswer()
	 * @method \string fillAnswer()
	 * @method \float getScore()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setScore(\float|\Bitrix\Main\DB\SqlExpression $score)
	 * @method bool hasScore()
	 * @method bool isScoreFilled()
	 * @method bool isScoreChanged()
	 * @method \float remindActualScore()
	 * @method \float requireScore()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory resetScore()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unsetScore()
	 * @method \float fillScore()
	 * @method \float getScoreDelta()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setScoreDelta(\float|\Bitrix\Main\DB\SqlExpression $scoreDelta)
	 * @method bool hasScoreDelta()
	 * @method bool isScoreDeltaFilled()
	 * @method bool isScoreDeltaChanged()
	 * @method \float remindActualScoreDelta()
	 * @method \float requireScoreDelta()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory resetScoreDelta()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unsetScoreDelta()
	 * @method \float fillScoreDelta()
	 * @method \int getEventType()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setEventType(\int|\Bitrix\Main\DB\SqlExpression $eventType)
	 * @method bool hasEventType()
	 * @method bool isEventTypeFilled()
	 * @method bool isEventTypeChanged()
	 * @method \int remindActualEventType()
	 * @method \int requireEventType()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory resetEventType()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unsetEventType()
	 * @method \int fillEventType()
	 * @method \int getAssociatedActivityId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory setAssociatedActivityId(\int|\Bitrix\Main\DB\SqlExpression $associatedActivityId)
	 * @method bool hasAssociatedActivityId()
	 * @method bool isAssociatedActivityIdFilled()
	 * @method bool isAssociatedActivityIdChanged()
	 * @method \int remindActualAssociatedActivityId()
	 * @method \int requireAssociatedActivityId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory resetAssociatedActivityId()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unsetAssociatedActivityId()
	 * @method \int fillAssociatedActivityId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory set($fieldName, $value)
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory reset($fieldName)
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Ml\Internals\EO_PredictionHistory wakeUp($data)
	 */
	class EO_PredictionHistory {
		/* @var \Bitrix\Crm\Ml\Internals\PredictionHistoryTable */
		static public $dataClass = '\Bitrix\Crm\Ml\Internals\PredictionHistoryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Ml\Internals {
	/**
	 * EO_PredictionHistory_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getModelNameList()
	 * @method \string[] fillModelName()
	 * @method \boolean[] getIsPendingList()
	 * @method \boolean[] fillIsPending()
	 * @method \string[] getAnswerList()
	 * @method \string[] fillAnswer()
	 * @method \float[] getScoreList()
	 * @method \float[] fillScore()
	 * @method \float[] getScoreDeltaList()
	 * @method \float[] fillScoreDelta()
	 * @method \int[] getEventTypeList()
	 * @method \int[] fillEventType()
	 * @method \int[] getAssociatedActivityIdList()
	 * @method \int[] fillAssociatedActivityId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Ml\Internals\EO_PredictionHistory $object)
	 * @method bool has(\Bitrix\Crm\Ml\Internals\EO_PredictionHistory $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory getByPrimary($primary)
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory[] getAll()
	 * @method bool remove(\Bitrix\Crm\Ml\Internals\EO_PredictionHistory $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Ml\Internals\EO_PredictionHistory_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_PredictionHistory_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Ml\Internals\PredictionHistoryTable */
		static public $dataClass = '\Bitrix\Crm\Ml\Internals\PredictionHistoryTable';
	}
}
namespace Bitrix\Crm\Ml\Internals {
	/**
	 * @method static EO_PredictionHistory_Query query()
	 * @method static EO_PredictionHistory_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_PredictionHistory_Result getById($id)
	 * @method static EO_PredictionHistory_Result getList(array $parameters = array())
	 * @method static EO_PredictionHistory_Entity getEntity()
	 * @method static \Bitrix\Crm\Ml\Internals\EO_PredictionHistory createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Ml\Internals\EO_PredictionHistory_Collection createCollection()
	 * @method static \Bitrix\Crm\Ml\Internals\EO_PredictionHistory wakeUpObject($row)
	 * @method static \Bitrix\Crm\Ml\Internals\EO_PredictionHistory_Collection wakeUpCollection($rows)
	 */
	class PredictionHistoryTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PredictionHistory_Result exec()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory fetchObject()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PredictionHistory_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory fetchObject()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory_Collection fetchCollection()
	 */
	class EO_PredictionHistory_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory_Collection createCollection()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory wakeUpObject($row)
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionHistory_Collection wakeUpCollection($rows)
	 */
	class EO_PredictionHistory_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Ml\Internals\PredictionQueueTable:crm/lib/ml/internals/predictionqueuetable.php:36edffc5275ace7f877a1e7ebbc46a35 */
namespace Bitrix\Crm\Ml\Internals {
	/**
	 * PredictionQueue
	 * @see \Bitrix\Crm\Ml\Internals\PredictionQueueTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Ml\PredictionQueue setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Crm\Ml\PredictionQueue setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Crm\Ml\PredictionQueue resetCreated()
	 * @method \Bitrix\Crm\Ml\PredictionQueue unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \Bitrix\Main\Type\DateTime getDelayedUntil()
	 * @method \Bitrix\Crm\Ml\PredictionQueue setDelayedUntil(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $delayedUntil)
	 * @method bool hasDelayedUntil()
	 * @method bool isDelayedUntilFilled()
	 * @method bool isDelayedUntilChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDelayedUntil()
	 * @method \Bitrix\Main\Type\DateTime requireDelayedUntil()
	 * @method \Bitrix\Crm\Ml\PredictionQueue resetDelayedUntil()
	 * @method \Bitrix\Crm\Ml\PredictionQueue unsetDelayedUntil()
	 * @method \Bitrix\Main\Type\DateTime fillDelayedUntil()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Ml\PredictionQueue setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Ml\PredictionQueue resetEntityTypeId()
	 * @method \Bitrix\Crm\Ml\PredictionQueue unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Ml\PredictionQueue setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Ml\PredictionQueue resetEntityId()
	 * @method \Bitrix\Crm\Ml\PredictionQueue unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \string getType()
	 * @method \Bitrix\Crm\Ml\PredictionQueue setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Crm\Ml\PredictionQueue resetType()
	 * @method \Bitrix\Crm\Ml\PredictionQueue unsetType()
	 * @method \string fillType()
	 * @method array getAdditionalParameters()
	 * @method \Bitrix\Crm\Ml\PredictionQueue setAdditionalParameters(array|\Bitrix\Main\DB\SqlExpression $additionalParameters)
	 * @method bool hasAdditionalParameters()
	 * @method bool isAdditionalParametersFilled()
	 * @method bool isAdditionalParametersChanged()
	 * @method array remindActualAdditionalParameters()
	 * @method array requireAdditionalParameters()
	 * @method \Bitrix\Crm\Ml\PredictionQueue resetAdditionalParameters()
	 * @method \Bitrix\Crm\Ml\PredictionQueue unsetAdditionalParameters()
	 * @method array fillAdditionalParameters()
	 * @method \string getState()
	 * @method \Bitrix\Crm\Ml\PredictionQueue setState(\string|\Bitrix\Main\DB\SqlExpression $state)
	 * @method bool hasState()
	 * @method bool isStateFilled()
	 * @method bool isStateChanged()
	 * @method \string remindActualState()
	 * @method \string requireState()
	 * @method \Bitrix\Crm\Ml\PredictionQueue resetState()
	 * @method \Bitrix\Crm\Ml\PredictionQueue unsetState()
	 * @method \string fillState()
	 * @method \string getError()
	 * @method \Bitrix\Crm\Ml\PredictionQueue setError(\string|\Bitrix\Main\DB\SqlExpression $error)
	 * @method bool hasError()
	 * @method bool isErrorFilled()
	 * @method bool isErrorChanged()
	 * @method \string remindActualError()
	 * @method \string requireError()
	 * @method \Bitrix\Crm\Ml\PredictionQueue resetError()
	 * @method \Bitrix\Crm\Ml\PredictionQueue unsetError()
	 * @method \string fillError()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Ml\PredictionQueue set($fieldName, $value)
	 * @method \Bitrix\Crm\Ml\PredictionQueue reset($fieldName)
	 * @method \Bitrix\Crm\Ml\PredictionQueue unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Ml\PredictionQueue wakeUp($data)
	 */
	class EO_PredictionQueue {
		/* @var \Bitrix\Crm\Ml\Internals\PredictionQueueTable */
		static public $dataClass = '\Bitrix\Crm\Ml\Internals\PredictionQueueTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Ml\Internals {
	/**
	 * EO_PredictionQueue_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \Bitrix\Main\Type\DateTime[] getDelayedUntilList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDelayedUntil()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method array[] getAdditionalParametersList()
	 * @method array[] fillAdditionalParameters()
	 * @method \string[] getStateList()
	 * @method \string[] fillState()
	 * @method \string[] getErrorList()
	 * @method \string[] fillError()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Ml\PredictionQueue $object)
	 * @method bool has(\Bitrix\Crm\Ml\PredictionQueue $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Ml\PredictionQueue getByPrimary($primary)
	 * @method \Bitrix\Crm\Ml\PredictionQueue[] getAll()
	 * @method bool remove(\Bitrix\Crm\Ml\PredictionQueue $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Ml\Internals\EO_PredictionQueue_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Ml\PredictionQueue current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_PredictionQueue_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Ml\Internals\PredictionQueueTable */
		static public $dataClass = '\Bitrix\Crm\Ml\Internals\PredictionQueueTable';
	}
}
namespace Bitrix\Crm\Ml\Internals {
	/**
	 * @method static EO_PredictionQueue_Query query()
	 * @method static EO_PredictionQueue_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_PredictionQueue_Result getById($id)
	 * @method static EO_PredictionQueue_Result getList(array $parameters = array())
	 * @method static EO_PredictionQueue_Entity getEntity()
	 * @method static \Bitrix\Crm\Ml\PredictionQueue createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Ml\Internals\EO_PredictionQueue_Collection createCollection()
	 * @method static \Bitrix\Crm\Ml\PredictionQueue wakeUpObject($row)
	 * @method static \Bitrix\Crm\Ml\Internals\EO_PredictionQueue_Collection wakeUpCollection($rows)
	 */
	class PredictionQueueTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PredictionQueue_Result exec()
	 * @method \Bitrix\Crm\Ml\PredictionQueue fetchObject()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionQueue_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PredictionQueue_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Ml\PredictionQueue fetchObject()
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionQueue_Collection fetchCollection()
	 */
	class EO_PredictionQueue_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Ml\PredictionQueue createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionQueue_Collection createCollection()
	 * @method \Bitrix\Crm\Ml\PredictionQueue wakeUpObject($row)
	 * @method \Bitrix\Crm\Ml\Internals\EO_PredictionQueue_Collection wakeUpCollection($rows)
	 */
	class EO_PredictionQueue_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Observer\Entity\ObserverTable:crm/lib/observer/entity/observertable.php:c47bd4d9d9cfd0a18e9e078f91359d25 */
namespace Bitrix\Crm\Observer\Entity {
	/**
	 * EO_Observer
	 * @see \Bitrix\Crm\Observer\Entity\ObserverTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer resetSort()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer unsetSort()
	 * @method \int fillSort()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer resetCreatedTime()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime getLastUpdatedTime()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer setLastUpdatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastUpdatedTime)
	 * @method bool hasLastUpdatedTime()
	 * @method bool isLastUpdatedTimeFilled()
	 * @method bool isLastUpdatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastUpdatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireLastUpdatedTime()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer resetLastUpdatedTime()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer unsetLastUpdatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillLastUpdatedTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer set($fieldName, $value)
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer reset($fieldName)
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Observer\Entity\EO_Observer wakeUp($data)
	 */
	class EO_Observer {
		/* @var \Bitrix\Crm\Observer\Entity\ObserverTable */
		static public $dataClass = '\Bitrix\Crm\Observer\Entity\ObserverTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Observer\Entity {
	/**
	 * EO_Observer_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] getUserIdList()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime[] getLastUpdatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastUpdatedTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Observer\Entity\EO_Observer $object)
	 * @method bool has(\Bitrix\Crm\Observer\Entity\EO_Observer $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer getByPrimary($primary)
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer[] getAll()
	 * @method bool remove(\Bitrix\Crm\Observer\Entity\EO_Observer $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Observer\Entity\EO_Observer_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Observer_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Observer\Entity\ObserverTable */
		static public $dataClass = '\Bitrix\Crm\Observer\Entity\ObserverTable';
	}
}
namespace Bitrix\Crm\Observer\Entity {
	/**
	 * @method static EO_Observer_Query query()
	 * @method static EO_Observer_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Observer_Result getById($id)
	 * @method static EO_Observer_Result getList(array $parameters = array())
	 * @method static EO_Observer_Entity getEntity()
	 * @method static \Bitrix\Crm\Observer\Entity\EO_Observer createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Observer\Entity\EO_Observer_Collection createCollection()
	 * @method static \Bitrix\Crm\Observer\Entity\EO_Observer wakeUpObject($row)
	 * @method static \Bitrix\Crm\Observer\Entity\EO_Observer_Collection wakeUpCollection($rows)
	 */
	class ObserverTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Observer_Result exec()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer fetchObject()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Observer_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer fetchObject()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer_Collection fetchCollection()
	 */
	class EO_Observer_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer_Collection createCollection()
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer wakeUpObject($row)
	 * @method \Bitrix\Crm\Observer\Entity\EO_Observer_Collection wakeUpCollection($rows)
	 */
	class EO_Observer_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Order\Import\Internals\ProductTable:crm/lib/order/import/internals/producttable.php:1230fcc520b5af4c4c33cfdb33164271 */
namespace Bitrix\Crm\Order\Import\Internals {
	/**
	 * EO_Product
	 * @see \Bitrix\Crm\Order\Import\Internals\ProductTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getProductId()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product setProductId(\int|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \int remindActualProductId()
	 * @method \int requireProductId()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product resetProductId()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product unsetProductId()
	 * @method \int fillProductId()
	 * @method \string getSourceName()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product setSourceName(\string|\Bitrix\Main\DB\SqlExpression $sourceName)
	 * @method bool hasSourceName()
	 * @method bool isSourceNameFilled()
	 * @method bool isSourceNameChanged()
	 * @method \string remindActualSourceName()
	 * @method \string requireSourceName()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product resetSourceName()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product unsetSourceName()
	 * @method \string fillSourceName()
	 * @method \string getSourceId()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product setSourceId(\string|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \string remindActualSourceId()
	 * @method \string requireSourceId()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product resetSourceId()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product unsetSourceId()
	 * @method \string fillSourceId()
	 * @method \string getSettings()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product resetSettings()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product unsetSettings()
	 * @method \string fillSettings()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product resetDateCreate()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product resetDateModify()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product set($fieldName, $value)
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product reset($fieldName)
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Order\Import\Internals\EO_Product wakeUp($data)
	 */
	class EO_Product {
		/* @var \Bitrix\Crm\Order\Import\Internals\ProductTable */
		static public $dataClass = '\Bitrix\Crm\Order\Import\Internals\ProductTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Order\Import\Internals {
	/**
	 * EO_Product_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getProductIdList()
	 * @method \int[] fillProductId()
	 * @method \string[] getSourceNameList()
	 * @method \string[] fillSourceName()
	 * @method \string[] getSourceIdList()
	 * @method \string[] fillSourceId()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Order\Import\Internals\EO_Product $object)
	 * @method bool has(\Bitrix\Crm\Order\Import\Internals\EO_Product $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product getByPrimary($primary)
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product[] getAll()
	 * @method bool remove(\Bitrix\Crm\Order\Import\Internals\EO_Product $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Order\Import\Internals\EO_Product_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Product_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Order\Import\Internals\ProductTable */
		static public $dataClass = '\Bitrix\Crm\Order\Import\Internals\ProductTable';
	}
}
namespace Bitrix\Crm\Order\Import\Internals {
	/**
	 * @method static EO_Product_Query query()
	 * @method static EO_Product_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Product_Result getById($id)
	 * @method static EO_Product_Result getList(array $parameters = array())
	 * @method static EO_Product_Entity getEntity()
	 * @method static \Bitrix\Crm\Order\Import\Internals\EO_Product createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Order\Import\Internals\EO_Product_Collection createCollection()
	 * @method static \Bitrix\Crm\Order\Import\Internals\EO_Product wakeUpObject($row)
	 * @method static \Bitrix\Crm\Order\Import\Internals\EO_Product_Collection wakeUpCollection($rows)
	 */
	class ProductTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Product_Result exec()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product fetchObject()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Product_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product fetchObject()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product_Collection fetchCollection()
	 */
	class EO_Product_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product_Collection createCollection()
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product wakeUpObject($row)
	 * @method \Bitrix\Crm\Order\Import\Internals\EO_Product_Collection wakeUpCollection($rows)
	 */
	class EO_Product_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Order\Matcher\Internals\FormTable:crm/lib/order/matcher/internals/formtable.php:d34f67d5c9f48ad2e73153193dafb4fa */
namespace Bitrix\Crm\Order\Matcher\Internals {
	/**
	 * EO_Form
	 * @see \Bitrix\Crm\Order\Matcher\Internals\FormTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPersonTypeId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form setPersonTypeId(\int|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \int remindActualPersonTypeId()
	 * @method \int requirePersonTypeId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form resetPersonTypeId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form unsetPersonTypeId()
	 * @method \int fillPersonTypeId()
	 * @method \string getDuplicateMode()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form setDuplicateMode(\string|\Bitrix\Main\DB\SqlExpression $duplicateMode)
	 * @method bool hasDuplicateMode()
	 * @method bool isDuplicateModeFilled()
	 * @method bool isDuplicateModeChanged()
	 * @method \string remindActualDuplicateMode()
	 * @method \string requireDuplicateMode()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form resetDuplicateMode()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form unsetDuplicateMode()
	 * @method \string fillDuplicateMode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form set($fieldName, $value)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form reset($fieldName)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Form wakeUp($data)
	 */
	class EO_Form {
		/* @var \Bitrix\Crm\Order\Matcher\Internals\FormTable */
		static public $dataClass = '\Bitrix\Crm\Order\Matcher\Internals\FormTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Order\Matcher\Internals {
	/**
	 * EO_Form_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPersonTypeIdList()
	 * @method \int[] fillPersonTypeId()
	 * @method \string[] getDuplicateModeList()
	 * @method \string[] fillDuplicateMode()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Order\Matcher\Internals\EO_Form $object)
	 * @method bool has(\Bitrix\Crm\Order\Matcher\Internals\EO_Form $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form getByPrimary($primary)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form[] getAll()
	 * @method bool remove(\Bitrix\Crm\Order\Matcher\Internals\EO_Form $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Form_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Form_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Order\Matcher\Internals\FormTable */
		static public $dataClass = '\Bitrix\Crm\Order\Matcher\Internals\FormTable';
	}
}
namespace Bitrix\Crm\Order\Matcher\Internals {
	/**
	 * @method static EO_Form_Query query()
	 * @method static EO_Form_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Form_Result getById($id)
	 * @method static EO_Form_Result getList(array $parameters = array())
	 * @method static EO_Form_Entity getEntity()
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Form createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Form_Collection createCollection()
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Form wakeUpObject($row)
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Form_Collection wakeUpCollection($rows)
	 */
	class FormTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Form_Result exec()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form fetchObject()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Form_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form fetchObject()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form_Collection fetchCollection()
	 */
	class EO_Form_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form_Collection createCollection()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form wakeUpObject($row)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Form_Collection wakeUpCollection($rows)
	 */
	class EO_Form_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Order\Matcher\Internals\OrderPropsMatchTable:crm/lib/order/matcher/internals/orderpropsmatchtable.php:26c02b1f2c33efad285d6d64f9258123 */
namespace Bitrix\Crm\Order\Matcher\Internals {
	/**
	 * EO_OrderPropsMatch
	 * @see \Bitrix\Crm\Order\Matcher\Internals\OrderPropsMatchTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getSalePropId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch setSalePropId(\int|\Bitrix\Main\DB\SqlExpression $salePropId)
	 * @method bool hasSalePropId()
	 * @method bool isSalePropIdFilled()
	 * @method bool isSalePropIdChanged()
	 * @method \int remindActualSalePropId()
	 * @method \int requireSalePropId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch resetSalePropId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch unsetSalePropId()
	 * @method \int fillSalePropId()
	 * @method \int getCrmEntityType()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch setCrmEntityType(\int|\Bitrix\Main\DB\SqlExpression $crmEntityType)
	 * @method bool hasCrmEntityType()
	 * @method bool isCrmEntityTypeFilled()
	 * @method bool isCrmEntityTypeChanged()
	 * @method \int remindActualCrmEntityType()
	 * @method \int requireCrmEntityType()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch resetCrmEntityType()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch unsetCrmEntityType()
	 * @method \int fillCrmEntityType()
	 * @method \int getCrmFieldType()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch setCrmFieldType(\int|\Bitrix\Main\DB\SqlExpression $crmFieldType)
	 * @method bool hasCrmFieldType()
	 * @method bool isCrmFieldTypeFilled()
	 * @method bool isCrmFieldTypeChanged()
	 * @method \int remindActualCrmFieldType()
	 * @method \int requireCrmFieldType()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch resetCrmFieldType()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch unsetCrmFieldType()
	 * @method \int fillCrmFieldType()
	 * @method \string getCrmFieldCode()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch setCrmFieldCode(\string|\Bitrix\Main\DB\SqlExpression $crmFieldCode)
	 * @method bool hasCrmFieldCode()
	 * @method bool isCrmFieldCodeFilled()
	 * @method bool isCrmFieldCodeChanged()
	 * @method \string remindActualCrmFieldCode()
	 * @method \string requireCrmFieldCode()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch resetCrmFieldCode()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch unsetCrmFieldCode()
	 * @method \string fillCrmFieldCode()
	 * @method \string getSettings()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch resetSettings()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch unsetSettings()
	 * @method \string fillSettings()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps getSaleProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps remindActualSaleProperty()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps requireSaleProperty()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch setSaleProperty(\Bitrix\Sale\Internals\EO_OrderProps $object)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch resetSaleProperty()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch unsetSaleProperty()
	 * @method bool hasSaleProperty()
	 * @method bool isSalePropertyFilled()
	 * @method bool isSalePropertyChanged()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps fillSaleProperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch set($fieldName, $value)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch reset($fieldName)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch wakeUp($data)
	 */
	class EO_OrderPropsMatch {
		/* @var \Bitrix\Crm\Order\Matcher\Internals\OrderPropsMatchTable */
		static public $dataClass = '\Bitrix\Crm\Order\Matcher\Internals\OrderPropsMatchTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Order\Matcher\Internals {
	/**
	 * EO_OrderPropsMatch_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getSalePropIdList()
	 * @method \int[] fillSalePropId()
	 * @method \int[] getCrmEntityTypeList()
	 * @method \int[] fillCrmEntityType()
	 * @method \int[] getCrmFieldTypeList()
	 * @method \int[] fillCrmFieldType()
	 * @method \string[] getCrmFieldCodeList()
	 * @method \string[] fillCrmFieldCode()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps[] getSalePropertyList()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch_Collection getSalePropertyCollection()
	 * @method \Bitrix\Sale\Internals\EO_OrderProps_Collection fillSaleProperty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch $object)
	 * @method bool has(\Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch getByPrimary($primary)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch[] getAll()
	 * @method bool remove(\Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_OrderPropsMatch_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Order\Matcher\Internals\OrderPropsMatchTable */
		static public $dataClass = '\Bitrix\Crm\Order\Matcher\Internals\OrderPropsMatchTable';
	}
}
namespace Bitrix\Crm\Order\Matcher\Internals {
	/**
	 * @method static EO_OrderPropsMatch_Query query()
	 * @method static EO_OrderPropsMatch_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_OrderPropsMatch_Result getById($id)
	 * @method static EO_OrderPropsMatch_Result getList(array $parameters = array())
	 * @method static EO_OrderPropsMatch_Entity getEntity()
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch_Collection createCollection()
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch wakeUpObject($row)
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch_Collection wakeUpCollection($rows)
	 */
	class OrderPropsMatchTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_OrderPropsMatch_Result exec()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch fetchObject()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_OrderPropsMatch_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch fetchObject()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch_Collection fetchCollection()
	 */
	class EO_OrderPropsMatch_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch_Collection createCollection()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch wakeUpObject($row)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_OrderPropsMatch_Collection wakeUpCollection($rows)
	 */
	class EO_OrderPropsMatch_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Order\Matcher\Internals\QueueTable:crm/lib/order/matcher/internals/queuetable.php:6e03daedcb146b244d1c73e990461740 */
namespace Bitrix\Crm\Order\Matcher\Internals {
	/**
	 * EO_Queue
	 * @see \Bitrix\Crm\Order\Matcher\Internals\QueueTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPersonTypeId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue setPersonTypeId(\int|\Bitrix\Main\DB\SqlExpression $personTypeId)
	 * @method bool hasPersonTypeId()
	 * @method bool isPersonTypeIdFilled()
	 * @method bool isPersonTypeIdChanged()
	 * @method \int remindActualPersonTypeId()
	 * @method \int requirePersonTypeId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue resetPersonTypeId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue unsetPersonTypeId()
	 * @method \int fillPersonTypeId()
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue resetUserId()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue unsetUserId()
	 * @method \int fillUserId()
	 * @method \boolean getWorkTime()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue setWorkTime(\boolean|\Bitrix\Main\DB\SqlExpression $workTime)
	 * @method bool hasWorkTime()
	 * @method bool isWorkTimeFilled()
	 * @method bool isWorkTimeChanged()
	 * @method \boolean remindActualWorkTime()
	 * @method \boolean requireWorkTime()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue resetWorkTime()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue unsetWorkTime()
	 * @method \boolean fillWorkTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue set($fieldName, $value)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue reset($fieldName)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Queue wakeUp($data)
	 */
	class EO_Queue {
		/* @var \Bitrix\Crm\Order\Matcher\Internals\QueueTable */
		static public $dataClass = '\Bitrix\Crm\Order\Matcher\Internals\QueueTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Order\Matcher\Internals {
	/**
	 * EO_Queue_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPersonTypeIdList()
	 * @method \int[] fillPersonTypeId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \boolean[] getWorkTimeList()
	 * @method \boolean[] fillWorkTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Order\Matcher\Internals\EO_Queue $object)
	 * @method bool has(\Bitrix\Crm\Order\Matcher\Internals\EO_Queue $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue getByPrimary($primary)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue[] getAll()
	 * @method bool remove(\Bitrix\Crm\Order\Matcher\Internals\EO_Queue $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Queue_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Queue_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Order\Matcher\Internals\QueueTable */
		static public $dataClass = '\Bitrix\Crm\Order\Matcher\Internals\QueueTable';
	}
}
namespace Bitrix\Crm\Order\Matcher\Internals {
	/**
	 * @method static EO_Queue_Query query()
	 * @method static EO_Queue_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Queue_Result getById($id)
	 * @method static EO_Queue_Result getList(array $parameters = array())
	 * @method static EO_Queue_Entity getEntity()
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Queue createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Queue_Collection createCollection()
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Queue wakeUpObject($row)
	 * @method static \Bitrix\Crm\Order\Matcher\Internals\EO_Queue_Collection wakeUpCollection($rows)
	 */
	class QueueTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Queue_Result exec()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue fetchObject()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Queue_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue fetchObject()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue_Collection fetchCollection()
	 */
	class EO_Queue_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue_Collection createCollection()
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue wakeUpObject($row)
	 * @method \Bitrix\Crm\Order\Matcher\Internals\EO_Queue_Collection wakeUpCollection($rows)
	 */
	class EO_Queue_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\PresetTable:crm/lib/preset.php:b76479a70a261290a307d21fae63aa81 */
namespace Bitrix\Crm {
	/**
	 * EO_Preset
	 * @see \Bitrix\Crm\PresetTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Preset setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\EO_Preset setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\EO_Preset resetEntityTypeId()
	 * @method \Bitrix\Crm\EO_Preset unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getCountryId()
	 * @method \Bitrix\Crm\EO_Preset setCountryId(\int|\Bitrix\Main\DB\SqlExpression $countryId)
	 * @method bool hasCountryId()
	 * @method bool isCountryIdFilled()
	 * @method bool isCountryIdChanged()
	 * @method \int remindActualCountryId()
	 * @method \int requireCountryId()
	 * @method \Bitrix\Crm\EO_Preset resetCountryId()
	 * @method \Bitrix\Crm\EO_Preset unsetCountryId()
	 * @method \int fillCountryId()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\EO_Preset setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\EO_Preset resetDateCreate()
	 * @method \Bitrix\Crm\EO_Preset unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Crm\EO_Preset setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Crm\EO_Preset resetDateModify()
	 * @method \Bitrix\Crm\EO_Preset unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \int getCreatedById()
	 * @method \Bitrix\Crm\EO_Preset setCreatedById(\int|\Bitrix\Main\DB\SqlExpression $createdById)
	 * @method bool hasCreatedById()
	 * @method bool isCreatedByIdFilled()
	 * @method bool isCreatedByIdChanged()
	 * @method \int remindActualCreatedById()
	 * @method \int requireCreatedById()
	 * @method \Bitrix\Crm\EO_Preset resetCreatedById()
	 * @method \Bitrix\Crm\EO_Preset unsetCreatedById()
	 * @method \int fillCreatedById()
	 * @method \int getModifyById()
	 * @method \Bitrix\Crm\EO_Preset setModifyById(\int|\Bitrix\Main\DB\SqlExpression $modifyById)
	 * @method bool hasModifyById()
	 * @method bool isModifyByIdFilled()
	 * @method bool isModifyByIdChanged()
	 * @method \int remindActualModifyById()
	 * @method \int requireModifyById()
	 * @method \Bitrix\Crm\EO_Preset resetModifyById()
	 * @method \Bitrix\Crm\EO_Preset unsetModifyById()
	 * @method \int fillModifyById()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_Preset setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_Preset resetName()
	 * @method \Bitrix\Crm\EO_Preset unsetName()
	 * @method \string fillName()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\EO_Preset setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\EO_Preset resetXmlId()
	 * @method \Bitrix\Crm\EO_Preset unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Crm\EO_Preset setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Crm\EO_Preset resetActive()
	 * @method \Bitrix\Crm\EO_Preset unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\EO_Preset setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\EO_Preset resetSort()
	 * @method \Bitrix\Crm\EO_Preset unsetSort()
	 * @method \int fillSort()
	 * @method \string getSettings()
	 * @method \Bitrix\Crm\EO_Preset setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Crm\EO_Preset resetSettings()
	 * @method \Bitrix\Crm\EO_Preset unsetSettings()
	 * @method \string fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Preset set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Preset reset($fieldName)
	 * @method \Bitrix\Crm\EO_Preset unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Preset wakeUp($data)
	 */
	class EO_Preset {
		/* @var \Bitrix\Crm\PresetTable */
		static public $dataClass = '\Bitrix\Crm\PresetTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Preset_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getCountryIdList()
	 * @method \int[] fillCountryId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \int[] getCreatedByIdList()
	 * @method \int[] fillCreatedById()
	 * @method \int[] getModifyByIdList()
	 * @method \int[] fillModifyById()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Preset $object)
	 * @method bool has(\Bitrix\Crm\EO_Preset $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Preset getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Preset[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Preset $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Preset_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Preset current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Preset_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\PresetTable */
		static public $dataClass = '\Bitrix\Crm\PresetTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Preset_Query query()
	 * @method static EO_Preset_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Preset_Result getById($id)
	 * @method static EO_Preset_Result getList(array $parameters = array())
	 * @method static EO_Preset_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Preset createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Preset_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Preset wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Preset_Collection wakeUpCollection($rows)
	 */
	class PresetTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Preset_Result exec()
	 * @method \Bitrix\Crm\EO_Preset fetchObject()
	 * @method \Bitrix\Crm\EO_Preset_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Preset_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Preset fetchObject()
	 * @method \Bitrix\Crm\EO_Preset_Collection fetchCollection()
	 */
	class EO_Preset_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Preset createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Preset_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Preset wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Preset_Collection wakeUpCollection($rows)
	 */
	class EO_Preset_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\ProductTable:crm/lib/product.php:f57298849d2c2171bad4d35fdb1b0b9d */
namespace Bitrix\Crm {
	/**
	 * EO_Product
	 * @see \Bitrix\Crm\ProductTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Product setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy getIblockElement()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy remindActualIblockElement()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy requireIblockElement()
	 * @method \Bitrix\Crm\EO_Product setIblockElement(\Bitrix\Crm\EO_IBlockElementProxy $object)
	 * @method \Bitrix\Crm\EO_Product resetIblockElement()
	 * @method \Bitrix\Crm\EO_Product unsetIblockElement()
	 * @method bool hasIblockElement()
	 * @method bool isIblockElementFilled()
	 * @method bool isIblockElementChanged()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy fillIblockElement()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy getIblockElementGrc()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy remindActualIblockElementGrc()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy requireIblockElementGrc()
	 * @method \Bitrix\Crm\EO_Product setIblockElementGrc(\Bitrix\Crm\EO_IBlockElementGrcProxy $object)
	 * @method \Bitrix\Crm\EO_Product resetIblockElementGrc()
	 * @method \Bitrix\Crm\EO_Product unsetIblockElementGrc()
	 * @method bool hasIblockElementGrc()
	 * @method bool isIblockElementGrcFilled()
	 * @method bool isIblockElementGrcChanged()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy fillIblockElementGrc()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Product set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Product reset($fieldName)
	 * @method \Bitrix\Crm\EO_Product unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Product wakeUp($data)
	 */
	class EO_Product {
		/* @var \Bitrix\Crm\ProductTable */
		static public $dataClass = '\Bitrix\Crm\ProductTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Product_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy[] getIblockElementList()
	 * @method \Bitrix\Crm\EO_Product_Collection getIblockElementCollection()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy_Collection fillIblockElement()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy[] getIblockElementGrcList()
	 * @method \Bitrix\Crm\EO_Product_Collection getIblockElementGrcCollection()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy_Collection fillIblockElementGrc()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Product $object)
	 * @method bool has(\Bitrix\Crm\EO_Product $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Product getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Product[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Product $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Product_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Product current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Product_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\ProductTable */
		static public $dataClass = '\Bitrix\Crm\ProductTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Product_Query query()
	 * @method static EO_Product_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Product_Result getById($id)
	 * @method static EO_Product_Result getList(array $parameters = array())
	 * @method static EO_Product_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Product createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Product_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Product wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Product_Collection wakeUpCollection($rows)
	 */
	class ProductTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Product_Result exec()
	 * @method \Bitrix\Crm\EO_Product fetchObject()
	 * @method \Bitrix\Crm\EO_Product_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Product_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Product fetchObject()
	 * @method \Bitrix\Crm\EO_Product_Collection fetchCollection()
	 */
	class EO_Product_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Product createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Product_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Product wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Product_Collection wakeUpCollection($rows)
	 */
	class EO_Product_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\ProductRowTable:crm/lib/productrow.php:88b254d9670f946780b6fcf56d2006fa */
namespace Bitrix\Crm {
	/**
	 * EO_ProductRow
	 * @see \Bitrix\Crm\ProductRowTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_ProductRow setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\EO_ProductRow setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\EO_ProductRow resetOwnerId()
	 * @method \Bitrix\Crm\EO_ProductRow unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \string getOwnerType()
	 * @method \Bitrix\Crm\EO_ProductRow setOwnerType(\string|\Bitrix\Main\DB\SqlExpression $ownerType)
	 * @method bool hasOwnerType()
	 * @method bool isOwnerTypeFilled()
	 * @method bool isOwnerTypeChanged()
	 * @method \string remindActualOwnerType()
	 * @method \string requireOwnerType()
	 * @method \Bitrix\Crm\EO_ProductRow resetOwnerType()
	 * @method \Bitrix\Crm\EO_ProductRow unsetOwnerType()
	 * @method \string fillOwnerType()
	 * @method \Bitrix\Crm\EO_Deal getOwner()
	 * @method \Bitrix\Crm\EO_Deal remindActualOwner()
	 * @method \Bitrix\Crm\EO_Deal requireOwner()
	 * @method \Bitrix\Crm\EO_ProductRow setOwner(\Bitrix\Crm\EO_Deal $object)
	 * @method \Bitrix\Crm\EO_ProductRow resetOwner()
	 * @method \Bitrix\Crm\EO_ProductRow unsetOwner()
	 * @method bool hasOwner()
	 * @method bool isOwnerFilled()
	 * @method bool isOwnerChanged()
	 * @method \Bitrix\Crm\EO_Deal fillOwner()
	 * @method \Bitrix\Crm\EO_Deal getDealOwner()
	 * @method \Bitrix\Crm\EO_Deal remindActualDealOwner()
	 * @method \Bitrix\Crm\EO_Deal requireDealOwner()
	 * @method \Bitrix\Crm\EO_ProductRow setDealOwner(\Bitrix\Crm\EO_Deal $object)
	 * @method \Bitrix\Crm\EO_ProductRow resetDealOwner()
	 * @method \Bitrix\Crm\EO_ProductRow unsetDealOwner()
	 * @method bool hasDealOwner()
	 * @method bool isDealOwnerFilled()
	 * @method bool isDealOwnerChanged()
	 * @method \Bitrix\Crm\EO_Deal fillDealOwner()
	 * @method \Bitrix\Crm\EO_Lead getLeadOwner()
	 * @method \Bitrix\Crm\EO_Lead remindActualLeadOwner()
	 * @method \Bitrix\Crm\EO_Lead requireLeadOwner()
	 * @method \Bitrix\Crm\EO_ProductRow setLeadOwner(\Bitrix\Crm\EO_Lead $object)
	 * @method \Bitrix\Crm\EO_ProductRow resetLeadOwner()
	 * @method \Bitrix\Crm\EO_ProductRow unsetLeadOwner()
	 * @method bool hasLeadOwner()
	 * @method bool isLeadOwnerFilled()
	 * @method bool isLeadOwnerChanged()
	 * @method \Bitrix\Crm\EO_Lead fillLeadOwner()
	 * @method \int getProductId()
	 * @method \Bitrix\Crm\EO_ProductRow setProductId(\int|\Bitrix\Main\DB\SqlExpression $productId)
	 * @method bool hasProductId()
	 * @method bool isProductIdFilled()
	 * @method bool isProductIdChanged()
	 * @method \int remindActualProductId()
	 * @method \int requireProductId()
	 * @method \Bitrix\Crm\EO_ProductRow resetProductId()
	 * @method \Bitrix\Crm\EO_ProductRow unsetProductId()
	 * @method \int fillProductId()
	 * @method \string getProductName()
	 * @method \Bitrix\Crm\EO_ProductRow setProductName(\string|\Bitrix\Main\DB\SqlExpression $productName)
	 * @method bool hasProductName()
	 * @method bool isProductNameFilled()
	 * @method bool isProductNameChanged()
	 * @method \string remindActualProductName()
	 * @method \string requireProductName()
	 * @method \Bitrix\Crm\EO_ProductRow resetProductName()
	 * @method \Bitrix\Crm\EO_ProductRow unsetProductName()
	 * @method \string fillProductName()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy getIblockElement()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy remindActualIblockElement()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy requireIblockElement()
	 * @method \Bitrix\Crm\EO_ProductRow setIblockElement(\Bitrix\Crm\EO_IBlockElementProxy $object)
	 * @method \Bitrix\Crm\EO_ProductRow resetIblockElement()
	 * @method \Bitrix\Crm\EO_ProductRow unsetIblockElement()
	 * @method bool hasIblockElement()
	 * @method bool isIblockElementFilled()
	 * @method bool isIblockElementChanged()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy fillIblockElement()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy getIblockElementGrc()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy remindActualIblockElementGrc()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy requireIblockElementGrc()
	 * @method \Bitrix\Crm\EO_ProductRow setIblockElementGrc(\Bitrix\Crm\EO_IBlockElementGrcProxy $object)
	 * @method \Bitrix\Crm\EO_ProductRow resetIblockElementGrc()
	 * @method \Bitrix\Crm\EO_ProductRow unsetIblockElementGrc()
	 * @method bool hasIblockElementGrc()
	 * @method bool isIblockElementGrcFilled()
	 * @method bool isIblockElementGrcChanged()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy fillIblockElementGrc()
	 * @method \string getCpProductName()
	 * @method \string remindActualCpProductName()
	 * @method \string requireCpProductName()
	 * @method bool hasCpProductName()
	 * @method bool isCpProductNameFilled()
	 * @method \Bitrix\Crm\EO_ProductRow unsetCpProductName()
	 * @method \string fillCpProductName()
	 * @method \int getPrice()
	 * @method \Bitrix\Crm\EO_ProductRow setPrice(\int|\Bitrix\Main\DB\SqlExpression $price)
	 * @method bool hasPrice()
	 * @method bool isPriceFilled()
	 * @method bool isPriceChanged()
	 * @method \int remindActualPrice()
	 * @method \int requirePrice()
	 * @method \Bitrix\Crm\EO_ProductRow resetPrice()
	 * @method \Bitrix\Crm\EO_ProductRow unsetPrice()
	 * @method \int fillPrice()
	 * @method \int getPriceAccount()
	 * @method \Bitrix\Crm\EO_ProductRow setPriceAccount(\int|\Bitrix\Main\DB\SqlExpression $priceAccount)
	 * @method bool hasPriceAccount()
	 * @method bool isPriceAccountFilled()
	 * @method bool isPriceAccountChanged()
	 * @method \int remindActualPriceAccount()
	 * @method \int requirePriceAccount()
	 * @method \Bitrix\Crm\EO_ProductRow resetPriceAccount()
	 * @method \Bitrix\Crm\EO_ProductRow unsetPriceAccount()
	 * @method \int fillPriceAccount()
	 * @method \float getQuantity()
	 * @method \Bitrix\Crm\EO_ProductRow setQuantity(\float|\Bitrix\Main\DB\SqlExpression $quantity)
	 * @method bool hasQuantity()
	 * @method bool isQuantityFilled()
	 * @method bool isQuantityChanged()
	 * @method \float remindActualQuantity()
	 * @method \float requireQuantity()
	 * @method \Bitrix\Crm\EO_ProductRow resetQuantity()
	 * @method \Bitrix\Crm\EO_ProductRow unsetQuantity()
	 * @method \float fillQuantity()
	 * @method \int getSumAccount()
	 * @method \int remindActualSumAccount()
	 * @method \int requireSumAccount()
	 * @method bool hasSumAccount()
	 * @method bool isSumAccountFilled()
	 * @method \Bitrix\Crm\EO_ProductRow unsetSumAccount()
	 * @method \int fillSumAccount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_ProductRow set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_ProductRow reset($fieldName)
	 * @method \Bitrix\Crm\EO_ProductRow unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_ProductRow wakeUp($data)
	 */
	class EO_ProductRow {
		/* @var \Bitrix\Crm\ProductRowTable */
		static public $dataClass = '\Bitrix\Crm\ProductRowTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_ProductRow_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \string[] getOwnerTypeList()
	 * @method \string[] fillOwnerType()
	 * @method \Bitrix\Crm\EO_Deal[] getOwnerList()
	 * @method \Bitrix\Crm\EO_ProductRow_Collection getOwnerCollection()
	 * @method \Bitrix\Crm\EO_Deal_Collection fillOwner()
	 * @method \Bitrix\Crm\EO_Deal[] getDealOwnerList()
	 * @method \Bitrix\Crm\EO_ProductRow_Collection getDealOwnerCollection()
	 * @method \Bitrix\Crm\EO_Deal_Collection fillDealOwner()
	 * @method \Bitrix\Crm\EO_Lead[] getLeadOwnerList()
	 * @method \Bitrix\Crm\EO_ProductRow_Collection getLeadOwnerCollection()
	 * @method \Bitrix\Crm\EO_Lead_Collection fillLeadOwner()
	 * @method \int[] getProductIdList()
	 * @method \int[] fillProductId()
	 * @method \string[] getProductNameList()
	 * @method \string[] fillProductName()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy[] getIblockElementList()
	 * @method \Bitrix\Crm\EO_ProductRow_Collection getIblockElementCollection()
	 * @method \Bitrix\Crm\EO_IBlockElementProxy_Collection fillIblockElement()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy[] getIblockElementGrcList()
	 * @method \Bitrix\Crm\EO_ProductRow_Collection getIblockElementGrcCollection()
	 * @method \Bitrix\Crm\EO_IBlockElementGrcProxy_Collection fillIblockElementGrc()
	 * @method \string[] getCpProductNameList()
	 * @method \string[] fillCpProductName()
	 * @method \int[] getPriceList()
	 * @method \int[] fillPrice()
	 * @method \int[] getPriceAccountList()
	 * @method \int[] fillPriceAccount()
	 * @method \float[] getQuantityList()
	 * @method \float[] fillQuantity()
	 * @method \int[] getSumAccountList()
	 * @method \int[] fillSumAccount()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_ProductRow $object)
	 * @method bool has(\Bitrix\Crm\EO_ProductRow $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_ProductRow getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_ProductRow[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_ProductRow $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_ProductRow_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_ProductRow current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ProductRow_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\ProductRowTable */
		static public $dataClass = '\Bitrix\Crm\ProductRowTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_ProductRow_Query query()
	 * @method static EO_ProductRow_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ProductRow_Result getById($id)
	 * @method static EO_ProductRow_Result getList(array $parameters = array())
	 * @method static EO_ProductRow_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_ProductRow createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_ProductRow_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_ProductRow wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_ProductRow_Collection wakeUpCollection($rows)
	 */
	class ProductRowTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ProductRow_Result exec()
	 * @method \Bitrix\Crm\EO_ProductRow fetchObject()
	 * @method \Bitrix\Crm\EO_ProductRow_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ProductRow_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_ProductRow fetchObject()
	 * @method \Bitrix\Crm\EO_ProductRow_Collection fetchCollection()
	 */
	class EO_ProductRow_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_ProductRow createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_ProductRow_Collection createCollection()
	 * @method \Bitrix\Crm\EO_ProductRow wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_ProductRow_Collection wakeUpCollection($rows)
	 */
	class EO_ProductRow_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Pseudoactivity\Entity\WaitTable:crm/lib/pseudoactivity/entity/wait.php:d6bbbcedb25b8f17449bce687d26671d */
namespace Bitrix\Crm\Pseudoactivity\Entity {
	/**
	 * EO_Wait
	 * @see \Bitrix\Crm\Pseudoactivity\Entity\WaitTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait resetOwnerId()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \int getOwnerTypeId()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait setOwnerTypeId(\int|\Bitrix\Main\DB\SqlExpression $ownerTypeId)
	 * @method bool hasOwnerTypeId()
	 * @method bool isOwnerTypeIdFilled()
	 * @method bool isOwnerTypeIdChanged()
	 * @method \int remindActualOwnerTypeId()
	 * @method \int requireOwnerTypeId()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait resetOwnerTypeId()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait unsetOwnerTypeId()
	 * @method \int fillOwnerTypeId()
	 * @method \int getAuthorId()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait setAuthorId(\int|\Bitrix\Main\DB\SqlExpression $authorId)
	 * @method bool hasAuthorId()
	 * @method bool isAuthorIdFilled()
	 * @method bool isAuthorIdChanged()
	 * @method \int remindActualAuthorId()
	 * @method \int requireAuthorId()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait resetAuthorId()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait unsetAuthorId()
	 * @method \int fillAuthorId()
	 * @method \Bitrix\Main\Type\DateTime getStartTime()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait setStartTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $startTime)
	 * @method bool hasStartTime()
	 * @method bool isStartTimeFilled()
	 * @method bool isStartTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualStartTime()
	 * @method \Bitrix\Main\Type\DateTime requireStartTime()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait resetStartTime()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait unsetStartTime()
	 * @method \Bitrix\Main\Type\DateTime fillStartTime()
	 * @method \Bitrix\Main\Type\DateTime getEndTime()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait setEndTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $endTime)
	 * @method bool hasEndTime()
	 * @method bool isEndTimeFilled()
	 * @method bool isEndTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualEndTime()
	 * @method \Bitrix\Main\Type\DateTime requireEndTime()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait resetEndTime()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait unsetEndTime()
	 * @method \Bitrix\Main\Type\DateTime fillEndTime()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait resetCreated()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \boolean getCompleted()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait setCompleted(\boolean|\Bitrix\Main\DB\SqlExpression $completed)
	 * @method bool hasCompleted()
	 * @method bool isCompletedFilled()
	 * @method bool isCompletedChanged()
	 * @method \boolean remindActualCompleted()
	 * @method \boolean requireCompleted()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait resetCompleted()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait unsetCompleted()
	 * @method \boolean fillCompleted()
	 * @method \string getDescription()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait resetDescription()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait unsetDescription()
	 * @method \string fillDescription()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait set($fieldName, $value)
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait reset($fieldName)
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait wakeUp($data)
	 */
	class EO_Wait {
		/* @var \Bitrix\Crm\Pseudoactivity\Entity\WaitTable */
		static public $dataClass = '\Bitrix\Crm\Pseudoactivity\Entity\WaitTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Pseudoactivity\Entity {
	/**
	 * EO_Wait_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \int[] getOwnerTypeIdList()
	 * @method \int[] fillOwnerTypeId()
	 * @method \int[] getAuthorIdList()
	 * @method \int[] fillAuthorId()
	 * @method \Bitrix\Main\Type\DateTime[] getStartTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillStartTime()
	 * @method \Bitrix\Main\Type\DateTime[] getEndTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillEndTime()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \boolean[] getCompletedList()
	 * @method \boolean[] fillCompleted()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Pseudoactivity\Entity\EO_Wait $object)
	 * @method bool has(\Bitrix\Crm\Pseudoactivity\Entity\EO_Wait $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait getByPrimary($primary)
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait[] getAll()
	 * @method bool remove(\Bitrix\Crm\Pseudoactivity\Entity\EO_Wait $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Wait_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Pseudoactivity\Entity\WaitTable */
		static public $dataClass = '\Bitrix\Crm\Pseudoactivity\Entity\WaitTable';
	}
}
namespace Bitrix\Crm\Pseudoactivity\Entity {
	/**
	 * @method static EO_Wait_Query query()
	 * @method static EO_Wait_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Wait_Result getById($id)
	 * @method static EO_Wait_Result getList(array $parameters = array())
	 * @method static EO_Wait_Entity getEntity()
	 * @method static \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait_Collection createCollection()
	 * @method static \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait wakeUpObject($row)
	 * @method static \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait_Collection wakeUpCollection($rows)
	 */
	class WaitTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Wait_Result exec()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait fetchObject()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Wait_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait fetchObject()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait_Collection fetchCollection()
	 */
	class EO_Wait_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait_Collection createCollection()
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait wakeUpObject($row)
	 * @method \Bitrix\Crm\Pseudoactivity\Entity\EO_Wait_Collection wakeUpCollection($rows)
	 */
	class EO_Wait_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\QuoteTable:crm/lib/quote.php:d597ed39904043f040ba5d44961e842f */
namespace Bitrix\Crm {
	/**
	 * EO_Quote
	 * @see \Bitrix\Crm\QuoteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Quote setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getTitle()
	 * @method \Bitrix\Crm\EO_Quote setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Crm\EO_Quote resetTitle()
	 * @method \Bitrix\Crm\EO_Quote unsetTitle()
	 * @method \string fillTitle()
	 * @method \int getOpportunity()
	 * @method \Bitrix\Crm\EO_Quote setOpportunity(\int|\Bitrix\Main\DB\SqlExpression $opportunity)
	 * @method bool hasOpportunity()
	 * @method bool isOpportunityFilled()
	 * @method bool isOpportunityChanged()
	 * @method \int remindActualOpportunity()
	 * @method \int requireOpportunity()
	 * @method \Bitrix\Crm\EO_Quote resetOpportunity()
	 * @method \Bitrix\Crm\EO_Quote unsetOpportunity()
	 * @method \int fillOpportunity()
	 * @method \float getCurrencyId()
	 * @method \Bitrix\Crm\EO_Quote setCurrencyId(\float|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \float remindActualCurrencyId()
	 * @method \float requireCurrencyId()
	 * @method \Bitrix\Crm\EO_Quote resetCurrencyId()
	 * @method \Bitrix\Crm\EO_Quote unsetCurrencyId()
	 * @method \float fillCurrencyId()
	 * @method \float getOpportunityAccount()
	 * @method \Bitrix\Crm\EO_Quote setOpportunityAccount(\float|\Bitrix\Main\DB\SqlExpression $opportunityAccount)
	 * @method bool hasOpportunityAccount()
	 * @method bool isOpportunityAccountFilled()
	 * @method bool isOpportunityAccountChanged()
	 * @method \float remindActualOpportunityAccount()
	 * @method \float requireOpportunityAccount()
	 * @method \Bitrix\Crm\EO_Quote resetOpportunityAccount()
	 * @method \Bitrix\Crm\EO_Quote unsetOpportunityAccount()
	 * @method \float fillOpportunityAccount()
	 * @method \string getAccountCurrencyId()
	 * @method \Bitrix\Crm\EO_Quote setAccountCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $accountCurrencyId)
	 * @method bool hasAccountCurrencyId()
	 * @method bool isAccountCurrencyIdFilled()
	 * @method bool isAccountCurrencyIdChanged()
	 * @method \string remindActualAccountCurrencyId()
	 * @method \string requireAccountCurrencyId()
	 * @method \Bitrix\Crm\EO_Quote resetAccountCurrencyId()
	 * @method \Bitrix\Crm\EO_Quote unsetAccountCurrencyId()
	 * @method \string fillAccountCurrencyId()
	 * @method \float getExchRate()
	 * @method \Bitrix\Crm\EO_Quote setExchRate(\float|\Bitrix\Main\DB\SqlExpression $exchRate)
	 * @method bool hasExchRate()
	 * @method bool isExchRateFilled()
	 * @method bool isExchRateChanged()
	 * @method \float remindActualExchRate()
	 * @method \float requireExchRate()
	 * @method \Bitrix\Crm\EO_Quote resetExchRate()
	 * @method \Bitrix\Crm\EO_Quote unsetExchRate()
	 * @method \float fillExchRate()
	 * @method \string getQuoteNumber()
	 * @method \Bitrix\Crm\EO_Quote setQuoteNumber(\string|\Bitrix\Main\DB\SqlExpression $quoteNumber)
	 * @method bool hasQuoteNumber()
	 * @method bool isQuoteNumberFilled()
	 * @method bool isQuoteNumberChanged()
	 * @method \string remindActualQuoteNumber()
	 * @method \string requireQuoteNumber()
	 * @method \Bitrix\Crm\EO_Quote resetQuoteNumber()
	 * @method \Bitrix\Crm\EO_Quote unsetQuoteNumber()
	 * @method \string fillQuoteNumber()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\EO_Quote setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\EO_Quote resetStatusId()
	 * @method \Bitrix\Crm\EO_Quote unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \boolean getClosed()
	 * @method \Bitrix\Crm\EO_Quote setClosed(\boolean|\Bitrix\Main\DB\SqlExpression $closed)
	 * @method bool hasClosed()
	 * @method bool isClosedFilled()
	 * @method bool isClosedChanged()
	 * @method \boolean remindActualClosed()
	 * @method \boolean requireClosed()
	 * @method \Bitrix\Crm\EO_Quote resetClosed()
	 * @method \Bitrix\Crm\EO_Quote unsetClosed()
	 * @method \boolean fillClosed()
	 * @method \string getComments()
	 * @method \Bitrix\Crm\EO_Quote setComments(\string|\Bitrix\Main\DB\SqlExpression $comments)
	 * @method bool hasComments()
	 * @method bool isCommentsFilled()
	 * @method bool isCommentsChanged()
	 * @method \string remindActualComments()
	 * @method \string requireComments()
	 * @method \Bitrix\Crm\EO_Quote resetComments()
	 * @method \Bitrix\Crm\EO_Quote unsetComments()
	 * @method \string fillComments()
	 * @method \Bitrix\Main\Type\DateTime getBegindate()
	 * @method \Bitrix\Crm\EO_Quote setBegindate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $begindate)
	 * @method bool hasBegindate()
	 * @method bool isBegindateFilled()
	 * @method bool isBegindateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualBegindate()
	 * @method \Bitrix\Main\Type\DateTime requireBegindate()
	 * @method \Bitrix\Crm\EO_Quote resetBegindate()
	 * @method \Bitrix\Crm\EO_Quote unsetBegindate()
	 * @method \Bitrix\Main\Type\DateTime fillBegindate()
	 * @method \Bitrix\Main\Type\DateTime getBegindateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualBegindateShort()
	 * @method \Bitrix\Main\Type\DateTime requireBegindateShort()
	 * @method bool hasBegindateShort()
	 * @method bool isBegindateShortFilled()
	 * @method \Bitrix\Crm\EO_Quote unsetBegindateShort()
	 * @method \Bitrix\Main\Type\DateTime fillBegindateShort()
	 * @method \Bitrix\Main\Type\DateTime getClosedate()
	 * @method \Bitrix\Crm\EO_Quote setClosedate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $closedate)
	 * @method bool hasClosedate()
	 * @method bool isClosedateFilled()
	 * @method bool isClosedateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualClosedate()
	 * @method \Bitrix\Main\Type\DateTime requireClosedate()
	 * @method \Bitrix\Crm\EO_Quote resetClosedate()
	 * @method \Bitrix\Crm\EO_Quote unsetClosedate()
	 * @method \Bitrix\Main\Type\DateTime fillClosedate()
	 * @method \Bitrix\Main\Type\DateTime getClosedateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualClosedateShort()
	 * @method \Bitrix\Main\Type\DateTime requireClosedateShort()
	 * @method bool hasClosedateShort()
	 * @method bool isClosedateShortFilled()
	 * @method \Bitrix\Crm\EO_Quote unsetClosedateShort()
	 * @method \Bitrix\Main\Type\DateTime fillClosedateShort()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\EO_Quote setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\EO_Quote resetDateCreate()
	 * @method \Bitrix\Crm\EO_Quote unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreateShort()
	 * @method bool hasDateCreateShort()
	 * @method bool isDateCreateShortFilled()
	 * @method \Bitrix\Crm\EO_Quote unsetDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Crm\EO_Quote setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Crm\EO_Quote resetDateModify()
	 * @method \Bitrix\Crm\EO_Quote unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \Bitrix\Main\Type\DateTime getDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime requireDateModifyShort()
	 * @method bool hasDateModifyShort()
	 * @method bool isDateModifyShortFilled()
	 * @method \Bitrix\Crm\EO_Quote unsetDateModifyShort()
	 * @method \Bitrix\Main\Type\DateTime fillDateModifyShort()
	 * @method \int getAssignedById()
	 * @method \Bitrix\Crm\EO_Quote setAssignedById(\int|\Bitrix\Main\DB\SqlExpression $assignedById)
	 * @method bool hasAssignedById()
	 * @method bool isAssignedByIdFilled()
	 * @method bool isAssignedByIdChanged()
	 * @method \int remindActualAssignedById()
	 * @method \int requireAssignedById()
	 * @method \Bitrix\Crm\EO_Quote resetAssignedById()
	 * @method \Bitrix\Crm\EO_Quote unsetAssignedById()
	 * @method \int fillAssignedById()
	 * @method \Bitrix\Main\EO_User getAssignedBy()
	 * @method \Bitrix\Main\EO_User remindActualAssignedBy()
	 * @method \Bitrix\Main\EO_User requireAssignedBy()
	 * @method \Bitrix\Crm\EO_Quote setAssignedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Quote resetAssignedBy()
	 * @method \Bitrix\Crm\EO_Quote unsetAssignedBy()
	 * @method bool hasAssignedBy()
	 * @method bool isAssignedByFilled()
	 * @method bool isAssignedByChanged()
	 * @method \Bitrix\Main\EO_User fillAssignedBy()
	 * @method \int getCreatedById()
	 * @method \Bitrix\Crm\EO_Quote setCreatedById(\int|\Bitrix\Main\DB\SqlExpression $createdById)
	 * @method bool hasCreatedById()
	 * @method bool isCreatedByIdFilled()
	 * @method bool isCreatedByIdChanged()
	 * @method \int remindActualCreatedById()
	 * @method \int requireCreatedById()
	 * @method \Bitrix\Crm\EO_Quote resetCreatedById()
	 * @method \Bitrix\Crm\EO_Quote unsetCreatedById()
	 * @method \int fillCreatedById()
	 * @method \Bitrix\Main\EO_User getCreatedBy()
	 * @method \Bitrix\Main\EO_User remindActualCreatedBy()
	 * @method \Bitrix\Main\EO_User requireCreatedBy()
	 * @method \Bitrix\Crm\EO_Quote setCreatedBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Quote resetCreatedBy()
	 * @method \Bitrix\Crm\EO_Quote unsetCreatedBy()
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \Bitrix\Main\EO_User fillCreatedBy()
	 * @method \int getModifyById()
	 * @method \Bitrix\Crm\EO_Quote setModifyById(\int|\Bitrix\Main\DB\SqlExpression $modifyById)
	 * @method bool hasModifyById()
	 * @method bool isModifyByIdFilled()
	 * @method bool isModifyByIdChanged()
	 * @method \int remindActualModifyById()
	 * @method \int requireModifyById()
	 * @method \Bitrix\Crm\EO_Quote resetModifyById()
	 * @method \Bitrix\Crm\EO_Quote unsetModifyById()
	 * @method \int fillModifyById()
	 * @method \Bitrix\Main\EO_User getModifyBy()
	 * @method \Bitrix\Main\EO_User remindActualModifyBy()
	 * @method \Bitrix\Main\EO_User requireModifyBy()
	 * @method \Bitrix\Crm\EO_Quote setModifyBy(\Bitrix\Main\EO_User $object)
	 * @method \Bitrix\Crm\EO_Quote resetModifyBy()
	 * @method \Bitrix\Crm\EO_Quote unsetModifyBy()
	 * @method bool hasModifyBy()
	 * @method bool isModifyByFilled()
	 * @method bool isModifyByChanged()
	 * @method \Bitrix\Main\EO_User fillModifyBy()
	 * @method \int getDealId()
	 * @method \Bitrix\Crm\EO_Quote setDealId(\int|\Bitrix\Main\DB\SqlExpression $dealId)
	 * @method bool hasDealId()
	 * @method bool isDealIdFilled()
	 * @method bool isDealIdChanged()
	 * @method \int remindActualDealId()
	 * @method \int requireDealId()
	 * @method \Bitrix\Crm\EO_Quote resetDealId()
	 * @method \Bitrix\Crm\EO_Quote unsetDealId()
	 * @method \int fillDealId()
	 * @method \int getLeadId()
	 * @method \Bitrix\Crm\EO_Quote setLeadId(\int|\Bitrix\Main\DB\SqlExpression $leadId)
	 * @method bool hasLeadId()
	 * @method bool isLeadIdFilled()
	 * @method bool isLeadIdChanged()
	 * @method \int remindActualLeadId()
	 * @method \int requireLeadId()
	 * @method \Bitrix\Crm\EO_Quote resetLeadId()
	 * @method \Bitrix\Crm\EO_Quote unsetLeadId()
	 * @method \int fillLeadId()
	 * @method \Bitrix\Crm\EO_Lead getLeadBy()
	 * @method \Bitrix\Crm\EO_Lead remindActualLeadBy()
	 * @method \Bitrix\Crm\EO_Lead requireLeadBy()
	 * @method \Bitrix\Crm\EO_Quote setLeadBy(\Bitrix\Crm\EO_Lead $object)
	 * @method \Bitrix\Crm\EO_Quote resetLeadBy()
	 * @method \Bitrix\Crm\EO_Quote unsetLeadBy()
	 * @method bool hasLeadBy()
	 * @method bool isLeadByFilled()
	 * @method bool isLeadByChanged()
	 * @method \Bitrix\Crm\EO_Lead fillLeadBy()
	 * @method \int getContactId()
	 * @method \Bitrix\Crm\EO_Quote setContactId(\int|\Bitrix\Main\DB\SqlExpression $contactId)
	 * @method bool hasContactId()
	 * @method bool isContactIdFilled()
	 * @method bool isContactIdChanged()
	 * @method \int remindActualContactId()
	 * @method \int requireContactId()
	 * @method \Bitrix\Crm\EO_Quote resetContactId()
	 * @method \Bitrix\Crm\EO_Quote unsetContactId()
	 * @method \int fillContactId()
	 * @method \Bitrix\Crm\EO_Contact getContactBy()
	 * @method \Bitrix\Crm\EO_Contact remindActualContactBy()
	 * @method \Bitrix\Crm\EO_Contact requireContactBy()
	 * @method \Bitrix\Crm\EO_Quote setContactBy(\Bitrix\Crm\EO_Contact $object)
	 * @method \Bitrix\Crm\EO_Quote resetContactBy()
	 * @method \Bitrix\Crm\EO_Quote unsetContactBy()
	 * @method bool hasContactBy()
	 * @method bool isContactByFilled()
	 * @method bool isContactByChanged()
	 * @method \Bitrix\Crm\EO_Contact fillContactBy()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Crm\EO_Quote setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Crm\EO_Quote resetCompanyId()
	 * @method \Bitrix\Crm\EO_Quote unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \Bitrix\Crm\EO_Company getCompanyBy()
	 * @method \Bitrix\Crm\EO_Company remindActualCompanyBy()
	 * @method \Bitrix\Crm\EO_Company requireCompanyBy()
	 * @method \Bitrix\Crm\EO_Quote setCompanyBy(\Bitrix\Crm\EO_Company $object)
	 * @method \Bitrix\Crm\EO_Quote resetCompanyBy()
	 * @method \Bitrix\Crm\EO_Quote unsetCompanyBy()
	 * @method bool hasCompanyBy()
	 * @method bool isCompanyByFilled()
	 * @method bool isCompanyByChanged()
	 * @method \Bitrix\Crm\EO_Company fillCompanyBy()
	 * @method \boolean getHasProducts()
	 * @method \boolean remindActualHasProducts()
	 * @method \boolean requireHasProducts()
	 * @method bool hasHasProducts()
	 * @method bool isHasProductsFilled()
	 * @method \Bitrix\Crm\EO_Quote unsetHasProducts()
	 * @method \boolean fillHasProducts()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Crm\EO_Quote setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Crm\EO_Quote resetSearchContent()
	 * @method \Bitrix\Crm\EO_Quote unsetSearchContent()
	 * @method \string fillSearchContent()
	 * @method \Bitrix\Crm\EO_QuoteElement getElements()
	 * @method \Bitrix\Crm\EO_QuoteElement remindActualElements()
	 * @method \Bitrix\Crm\EO_QuoteElement requireElements()
	 * @method \Bitrix\Crm\EO_Quote setElements(\Bitrix\Crm\EO_QuoteElement $object)
	 * @method \Bitrix\Crm\EO_Quote resetElements()
	 * @method \Bitrix\Crm\EO_Quote unsetElements()
	 * @method bool hasElements()
	 * @method bool isElementsFilled()
	 * @method bool isElementsChanged()
	 * @method \Bitrix\Crm\EO_QuoteElement fillElements()
	 * @method \int getMycompanyId()
	 * @method \Bitrix\Crm\EO_Quote setMycompanyId(\int|\Bitrix\Main\DB\SqlExpression $mycompanyId)
	 * @method bool hasMycompanyId()
	 * @method bool isMycompanyIdFilled()
	 * @method bool isMycompanyIdChanged()
	 * @method \int remindActualMycompanyId()
	 * @method \int requireMycompanyId()
	 * @method \Bitrix\Crm\EO_Quote resetMycompanyId()
	 * @method \Bitrix\Crm\EO_Quote unsetMycompanyId()
	 * @method \int fillMycompanyId()
	 * @method \string getLocationId()
	 * @method \Bitrix\Crm\EO_Quote setLocationId(\string|\Bitrix\Main\DB\SqlExpression $locationId)
	 * @method bool hasLocationId()
	 * @method bool isLocationIdFilled()
	 * @method bool isLocationIdChanged()
	 * @method \string remindActualLocationId()
	 * @method \string requireLocationId()
	 * @method \Bitrix\Crm\EO_Quote resetLocationId()
	 * @method \Bitrix\Crm\EO_Quote unsetLocationId()
	 * @method \string fillLocationId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Quote set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Quote reset($fieldName)
	 * @method \Bitrix\Crm\EO_Quote unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Quote wakeUp($data)
	 */
	class EO_Quote {
		/* @var \Bitrix\Crm\QuoteTable */
		static public $dataClass = '\Bitrix\Crm\QuoteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Quote_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \int[] getOpportunityList()
	 * @method \int[] fillOpportunity()
	 * @method \float[] getCurrencyIdList()
	 * @method \float[] fillCurrencyId()
	 * @method \float[] getOpportunityAccountList()
	 * @method \float[] fillOpportunityAccount()
	 * @method \string[] getAccountCurrencyIdList()
	 * @method \string[] fillAccountCurrencyId()
	 * @method \float[] getExchRateList()
	 * @method \float[] fillExchRate()
	 * @method \string[] getQuoteNumberList()
	 * @method \string[] fillQuoteNumber()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \boolean[] getClosedList()
	 * @method \boolean[] fillClosed()
	 * @method \string[] getCommentsList()
	 * @method \string[] fillComments()
	 * @method \Bitrix\Main\Type\DateTime[] getBegindateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillBegindate()
	 * @method \Bitrix\Main\Type\DateTime[] getBegindateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillBegindateShort()
	 * @method \Bitrix\Main\Type\DateTime[] getClosedateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillClosedate()
	 * @method \Bitrix\Main\Type\DateTime[] getClosedateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillClosedateShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreateShort()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyShortList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModifyShort()
	 * @method \int[] getAssignedByIdList()
	 * @method \int[] fillAssignedById()
	 * @method \Bitrix\Main\EO_User[] getAssignedByList()
	 * @method \Bitrix\Crm\EO_Quote_Collection getAssignedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillAssignedBy()
	 * @method \int[] getCreatedByIdList()
	 * @method \int[] fillCreatedById()
	 * @method \Bitrix\Main\EO_User[] getCreatedByList()
	 * @method \Bitrix\Crm\EO_Quote_Collection getCreatedByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillCreatedBy()
	 * @method \int[] getModifyByIdList()
	 * @method \int[] fillModifyById()
	 * @method \Bitrix\Main\EO_User[] getModifyByList()
	 * @method \Bitrix\Crm\EO_Quote_Collection getModifyByCollection()
	 * @method \Bitrix\Main\EO_User_Collection fillModifyBy()
	 * @method \int[] getDealIdList()
	 * @method \int[] fillDealId()
	 * @method \int[] getLeadIdList()
	 * @method \int[] fillLeadId()
	 * @method \Bitrix\Crm\EO_Lead[] getLeadByList()
	 * @method \Bitrix\Crm\EO_Quote_Collection getLeadByCollection()
	 * @method \Bitrix\Crm\EO_Lead_Collection fillLeadBy()
	 * @method \int[] getContactIdList()
	 * @method \int[] fillContactId()
	 * @method \Bitrix\Crm\EO_Contact[] getContactByList()
	 * @method \Bitrix\Crm\EO_Quote_Collection getContactByCollection()
	 * @method \Bitrix\Crm\EO_Contact_Collection fillContactBy()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \Bitrix\Crm\EO_Company[] getCompanyByList()
	 * @method \Bitrix\Crm\EO_Quote_Collection getCompanyByCollection()
	 * @method \Bitrix\Crm\EO_Company_Collection fillCompanyBy()
	 * @method \boolean[] getHasProductsList()
	 * @method \boolean[] fillHasProducts()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 * @method \Bitrix\Crm\EO_QuoteElement[] getElementsList()
	 * @method \Bitrix\Crm\EO_Quote_Collection getElementsCollection()
	 * @method \Bitrix\Crm\EO_QuoteElement_Collection fillElements()
	 * @method \int[] getMycompanyIdList()
	 * @method \int[] fillMycompanyId()
	 * @method \string[] getLocationIdList()
	 * @method \string[] fillLocationId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Quote $object)
	 * @method bool has(\Bitrix\Crm\EO_Quote $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Quote getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Quote[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Quote $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Quote_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Quote current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Quote_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\QuoteTable */
		static public $dataClass = '\Bitrix\Crm\QuoteTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Quote_Query query()
	 * @method static EO_Quote_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Quote_Result getById($id)
	 * @method static EO_Quote_Result getList(array $parameters = array())
	 * @method static EO_Quote_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Quote createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Quote_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Quote wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Quote_Collection wakeUpCollection($rows)
	 */
	class QuoteTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Quote_Result exec()
	 * @method \Bitrix\Crm\EO_Quote fetchObject()
	 * @method \Bitrix\Crm\EO_Quote_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Quote_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Quote fetchObject()
	 * @method \Bitrix\Crm\EO_Quote_Collection fetchCollection()
	 */
	class EO_Quote_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Quote createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Quote_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Quote wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Quote_Collection wakeUpCollection($rows)
	 */
	class EO_Quote_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\QuoteElementTable:crm/lib/quoteelement.php:588f685dbf83ed6a1369e49be56178fc */
namespace Bitrix\Crm {
	/**
	 * EO_QuoteElement
	 * @see \Bitrix\Crm\QuoteElementTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getQuoteId()
	 * @method \Bitrix\Crm\EO_QuoteElement setQuoteId(\int|\Bitrix\Main\DB\SqlExpression $quoteId)
	 * @method bool hasQuoteId()
	 * @method bool isQuoteIdFilled()
	 * @method bool isQuoteIdChanged()
	 * @method \Bitrix\Crm\EO_Quote getQuote()
	 * @method \Bitrix\Crm\EO_Quote remindActualQuote()
	 * @method \Bitrix\Crm\EO_Quote requireQuote()
	 * @method \Bitrix\Crm\EO_QuoteElement setQuote(\Bitrix\Crm\EO_Quote $object)
	 * @method \Bitrix\Crm\EO_QuoteElement resetQuote()
	 * @method \Bitrix\Crm\EO_QuoteElement unsetQuote()
	 * @method bool hasQuote()
	 * @method bool isQuoteFilled()
	 * @method bool isQuoteChanged()
	 * @method \Bitrix\Crm\EO_Quote fillQuote()
	 * @method \string getStorageTypeId()
	 * @method \Bitrix\Crm\EO_QuoteElement setStorageTypeId(\string|\Bitrix\Main\DB\SqlExpression $storageTypeId)
	 * @method bool hasStorageTypeId()
	 * @method bool isStorageTypeIdFilled()
	 * @method bool isStorageTypeIdChanged()
	 * @method \int getElementId()
	 * @method \Bitrix\Crm\EO_QuoteElement setElementId(\int|\Bitrix\Main\DB\SqlExpression $elementId)
	 * @method bool hasElementId()
	 * @method bool isElementIdFilled()
	 * @method bool isElementIdChanged()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_QuoteElement set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_QuoteElement reset($fieldName)
	 * @method \Bitrix\Crm\EO_QuoteElement unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_QuoteElement wakeUp($data)
	 */
	class EO_QuoteElement {
		/* @var \Bitrix\Crm\QuoteElementTable */
		static public $dataClass = '\Bitrix\Crm\QuoteElementTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_QuoteElement_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getQuoteIdList()
	 * @method \Bitrix\Crm\EO_Quote[] getQuoteList()
	 * @method \Bitrix\Crm\EO_QuoteElement_Collection getQuoteCollection()
	 * @method \Bitrix\Crm\EO_Quote_Collection fillQuote()
	 * @method \string[] getStorageTypeIdList()
	 * @method \int[] getElementIdList()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_QuoteElement $object)
	 * @method bool has(\Bitrix\Crm\EO_QuoteElement $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_QuoteElement getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_QuoteElement[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_QuoteElement $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_QuoteElement_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_QuoteElement current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_QuoteElement_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\QuoteElementTable */
		static public $dataClass = '\Bitrix\Crm\QuoteElementTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_QuoteElement_Query query()
	 * @method static EO_QuoteElement_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_QuoteElement_Result getById($id)
	 * @method static EO_QuoteElement_Result getList(array $parameters = array())
	 * @method static EO_QuoteElement_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_QuoteElement createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_QuoteElement_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_QuoteElement wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_QuoteElement_Collection wakeUpCollection($rows)
	 */
	class QuoteElementTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_QuoteElement_Result exec()
	 * @method \Bitrix\Crm\EO_QuoteElement fetchObject()
	 * @method \Bitrix\Crm\EO_QuoteElement_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_QuoteElement_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_QuoteElement fetchObject()
	 * @method \Bitrix\Crm\EO_QuoteElement_Collection fetchCollection()
	 */
	class EO_QuoteElement_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_QuoteElement createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_QuoteElement_Collection createCollection()
	 * @method \Bitrix\Crm\EO_QuoteElement wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_QuoteElement_Collection wakeUpCollection($rows)
	 */
	class EO_QuoteElement_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Recovery\EntityRecoveryTable:crm/lib/recovery/entityrecovery.php:450222f796906786a3f265385f4df189 */
namespace Bitrix\Crm\Recovery {
	/**
	 * EO_EntityRecovery
	 * @see \Bitrix\Crm\Recovery\EntityRecoveryTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getRegistrationTime()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery setRegistrationTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $registrationTime)
	 * @method bool hasRegistrationTime()
	 * @method bool isRegistrationTimeFilled()
	 * @method bool isRegistrationTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualRegistrationTime()
	 * @method \Bitrix\Main\Type\DateTime requireRegistrationTime()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery resetRegistrationTime()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery unsetRegistrationTime()
	 * @method \Bitrix\Main\Type\DateTime fillRegistrationTime()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery resetEntityId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery resetEntityTypeId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getContextId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery setContextId(\int|\Bitrix\Main\DB\SqlExpression $contextId)
	 * @method bool hasContextId()
	 * @method bool isContextIdFilled()
	 * @method bool isContextIdChanged()
	 * @method \int remindActualContextId()
	 * @method \int requireContextId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery resetContextId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery unsetContextId()
	 * @method \int fillContextId()
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery resetUserId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery unsetUserId()
	 * @method \int fillUserId()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery resetResponsibleId()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \string getTitle()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery resetTitle()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery unsetTitle()
	 * @method \string fillTitle()
	 * @method \boolean getIsCompressed()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery setIsCompressed(\boolean|\Bitrix\Main\DB\SqlExpression $isCompressed)
	 * @method bool hasIsCompressed()
	 * @method bool isIsCompressedFilled()
	 * @method bool isIsCompressedChanged()
	 * @method \boolean remindActualIsCompressed()
	 * @method \boolean requireIsCompressed()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery resetIsCompressed()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery unsetIsCompressed()
	 * @method \boolean fillIsCompressed()
	 * @method \string getData()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery setData(\string|\Bitrix\Main\DB\SqlExpression $data)
	 * @method bool hasData()
	 * @method bool isDataFilled()
	 * @method bool isDataChanged()
	 * @method \string remindActualData()
	 * @method \string requireData()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery resetData()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery unsetData()
	 * @method \string fillData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery set($fieldName, $value)
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery reset($fieldName)
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Recovery\EO_EntityRecovery wakeUp($data)
	 */
	class EO_EntityRecovery {
		/* @var \Bitrix\Crm\Recovery\EntityRecoveryTable */
		static public $dataClass = '\Bitrix\Crm\Recovery\EntityRecoveryTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Recovery {
	/**
	 * EO_EntityRecovery_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getRegistrationTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillRegistrationTime()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getContextIdList()
	 * @method \int[] fillContextId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \boolean[] getIsCompressedList()
	 * @method \boolean[] fillIsCompressed()
	 * @method \string[] getDataList()
	 * @method \string[] fillData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Recovery\EO_EntityRecovery $object)
	 * @method bool has(\Bitrix\Crm\Recovery\EO_EntityRecovery $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery getByPrimary($primary)
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery[] getAll()
	 * @method bool remove(\Bitrix\Crm\Recovery\EO_EntityRecovery $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Recovery\EO_EntityRecovery_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_EntityRecovery_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Recovery\EntityRecoveryTable */
		static public $dataClass = '\Bitrix\Crm\Recovery\EntityRecoveryTable';
	}
}
namespace Bitrix\Crm\Recovery {
	/**
	 * @method static EO_EntityRecovery_Query query()
	 * @method static EO_EntityRecovery_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_EntityRecovery_Result getById($id)
	 * @method static EO_EntityRecovery_Result getList(array $parameters = array())
	 * @method static EO_EntityRecovery_Entity getEntity()
	 * @method static \Bitrix\Crm\Recovery\EO_EntityRecovery createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Recovery\EO_EntityRecovery_Collection createCollection()
	 * @method static \Bitrix\Crm\Recovery\EO_EntityRecovery wakeUpObject($row)
	 * @method static \Bitrix\Crm\Recovery\EO_EntityRecovery_Collection wakeUpCollection($rows)
	 */
	class EntityRecoveryTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_EntityRecovery_Result exec()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery fetchObject()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_EntityRecovery_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery fetchObject()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery_Collection fetchCollection()
	 */
	class EO_EntityRecovery_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery_Collection createCollection()
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery wakeUpObject($row)
	 * @method \Bitrix\Crm\Recovery\EO_EntityRecovery_Collection wakeUpCollection($rows)
	 */
	class EO_EntityRecovery_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Recycling\Entity\RelationTable:crm/lib/recycling/entity/relation.php:540d58d5fe66d7b105a137413f1dab29 */
namespace Bitrix\Crm\Recycling\Entity {
	/**
	 * EO_Relation
	 * @see \Bitrix\Crm\Recycling\Entity\RelationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getSrcEntityTypeId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation setSrcEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $srcEntityTypeId)
	 * @method bool hasSrcEntityTypeId()
	 * @method bool isSrcEntityTypeIdFilled()
	 * @method bool isSrcEntityTypeIdChanged()
	 * @method \int getSrcEntityId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation setSrcEntityId(\int|\Bitrix\Main\DB\SqlExpression $srcEntityId)
	 * @method bool hasSrcEntityId()
	 * @method bool isSrcEntityIdFilled()
	 * @method bool isSrcEntityIdChanged()
	 * @method \int getSrcRecycleBinId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation setSrcRecycleBinId(\int|\Bitrix\Main\DB\SqlExpression $srcRecycleBinId)
	 * @method bool hasSrcRecycleBinId()
	 * @method bool isSrcRecycleBinIdFilled()
	 * @method bool isSrcRecycleBinIdChanged()
	 * @method \int remindActualSrcRecycleBinId()
	 * @method \int requireSrcRecycleBinId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation resetSrcRecycleBinId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation unsetSrcRecycleBinId()
	 * @method \int fillSrcRecycleBinId()
	 * @method \int getDstEntityTypeId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation setDstEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $dstEntityTypeId)
	 * @method bool hasDstEntityTypeId()
	 * @method bool isDstEntityTypeIdFilled()
	 * @method bool isDstEntityTypeIdChanged()
	 * @method \int getDstEntityId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation setDstEntityId(\int|\Bitrix\Main\DB\SqlExpression $dstEntityId)
	 * @method bool hasDstEntityId()
	 * @method bool isDstEntityIdFilled()
	 * @method bool isDstEntityIdChanged()
	 * @method \int getDstRecycleBinId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation setDstRecycleBinId(\int|\Bitrix\Main\DB\SqlExpression $dstRecycleBinId)
	 * @method bool hasDstRecycleBinId()
	 * @method bool isDstRecycleBinIdFilled()
	 * @method bool isDstRecycleBinIdChanged()
	 * @method \int remindActualDstRecycleBinId()
	 * @method \int requireDstRecycleBinId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation resetDstRecycleBinId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation unsetDstRecycleBinId()
	 * @method \int fillDstRecycleBinId()
	 * @method \int getPreviousSrcEntityId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation setPreviousSrcEntityId(\int|\Bitrix\Main\DB\SqlExpression $previousSrcEntityId)
	 * @method bool hasPreviousSrcEntityId()
	 * @method bool isPreviousSrcEntityIdFilled()
	 * @method bool isPreviousSrcEntityIdChanged()
	 * @method \int remindActualPreviousSrcEntityId()
	 * @method \int requirePreviousSrcEntityId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation resetPreviousSrcEntityId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation unsetPreviousSrcEntityId()
	 * @method \int fillPreviousSrcEntityId()
	 * @method \int getPreviousDstEntityId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation setPreviousDstEntityId(\int|\Bitrix\Main\DB\SqlExpression $previousDstEntityId)
	 * @method bool hasPreviousDstEntityId()
	 * @method bool isPreviousDstEntityIdFilled()
	 * @method bool isPreviousDstEntityIdChanged()
	 * @method \int remindActualPreviousDstEntityId()
	 * @method \int requirePreviousDstEntityId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation resetPreviousDstEntityId()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation unsetPreviousDstEntityId()
	 * @method \int fillPreviousDstEntityId()
	 * @method \Bitrix\Main\Type\DateTime getCreatedTime()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation setCreatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $createdTime)
	 * @method bool hasCreatedTime()
	 * @method bool isCreatedTimeFilled()
	 * @method bool isCreatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireCreatedTime()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation resetCreatedTime()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation unsetCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime getLastUpdatedTime()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation setLastUpdatedTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $lastUpdatedTime)
	 * @method bool hasLastUpdatedTime()
	 * @method bool isLastUpdatedTimeFilled()
	 * @method bool isLastUpdatedTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualLastUpdatedTime()
	 * @method \Bitrix\Main\Type\DateTime requireLastUpdatedTime()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation resetLastUpdatedTime()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation unsetLastUpdatedTime()
	 * @method \Bitrix\Main\Type\DateTime fillLastUpdatedTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation set($fieldName, $value)
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation reset($fieldName)
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Recycling\Entity\EO_Relation wakeUp($data)
	 */
	class EO_Relation {
		/* @var \Bitrix\Crm\Recycling\Entity\RelationTable */
		static public $dataClass = '\Bitrix\Crm\Recycling\Entity\RelationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Recycling\Entity {
	/**
	 * EO_Relation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getSrcEntityTypeIdList()
	 * @method \int[] getSrcEntityIdList()
	 * @method \int[] getSrcRecycleBinIdList()
	 * @method \int[] fillSrcRecycleBinId()
	 * @method \int[] getDstEntityTypeIdList()
	 * @method \int[] getDstEntityIdList()
	 * @method \int[] getDstRecycleBinIdList()
	 * @method \int[] fillDstRecycleBinId()
	 * @method \int[] getPreviousSrcEntityIdList()
	 * @method \int[] fillPreviousSrcEntityId()
	 * @method \int[] getPreviousDstEntityIdList()
	 * @method \int[] fillPreviousDstEntityId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreatedTime()
	 * @method \Bitrix\Main\Type\DateTime[] getLastUpdatedTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillLastUpdatedTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Recycling\Entity\EO_Relation $object)
	 * @method bool has(\Bitrix\Crm\Recycling\Entity\EO_Relation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation getByPrimary($primary)
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation[] getAll()
	 * @method bool remove(\Bitrix\Crm\Recycling\Entity\EO_Relation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Recycling\Entity\EO_Relation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Relation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Recycling\Entity\RelationTable */
		static public $dataClass = '\Bitrix\Crm\Recycling\Entity\RelationTable';
	}
}
namespace Bitrix\Crm\Recycling\Entity {
	/**
	 * @method static EO_Relation_Query query()
	 * @method static EO_Relation_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Relation_Result getById($id)
	 * @method static EO_Relation_Result getList(array $parameters = array())
	 * @method static EO_Relation_Entity getEntity()
	 * @method static \Bitrix\Crm\Recycling\Entity\EO_Relation createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Recycling\Entity\EO_Relation_Collection createCollection()
	 * @method static \Bitrix\Crm\Recycling\Entity\EO_Relation wakeUpObject($row)
	 * @method static \Bitrix\Crm\Recycling\Entity\EO_Relation_Collection wakeUpCollection($rows)
	 */
	class RelationTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Relation_Result exec()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation fetchObject()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Relation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation fetchObject()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation_Collection fetchCollection()
	 */
	class EO_Relation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation_Collection createCollection()
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation wakeUpObject($row)
	 * @method \Bitrix\Crm\Recycling\Entity\EO_Relation_Collection wakeUpCollection($rows)
	 */
	class EO_Relation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Requisite\Conversion\LogTable:crm/lib/requisite/conversion/log.php:d0a90e210eaa0f1610e983364d244ec6 */
namespace Bitrix\Crm\Requisite\Conversion {
	/**
	 * EO_Log
	 * @see \Bitrix\Crm\Requisite\Conversion\LogTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log resetCreated()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \int getMsec()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log setMsec(\int|\Bitrix\Main\DB\SqlExpression $msec)
	 * @method bool hasMsec()
	 * @method bool isMsecFilled()
	 * @method bool isMsecChanged()
	 * @method \int remindActualMsec()
	 * @method \int requireMsec()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log resetMsec()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log unsetMsec()
	 * @method \int fillMsec()
	 * @method \string getType()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log resetType()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log unsetType()
	 * @method \string fillType()
	 * @method \string getTag()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log setTag(\string|\Bitrix\Main\DB\SqlExpression $tag)
	 * @method bool hasTag()
	 * @method bool isTagFilled()
	 * @method bool isTagChanged()
	 * @method \string remindActualTag()
	 * @method \string requireTag()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log resetTag()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log unsetTag()
	 * @method \string fillTag()
	 * @method \string getMessage()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log setMessage(\string|\Bitrix\Main\DB\SqlExpression $message)
	 * @method bool hasMessage()
	 * @method bool isMessageFilled()
	 * @method bool isMessageChanged()
	 * @method \string remindActualMessage()
	 * @method \string requireMessage()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log resetMessage()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log unsetMessage()
	 * @method \string fillMessage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log set($fieldName, $value)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log reset($fieldName)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_Log wakeUp($data)
	 */
	class EO_Log {
		/* @var \Bitrix\Crm\Requisite\Conversion\LogTable */
		static public $dataClass = '\Bitrix\Crm\Requisite\Conversion\LogTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Requisite\Conversion {
	/**
	 * EO_Log_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \int[] getMsecList()
	 * @method \int[] fillMsec()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getTagList()
	 * @method \string[] fillTag()
	 * @method \string[] getMessageList()
	 * @method \string[] fillMessage()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Requisite\Conversion\EO_Log $object)
	 * @method bool has(\Bitrix\Crm\Requisite\Conversion\EO_Log $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log getByPrimary($primary)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log[] getAll()
	 * @method bool remove(\Bitrix\Crm\Requisite\Conversion\EO_Log $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_Log_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Log_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Requisite\Conversion\LogTable */
		static public $dataClass = '\Bitrix\Crm\Requisite\Conversion\LogTable';
	}
}
namespace Bitrix\Crm\Requisite\Conversion {
	/**
	 * @method static EO_Log_Query query()
	 * @method static EO_Log_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Log_Result getById($id)
	 * @method static EO_Log_Result getList(array $parameters = array())
	 * @method static EO_Log_Entity getEntity()
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_Log createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_Log_Collection createCollection()
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_Log wakeUpObject($row)
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_Log_Collection wakeUpCollection($rows)
	 */
	class LogTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Log_Result exec()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log fetchObject()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Log_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log fetchObject()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log_Collection fetchCollection()
	 */
	class EO_Log_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log_Collection createCollection()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log wakeUpObject($row)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_Log_Collection wakeUpCollection($rows)
	 */
	class EO_Log_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Requisite\Conversion\PSRequisiteRelationTable:crm/lib/requisite/conversion/psrequisiterelation.php:b0fade93b1abacb3aac924faae536ef5 */
namespace Bitrix\Crm\Requisite\Conversion {
	/**
	 * EO_PSRequisiteRelation
	 * @see \Bitrix\Crm\Requisite\Conversion\PSRequisiteRelationTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation resetCompanyId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \int getRequisiteId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation setRequisiteId(\int|\Bitrix\Main\DB\SqlExpression $requisiteId)
	 * @method bool hasRequisiteId()
	 * @method bool isRequisiteIdFilled()
	 * @method bool isRequisiteIdChanged()
	 * @method \int remindActualRequisiteId()
	 * @method \int requireRequisiteId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation resetRequisiteId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation unsetRequisiteId()
	 * @method \int fillRequisiteId()
	 * @method \int getBankDetailId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation setBankDetailId(\int|\Bitrix\Main\DB\SqlExpression $bankDetailId)
	 * @method bool hasBankDetailId()
	 * @method bool isBankDetailIdFilled()
	 * @method bool isBankDetailIdChanged()
	 * @method \int remindActualBankDetailId()
	 * @method \int requireBankDetailId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation resetBankDetailId()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation unsetBankDetailId()
	 * @method \int fillBankDetailId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation set($fieldName, $value)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation reset($fieldName)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation wakeUp($data)
	 */
	class EO_PSRequisiteRelation {
		/* @var \Bitrix\Crm\Requisite\Conversion\PSRequisiteRelationTable */
		static public $dataClass = '\Bitrix\Crm\Requisite\Conversion\PSRequisiteRelationTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Requisite\Conversion {
	/**
	 * EO_PSRequisiteRelation_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEntityIdList()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \int[] getRequisiteIdList()
	 * @method \int[] fillRequisiteId()
	 * @method \int[] getBankDetailIdList()
	 * @method \int[] fillBankDetailId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation $object)
	 * @method bool has(\Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation getByPrimary($primary)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation[] getAll()
	 * @method bool remove(\Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_PSRequisiteRelation_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Requisite\Conversion\PSRequisiteRelationTable */
		static public $dataClass = '\Bitrix\Crm\Requisite\Conversion\PSRequisiteRelationTable';
	}
}
namespace Bitrix\Crm\Requisite\Conversion {
	/**
	 * @method static EO_PSRequisiteRelation_Query query()
	 * @method static EO_PSRequisiteRelation_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_PSRequisiteRelation_Result getById($id)
	 * @method static EO_PSRequisiteRelation_Result getList(array $parameters = array())
	 * @method static EO_PSRequisiteRelation_Entity getEntity()
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation_Collection createCollection()
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation wakeUpObject($row)
	 * @method static \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation_Collection wakeUpCollection($rows)
	 */
	class PSRequisiteRelationTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PSRequisiteRelation_Result exec()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation fetchObject()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PSRequisiteRelation_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation fetchObject()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation_Collection fetchCollection()
	 */
	class EO_PSRequisiteRelation_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation_Collection createCollection()
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation wakeUpObject($row)
	 * @method \Bitrix\Crm\Requisite\Conversion\EO_PSRequisiteRelation_Collection wakeUpCollection($rows)
	 */
	class EO_PSRequisiteRelation_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Requisite\LinkTable:crm/lib/requisite/link.php:a99941147be4513a0e3a517c8bb2d104 */
namespace Bitrix\Crm\Requisite {
	/**
	 * EO_Link
	 * @see \Bitrix\Crm\Requisite\LinkTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Requisite\EO_Link setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Requisite\EO_Link setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getRequisiteId()
	 * @method \Bitrix\Crm\Requisite\EO_Link setRequisiteId(\int|\Bitrix\Main\DB\SqlExpression $requisiteId)
	 * @method bool hasRequisiteId()
	 * @method bool isRequisiteIdFilled()
	 * @method bool isRequisiteIdChanged()
	 * @method \int remindActualRequisiteId()
	 * @method \int requireRequisiteId()
	 * @method \Bitrix\Crm\Requisite\EO_Link resetRequisiteId()
	 * @method \Bitrix\Crm\Requisite\EO_Link unsetRequisiteId()
	 * @method \int fillRequisiteId()
	 * @method \int getBankDetailId()
	 * @method \Bitrix\Crm\Requisite\EO_Link setBankDetailId(\int|\Bitrix\Main\DB\SqlExpression $bankDetailId)
	 * @method bool hasBankDetailId()
	 * @method bool isBankDetailIdFilled()
	 * @method bool isBankDetailIdChanged()
	 * @method \int remindActualBankDetailId()
	 * @method \int requireBankDetailId()
	 * @method \Bitrix\Crm\Requisite\EO_Link resetBankDetailId()
	 * @method \Bitrix\Crm\Requisite\EO_Link unsetBankDetailId()
	 * @method \int fillBankDetailId()
	 * @method \int getMcRequisiteId()
	 * @method \Bitrix\Crm\Requisite\EO_Link setMcRequisiteId(\int|\Bitrix\Main\DB\SqlExpression $mcRequisiteId)
	 * @method bool hasMcRequisiteId()
	 * @method bool isMcRequisiteIdFilled()
	 * @method bool isMcRequisiteIdChanged()
	 * @method \int remindActualMcRequisiteId()
	 * @method \int requireMcRequisiteId()
	 * @method \Bitrix\Crm\Requisite\EO_Link resetMcRequisiteId()
	 * @method \Bitrix\Crm\Requisite\EO_Link unsetMcRequisiteId()
	 * @method \int fillMcRequisiteId()
	 * @method \int getMcBankDetailId()
	 * @method \Bitrix\Crm\Requisite\EO_Link setMcBankDetailId(\int|\Bitrix\Main\DB\SqlExpression $mcBankDetailId)
	 * @method bool hasMcBankDetailId()
	 * @method bool isMcBankDetailIdFilled()
	 * @method bool isMcBankDetailIdChanged()
	 * @method \int remindActualMcBankDetailId()
	 * @method \int requireMcBankDetailId()
	 * @method \Bitrix\Crm\Requisite\EO_Link resetMcBankDetailId()
	 * @method \Bitrix\Crm\Requisite\EO_Link unsetMcBankDetailId()
	 * @method \int fillMcBankDetailId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Requisite\EO_Link set($fieldName, $value)
	 * @method \Bitrix\Crm\Requisite\EO_Link reset($fieldName)
	 * @method \Bitrix\Crm\Requisite\EO_Link unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Requisite\EO_Link wakeUp($data)
	 */
	class EO_Link {
		/* @var \Bitrix\Crm\Requisite\LinkTable */
		static public $dataClass = '\Bitrix\Crm\Requisite\LinkTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Requisite {
	/**
	 * EO_Link_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEntityIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getRequisiteIdList()
	 * @method \int[] fillRequisiteId()
	 * @method \int[] getBankDetailIdList()
	 * @method \int[] fillBankDetailId()
	 * @method \int[] getMcRequisiteIdList()
	 * @method \int[] fillMcRequisiteId()
	 * @method \int[] getMcBankDetailIdList()
	 * @method \int[] fillMcBankDetailId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Requisite\EO_Link $object)
	 * @method bool has(\Bitrix\Crm\Requisite\EO_Link $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Requisite\EO_Link getByPrimary($primary)
	 * @method \Bitrix\Crm\Requisite\EO_Link[] getAll()
	 * @method bool remove(\Bitrix\Crm\Requisite\EO_Link $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Requisite\EO_Link_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Requisite\EO_Link current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Link_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Requisite\LinkTable */
		static public $dataClass = '\Bitrix\Crm\Requisite\LinkTable';
	}
}
namespace Bitrix\Crm\Requisite {
	/**
	 * @method static EO_Link_Query query()
	 * @method static EO_Link_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Link_Result getById($id)
	 * @method static EO_Link_Result getList(array $parameters = array())
	 * @method static EO_Link_Entity getEntity()
	 * @method static \Bitrix\Crm\Requisite\EO_Link createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Requisite\EO_Link_Collection createCollection()
	 * @method static \Bitrix\Crm\Requisite\EO_Link wakeUpObject($row)
	 * @method static \Bitrix\Crm\Requisite\EO_Link_Collection wakeUpCollection($rows)
	 */
	class LinkTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Link_Result exec()
	 * @method \Bitrix\Crm\Requisite\EO_Link fetchObject()
	 * @method \Bitrix\Crm\Requisite\EO_Link_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Link_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Requisite\EO_Link fetchObject()
	 * @method \Bitrix\Crm\Requisite\EO_Link_Collection fetchCollection()
	 */
	class EO_Link_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Requisite\EO_Link createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Requisite\EO_Link_Collection createCollection()
	 * @method \Bitrix\Crm\Requisite\EO_Link wakeUpObject($row)
	 * @method \Bitrix\Crm\Requisite\EO_Link_Collection wakeUpCollection($rows)
	 */
	class EO_Link_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\RequisiteTable:crm/lib/requisite.php:c315df98cb6c1304d682c6189dacad49 */
namespace Bitrix\Crm {
	/**
	 * EO_Requisite
	 * @see \Bitrix\Crm\RequisiteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Requisite setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\EO_Requisite setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\EO_Requisite resetEntityTypeId()
	 * @method \Bitrix\Crm\EO_Requisite unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\EO_Requisite setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\EO_Requisite resetEntityId()
	 * @method \Bitrix\Crm\EO_Requisite unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \int getPresetId()
	 * @method \Bitrix\Crm\EO_Requisite setPresetId(\int|\Bitrix\Main\DB\SqlExpression $presetId)
	 * @method bool hasPresetId()
	 * @method bool isPresetIdFilled()
	 * @method bool isPresetIdChanged()
	 * @method \int remindActualPresetId()
	 * @method \int requirePresetId()
	 * @method \Bitrix\Crm\EO_Requisite resetPresetId()
	 * @method \Bitrix\Crm\EO_Requisite unsetPresetId()
	 * @method \int fillPresetId()
	 * @method \Bitrix\Crm\EO_Preset getPreset()
	 * @method \Bitrix\Crm\EO_Preset remindActualPreset()
	 * @method \Bitrix\Crm\EO_Preset requirePreset()
	 * @method \Bitrix\Crm\EO_Requisite setPreset(\Bitrix\Crm\EO_Preset $object)
	 * @method \Bitrix\Crm\EO_Requisite resetPreset()
	 * @method \Bitrix\Crm\EO_Requisite unsetPreset()
	 * @method bool hasPreset()
	 * @method bool isPresetFilled()
	 * @method bool isPresetChanged()
	 * @method \Bitrix\Crm\EO_Preset fillPreset()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\EO_Requisite setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\EO_Requisite resetDateCreate()
	 * @method \Bitrix\Crm\EO_Requisite unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime getDateModify()
	 * @method \Bitrix\Crm\EO_Requisite setDateModify(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateModify)
	 * @method bool hasDateModify()
	 * @method bool isDateModifyFilled()
	 * @method bool isDateModifyChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateModify()
	 * @method \Bitrix\Main\Type\DateTime requireDateModify()
	 * @method \Bitrix\Crm\EO_Requisite resetDateModify()
	 * @method \Bitrix\Crm\EO_Requisite unsetDateModify()
	 * @method \Bitrix\Main\Type\DateTime fillDateModify()
	 * @method \int getCreatedById()
	 * @method \Bitrix\Crm\EO_Requisite setCreatedById(\int|\Bitrix\Main\DB\SqlExpression $createdById)
	 * @method bool hasCreatedById()
	 * @method bool isCreatedByIdFilled()
	 * @method bool isCreatedByIdChanged()
	 * @method \int remindActualCreatedById()
	 * @method \int requireCreatedById()
	 * @method \Bitrix\Crm\EO_Requisite resetCreatedById()
	 * @method \Bitrix\Crm\EO_Requisite unsetCreatedById()
	 * @method \int fillCreatedById()
	 * @method \int getModifyById()
	 * @method \Bitrix\Crm\EO_Requisite setModifyById(\int|\Bitrix\Main\DB\SqlExpression $modifyById)
	 * @method bool hasModifyById()
	 * @method bool isModifyByIdFilled()
	 * @method bool isModifyByIdChanged()
	 * @method \int remindActualModifyById()
	 * @method \int requireModifyById()
	 * @method \Bitrix\Crm\EO_Requisite resetModifyById()
	 * @method \Bitrix\Crm\EO_Requisite unsetModifyById()
	 * @method \int fillModifyById()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_Requisite setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_Requisite resetName()
	 * @method \Bitrix\Crm\EO_Requisite unsetName()
	 * @method \string fillName()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\EO_Requisite setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\EO_Requisite resetCode()
	 * @method \Bitrix\Crm\EO_Requisite unsetCode()
	 * @method \string fillCode()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\EO_Requisite setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\EO_Requisite resetXmlId()
	 * @method \Bitrix\Crm\EO_Requisite unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \string getOriginatorId()
	 * @method \Bitrix\Crm\EO_Requisite setOriginatorId(\string|\Bitrix\Main\DB\SqlExpression $originatorId)
	 * @method bool hasOriginatorId()
	 * @method bool isOriginatorIdFilled()
	 * @method bool isOriginatorIdChanged()
	 * @method \string remindActualOriginatorId()
	 * @method \string requireOriginatorId()
	 * @method \Bitrix\Crm\EO_Requisite resetOriginatorId()
	 * @method \Bitrix\Crm\EO_Requisite unsetOriginatorId()
	 * @method \string fillOriginatorId()
	 * @method \boolean getActive()
	 * @method \Bitrix\Crm\EO_Requisite setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Crm\EO_Requisite resetActive()
	 * @method \Bitrix\Crm\EO_Requisite unsetActive()
	 * @method \boolean fillActive()
	 * @method \boolean getAddressOnly()
	 * @method \Bitrix\Crm\EO_Requisite setAddressOnly(\boolean|\Bitrix\Main\DB\SqlExpression $addressOnly)
	 * @method bool hasAddressOnly()
	 * @method bool isAddressOnlyFilled()
	 * @method bool isAddressOnlyChanged()
	 * @method \boolean remindActualAddressOnly()
	 * @method \boolean requireAddressOnly()
	 * @method \Bitrix\Crm\EO_Requisite resetAddressOnly()
	 * @method \Bitrix\Crm\EO_Requisite unsetAddressOnly()
	 * @method \boolean fillAddressOnly()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\EO_Requisite setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\EO_Requisite resetSort()
	 * @method \Bitrix\Crm\EO_Requisite unsetSort()
	 * @method \int fillSort()
	 * @method \string getRqName()
	 * @method \Bitrix\Crm\EO_Requisite setRqName(\string|\Bitrix\Main\DB\SqlExpression $rqName)
	 * @method bool hasRqName()
	 * @method bool isRqNameFilled()
	 * @method bool isRqNameChanged()
	 * @method \string remindActualRqName()
	 * @method \string requireRqName()
	 * @method \Bitrix\Crm\EO_Requisite resetRqName()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqName()
	 * @method \string fillRqName()
	 * @method \string getRqFirstName()
	 * @method \Bitrix\Crm\EO_Requisite setRqFirstName(\string|\Bitrix\Main\DB\SqlExpression $rqFirstName)
	 * @method bool hasRqFirstName()
	 * @method bool isRqFirstNameFilled()
	 * @method bool isRqFirstNameChanged()
	 * @method \string remindActualRqFirstName()
	 * @method \string requireRqFirstName()
	 * @method \Bitrix\Crm\EO_Requisite resetRqFirstName()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqFirstName()
	 * @method \string fillRqFirstName()
	 * @method \string getRqLastName()
	 * @method \Bitrix\Crm\EO_Requisite setRqLastName(\string|\Bitrix\Main\DB\SqlExpression $rqLastName)
	 * @method bool hasRqLastName()
	 * @method bool isRqLastNameFilled()
	 * @method bool isRqLastNameChanged()
	 * @method \string remindActualRqLastName()
	 * @method \string requireRqLastName()
	 * @method \Bitrix\Crm\EO_Requisite resetRqLastName()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqLastName()
	 * @method \string fillRqLastName()
	 * @method \string getRqSecondName()
	 * @method \Bitrix\Crm\EO_Requisite setRqSecondName(\string|\Bitrix\Main\DB\SqlExpression $rqSecondName)
	 * @method bool hasRqSecondName()
	 * @method bool isRqSecondNameFilled()
	 * @method bool isRqSecondNameChanged()
	 * @method \string remindActualRqSecondName()
	 * @method \string requireRqSecondName()
	 * @method \Bitrix\Crm\EO_Requisite resetRqSecondName()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqSecondName()
	 * @method \string fillRqSecondName()
	 * @method \string getRqCompanyName()
	 * @method \Bitrix\Crm\EO_Requisite setRqCompanyName(\string|\Bitrix\Main\DB\SqlExpression $rqCompanyName)
	 * @method bool hasRqCompanyName()
	 * @method bool isRqCompanyNameFilled()
	 * @method bool isRqCompanyNameChanged()
	 * @method \string remindActualRqCompanyName()
	 * @method \string requireRqCompanyName()
	 * @method \Bitrix\Crm\EO_Requisite resetRqCompanyName()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqCompanyName()
	 * @method \string fillRqCompanyName()
	 * @method \string getRqCompanyFullName()
	 * @method \Bitrix\Crm\EO_Requisite setRqCompanyFullName(\string|\Bitrix\Main\DB\SqlExpression $rqCompanyFullName)
	 * @method bool hasRqCompanyFullName()
	 * @method bool isRqCompanyFullNameFilled()
	 * @method bool isRqCompanyFullNameChanged()
	 * @method \string remindActualRqCompanyFullName()
	 * @method \string requireRqCompanyFullName()
	 * @method \Bitrix\Crm\EO_Requisite resetRqCompanyFullName()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqCompanyFullName()
	 * @method \string fillRqCompanyFullName()
	 * @method \string getRqCompanyRegDate()
	 * @method \Bitrix\Crm\EO_Requisite setRqCompanyRegDate(\string|\Bitrix\Main\DB\SqlExpression $rqCompanyRegDate)
	 * @method bool hasRqCompanyRegDate()
	 * @method bool isRqCompanyRegDateFilled()
	 * @method bool isRqCompanyRegDateChanged()
	 * @method \string remindActualRqCompanyRegDate()
	 * @method \string requireRqCompanyRegDate()
	 * @method \Bitrix\Crm\EO_Requisite resetRqCompanyRegDate()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqCompanyRegDate()
	 * @method \string fillRqCompanyRegDate()
	 * @method \string getRqDirector()
	 * @method \Bitrix\Crm\EO_Requisite setRqDirector(\string|\Bitrix\Main\DB\SqlExpression $rqDirector)
	 * @method bool hasRqDirector()
	 * @method bool isRqDirectorFilled()
	 * @method bool isRqDirectorChanged()
	 * @method \string remindActualRqDirector()
	 * @method \string requireRqDirector()
	 * @method \Bitrix\Crm\EO_Requisite resetRqDirector()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqDirector()
	 * @method \string fillRqDirector()
	 * @method \string getRqAccountant()
	 * @method \Bitrix\Crm\EO_Requisite setRqAccountant(\string|\Bitrix\Main\DB\SqlExpression $rqAccountant)
	 * @method bool hasRqAccountant()
	 * @method bool isRqAccountantFilled()
	 * @method bool isRqAccountantChanged()
	 * @method \string remindActualRqAccountant()
	 * @method \string requireRqAccountant()
	 * @method \Bitrix\Crm\EO_Requisite resetRqAccountant()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqAccountant()
	 * @method \string fillRqAccountant()
	 * @method \string getRqCeoName()
	 * @method \Bitrix\Crm\EO_Requisite setRqCeoName(\string|\Bitrix\Main\DB\SqlExpression $rqCeoName)
	 * @method bool hasRqCeoName()
	 * @method bool isRqCeoNameFilled()
	 * @method bool isRqCeoNameChanged()
	 * @method \string remindActualRqCeoName()
	 * @method \string requireRqCeoName()
	 * @method \Bitrix\Crm\EO_Requisite resetRqCeoName()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqCeoName()
	 * @method \string fillRqCeoName()
	 * @method \string getRqCeoWorkPos()
	 * @method \Bitrix\Crm\EO_Requisite setRqCeoWorkPos(\string|\Bitrix\Main\DB\SqlExpression $rqCeoWorkPos)
	 * @method bool hasRqCeoWorkPos()
	 * @method bool isRqCeoWorkPosFilled()
	 * @method bool isRqCeoWorkPosChanged()
	 * @method \string remindActualRqCeoWorkPos()
	 * @method \string requireRqCeoWorkPos()
	 * @method \Bitrix\Crm\EO_Requisite resetRqCeoWorkPos()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqCeoWorkPos()
	 * @method \string fillRqCeoWorkPos()
	 * @method \Bitrix\Crm\EO_Address getRqAddr()
	 * @method \Bitrix\Crm\EO_Address remindActualRqAddr()
	 * @method \Bitrix\Crm\EO_Address requireRqAddr()
	 * @method \Bitrix\Crm\EO_Requisite setRqAddr(\Bitrix\Crm\EO_Address $object)
	 * @method \Bitrix\Crm\EO_Requisite resetRqAddr()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqAddr()
	 * @method bool hasRqAddr()
	 * @method bool isRqAddrFilled()
	 * @method bool isRqAddrChanged()
	 * @method \Bitrix\Crm\EO_Address fillRqAddr()
	 * @method \string getRqContact()
	 * @method \Bitrix\Crm\EO_Requisite setRqContact(\string|\Bitrix\Main\DB\SqlExpression $rqContact)
	 * @method bool hasRqContact()
	 * @method bool isRqContactFilled()
	 * @method bool isRqContactChanged()
	 * @method \string remindActualRqContact()
	 * @method \string requireRqContact()
	 * @method \Bitrix\Crm\EO_Requisite resetRqContact()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqContact()
	 * @method \string fillRqContact()
	 * @method \string getRqEmail()
	 * @method \Bitrix\Crm\EO_Requisite setRqEmail(\string|\Bitrix\Main\DB\SqlExpression $rqEmail)
	 * @method bool hasRqEmail()
	 * @method bool isRqEmailFilled()
	 * @method bool isRqEmailChanged()
	 * @method \string remindActualRqEmail()
	 * @method \string requireRqEmail()
	 * @method \Bitrix\Crm\EO_Requisite resetRqEmail()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqEmail()
	 * @method \string fillRqEmail()
	 * @method \string getRqPhone()
	 * @method \Bitrix\Crm\EO_Requisite setRqPhone(\string|\Bitrix\Main\DB\SqlExpression $rqPhone)
	 * @method bool hasRqPhone()
	 * @method bool isRqPhoneFilled()
	 * @method bool isRqPhoneChanged()
	 * @method \string remindActualRqPhone()
	 * @method \string requireRqPhone()
	 * @method \Bitrix\Crm\EO_Requisite resetRqPhone()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqPhone()
	 * @method \string fillRqPhone()
	 * @method \string getRqFax()
	 * @method \Bitrix\Crm\EO_Requisite setRqFax(\string|\Bitrix\Main\DB\SqlExpression $rqFax)
	 * @method bool hasRqFax()
	 * @method bool isRqFaxFilled()
	 * @method bool isRqFaxChanged()
	 * @method \string remindActualRqFax()
	 * @method \string requireRqFax()
	 * @method \Bitrix\Crm\EO_Requisite resetRqFax()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqFax()
	 * @method \string fillRqFax()
	 * @method \string getRqIdentDoc()
	 * @method \Bitrix\Crm\EO_Requisite setRqIdentDoc(\string|\Bitrix\Main\DB\SqlExpression $rqIdentDoc)
	 * @method bool hasRqIdentDoc()
	 * @method bool isRqIdentDocFilled()
	 * @method bool isRqIdentDocChanged()
	 * @method \string remindActualRqIdentDoc()
	 * @method \string requireRqIdentDoc()
	 * @method \Bitrix\Crm\EO_Requisite resetRqIdentDoc()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqIdentDoc()
	 * @method \string fillRqIdentDoc()
	 * @method \string getRqIdentDocSer()
	 * @method \Bitrix\Crm\EO_Requisite setRqIdentDocSer(\string|\Bitrix\Main\DB\SqlExpression $rqIdentDocSer)
	 * @method bool hasRqIdentDocSer()
	 * @method bool isRqIdentDocSerFilled()
	 * @method bool isRqIdentDocSerChanged()
	 * @method \string remindActualRqIdentDocSer()
	 * @method \string requireRqIdentDocSer()
	 * @method \Bitrix\Crm\EO_Requisite resetRqIdentDocSer()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqIdentDocSer()
	 * @method \string fillRqIdentDocSer()
	 * @method \string getRqIdentDocNum()
	 * @method \Bitrix\Crm\EO_Requisite setRqIdentDocNum(\string|\Bitrix\Main\DB\SqlExpression $rqIdentDocNum)
	 * @method bool hasRqIdentDocNum()
	 * @method bool isRqIdentDocNumFilled()
	 * @method bool isRqIdentDocNumChanged()
	 * @method \string remindActualRqIdentDocNum()
	 * @method \string requireRqIdentDocNum()
	 * @method \Bitrix\Crm\EO_Requisite resetRqIdentDocNum()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqIdentDocNum()
	 * @method \string fillRqIdentDocNum()
	 * @method \string getRqIdentDocPersNum()
	 * @method \Bitrix\Crm\EO_Requisite setRqIdentDocPersNum(\string|\Bitrix\Main\DB\SqlExpression $rqIdentDocPersNum)
	 * @method bool hasRqIdentDocPersNum()
	 * @method bool isRqIdentDocPersNumFilled()
	 * @method bool isRqIdentDocPersNumChanged()
	 * @method \string remindActualRqIdentDocPersNum()
	 * @method \string requireRqIdentDocPersNum()
	 * @method \Bitrix\Crm\EO_Requisite resetRqIdentDocPersNum()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqIdentDocPersNum()
	 * @method \string fillRqIdentDocPersNum()
	 * @method \string getRqIdentDocDate()
	 * @method \Bitrix\Crm\EO_Requisite setRqIdentDocDate(\string|\Bitrix\Main\DB\SqlExpression $rqIdentDocDate)
	 * @method bool hasRqIdentDocDate()
	 * @method bool isRqIdentDocDateFilled()
	 * @method bool isRqIdentDocDateChanged()
	 * @method \string remindActualRqIdentDocDate()
	 * @method \string requireRqIdentDocDate()
	 * @method \Bitrix\Crm\EO_Requisite resetRqIdentDocDate()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqIdentDocDate()
	 * @method \string fillRqIdentDocDate()
	 * @method \string getRqIdentDocIssuedBy()
	 * @method \Bitrix\Crm\EO_Requisite setRqIdentDocIssuedBy(\string|\Bitrix\Main\DB\SqlExpression $rqIdentDocIssuedBy)
	 * @method bool hasRqIdentDocIssuedBy()
	 * @method bool isRqIdentDocIssuedByFilled()
	 * @method bool isRqIdentDocIssuedByChanged()
	 * @method \string remindActualRqIdentDocIssuedBy()
	 * @method \string requireRqIdentDocIssuedBy()
	 * @method \Bitrix\Crm\EO_Requisite resetRqIdentDocIssuedBy()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqIdentDocIssuedBy()
	 * @method \string fillRqIdentDocIssuedBy()
	 * @method \string getRqIdentDocDepCode()
	 * @method \Bitrix\Crm\EO_Requisite setRqIdentDocDepCode(\string|\Bitrix\Main\DB\SqlExpression $rqIdentDocDepCode)
	 * @method bool hasRqIdentDocDepCode()
	 * @method bool isRqIdentDocDepCodeFilled()
	 * @method bool isRqIdentDocDepCodeChanged()
	 * @method \string remindActualRqIdentDocDepCode()
	 * @method \string requireRqIdentDocDepCode()
	 * @method \Bitrix\Crm\EO_Requisite resetRqIdentDocDepCode()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqIdentDocDepCode()
	 * @method \string fillRqIdentDocDepCode()
	 * @method \string getRqInn()
	 * @method \Bitrix\Crm\EO_Requisite setRqInn(\string|\Bitrix\Main\DB\SqlExpression $rqInn)
	 * @method bool hasRqInn()
	 * @method bool isRqInnFilled()
	 * @method bool isRqInnChanged()
	 * @method \string remindActualRqInn()
	 * @method \string requireRqInn()
	 * @method \Bitrix\Crm\EO_Requisite resetRqInn()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqInn()
	 * @method \string fillRqInn()
	 * @method \string getRqKpp()
	 * @method \Bitrix\Crm\EO_Requisite setRqKpp(\string|\Bitrix\Main\DB\SqlExpression $rqKpp)
	 * @method bool hasRqKpp()
	 * @method bool isRqKppFilled()
	 * @method bool isRqKppChanged()
	 * @method \string remindActualRqKpp()
	 * @method \string requireRqKpp()
	 * @method \Bitrix\Crm\EO_Requisite resetRqKpp()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqKpp()
	 * @method \string fillRqKpp()
	 * @method \string getRqUsrle()
	 * @method \Bitrix\Crm\EO_Requisite setRqUsrle(\string|\Bitrix\Main\DB\SqlExpression $rqUsrle)
	 * @method bool hasRqUsrle()
	 * @method bool isRqUsrleFilled()
	 * @method bool isRqUsrleChanged()
	 * @method \string remindActualRqUsrle()
	 * @method \string requireRqUsrle()
	 * @method \Bitrix\Crm\EO_Requisite resetRqUsrle()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqUsrle()
	 * @method \string fillRqUsrle()
	 * @method \string getRqIfns()
	 * @method \Bitrix\Crm\EO_Requisite setRqIfns(\string|\Bitrix\Main\DB\SqlExpression $rqIfns)
	 * @method bool hasRqIfns()
	 * @method bool isRqIfnsFilled()
	 * @method bool isRqIfnsChanged()
	 * @method \string remindActualRqIfns()
	 * @method \string requireRqIfns()
	 * @method \Bitrix\Crm\EO_Requisite resetRqIfns()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqIfns()
	 * @method \string fillRqIfns()
	 * @method \string getRqOgrn()
	 * @method \Bitrix\Crm\EO_Requisite setRqOgrn(\string|\Bitrix\Main\DB\SqlExpression $rqOgrn)
	 * @method bool hasRqOgrn()
	 * @method bool isRqOgrnFilled()
	 * @method bool isRqOgrnChanged()
	 * @method \string remindActualRqOgrn()
	 * @method \string requireRqOgrn()
	 * @method \Bitrix\Crm\EO_Requisite resetRqOgrn()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqOgrn()
	 * @method \string fillRqOgrn()
	 * @method \string getRqOgrnip()
	 * @method \Bitrix\Crm\EO_Requisite setRqOgrnip(\string|\Bitrix\Main\DB\SqlExpression $rqOgrnip)
	 * @method bool hasRqOgrnip()
	 * @method bool isRqOgrnipFilled()
	 * @method bool isRqOgrnipChanged()
	 * @method \string remindActualRqOgrnip()
	 * @method \string requireRqOgrnip()
	 * @method \Bitrix\Crm\EO_Requisite resetRqOgrnip()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqOgrnip()
	 * @method \string fillRqOgrnip()
	 * @method \string getRqOkpo()
	 * @method \Bitrix\Crm\EO_Requisite setRqOkpo(\string|\Bitrix\Main\DB\SqlExpression $rqOkpo)
	 * @method bool hasRqOkpo()
	 * @method bool isRqOkpoFilled()
	 * @method bool isRqOkpoChanged()
	 * @method \string remindActualRqOkpo()
	 * @method \string requireRqOkpo()
	 * @method \Bitrix\Crm\EO_Requisite resetRqOkpo()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqOkpo()
	 * @method \string fillRqOkpo()
	 * @method \string getRqOktmo()
	 * @method \Bitrix\Crm\EO_Requisite setRqOktmo(\string|\Bitrix\Main\DB\SqlExpression $rqOktmo)
	 * @method bool hasRqOktmo()
	 * @method bool isRqOktmoFilled()
	 * @method bool isRqOktmoChanged()
	 * @method \string remindActualRqOktmo()
	 * @method \string requireRqOktmo()
	 * @method \Bitrix\Crm\EO_Requisite resetRqOktmo()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqOktmo()
	 * @method \string fillRqOktmo()
	 * @method \string getRqOkved()
	 * @method \Bitrix\Crm\EO_Requisite setRqOkved(\string|\Bitrix\Main\DB\SqlExpression $rqOkved)
	 * @method bool hasRqOkved()
	 * @method bool isRqOkvedFilled()
	 * @method bool isRqOkvedChanged()
	 * @method \string remindActualRqOkved()
	 * @method \string requireRqOkved()
	 * @method \Bitrix\Crm\EO_Requisite resetRqOkved()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqOkved()
	 * @method \string fillRqOkved()
	 * @method \string getRqEdrpou()
	 * @method \Bitrix\Crm\EO_Requisite setRqEdrpou(\string|\Bitrix\Main\DB\SqlExpression $rqEdrpou)
	 * @method bool hasRqEdrpou()
	 * @method bool isRqEdrpouFilled()
	 * @method bool isRqEdrpouChanged()
	 * @method \string remindActualRqEdrpou()
	 * @method \string requireRqEdrpou()
	 * @method \Bitrix\Crm\EO_Requisite resetRqEdrpou()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqEdrpou()
	 * @method \string fillRqEdrpou()
	 * @method \string getRqDrfo()
	 * @method \Bitrix\Crm\EO_Requisite setRqDrfo(\string|\Bitrix\Main\DB\SqlExpression $rqDrfo)
	 * @method bool hasRqDrfo()
	 * @method bool isRqDrfoFilled()
	 * @method bool isRqDrfoChanged()
	 * @method \string remindActualRqDrfo()
	 * @method \string requireRqDrfo()
	 * @method \Bitrix\Crm\EO_Requisite resetRqDrfo()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqDrfo()
	 * @method \string fillRqDrfo()
	 * @method \string getRqKbe()
	 * @method \Bitrix\Crm\EO_Requisite setRqKbe(\string|\Bitrix\Main\DB\SqlExpression $rqKbe)
	 * @method bool hasRqKbe()
	 * @method bool isRqKbeFilled()
	 * @method bool isRqKbeChanged()
	 * @method \string remindActualRqKbe()
	 * @method \string requireRqKbe()
	 * @method \Bitrix\Crm\EO_Requisite resetRqKbe()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqKbe()
	 * @method \string fillRqKbe()
	 * @method \string getRqIin()
	 * @method \Bitrix\Crm\EO_Requisite setRqIin(\string|\Bitrix\Main\DB\SqlExpression $rqIin)
	 * @method bool hasRqIin()
	 * @method bool isRqIinFilled()
	 * @method bool isRqIinChanged()
	 * @method \string remindActualRqIin()
	 * @method \string requireRqIin()
	 * @method \Bitrix\Crm\EO_Requisite resetRqIin()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqIin()
	 * @method \string fillRqIin()
	 * @method \string getRqBin()
	 * @method \Bitrix\Crm\EO_Requisite setRqBin(\string|\Bitrix\Main\DB\SqlExpression $rqBin)
	 * @method bool hasRqBin()
	 * @method bool isRqBinFilled()
	 * @method bool isRqBinChanged()
	 * @method \string remindActualRqBin()
	 * @method \string requireRqBin()
	 * @method \Bitrix\Crm\EO_Requisite resetRqBin()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqBin()
	 * @method \string fillRqBin()
	 * @method \string getRqStCertSer()
	 * @method \Bitrix\Crm\EO_Requisite setRqStCertSer(\string|\Bitrix\Main\DB\SqlExpression $rqStCertSer)
	 * @method bool hasRqStCertSer()
	 * @method bool isRqStCertSerFilled()
	 * @method bool isRqStCertSerChanged()
	 * @method \string remindActualRqStCertSer()
	 * @method \string requireRqStCertSer()
	 * @method \Bitrix\Crm\EO_Requisite resetRqStCertSer()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqStCertSer()
	 * @method \string fillRqStCertSer()
	 * @method \string getRqStCertNum()
	 * @method \Bitrix\Crm\EO_Requisite setRqStCertNum(\string|\Bitrix\Main\DB\SqlExpression $rqStCertNum)
	 * @method bool hasRqStCertNum()
	 * @method bool isRqStCertNumFilled()
	 * @method bool isRqStCertNumChanged()
	 * @method \string remindActualRqStCertNum()
	 * @method \string requireRqStCertNum()
	 * @method \Bitrix\Crm\EO_Requisite resetRqStCertNum()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqStCertNum()
	 * @method \string fillRqStCertNum()
	 * @method \string getRqStCertDate()
	 * @method \Bitrix\Crm\EO_Requisite setRqStCertDate(\string|\Bitrix\Main\DB\SqlExpression $rqStCertDate)
	 * @method bool hasRqStCertDate()
	 * @method bool isRqStCertDateFilled()
	 * @method bool isRqStCertDateChanged()
	 * @method \string remindActualRqStCertDate()
	 * @method \string requireRqStCertDate()
	 * @method \Bitrix\Crm\EO_Requisite resetRqStCertDate()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqStCertDate()
	 * @method \string fillRqStCertDate()
	 * @method \boolean getRqVatPayer()
	 * @method \Bitrix\Crm\EO_Requisite setRqVatPayer(\boolean|\Bitrix\Main\DB\SqlExpression $rqVatPayer)
	 * @method bool hasRqVatPayer()
	 * @method bool isRqVatPayerFilled()
	 * @method bool isRqVatPayerChanged()
	 * @method \boolean remindActualRqVatPayer()
	 * @method \boolean requireRqVatPayer()
	 * @method \Bitrix\Crm\EO_Requisite resetRqVatPayer()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqVatPayer()
	 * @method \boolean fillRqVatPayer()
	 * @method \string getRqVatId()
	 * @method \Bitrix\Crm\EO_Requisite setRqVatId(\string|\Bitrix\Main\DB\SqlExpression $rqVatId)
	 * @method bool hasRqVatId()
	 * @method bool isRqVatIdFilled()
	 * @method bool isRqVatIdChanged()
	 * @method \string remindActualRqVatId()
	 * @method \string requireRqVatId()
	 * @method \Bitrix\Crm\EO_Requisite resetRqVatId()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqVatId()
	 * @method \string fillRqVatId()
	 * @method \string getRqVatCertSer()
	 * @method \Bitrix\Crm\EO_Requisite setRqVatCertSer(\string|\Bitrix\Main\DB\SqlExpression $rqVatCertSer)
	 * @method bool hasRqVatCertSer()
	 * @method bool isRqVatCertSerFilled()
	 * @method bool isRqVatCertSerChanged()
	 * @method \string remindActualRqVatCertSer()
	 * @method \string requireRqVatCertSer()
	 * @method \Bitrix\Crm\EO_Requisite resetRqVatCertSer()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqVatCertSer()
	 * @method \string fillRqVatCertSer()
	 * @method \string getRqVatCertNum()
	 * @method \Bitrix\Crm\EO_Requisite setRqVatCertNum(\string|\Bitrix\Main\DB\SqlExpression $rqVatCertNum)
	 * @method bool hasRqVatCertNum()
	 * @method bool isRqVatCertNumFilled()
	 * @method bool isRqVatCertNumChanged()
	 * @method \string remindActualRqVatCertNum()
	 * @method \string requireRqVatCertNum()
	 * @method \Bitrix\Crm\EO_Requisite resetRqVatCertNum()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqVatCertNum()
	 * @method \string fillRqVatCertNum()
	 * @method \string getRqVatCertDate()
	 * @method \Bitrix\Crm\EO_Requisite setRqVatCertDate(\string|\Bitrix\Main\DB\SqlExpression $rqVatCertDate)
	 * @method bool hasRqVatCertDate()
	 * @method bool isRqVatCertDateFilled()
	 * @method bool isRqVatCertDateChanged()
	 * @method \string remindActualRqVatCertDate()
	 * @method \string requireRqVatCertDate()
	 * @method \Bitrix\Crm\EO_Requisite resetRqVatCertDate()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqVatCertDate()
	 * @method \string fillRqVatCertDate()
	 * @method \string getRqResidenceCountry()
	 * @method \Bitrix\Crm\EO_Requisite setRqResidenceCountry(\string|\Bitrix\Main\DB\SqlExpression $rqResidenceCountry)
	 * @method bool hasRqResidenceCountry()
	 * @method bool isRqResidenceCountryFilled()
	 * @method bool isRqResidenceCountryChanged()
	 * @method \string remindActualRqResidenceCountry()
	 * @method \string requireRqResidenceCountry()
	 * @method \Bitrix\Crm\EO_Requisite resetRqResidenceCountry()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqResidenceCountry()
	 * @method \string fillRqResidenceCountry()
	 * @method \string getRqBaseDoc()
	 * @method \Bitrix\Crm\EO_Requisite setRqBaseDoc(\string|\Bitrix\Main\DB\SqlExpression $rqBaseDoc)
	 * @method bool hasRqBaseDoc()
	 * @method bool isRqBaseDocFilled()
	 * @method bool isRqBaseDocChanged()
	 * @method \string remindActualRqBaseDoc()
	 * @method \string requireRqBaseDoc()
	 * @method \Bitrix\Crm\EO_Requisite resetRqBaseDoc()
	 * @method \Bitrix\Crm\EO_Requisite unsetRqBaseDoc()
	 * @method \string fillRqBaseDoc()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Requisite set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Requisite reset($fieldName)
	 * @method \Bitrix\Crm\EO_Requisite unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Requisite wakeUp($data)
	 */
	class EO_Requisite {
		/* @var \Bitrix\Crm\RequisiteTable */
		static public $dataClass = '\Bitrix\Crm\RequisiteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Requisite_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \int[] getPresetIdList()
	 * @method \int[] fillPresetId()
	 * @method \Bitrix\Crm\EO_Preset[] getPresetList()
	 * @method \Bitrix\Crm\EO_Requisite_Collection getPresetCollection()
	 * @method \Bitrix\Crm\EO_Preset_Collection fillPreset()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \Bitrix\Main\Type\DateTime[] getDateModifyList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateModify()
	 * @method \int[] getCreatedByIdList()
	 * @method \int[] fillCreatedById()
	 * @method \int[] getModifyByIdList()
	 * @method \int[] fillModifyById()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \string[] getOriginatorIdList()
	 * @method \string[] fillOriginatorId()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \boolean[] getAddressOnlyList()
	 * @method \boolean[] fillAddressOnly()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \string[] getRqNameList()
	 * @method \string[] fillRqName()
	 * @method \string[] getRqFirstNameList()
	 * @method \string[] fillRqFirstName()
	 * @method \string[] getRqLastNameList()
	 * @method \string[] fillRqLastName()
	 * @method \string[] getRqSecondNameList()
	 * @method \string[] fillRqSecondName()
	 * @method \string[] getRqCompanyNameList()
	 * @method \string[] fillRqCompanyName()
	 * @method \string[] getRqCompanyFullNameList()
	 * @method \string[] fillRqCompanyFullName()
	 * @method \string[] getRqCompanyRegDateList()
	 * @method \string[] fillRqCompanyRegDate()
	 * @method \string[] getRqDirectorList()
	 * @method \string[] fillRqDirector()
	 * @method \string[] getRqAccountantList()
	 * @method \string[] fillRqAccountant()
	 * @method \string[] getRqCeoNameList()
	 * @method \string[] fillRqCeoName()
	 * @method \string[] getRqCeoWorkPosList()
	 * @method \string[] fillRqCeoWorkPos()
	 * @method \Bitrix\Crm\EO_Address[] getRqAddrList()
	 * @method \Bitrix\Crm\EO_Requisite_Collection getRqAddrCollection()
	 * @method \Bitrix\Crm\EO_Address_Collection fillRqAddr()
	 * @method \string[] getRqContactList()
	 * @method \string[] fillRqContact()
	 * @method \string[] getRqEmailList()
	 * @method \string[] fillRqEmail()
	 * @method \string[] getRqPhoneList()
	 * @method \string[] fillRqPhone()
	 * @method \string[] getRqFaxList()
	 * @method \string[] fillRqFax()
	 * @method \string[] getRqIdentDocList()
	 * @method \string[] fillRqIdentDoc()
	 * @method \string[] getRqIdentDocSerList()
	 * @method \string[] fillRqIdentDocSer()
	 * @method \string[] getRqIdentDocNumList()
	 * @method \string[] fillRqIdentDocNum()
	 * @method \string[] getRqIdentDocPersNumList()
	 * @method \string[] fillRqIdentDocPersNum()
	 * @method \string[] getRqIdentDocDateList()
	 * @method \string[] fillRqIdentDocDate()
	 * @method \string[] getRqIdentDocIssuedByList()
	 * @method \string[] fillRqIdentDocIssuedBy()
	 * @method \string[] getRqIdentDocDepCodeList()
	 * @method \string[] fillRqIdentDocDepCode()
	 * @method \string[] getRqInnList()
	 * @method \string[] fillRqInn()
	 * @method \string[] getRqKppList()
	 * @method \string[] fillRqKpp()
	 * @method \string[] getRqUsrleList()
	 * @method \string[] fillRqUsrle()
	 * @method \string[] getRqIfnsList()
	 * @method \string[] fillRqIfns()
	 * @method \string[] getRqOgrnList()
	 * @method \string[] fillRqOgrn()
	 * @method \string[] getRqOgrnipList()
	 * @method \string[] fillRqOgrnip()
	 * @method \string[] getRqOkpoList()
	 * @method \string[] fillRqOkpo()
	 * @method \string[] getRqOktmoList()
	 * @method \string[] fillRqOktmo()
	 * @method \string[] getRqOkvedList()
	 * @method \string[] fillRqOkved()
	 * @method \string[] getRqEdrpouList()
	 * @method \string[] fillRqEdrpou()
	 * @method \string[] getRqDrfoList()
	 * @method \string[] fillRqDrfo()
	 * @method \string[] getRqKbeList()
	 * @method \string[] fillRqKbe()
	 * @method \string[] getRqIinList()
	 * @method \string[] fillRqIin()
	 * @method \string[] getRqBinList()
	 * @method \string[] fillRqBin()
	 * @method \string[] getRqStCertSerList()
	 * @method \string[] fillRqStCertSer()
	 * @method \string[] getRqStCertNumList()
	 * @method \string[] fillRqStCertNum()
	 * @method \string[] getRqStCertDateList()
	 * @method \string[] fillRqStCertDate()
	 * @method \boolean[] getRqVatPayerList()
	 * @method \boolean[] fillRqVatPayer()
	 * @method \string[] getRqVatIdList()
	 * @method \string[] fillRqVatId()
	 * @method \string[] getRqVatCertSerList()
	 * @method \string[] fillRqVatCertSer()
	 * @method \string[] getRqVatCertNumList()
	 * @method \string[] fillRqVatCertNum()
	 * @method \string[] getRqVatCertDateList()
	 * @method \string[] fillRqVatCertDate()
	 * @method \string[] getRqResidenceCountryList()
	 * @method \string[] fillRqResidenceCountry()
	 * @method \string[] getRqBaseDocList()
	 * @method \string[] fillRqBaseDoc()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Requisite $object)
	 * @method bool has(\Bitrix\Crm\EO_Requisite $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Requisite getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Requisite[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Requisite $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Requisite_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Requisite current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Requisite_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\RequisiteTable */
		static public $dataClass = '\Bitrix\Crm\RequisiteTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Requisite_Query query()
	 * @method static EO_Requisite_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Requisite_Result getById($id)
	 * @method static EO_Requisite_Result getList(array $parameters = array())
	 * @method static EO_Requisite_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Requisite createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Requisite_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Requisite wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Requisite_Collection wakeUpCollection($rows)
	 */
	class RequisiteTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Requisite_Result exec()
	 * @method \Bitrix\Crm\EO_Requisite fetchObject()
	 * @method \Bitrix\Crm\EO_Requisite_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Requisite_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Requisite fetchObject()
	 * @method \Bitrix\Crm\EO_Requisite_Collection fetchCollection()
	 */
	class EO_Requisite_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Requisite createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Requisite_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Requisite wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Requisite_Collection wakeUpCollection($rows)
	 */
	class EO_Requisite_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\RoleTable:crm/lib/role.php:f9332cabe2a0624b303dc3df51edb20f */
namespace Bitrix\Crm {
	/**
	 * EO_Role
	 * @see \Bitrix\Crm\RoleTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Role setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_Role setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_Role resetName()
	 * @method \Bitrix\Crm\EO_Role unsetName()
	 * @method \string fillName()
	 * @method \Bitrix\Crm\EO_RolePermission getPermission()
	 * @method \Bitrix\Crm\EO_RolePermission remindActualPermission()
	 * @method \Bitrix\Crm\EO_RolePermission requirePermission()
	 * @method \Bitrix\Crm\EO_Role setPermission(\Bitrix\Crm\EO_RolePermission $object)
	 * @method \Bitrix\Crm\EO_Role resetPermission()
	 * @method \Bitrix\Crm\EO_Role unsetPermission()
	 * @method bool hasPermission()
	 * @method bool isPermissionFilled()
	 * @method bool isPermissionChanged()
	 * @method \Bitrix\Crm\EO_RolePermission fillPermission()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Role set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Role reset($fieldName)
	 * @method \Bitrix\Crm\EO_Role unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Role wakeUp($data)
	 */
	class EO_Role {
		/* @var \Bitrix\Crm\RoleTable */
		static public $dataClass = '\Bitrix\Crm\RoleTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Role_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \Bitrix\Crm\EO_RolePermission[] getPermissionList()
	 * @method \Bitrix\Crm\EO_Role_Collection getPermissionCollection()
	 * @method \Bitrix\Crm\EO_RolePermission_Collection fillPermission()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Role $object)
	 * @method bool has(\Bitrix\Crm\EO_Role $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Role getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Role[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Role $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Role_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Role current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Role_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\RoleTable */
		static public $dataClass = '\Bitrix\Crm\RoleTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Role_Query query()
	 * @method static EO_Role_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Role_Result getById($id)
	 * @method static EO_Role_Result getList(array $parameters = array())
	 * @method static EO_Role_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Role createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Role_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Role wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Role_Collection wakeUpCollection($rows)
	 */
	class RoleTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Role_Result exec()
	 * @method \Bitrix\Crm\EO_Role fetchObject()
	 * @method \Bitrix\Crm\EO_Role_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Role_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Role fetchObject()
	 * @method \Bitrix\Crm\EO_Role_Collection fetchCollection()
	 */
	class EO_Role_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Role createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Role_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Role wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Role_Collection wakeUpCollection($rows)
	 */
	class EO_Role_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\RolePermissionTable:crm/lib/rolepermission.php:f0f03595197c3d0adddf59eab39183f7 */
namespace Bitrix\Crm {
	/**
	 * EO_RolePermission
	 * @see \Bitrix\Crm\RolePermissionTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_RolePermission setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getRoleId()
	 * @method \Bitrix\Crm\EO_RolePermission setRoleId(\int|\Bitrix\Main\DB\SqlExpression $roleId)
	 * @method bool hasRoleId()
	 * @method bool isRoleIdFilled()
	 * @method bool isRoleIdChanged()
	 * @method \int remindActualRoleId()
	 * @method \int requireRoleId()
	 * @method \Bitrix\Crm\EO_RolePermission resetRoleId()
	 * @method \Bitrix\Crm\EO_RolePermission unsetRoleId()
	 * @method \int fillRoleId()
	 * @method \string getEntity()
	 * @method \Bitrix\Crm\EO_RolePermission setEntity(\string|\Bitrix\Main\DB\SqlExpression $entity)
	 * @method bool hasEntity()
	 * @method bool isEntityFilled()
	 * @method bool isEntityChanged()
	 * @method \string remindActualEntity()
	 * @method \string requireEntity()
	 * @method \Bitrix\Crm\EO_RolePermission resetEntity()
	 * @method \Bitrix\Crm\EO_RolePermission unsetEntity()
	 * @method \string fillEntity()
	 * @method \string getField()
	 * @method \Bitrix\Crm\EO_RolePermission setField(\string|\Bitrix\Main\DB\SqlExpression $field)
	 * @method bool hasField()
	 * @method bool isFieldFilled()
	 * @method bool isFieldChanged()
	 * @method \string remindActualField()
	 * @method \string requireField()
	 * @method \Bitrix\Crm\EO_RolePermission resetField()
	 * @method \Bitrix\Crm\EO_RolePermission unsetField()
	 * @method \string fillField()
	 * @method \string getFieldValue()
	 * @method \Bitrix\Crm\EO_RolePermission setFieldValue(\string|\Bitrix\Main\DB\SqlExpression $fieldValue)
	 * @method bool hasFieldValue()
	 * @method bool isFieldValueFilled()
	 * @method bool isFieldValueChanged()
	 * @method \string remindActualFieldValue()
	 * @method \string requireFieldValue()
	 * @method \Bitrix\Crm\EO_RolePermission resetFieldValue()
	 * @method \Bitrix\Crm\EO_RolePermission unsetFieldValue()
	 * @method \string fillFieldValue()
	 * @method \string getPermType()
	 * @method \Bitrix\Crm\EO_RolePermission setPermType(\string|\Bitrix\Main\DB\SqlExpression $permType)
	 * @method bool hasPermType()
	 * @method bool isPermTypeFilled()
	 * @method bool isPermTypeChanged()
	 * @method \string remindActualPermType()
	 * @method \string requirePermType()
	 * @method \Bitrix\Crm\EO_RolePermission resetPermType()
	 * @method \Bitrix\Crm\EO_RolePermission unsetPermType()
	 * @method \string fillPermType()
	 * @method \string getAttr()
	 * @method \Bitrix\Crm\EO_RolePermission setAttr(\string|\Bitrix\Main\DB\SqlExpression $attr)
	 * @method bool hasAttr()
	 * @method bool isAttrFilled()
	 * @method bool isAttrChanged()
	 * @method \string remindActualAttr()
	 * @method \string requireAttr()
	 * @method \Bitrix\Crm\EO_RolePermission resetAttr()
	 * @method \Bitrix\Crm\EO_RolePermission unsetAttr()
	 * @method \string fillAttr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_RolePermission set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_RolePermission reset($fieldName)
	 * @method \Bitrix\Crm\EO_RolePermission unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_RolePermission wakeUp($data)
	 */
	class EO_RolePermission {
		/* @var \Bitrix\Crm\RolePermissionTable */
		static public $dataClass = '\Bitrix\Crm\RolePermissionTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_RolePermission_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getRoleIdList()
	 * @method \int[] fillRoleId()
	 * @method \string[] getEntityList()
	 * @method \string[] fillEntity()
	 * @method \string[] getFieldList()
	 * @method \string[] fillField()
	 * @method \string[] getFieldValueList()
	 * @method \string[] fillFieldValue()
	 * @method \string[] getPermTypeList()
	 * @method \string[] fillPermType()
	 * @method \string[] getAttrList()
	 * @method \string[] fillAttr()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_RolePermission $object)
	 * @method bool has(\Bitrix\Crm\EO_RolePermission $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_RolePermission getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_RolePermission[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_RolePermission $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_RolePermission_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_RolePermission current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_RolePermission_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\RolePermissionTable */
		static public $dataClass = '\Bitrix\Crm\RolePermissionTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_RolePermission_Query query()
	 * @method static EO_RolePermission_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_RolePermission_Result getById($id)
	 * @method static EO_RolePermission_Result getList(array $parameters = array())
	 * @method static EO_RolePermission_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_RolePermission createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_RolePermission_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_RolePermission wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_RolePermission_Collection wakeUpCollection($rows)
	 */
	class RolePermissionTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_RolePermission_Result exec()
	 * @method \Bitrix\Crm\EO_RolePermission fetchObject()
	 * @method \Bitrix\Crm\EO_RolePermission_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_RolePermission_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_RolePermission fetchObject()
	 * @method \Bitrix\Crm\EO_RolePermission_Collection fetchCollection()
	 */
	class EO_RolePermission_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_RolePermission createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_RolePermission_Collection createCollection()
	 * @method \Bitrix\Crm\EO_RolePermission wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_RolePermission_Collection wakeUpCollection($rows)
	 */
	class EO_RolePermission_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\SiteButton\Internals\AvatarTable:crm/lib/sitebutton/internals/avatar.php:ab5235661814611b9183f3a619bd9c01 */
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * EO_Avatar
	 * @see \Bitrix\Crm\SiteButton\Internals\AvatarTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar resetDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getFileId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar setFileId(\int|\Bitrix\Main\DB\SqlExpression $fileId)
	 * @method bool hasFileId()
	 * @method bool isFileIdFilled()
	 * @method bool isFileIdChanged()
	 * @method \int remindActualFileId()
	 * @method \int requireFileId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar resetFileId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar unsetFileId()
	 * @method \int fillFileId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar set($fieldName, $value)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar reset($fieldName)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Avatar wakeUp($data)
	 */
	class EO_Avatar {
		/* @var \Bitrix\Crm\SiteButton\Internals\AvatarTable */
		static public $dataClass = '\Bitrix\Crm\SiteButton\Internals\AvatarTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * EO_Avatar_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getFileIdList()
	 * @method \int[] fillFileId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\SiteButton\Internals\EO_Avatar $object)
	 * @method bool has(\Bitrix\Crm\SiteButton\Internals\EO_Avatar $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar getByPrimary($primary)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar[] getAll()
	 * @method bool remove(\Bitrix\Crm\SiteButton\Internals\EO_Avatar $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Avatar_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Avatar_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\SiteButton\Internals\AvatarTable */
		static public $dataClass = '\Bitrix\Crm\SiteButton\Internals\AvatarTable';
	}
}
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * @method static EO_Avatar_Query query()
	 * @method static EO_Avatar_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Avatar_Result getById($id)
	 * @method static EO_Avatar_Result getList(array $parameters = array())
	 * @method static EO_Avatar_Entity getEntity()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Avatar createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Avatar_Collection createCollection()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Avatar wakeUpObject($row)
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Avatar_Collection wakeUpCollection($rows)
	 */
	class AvatarTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Avatar_Result exec()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar fetchObject()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Avatar_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar fetchObject()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar_Collection fetchCollection()
	 */
	class EO_Avatar_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar_Collection createCollection()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar wakeUpObject($row)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Avatar_Collection wakeUpCollection($rows)
	 */
	class EO_Avatar_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\SiteButton\Internals\ButtonTable:crm/lib/sitebutton/internals/button.php:714b12bb811b1e78c0d44f52393ffa97 */
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * EO_Button
	 * @see \Bitrix\Crm\SiteButton\Internals\ButtonTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getCreatedBy()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setCreatedBy(\int|\Bitrix\Main\DB\SqlExpression $createdBy)
	 * @method bool hasCreatedBy()
	 * @method bool isCreatedByFilled()
	 * @method bool isCreatedByChanged()
	 * @method \int remindActualCreatedBy()
	 * @method \int requireCreatedBy()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetCreatedBy()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetCreatedBy()
	 * @method \int fillCreatedBy()
	 * @method \boolean getActive()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetActive()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetActive()
	 * @method \boolean fillActive()
	 * @method \Bitrix\Main\Type\DateTime getActiveChangeDate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setActiveChangeDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeChangeDate)
	 * @method bool hasActiveChangeDate()
	 * @method bool isActiveChangeDateFilled()
	 * @method bool isActiveChangeDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveChangeDate()
	 * @method \Bitrix\Main\Type\DateTime requireActiveChangeDate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetActiveChangeDate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetActiveChangeDate()
	 * @method \Bitrix\Main\Type\DateTime fillActiveChangeDate()
	 * @method \int getActiveChangeBy()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setActiveChangeBy(\int|\Bitrix\Main\DB\SqlExpression $activeChangeBy)
	 * @method bool hasActiveChangeBy()
	 * @method bool isActiveChangeByFilled()
	 * @method bool isActiveChangeByChanged()
	 * @method \int remindActualActiveChangeBy()
	 * @method \int requireActiveChangeBy()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetActiveChangeBy()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetActiveChangeBy()
	 * @method \int fillActiveChangeBy()
	 * @method \string getName()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetName()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetName()
	 * @method \string fillName()
	 * @method \string getBackgroundColor()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setBackgroundColor(\string|\Bitrix\Main\DB\SqlExpression $backgroundColor)
	 * @method bool hasBackgroundColor()
	 * @method bool isBackgroundColorFilled()
	 * @method bool isBackgroundColorChanged()
	 * @method \string remindActualBackgroundColor()
	 * @method \string requireBackgroundColor()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetBackgroundColor()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetBackgroundColor()
	 * @method \string fillBackgroundColor()
	 * @method \string getIconColor()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setIconColor(\string|\Bitrix\Main\DB\SqlExpression $iconColor)
	 * @method bool hasIconColor()
	 * @method bool isIconColorFilled()
	 * @method bool isIconColorChanged()
	 * @method \string remindActualIconColor()
	 * @method \string requireIconColor()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetIconColor()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetIconColor()
	 * @method \string fillIconColor()
	 * @method \string getLocation()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setLocation(\string|\Bitrix\Main\DB\SqlExpression $location)
	 * @method bool hasLocation()
	 * @method bool isLocationFilled()
	 * @method bool isLocationChanged()
	 * @method \string remindActualLocation()
	 * @method \string requireLocation()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetLocation()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetLocation()
	 * @method \string fillLocation()
	 * @method \int getDelay()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setDelay(\int|\Bitrix\Main\DB\SqlExpression $delay)
	 * @method bool hasDelay()
	 * @method bool isDelayFilled()
	 * @method bool isDelayChanged()
	 * @method \int remindActualDelay()
	 * @method \int requireDelay()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetDelay()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetDelay()
	 * @method \int fillDelay()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetLanguageId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \string getItems()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setItems(\string|\Bitrix\Main\DB\SqlExpression $items)
	 * @method bool hasItems()
	 * @method bool isItemsFilled()
	 * @method bool isItemsChanged()
	 * @method \string remindActualItems()
	 * @method \string requireItems()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetItems()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetItems()
	 * @method \string fillItems()
	 * @method \string getSettings()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetSettings()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetSettings()
	 * @method \string fillSettings()
	 * @method \string getSecurityCode()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setSecurityCode(\string|\Bitrix\Main\DB\SqlExpression $securityCode)
	 * @method bool hasSecurityCode()
	 * @method bool isSecurityCodeFilled()
	 * @method bool isSecurityCodeChanged()
	 * @method \string remindActualSecurityCode()
	 * @method \string requireSecurityCode()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetSecurityCode()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetSecurityCode()
	 * @method \string fillSecurityCode()
	 * @method \boolean getIsSystem()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setIsSystem(\boolean|\Bitrix\Main\DB\SqlExpression $isSystem)
	 * @method bool hasIsSystem()
	 * @method bool isIsSystemFilled()
	 * @method bool isIsSystemChanged()
	 * @method \boolean remindActualIsSystem()
	 * @method \boolean requireIsSystem()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetIsSystem()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetIsSystem()
	 * @method \boolean fillIsSystem()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button resetXmlId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unsetXmlId()
	 * @method \string fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button set($fieldName, $value)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button reset($fieldName)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Button wakeUp($data)
	 */
	class EO_Button {
		/* @var \Bitrix\Crm\SiteButton\Internals\ButtonTable */
		static public $dataClass = '\Bitrix\Crm\SiteButton\Internals\ButtonTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * EO_Button_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getCreatedByList()
	 * @method \int[] fillCreatedBy()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveChangeDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveChangeDate()
	 * @method \int[] getActiveChangeByList()
	 * @method \int[] fillActiveChangeBy()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getBackgroundColorList()
	 * @method \string[] fillBackgroundColor()
	 * @method \string[] getIconColorList()
	 * @method \string[] fillIconColor()
	 * @method \string[] getLocationList()
	 * @method \string[] fillLocation()
	 * @method \int[] getDelayList()
	 * @method \int[] fillDelay()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \string[] getItemsList()
	 * @method \string[] fillItems()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \string[] getSecurityCodeList()
	 * @method \string[] fillSecurityCode()
	 * @method \boolean[] getIsSystemList()
	 * @method \boolean[] fillIsSystem()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\SiteButton\Internals\EO_Button $object)
	 * @method bool has(\Bitrix\Crm\SiteButton\Internals\EO_Button $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button getByPrimary($primary)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button[] getAll()
	 * @method bool remove(\Bitrix\Crm\SiteButton\Internals\EO_Button $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Button_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Button_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\SiteButton\Internals\ButtonTable */
		static public $dataClass = '\Bitrix\Crm\SiteButton\Internals\ButtonTable';
	}
}
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * @method static EO_Button_Query query()
	 * @method static EO_Button_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Button_Result getById($id)
	 * @method static EO_Button_Result getList(array $parameters = array())
	 * @method static EO_Button_Entity getEntity()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Button createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Button_Collection createCollection()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Button wakeUpObject($row)
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Button_Collection wakeUpCollection($rows)
	 */
	class ButtonTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Button_Result exec()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button fetchObject()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Button_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button fetchObject()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button_Collection fetchCollection()
	 */
	class EO_Button_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button_Collection createCollection()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button wakeUpObject($row)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Button_Collection wakeUpCollection($rows)
	 */
	class EO_Button_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\SiteButton\Internals\GuestTable:crm/lib/sitebutton/internals/guest.php:283a90fb995e836faf0bc1614cfbe03f */
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * EO_Guest
	 * @see \Bitrix\Crm\SiteButton\Internals\GuestTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest resetDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \string getGid()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest setGid(\string|\Bitrix\Main\DB\SqlExpression $gid)
	 * @method bool hasGid()
	 * @method bool isGidFilled()
	 * @method bool isGidChanged()
	 * @method \string remindActualGid()
	 * @method \string requireGid()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest resetGid()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest unsetGid()
	 * @method \string fillGid()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest set($fieldName, $value)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest reset($fieldName)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Guest wakeUp($data)
	 */
	class EO_Guest {
		/* @var \Bitrix\Crm\SiteButton\Internals\GuestTable */
		static public $dataClass = '\Bitrix\Crm\SiteButton\Internals\GuestTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * EO_Guest_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \string[] getGidList()
	 * @method \string[] fillGid()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\SiteButton\Internals\EO_Guest $object)
	 * @method bool has(\Bitrix\Crm\SiteButton\Internals\EO_Guest $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest getByPrimary($primary)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest[] getAll()
	 * @method bool remove(\Bitrix\Crm\SiteButton\Internals\EO_Guest $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Guest_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Guest_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\SiteButton\Internals\GuestTable */
		static public $dataClass = '\Bitrix\Crm\SiteButton\Internals\GuestTable';
	}
}
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * @method static EO_Guest_Query query()
	 * @method static EO_Guest_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Guest_Result getById($id)
	 * @method static EO_Guest_Result getList(array $parameters = array())
	 * @method static EO_Guest_Entity getEntity()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Guest createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Guest_Collection createCollection()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Guest wakeUpObject($row)
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_Guest_Collection wakeUpCollection($rows)
	 */
	class GuestTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Guest_Result exec()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest fetchObject()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Guest_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest fetchObject()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest_Collection fetchCollection()
	 */
	class EO_Guest_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest_Collection createCollection()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest wakeUpObject($row)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_Guest_Collection wakeUpCollection($rows)
	 */
	class EO_Guest_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\SiteButton\Internals\GuestEntityTable:crm/lib/sitebutton/internals/guestentity.php:6888e8d501da2e447a901a54d4f31e74 */
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * EO_GuestEntity
	 * @see \Bitrix\Crm\SiteButton\Internals\GuestEntityTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getGuestId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity setGuestId(\int|\Bitrix\Main\DB\SqlExpression $guestId)
	 * @method bool hasGuestId()
	 * @method bool isGuestIdFilled()
	 * @method bool isGuestIdChanged()
	 * @method \int remindActualGuestId()
	 * @method \int requireGuestId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity resetGuestId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity unsetGuestId()
	 * @method \int fillGuestId()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity resetDateCreate()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity resetEntityTypeId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity resetEntityId()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity unsetEntityId()
	 * @method \int fillEntityId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity set($fieldName, $value)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity reset($fieldName)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity wakeUp($data)
	 */
	class EO_GuestEntity {
		/* @var \Bitrix\Crm\SiteButton\Internals\GuestEntityTable */
		static public $dataClass = '\Bitrix\Crm\SiteButton\Internals\GuestEntityTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * EO_GuestEntity_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getGuestIdList()
	 * @method \int[] fillGuestId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\SiteButton\Internals\EO_GuestEntity $object)
	 * @method bool has(\Bitrix\Crm\SiteButton\Internals\EO_GuestEntity $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity getByPrimary($primary)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity[] getAll()
	 * @method bool remove(\Bitrix\Crm\SiteButton\Internals\EO_GuestEntity $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_GuestEntity_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\SiteButton\Internals\GuestEntityTable */
		static public $dataClass = '\Bitrix\Crm\SiteButton\Internals\GuestEntityTable';
	}
}
namespace Bitrix\Crm\SiteButton\Internals {
	/**
	 * @method static EO_GuestEntity_Query query()
	 * @method static EO_GuestEntity_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_GuestEntity_Result getById($id)
	 * @method static EO_GuestEntity_Result getList(array $parameters = array())
	 * @method static EO_GuestEntity_Entity getEntity()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity_Collection createCollection()
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity wakeUpObject($row)
	 * @method static \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity_Collection wakeUpCollection($rows)
	 */
	class GuestEntityTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_GuestEntity_Result exec()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity fetchObject()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_GuestEntity_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity fetchObject()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity_Collection fetchCollection()
	 */
	class EO_GuestEntity_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity_Collection createCollection()
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity wakeUpObject($row)
	 * @method \Bitrix\Crm\SiteButton\Internals\EO_GuestEntity_Collection wakeUpCollection($rows)
	 */
	class EO_GuestEntity_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\ActivityChannelStatisticsTable:crm/lib/statistics/entity/activitychannelstatistics.php:4d153804318bd3083627dfad2d57fd9b */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ActivityChannelStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\ActivityChannelStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics resetCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \int getChannelTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics setChannelTypeId(\int|\Bitrix\Main\DB\SqlExpression $channelTypeId)
	 * @method bool hasChannelTypeId()
	 * @method bool isChannelTypeIdFilled()
	 * @method bool isChannelTypeIdChanged()
	 * @method \string getChannelOriginId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics setChannelOriginId(\string|\Bitrix\Main\DB\SqlExpression $channelOriginId)
	 * @method bool hasChannelOriginId()
	 * @method bool isChannelOriginIdFilled()
	 * @method bool isChannelOriginIdChanged()
	 * @method \string remindActualChannelOriginId()
	 * @method \string requireChannelOriginId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics resetChannelOriginId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics unsetChannelOriginId()
	 * @method \string fillChannelOriginId()
	 * @method \string getChannelComponentId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics setChannelComponentId(\string|\Bitrix\Main\DB\SqlExpression $channelComponentId)
	 * @method bool hasChannelComponentId()
	 * @method bool isChannelComponentIdFilled()
	 * @method bool isChannelComponentIdChanged()
	 * @method \string remindActualChannelComponentId()
	 * @method \string requireChannelComponentId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics resetChannelComponentId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics unsetChannelComponentId()
	 * @method \string fillChannelComponentId()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \string getCompleted()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics setCompleted(\string|\Bitrix\Main\DB\SqlExpression $completed)
	 * @method bool hasCompleted()
	 * @method bool isCompletedFilled()
	 * @method bool isCompletedChanged()
	 * @method \string remindActualCompleted()
	 * @method \string requireCompleted()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics resetCompleted()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics unsetCompleted()
	 * @method \string fillCompleted()
	 * @method \int getDirection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics setDirection(\int|\Bitrix\Main\DB\SqlExpression $direction)
	 * @method bool hasDirection()
	 * @method bool isDirectionFilled()
	 * @method bool isDirectionChanged()
	 * @method \int remindActualDirection()
	 * @method \int requireDirection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics resetDirection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics unsetDirection()
	 * @method \int fillDirection()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics wakeUp($data)
	 */
	class EO_ActivityChannelStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\ActivityChannelStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ActivityChannelStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ActivityChannelStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \int[] getChannelTypeIdList()
	 * @method \string[] getChannelOriginIdList()
	 * @method \string[] fillChannelOriginId()
	 * @method \string[] getChannelComponentIdList()
	 * @method \string[] fillChannelComponentId()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \string[] getCompletedList()
	 * @method \string[] fillCompleted()
	 * @method \int[] getDirectionList()
	 * @method \int[] fillDirection()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ActivityChannelStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\ActivityChannelStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ActivityChannelStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_ActivityChannelStatistics_Query query()
	 * @method static EO_ActivityChannelStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ActivityChannelStatistics_Result getById($id)
	 * @method static EO_ActivityChannelStatistics_Result getList(array $parameters = array())
	 * @method static EO_ActivityChannelStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics_Collection wakeUpCollection($rows)
	 */
	class ActivityChannelStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ActivityChannelStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ActivityChannelStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics_Collection fetchCollection()
	 */
	class EO_ActivityChannelStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityChannelStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_ActivityChannelStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\ActivityStatisticsTable:crm/lib/statistics/entity/activitystatistics.php:c4618dd7644e8eeecc3da3dd645f8129 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ActivityStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\ActivityStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \int getOwnerTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setOwnerTypeId(\int|\Bitrix\Main\DB\SqlExpression $ownerTypeId)
	 * @method bool hasOwnerTypeId()
	 * @method bool isOwnerTypeIdFilled()
	 * @method bool isOwnerTypeIdChanged()
	 * @method \int remindActualOwnerTypeId()
	 * @method \int requireOwnerTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics resetOwnerTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics unsetOwnerTypeId()
	 * @method \int fillOwnerTypeId()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \boolean getCompleted()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setCompleted(\boolean|\Bitrix\Main\DB\SqlExpression $completed)
	 * @method bool hasCompleted()
	 * @method bool isCompletedFilled()
	 * @method bool isCompletedChanged()
	 * @method \boolean remindActualCompleted()
	 * @method \boolean requireCompleted()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics resetCompleted()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics unsetCompleted()
	 * @method \boolean fillCompleted()
	 * @method \int getStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setStatusId(\int|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \int remindActualStatusId()
	 * @method \int requireStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics resetStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics unsetStatusId()
	 * @method \int fillStatusId()
	 * @method \int getMarkId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setMarkId(\int|\Bitrix\Main\DB\SqlExpression $markId)
	 * @method bool hasMarkId()
	 * @method bool isMarkIdFilled()
	 * @method bool isMarkIdChanged()
	 * @method \int remindActualMarkId()
	 * @method \int requireMarkId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics resetMarkId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics unsetMarkId()
	 * @method \int fillMarkId()
	 * @method \string getSourceId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setSourceId(\string|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \string remindActualSourceId()
	 * @method \string requireSourceId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics resetSourceId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics unsetSourceId()
	 * @method \string fillSourceId()
	 * @method \int getStreamId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setStreamId(\int|\Bitrix\Main\DB\SqlExpression $streamId)
	 * @method bool hasStreamId()
	 * @method bool isStreamIdFilled()
	 * @method bool isStreamIdChanged()
	 * @method \int remindActualStreamId()
	 * @method \int requireStreamId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics resetStreamId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics unsetStreamId()
	 * @method \int fillStreamId()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics resetCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \float getSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics setSumTotal(\float|\Bitrix\Main\DB\SqlExpression $sumTotal)
	 * @method bool hasSumTotal()
	 * @method bool isSumTotalFilled()
	 * @method bool isSumTotalChanged()
	 * @method \float remindActualSumTotal()
	 * @method \float requireSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics resetSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics unsetSumTotal()
	 * @method \float fillSumTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics wakeUp($data)
	 */
	class EO_ActivityStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\ActivityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ActivityStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ActivityStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \int[] getOwnerTypeIdList()
	 * @method \int[] fillOwnerTypeId()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \boolean[] getCompletedList()
	 * @method \boolean[] fillCompleted()
	 * @method \int[] getStatusIdList()
	 * @method \int[] fillStatusId()
	 * @method \int[] getMarkIdList()
	 * @method \int[] fillMarkId()
	 * @method \string[] getSourceIdList()
	 * @method \string[] fillSourceId()
	 * @method \int[] getStreamIdList()
	 * @method \int[] fillStreamId()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \float[] getSumTotalList()
	 * @method \float[] fillSumTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ActivityStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\ActivityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ActivityStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_ActivityStatistics_Query query()
	 * @method static EO_ActivityStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ActivityStatistics_Result getById($id)
	 * @method static EO_ActivityStatistics_Result getList(array $parameters = array())
	 * @method static EO_ActivityStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics_Collection wakeUpCollection($rows)
	 */
	class ActivityStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ActivityStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ActivityStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics_Collection fetchCollection()
	 */
	class EO_ActivityStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ActivityStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_ActivityStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\CompanyActivityMarkStatisticsTable:crm/lib/statistics/entity/companyactivitymarkstatistics.php:c05c1795a3ac80c9b3753e13592ffa6e */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyActivityMarkStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\CompanyActivityMarkStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \string getSourceId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics setSourceId(\string|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getNoneQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics setNoneQty(\int|\Bitrix\Main\DB\SqlExpression $noneQty)
	 * @method bool hasNoneQty()
	 * @method bool isNoneQtyFilled()
	 * @method bool isNoneQtyChanged()
	 * @method \int remindActualNoneQty()
	 * @method \int requireNoneQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics resetNoneQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics unsetNoneQty()
	 * @method \int fillNoneQty()
	 * @method \int getPositiveQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics setPositiveQty(\int|\Bitrix\Main\DB\SqlExpression $positiveQty)
	 * @method bool hasPositiveQty()
	 * @method bool isPositiveQtyFilled()
	 * @method bool isPositiveQtyChanged()
	 * @method \int remindActualPositiveQty()
	 * @method \int requirePositiveQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics resetPositiveQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics unsetPositiveQty()
	 * @method \int fillPositiveQty()
	 * @method \int getNegativeQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics setNegativeQty(\int|\Bitrix\Main\DB\SqlExpression $negativeQty)
	 * @method bool hasNegativeQty()
	 * @method bool isNegativeQtyFilled()
	 * @method bool isNegativeQtyChanged()
	 * @method \int remindActualNegativeQty()
	 * @method \int requireNegativeQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics resetNegativeQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics unsetNegativeQty()
	 * @method \int fillNegativeQty()
	 * @method \int getTotal()
	 * @method \int remindActualTotal()
	 * @method \int requireTotal()
	 * @method bool hasTotal()
	 * @method bool isTotalFilled()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics unsetTotal()
	 * @method \int fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics wakeUp($data)
	 */
	class EO_CompanyActivityMarkStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyActivityMarkStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyActivityMarkStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyActivityMarkStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \string[] getSourceIdList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getNoneQtyList()
	 * @method \int[] fillNoneQty()
	 * @method \int[] getPositiveQtyList()
	 * @method \int[] fillPositiveQty()
	 * @method \int[] getNegativeQtyList()
	 * @method \int[] fillNegativeQty()
	 * @method \int[] getTotalList()
	 * @method \int[] fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CompanyActivityMarkStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyActivityMarkStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyActivityMarkStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_CompanyActivityMarkStatistics_Query query()
	 * @method static EO_CompanyActivityMarkStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CompanyActivityMarkStatistics_Result getById($id)
	 * @method static EO_CompanyActivityMarkStatistics_Result getList(array $parameters = array())
	 * @method static EO_CompanyActivityMarkStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics_Collection wakeUpCollection($rows)
	 */
	class CompanyActivityMarkStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CompanyActivityMarkStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CompanyActivityMarkStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics_Collection fetchCollection()
	 */
	class EO_CompanyActivityMarkStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityMarkStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_CompanyActivityMarkStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\CompanyActivityStatisticsTable:crm/lib/statistics/entity/companyactivitystatistics.php:070d8300f843b91db49e8eeaf13c03ec */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyActivityStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\CompanyActivityStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getTotalQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics setTotalQty(\int|\Bitrix\Main\DB\SqlExpression $totalQty)
	 * @method bool hasTotalQty()
	 * @method bool isTotalQtyFilled()
	 * @method bool isTotalQtyChanged()
	 * @method \int remindActualTotalQty()
	 * @method \int requireTotalQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics resetTotalQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics unsetTotalQty()
	 * @method \int fillTotalQty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics wakeUp($data)
	 */
	class EO_CompanyActivityStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyActivityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyActivityStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyActivityStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getTotalQtyList()
	 * @method \int[] fillTotalQty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CompanyActivityStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyActivityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyActivityStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_CompanyActivityStatistics_Query query()
	 * @method static EO_CompanyActivityStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CompanyActivityStatistics_Result getById($id)
	 * @method static EO_CompanyActivityStatistics_Result getList(array $parameters = array())
	 * @method static EO_CompanyActivityStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics_Collection wakeUpCollection($rows)
	 */
	class CompanyActivityStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CompanyActivityStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CompanyActivityStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics_Collection fetchCollection()
	 */
	class EO_CompanyActivityStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_CompanyActivityStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\CompanyActivityStatusStatisticsTable:crm/lib/statistics/entity/companyactivitystatusstatistics.php:389890e2a9e27368d2b3da9d686c15e7 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyActivityStatusStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\CompanyActivityStatusStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getAnsweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics setAnsweredQty(\int|\Bitrix\Main\DB\SqlExpression $answeredQty)
	 * @method bool hasAnsweredQty()
	 * @method bool isAnsweredQtyFilled()
	 * @method bool isAnsweredQtyChanged()
	 * @method \int remindActualAnsweredQty()
	 * @method \int requireAnsweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics resetAnsweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics unsetAnsweredQty()
	 * @method \int fillAnsweredQty()
	 * @method \int getUnansweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics setUnansweredQty(\int|\Bitrix\Main\DB\SqlExpression $unansweredQty)
	 * @method bool hasUnansweredQty()
	 * @method bool isUnansweredQtyFilled()
	 * @method bool isUnansweredQtyChanged()
	 * @method \int remindActualUnansweredQty()
	 * @method \int requireUnansweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics resetUnansweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics unsetUnansweredQty()
	 * @method \int fillUnansweredQty()
	 * @method \int getTotal()
	 * @method \int remindActualTotal()
	 * @method \int requireTotal()
	 * @method bool hasTotal()
	 * @method bool isTotalFilled()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics unsetTotal()
	 * @method \int fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics wakeUp($data)
	 */
	class EO_CompanyActivityStatusStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyActivityStatusStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyActivityStatusStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyActivityStatusStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getAnsweredQtyList()
	 * @method \int[] fillAnsweredQty()
	 * @method \int[] getUnansweredQtyList()
	 * @method \int[] fillUnansweredQty()
	 * @method \int[] getTotalList()
	 * @method \int[] fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CompanyActivityStatusStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyActivityStatusStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyActivityStatusStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_CompanyActivityStatusStatistics_Query query()
	 * @method static EO_CompanyActivityStatusStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CompanyActivityStatusStatistics_Result getById($id)
	 * @method static EO_CompanyActivityStatusStatistics_Result getList(array $parameters = array())
	 * @method static EO_CompanyActivityStatusStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics_Collection wakeUpCollection($rows)
	 */
	class CompanyActivityStatusStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CompanyActivityStatusStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CompanyActivityStatusStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics_Collection fetchCollection()
	 */
	class EO_CompanyActivityStatusStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStatusStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_CompanyActivityStatusStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\CompanyActivityStreamStatisticsTable:crm/lib/statistics/entity/companyactivitystreamstatistics.php:4c1dec987eb14881d283effc29aafc7f */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyActivityStreamStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\CompanyActivityStreamStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getIncomingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics setIncomingQty(\int|\Bitrix\Main\DB\SqlExpression $incomingQty)
	 * @method bool hasIncomingQty()
	 * @method bool isIncomingQtyFilled()
	 * @method bool isIncomingQtyChanged()
	 * @method \int remindActualIncomingQty()
	 * @method \int requireIncomingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics resetIncomingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics unsetIncomingQty()
	 * @method \int fillIncomingQty()
	 * @method \int getOutgoingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics setOutgoingQty(\int|\Bitrix\Main\DB\SqlExpression $outgoingQty)
	 * @method bool hasOutgoingQty()
	 * @method bool isOutgoingQtyFilled()
	 * @method bool isOutgoingQtyChanged()
	 * @method \int remindActualOutgoingQty()
	 * @method \int requireOutgoingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics resetOutgoingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics unsetOutgoingQty()
	 * @method \int fillOutgoingQty()
	 * @method \int getReversingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics setReversingQty(\int|\Bitrix\Main\DB\SqlExpression $reversingQty)
	 * @method bool hasReversingQty()
	 * @method bool isReversingQtyFilled()
	 * @method bool isReversingQtyChanged()
	 * @method \int remindActualReversingQty()
	 * @method \int requireReversingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics resetReversingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics unsetReversingQty()
	 * @method \int fillReversingQty()
	 * @method \int getMissingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics setMissingQty(\int|\Bitrix\Main\DB\SqlExpression $missingQty)
	 * @method bool hasMissingQty()
	 * @method bool isMissingQtyFilled()
	 * @method bool isMissingQtyChanged()
	 * @method \int remindActualMissingQty()
	 * @method \int requireMissingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics resetMissingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics unsetMissingQty()
	 * @method \int fillMissingQty()
	 * @method \int getTotal()
	 * @method \int remindActualTotal()
	 * @method \int requireTotal()
	 * @method bool hasTotal()
	 * @method bool isTotalFilled()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics unsetTotal()
	 * @method \int fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics wakeUp($data)
	 */
	class EO_CompanyActivityStreamStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyActivityStreamStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyActivityStreamStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyActivityStreamStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getIncomingQtyList()
	 * @method \int[] fillIncomingQty()
	 * @method \int[] getOutgoingQtyList()
	 * @method \int[] fillOutgoingQty()
	 * @method \int[] getReversingQtyList()
	 * @method \int[] fillReversingQty()
	 * @method \int[] getMissingQtyList()
	 * @method \int[] fillMissingQty()
	 * @method \int[] getTotalList()
	 * @method \int[] fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CompanyActivityStreamStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyActivityStreamStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyActivityStreamStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_CompanyActivityStreamStatistics_Query query()
	 * @method static EO_CompanyActivityStreamStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CompanyActivityStreamStatistics_Result getById($id)
	 * @method static EO_CompanyActivityStreamStatistics_Result getList(array $parameters = array())
	 * @method static EO_CompanyActivityStreamStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics_Collection wakeUpCollection($rows)
	 */
	class CompanyActivityStreamStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CompanyActivityStreamStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CompanyActivityStreamStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics_Collection fetchCollection()
	 */
	class EO_CompanyActivityStreamStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivityStreamStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_CompanyActivityStreamStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\CompanyActivitySumStatisticsTable:crm/lib/statistics/entity/companyactivitysumstatistics.php:9f610af0f258e6b2f30f3df65b95a388 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyActivitySumStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\CompanyActivitySumStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics resetCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \float getSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics setSumTotal(\float|\Bitrix\Main\DB\SqlExpression $sumTotal)
	 * @method bool hasSumTotal()
	 * @method bool isSumTotalFilled()
	 * @method bool isSumTotalChanged()
	 * @method \float remindActualSumTotal()
	 * @method \float requireSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics resetSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics unsetSumTotal()
	 * @method \float fillSumTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics wakeUp($data)
	 */
	class EO_CompanyActivitySumStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyActivitySumStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyActivitySumStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyActivitySumStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \float[] getSumTotalList()
	 * @method \float[] fillSumTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CompanyActivitySumStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyActivitySumStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyActivitySumStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_CompanyActivitySumStatistics_Query query()
	 * @method static EO_CompanyActivitySumStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CompanyActivitySumStatistics_Result getById($id)
	 * @method static EO_CompanyActivitySumStatistics_Result getList(array $parameters = array())
	 * @method static EO_CompanyActivitySumStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics_Collection wakeUpCollection($rows)
	 */
	class CompanyActivitySumStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CompanyActivitySumStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CompanyActivitySumStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics_Collection fetchCollection()
	 */
	class EO_CompanyActivitySumStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyActivitySumStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_CompanyActivitySumStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\CompanyGrowthStatisticsTable:crm/lib/statistics/entity/companygrowthstatistics.php:c94c3abed3fb26bdd4422493f24182da */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyGrowthStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\CompanyGrowthStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics wakeUp($data)
	 */
	class EO_CompanyGrowthStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyGrowthStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyGrowthStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_CompanyGrowthStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_CompanyGrowthStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\CompanyGrowthStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\CompanyGrowthStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_CompanyGrowthStatistics_Query query()
	 * @method static EO_CompanyGrowthStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_CompanyGrowthStatistics_Result getById($id)
	 * @method static EO_CompanyGrowthStatistics_Result getList(array $parameters = array())
	 * @method static EO_CompanyGrowthStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics_Collection wakeUpCollection($rows)
	 */
	class CompanyGrowthStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_CompanyGrowthStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_CompanyGrowthStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics_Collection fetchCollection()
	 */
	class EO_CompanyGrowthStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_CompanyGrowthStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_CompanyGrowthStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\ContactActivityMarkStatisticsTable:crm/lib/statistics/entity/contactactivitymarkstatistics.php:d7a03aaa445731c99de10f0c4f1574e7 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactActivityMarkStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\ContactActivityMarkStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \string getSourceId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics setSourceId(\string|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getNoneQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics setNoneQty(\int|\Bitrix\Main\DB\SqlExpression $noneQty)
	 * @method bool hasNoneQty()
	 * @method bool isNoneQtyFilled()
	 * @method bool isNoneQtyChanged()
	 * @method \int remindActualNoneQty()
	 * @method \int requireNoneQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics resetNoneQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics unsetNoneQty()
	 * @method \int fillNoneQty()
	 * @method \int getPositiveQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics setPositiveQty(\int|\Bitrix\Main\DB\SqlExpression $positiveQty)
	 * @method bool hasPositiveQty()
	 * @method bool isPositiveQtyFilled()
	 * @method bool isPositiveQtyChanged()
	 * @method \int remindActualPositiveQty()
	 * @method \int requirePositiveQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics resetPositiveQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics unsetPositiveQty()
	 * @method \int fillPositiveQty()
	 * @method \int getNegativeQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics setNegativeQty(\int|\Bitrix\Main\DB\SqlExpression $negativeQty)
	 * @method bool hasNegativeQty()
	 * @method bool isNegativeQtyFilled()
	 * @method bool isNegativeQtyChanged()
	 * @method \int remindActualNegativeQty()
	 * @method \int requireNegativeQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics resetNegativeQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics unsetNegativeQty()
	 * @method \int fillNegativeQty()
	 * @method \int getTotal()
	 * @method \int remindActualTotal()
	 * @method \int requireTotal()
	 * @method bool hasTotal()
	 * @method bool isTotalFilled()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics unsetTotal()
	 * @method \int fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics wakeUp($data)
	 */
	class EO_ContactActivityMarkStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactActivityMarkStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactActivityMarkStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactActivityMarkStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \string[] getSourceIdList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getNoneQtyList()
	 * @method \int[] fillNoneQty()
	 * @method \int[] getPositiveQtyList()
	 * @method \int[] fillPositiveQty()
	 * @method \int[] getNegativeQtyList()
	 * @method \int[] fillNegativeQty()
	 * @method \int[] getTotalList()
	 * @method \int[] fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ContactActivityMarkStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactActivityMarkStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactActivityMarkStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_ContactActivityMarkStatistics_Query query()
	 * @method static EO_ContactActivityMarkStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ContactActivityMarkStatistics_Result getById($id)
	 * @method static EO_ContactActivityMarkStatistics_Result getList(array $parameters = array())
	 * @method static EO_ContactActivityMarkStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics_Collection wakeUpCollection($rows)
	 */
	class ContactActivityMarkStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ContactActivityMarkStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ContactActivityMarkStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics_Collection fetchCollection()
	 */
	class EO_ContactActivityMarkStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityMarkStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_ContactActivityMarkStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\ContactActivityStatisticsTable:crm/lib/statistics/entity/contactactivitystatistics.php:57ad47b2e624adef171b754a33c86c7d */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactActivityStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\ContactActivityStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getTotalQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics setTotalQty(\int|\Bitrix\Main\DB\SqlExpression $totalQty)
	 * @method bool hasTotalQty()
	 * @method bool isTotalQtyFilled()
	 * @method bool isTotalQtyChanged()
	 * @method \int remindActualTotalQty()
	 * @method \int requireTotalQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics resetTotalQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics unsetTotalQty()
	 * @method \int fillTotalQty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics wakeUp($data)
	 */
	class EO_ContactActivityStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactActivityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactActivityStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactActivityStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getTotalQtyList()
	 * @method \int[] fillTotalQty()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ContactActivityStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactActivityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactActivityStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_ContactActivityStatistics_Query query()
	 * @method static EO_ContactActivityStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ContactActivityStatistics_Result getById($id)
	 * @method static EO_ContactActivityStatistics_Result getList(array $parameters = array())
	 * @method static EO_ContactActivityStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics_Collection wakeUpCollection($rows)
	 */
	class ContactActivityStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ContactActivityStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ContactActivityStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics_Collection fetchCollection()
	 */
	class EO_ContactActivityStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_ContactActivityStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\ContactActivityStatusStatisticsTable:crm/lib/statistics/entity/contactactivitystatusstatistics.php:d48326688e38296bd7358a913d6ae02e */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactActivityStatusStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\ContactActivityStatusStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getAnsweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics setAnsweredQty(\int|\Bitrix\Main\DB\SqlExpression $answeredQty)
	 * @method bool hasAnsweredQty()
	 * @method bool isAnsweredQtyFilled()
	 * @method bool isAnsweredQtyChanged()
	 * @method \int remindActualAnsweredQty()
	 * @method \int requireAnsweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics resetAnsweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics unsetAnsweredQty()
	 * @method \int fillAnsweredQty()
	 * @method \int getUnansweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics setUnansweredQty(\int|\Bitrix\Main\DB\SqlExpression $unansweredQty)
	 * @method bool hasUnansweredQty()
	 * @method bool isUnansweredQtyFilled()
	 * @method bool isUnansweredQtyChanged()
	 * @method \int remindActualUnansweredQty()
	 * @method \int requireUnansweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics resetUnansweredQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics unsetUnansweredQty()
	 * @method \int fillUnansweredQty()
	 * @method \int getTotal()
	 * @method \int remindActualTotal()
	 * @method \int requireTotal()
	 * @method bool hasTotal()
	 * @method bool isTotalFilled()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics unsetTotal()
	 * @method \int fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics wakeUp($data)
	 */
	class EO_ContactActivityStatusStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactActivityStatusStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactActivityStatusStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactActivityStatusStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getAnsweredQtyList()
	 * @method \int[] fillAnsweredQty()
	 * @method \int[] getUnansweredQtyList()
	 * @method \int[] fillUnansweredQty()
	 * @method \int[] getTotalList()
	 * @method \int[] fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ContactActivityStatusStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactActivityStatusStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactActivityStatusStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_ContactActivityStatusStatistics_Query query()
	 * @method static EO_ContactActivityStatusStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ContactActivityStatusStatistics_Result getById($id)
	 * @method static EO_ContactActivityStatusStatistics_Result getList(array $parameters = array())
	 * @method static EO_ContactActivityStatusStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics_Collection wakeUpCollection($rows)
	 */
	class ContactActivityStatusStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ContactActivityStatusStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ContactActivityStatusStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics_Collection fetchCollection()
	 */
	class EO_ContactActivityStatusStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStatusStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_ContactActivityStatusStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\ContactActivityStreamStatisticsTable:crm/lib/statistics/entity/contactactivitystreamstatistics.php:a66cde793270bcee01ae332e5534ea91 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactActivityStreamStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\ContactActivityStreamStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getIncomingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics setIncomingQty(\int|\Bitrix\Main\DB\SqlExpression $incomingQty)
	 * @method bool hasIncomingQty()
	 * @method bool isIncomingQtyFilled()
	 * @method bool isIncomingQtyChanged()
	 * @method \int remindActualIncomingQty()
	 * @method \int requireIncomingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics resetIncomingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics unsetIncomingQty()
	 * @method \int fillIncomingQty()
	 * @method \int getOutgoingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics setOutgoingQty(\int|\Bitrix\Main\DB\SqlExpression $outgoingQty)
	 * @method bool hasOutgoingQty()
	 * @method bool isOutgoingQtyFilled()
	 * @method bool isOutgoingQtyChanged()
	 * @method \int remindActualOutgoingQty()
	 * @method \int requireOutgoingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics resetOutgoingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics unsetOutgoingQty()
	 * @method \int fillOutgoingQty()
	 * @method \int getReversingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics setReversingQty(\int|\Bitrix\Main\DB\SqlExpression $reversingQty)
	 * @method bool hasReversingQty()
	 * @method bool isReversingQtyFilled()
	 * @method bool isReversingQtyChanged()
	 * @method \int remindActualReversingQty()
	 * @method \int requireReversingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics resetReversingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics unsetReversingQty()
	 * @method \int fillReversingQty()
	 * @method \int getMissingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics setMissingQty(\int|\Bitrix\Main\DB\SqlExpression $missingQty)
	 * @method bool hasMissingQty()
	 * @method bool isMissingQtyFilled()
	 * @method bool isMissingQtyChanged()
	 * @method \int remindActualMissingQty()
	 * @method \int requireMissingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics resetMissingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics unsetMissingQty()
	 * @method \int fillMissingQty()
	 * @method \int getTotal()
	 * @method \int remindActualTotal()
	 * @method \int requireTotal()
	 * @method bool hasTotal()
	 * @method bool isTotalFilled()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics unsetTotal()
	 * @method \int fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics wakeUp($data)
	 */
	class EO_ContactActivityStreamStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactActivityStreamStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactActivityStreamStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactActivityStreamStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getIncomingQtyList()
	 * @method \int[] fillIncomingQty()
	 * @method \int[] getOutgoingQtyList()
	 * @method \int[] fillOutgoingQty()
	 * @method \int[] getReversingQtyList()
	 * @method \int[] fillReversingQty()
	 * @method \int[] getMissingQtyList()
	 * @method \int[] fillMissingQty()
	 * @method \int[] getTotalList()
	 * @method \int[] fillTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ContactActivityStreamStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactActivityStreamStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactActivityStreamStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_ContactActivityStreamStatistics_Query query()
	 * @method static EO_ContactActivityStreamStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ContactActivityStreamStatistics_Result getById($id)
	 * @method static EO_ContactActivityStreamStatistics_Result getList(array $parameters = array())
	 * @method static EO_ContactActivityStreamStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics_Collection wakeUpCollection($rows)
	 */
	class ContactActivityStreamStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ContactActivityStreamStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ContactActivityStreamStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics_Collection fetchCollection()
	 */
	class EO_ContactActivityStreamStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivityStreamStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_ContactActivityStreamStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\ContactActivitySumStatisticsTable:crm/lib/statistics/entity/contactactivitysumstatistics.php:406767e4a4e0b1fc361c460b59b175d4 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactActivitySumStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\ContactActivitySumStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \string getProviderId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics setProviderId(\string|\Bitrix\Main\DB\SqlExpression $providerId)
	 * @method bool hasProviderId()
	 * @method bool isProviderIdFilled()
	 * @method bool isProviderIdChanged()
	 * @method \string getProviderTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics setProviderTypeId(\string|\Bitrix\Main\DB\SqlExpression $providerTypeId)
	 * @method bool hasProviderTypeId()
	 * @method bool isProviderTypeIdFilled()
	 * @method bool isProviderTypeIdChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics resetCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \float getSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics setSumTotal(\float|\Bitrix\Main\DB\SqlExpression $sumTotal)
	 * @method bool hasSumTotal()
	 * @method bool isSumTotalFilled()
	 * @method bool isSumTotalChanged()
	 * @method \float remindActualSumTotal()
	 * @method \float requireSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics resetSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics unsetSumTotal()
	 * @method \float fillSumTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics wakeUp($data)
	 */
	class EO_ContactActivitySumStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactActivitySumStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactActivitySumStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactActivitySumStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \string[] getProviderIdList()
	 * @method \string[] getProviderTypeIdList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \float[] getSumTotalList()
	 * @method \float[] fillSumTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ContactActivitySumStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactActivitySumStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactActivitySumStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_ContactActivitySumStatistics_Query query()
	 * @method static EO_ContactActivitySumStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ContactActivitySumStatistics_Result getById($id)
	 * @method static EO_ContactActivitySumStatistics_Result getList(array $parameters = array())
	 * @method static EO_ContactActivitySumStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics_Collection wakeUpCollection($rows)
	 */
	class ContactActivitySumStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ContactActivitySumStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ContactActivitySumStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics_Collection fetchCollection()
	 */
	class EO_ContactActivitySumStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactActivitySumStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_ContactActivitySumStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\ContactGrowthStatisticsTable:crm/lib/statistics/entity/contactgrowthstatistics.php:90c9a1433a5d78661e2093ff5c4e7378 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactGrowthStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\ContactGrowthStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics wakeUp($data)
	 */
	class EO_ContactGrowthStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactGrowthStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactGrowthStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_ContactGrowthStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ContactGrowthStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\ContactGrowthStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\ContactGrowthStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_ContactGrowthStatistics_Query query()
	 * @method static EO_ContactGrowthStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ContactGrowthStatistics_Result getById($id)
	 * @method static EO_ContactGrowthStatistics_Result getList(array $parameters = array())
	 * @method static EO_ContactGrowthStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics_Collection wakeUpCollection($rows)
	 */
	class ContactGrowthStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ContactGrowthStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ContactGrowthStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics_Collection fetchCollection()
	 */
	class EO_ContactGrowthStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_ContactGrowthStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_ContactGrowthStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\DealActivityStatisticsTable:crm/lib/statistics/entity/dealactivitystatistics.php:479dd7b7040fa62500ca787dfc967842 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_DealActivityStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\DealActivityStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \int getDeadlineYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setDeadlineYear(\int|\Bitrix\Main\DB\SqlExpression $deadlineYear)
	 * @method bool hasDeadlineYear()
	 * @method bool isDeadlineYearFilled()
	 * @method bool isDeadlineYearChanged()
	 * @method \int remindActualDeadlineYear()
	 * @method \int requireDeadlineYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetDeadlineYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetDeadlineYear()
	 * @method \int fillDeadlineYear()
	 * @method \int getDeadlineQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setDeadlineQuarter(\int|\Bitrix\Main\DB\SqlExpression $deadlineQuarter)
	 * @method bool hasDeadlineQuarter()
	 * @method bool isDeadlineQuarterFilled()
	 * @method bool isDeadlineQuarterChanged()
	 * @method \int remindActualDeadlineQuarter()
	 * @method \int requireDeadlineQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetDeadlineQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetDeadlineQuarter()
	 * @method \int fillDeadlineQuarter()
	 * @method \int getDeadlineMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setDeadlineMonth(\int|\Bitrix\Main\DB\SqlExpression $deadlineMonth)
	 * @method bool hasDeadlineMonth()
	 * @method bool isDeadlineMonthFilled()
	 * @method bool isDeadlineMonthChanged()
	 * @method \int remindActualDeadlineMonth()
	 * @method \int requireDeadlineMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetDeadlineMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetDeadlineMonth()
	 * @method \int fillDeadlineMonth()
	 * @method \int getDeadlineDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setDeadlineDay(\int|\Bitrix\Main\DB\SqlExpression $deadlineDay)
	 * @method bool hasDeadlineDay()
	 * @method bool isDeadlineDayFilled()
	 * @method bool isDeadlineDayChanged()
	 * @method \int remindActualDeadlineDay()
	 * @method \int requireDeadlineDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetDeadlineDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetDeadlineDay()
	 * @method \int fillDeadlineDay()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getCategoryId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setCategoryId(\int|\Bitrix\Main\DB\SqlExpression $categoryId)
	 * @method bool hasCategoryId()
	 * @method bool isCategoryIdFilled()
	 * @method bool isCategoryIdChanged()
	 * @method \int remindActualCategoryId()
	 * @method \int requireCategoryId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetCategoryId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetCategoryId()
	 * @method \int fillCategoryId()
	 * @method \string getStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setStageSemanticId(\string|\Bitrix\Main\DB\SqlExpression $stageSemanticId)
	 * @method bool hasStageSemanticId()
	 * @method bool isStageSemanticIdFilled()
	 * @method bool isStageSemanticIdChanged()
	 * @method \string remindActualStageSemanticId()
	 * @method \string requireStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetStageSemanticId()
	 * @method \string fillStageSemanticId()
	 * @method \string getStageId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setStageId(\string|\Bitrix\Main\DB\SqlExpression $stageId)
	 * @method bool hasStageId()
	 * @method bool isStageIdFilled()
	 * @method bool isStageIdChanged()
	 * @method \string remindActualStageId()
	 * @method \string requireStageId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetStageId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetStageId()
	 * @method \string fillStageId()
	 * @method \boolean getIsLost()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setIsLost(\boolean|\Bitrix\Main\DB\SqlExpression $isLost)
	 * @method bool hasIsLost()
	 * @method bool isIsLostFilled()
	 * @method bool isIsLostChanged()
	 * @method \boolean remindActualIsLost()
	 * @method \boolean requireIsLost()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetIsLost()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetIsLost()
	 * @method \boolean fillIsLost()
	 * @method \int getCallQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setCallQty(\int|\Bitrix\Main\DB\SqlExpression $callQty)
	 * @method bool hasCallQty()
	 * @method bool isCallQtyFilled()
	 * @method bool isCallQtyChanged()
	 * @method \int remindActualCallQty()
	 * @method \int requireCallQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetCallQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetCallQty()
	 * @method \int fillCallQty()
	 * @method \int getMeetingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setMeetingQty(\int|\Bitrix\Main\DB\SqlExpression $meetingQty)
	 * @method bool hasMeetingQty()
	 * @method bool isMeetingQtyFilled()
	 * @method bool isMeetingQtyChanged()
	 * @method \int remindActualMeetingQty()
	 * @method \int requireMeetingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetMeetingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetMeetingQty()
	 * @method \int fillMeetingQty()
	 * @method \int getEmailQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setEmailQty(\int|\Bitrix\Main\DB\SqlExpression $emailQty)
	 * @method bool hasEmailQty()
	 * @method bool isEmailQtyFilled()
	 * @method bool isEmailQtyChanged()
	 * @method \int remindActualEmailQty()
	 * @method \int requireEmailQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetEmailQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetEmailQty()
	 * @method \int fillEmailQty()
	 * @method \int getTotal()
	 * @method \int remindActualTotal()
	 * @method \int requireTotal()
	 * @method bool hasTotal()
	 * @method bool isTotalFilled()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetTotal()
	 * @method \int fillTotal()
	 * @method \int getUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics setUfAttr1(\int|\Bitrix\Main\DB\SqlExpression $ufAttr1)
	 * @method bool hasUfAttr1()
	 * @method bool isUfAttr1Filled()
	 * @method bool isUfAttr1Changed()
	 * @method \int remindActualUfAttr1()
	 * @method \int requireUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics resetUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unsetUfAttr1()
	 * @method \int fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics wakeUp($data)
	 */
	class EO_DealActivityStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\DealActivityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\DealActivityStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_DealActivityStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \int[] getDeadlineYearList()
	 * @method \int[] fillDeadlineYear()
	 * @method \int[] getDeadlineQuarterList()
	 * @method \int[] fillDeadlineQuarter()
	 * @method \int[] getDeadlineMonthList()
	 * @method \int[] fillDeadlineMonth()
	 * @method \int[] getDeadlineDayList()
	 * @method \int[] fillDeadlineDay()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getCategoryIdList()
	 * @method \int[] fillCategoryId()
	 * @method \string[] getStageSemanticIdList()
	 * @method \string[] fillStageSemanticId()
	 * @method \string[] getStageIdList()
	 * @method \string[] fillStageId()
	 * @method \boolean[] getIsLostList()
	 * @method \boolean[] fillIsLost()
	 * @method \int[] getCallQtyList()
	 * @method \int[] fillCallQty()
	 * @method \int[] getMeetingQtyList()
	 * @method \int[] fillMeetingQty()
	 * @method \int[] getEmailQtyList()
	 * @method \int[] fillEmailQty()
	 * @method \int[] getTotalList()
	 * @method \int[] fillTotal()
	 * @method \int[] getUfAttr1List()
	 * @method \int[] fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DealActivityStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\DealActivityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\DealActivityStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_DealActivityStatistics_Query query()
	 * @method static EO_DealActivityStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DealActivityStatistics_Result getById($id)
	 * @method static EO_DealActivityStatistics_Result getList(array $parameters = array())
	 * @method static EO_DealActivityStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics_Collection wakeUpCollection($rows)
	 */
	class DealActivityStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DealActivityStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DealActivityStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics_Collection fetchCollection()
	 */
	class EO_DealActivityStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealActivityStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_DealActivityStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\DealChannelStatisticsTable:crm/lib/statistics/entity/dealchannelstatistics.php:13951271bb170e42570628994a72e520 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_DealChannelStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\DealChannelStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics resetCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \Bitrix\Main\Type\Date getStartDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setStartDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $startDate)
	 * @method bool hasStartDate()
	 * @method bool isStartDateFilled()
	 * @method bool isStartDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualStartDate()
	 * @method \Bitrix\Main\Type\Date requireStartDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics resetStartDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics unsetStartDate()
	 * @method \Bitrix\Main\Type\Date fillStartDate()
	 * @method \Bitrix\Main\Type\Date getEndDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setEndDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $endDate)
	 * @method bool hasEndDate()
	 * @method bool isEndDateFilled()
	 * @method bool isEndDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualEndDate()
	 * @method \Bitrix\Main\Type\Date requireEndDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics resetEndDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics unsetEndDate()
	 * @method \Bitrix\Main\Type\Date fillEndDate()
	 * @method \int getChannelTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setChannelTypeId(\int|\Bitrix\Main\DB\SqlExpression $channelTypeId)
	 * @method bool hasChannelTypeId()
	 * @method bool isChannelTypeIdFilled()
	 * @method bool isChannelTypeIdChanged()
	 * @method \string getChannelOriginId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setChannelOriginId(\string|\Bitrix\Main\DB\SqlExpression $channelOriginId)
	 * @method bool hasChannelOriginId()
	 * @method bool isChannelOriginIdFilled()
	 * @method bool isChannelOriginIdChanged()
	 * @method \string remindActualChannelOriginId()
	 * @method \string requireChannelOriginId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics resetChannelOriginId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics unsetChannelOriginId()
	 * @method \string fillChannelOriginId()
	 * @method \string getChannelComponentId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setChannelComponentId(\string|\Bitrix\Main\DB\SqlExpression $channelComponentId)
	 * @method bool hasChannelComponentId()
	 * @method bool isChannelComponentIdFilled()
	 * @method bool isChannelComponentIdChanged()
	 * @method \string remindActualChannelComponentId()
	 * @method \string requireChannelComponentId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics resetChannelComponentId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics unsetChannelComponentId()
	 * @method \string fillChannelComponentId()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \string getStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setStageSemanticId(\string|\Bitrix\Main\DB\SqlExpression $stageSemanticId)
	 * @method bool hasStageSemanticId()
	 * @method bool isStageSemanticIdFilled()
	 * @method bool isStageSemanticIdChanged()
	 * @method \string remindActualStageSemanticId()
	 * @method \string requireStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics resetStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics unsetStageSemanticId()
	 * @method \string fillStageSemanticId()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics resetCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \float getSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics setSumTotal(\float|\Bitrix\Main\DB\SqlExpression $sumTotal)
	 * @method bool hasSumTotal()
	 * @method bool isSumTotalFilled()
	 * @method bool isSumTotalChanged()
	 * @method \float remindActualSumTotal()
	 * @method \float requireSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics resetSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics unsetSumTotal()
	 * @method \float fillSumTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics wakeUp($data)
	 */
	class EO_DealChannelStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\DealChannelStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\DealChannelStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_DealChannelStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \Bitrix\Main\Type\Date[] getStartDateList()
	 * @method \Bitrix\Main\Type\Date[] fillStartDate()
	 * @method \Bitrix\Main\Type\Date[] getEndDateList()
	 * @method \Bitrix\Main\Type\Date[] fillEndDate()
	 * @method \int[] getChannelTypeIdList()
	 * @method \string[] getChannelOriginIdList()
	 * @method \string[] fillChannelOriginId()
	 * @method \string[] getChannelComponentIdList()
	 * @method \string[] fillChannelComponentId()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \string[] getStageSemanticIdList()
	 * @method \string[] fillStageSemanticId()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \float[] getSumTotalList()
	 * @method \float[] fillSumTotal()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DealChannelStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\DealChannelStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\DealChannelStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_DealChannelStatistics_Query query()
	 * @method static EO_DealChannelStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DealChannelStatistics_Result getById($id)
	 * @method static EO_DealChannelStatistics_Result getList(array $parameters = array())
	 * @method static EO_DealChannelStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics_Collection wakeUpCollection($rows)
	 */
	class DealChannelStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DealChannelStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DealChannelStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics_Collection fetchCollection()
	 */
	class EO_DealChannelStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealChannelStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_DealChannelStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\DealInvoiceStatisticsTable:crm/lib/statistics/entity/dealinvoicestatistics.php:4ab6b921c2e6a12cafa687b7a0da6d73 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_DealInvoiceStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\DealInvoiceStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date getStartDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setStartDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $startDate)
	 * @method bool hasStartDate()
	 * @method bool isStartDateFilled()
	 * @method bool isStartDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualStartDate()
	 * @method \Bitrix\Main\Type\Date requireStartDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetStartDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetStartDate()
	 * @method \Bitrix\Main\Type\Date fillStartDate()
	 * @method \Bitrix\Main\Type\Date getEndDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setEndDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $endDate)
	 * @method bool hasEndDate()
	 * @method bool isEndDateFilled()
	 * @method bool isEndDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualEndDate()
	 * @method \Bitrix\Main\Type\Date requireEndDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetEndDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetEndDate()
	 * @method \Bitrix\Main\Type\Date fillEndDate()
	 * @method \int getPeriodYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setPeriodYear(\int|\Bitrix\Main\DB\SqlExpression $periodYear)
	 * @method bool hasPeriodYear()
	 * @method bool isPeriodYearFilled()
	 * @method bool isPeriodYearChanged()
	 * @method \int remindActualPeriodYear()
	 * @method \int requirePeriodYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetPeriodYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetPeriodYear()
	 * @method \int fillPeriodYear()
	 * @method \int getPeriodQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setPeriodQuarter(\int|\Bitrix\Main\DB\SqlExpression $periodQuarter)
	 * @method bool hasPeriodQuarter()
	 * @method bool isPeriodQuarterFilled()
	 * @method bool isPeriodQuarterChanged()
	 * @method \int remindActualPeriodQuarter()
	 * @method \int requirePeriodQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetPeriodQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetPeriodQuarter()
	 * @method \int fillPeriodQuarter()
	 * @method \int getPeriodMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setPeriodMonth(\int|\Bitrix\Main\DB\SqlExpression $periodMonth)
	 * @method bool hasPeriodMonth()
	 * @method bool isPeriodMonthFilled()
	 * @method bool isPeriodMonthChanged()
	 * @method \int remindActualPeriodMonth()
	 * @method \int requirePeriodMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetPeriodMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetPeriodMonth()
	 * @method \int fillPeriodMonth()
	 * @method \int getPeriodDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setPeriodDay(\int|\Bitrix\Main\DB\SqlExpression $periodDay)
	 * @method bool hasPeriodDay()
	 * @method bool isPeriodDayFilled()
	 * @method bool isPeriodDayChanged()
	 * @method \int remindActualPeriodDay()
	 * @method \int requirePeriodDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetPeriodDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetPeriodDay()
	 * @method \int fillPeriodDay()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getCategoryId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setCategoryId(\int|\Bitrix\Main\DB\SqlExpression $categoryId)
	 * @method bool hasCategoryId()
	 * @method bool isCategoryIdFilled()
	 * @method bool isCategoryIdChanged()
	 * @method \int remindActualCategoryId()
	 * @method \int requireCategoryId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetCategoryId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetCategoryId()
	 * @method \int fillCategoryId()
	 * @method \string getStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setStageSemanticId(\string|\Bitrix\Main\DB\SqlExpression $stageSemanticId)
	 * @method bool hasStageSemanticId()
	 * @method bool isStageSemanticIdFilled()
	 * @method bool isStageSemanticIdChanged()
	 * @method \string remindActualStageSemanticId()
	 * @method \string requireStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetStageSemanticId()
	 * @method \string fillStageSemanticId()
	 * @method \string getStageId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setStageId(\string|\Bitrix\Main\DB\SqlExpression $stageId)
	 * @method bool hasStageId()
	 * @method bool isStageIdFilled()
	 * @method bool isStageIdChanged()
	 * @method \string remindActualStageId()
	 * @method \string requireStageId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetStageId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetStageId()
	 * @method \string fillStageId()
	 * @method \boolean getIsLost()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setIsLost(\boolean|\Bitrix\Main\DB\SqlExpression $isLost)
	 * @method bool hasIsLost()
	 * @method bool isIsLostFilled()
	 * @method bool isIsLostChanged()
	 * @method \boolean remindActualIsLost()
	 * @method \boolean requireIsLost()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetIsLost()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetIsLost()
	 * @method \boolean fillIsLost()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \float getInvoiceSum()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setInvoiceSum(\float|\Bitrix\Main\DB\SqlExpression $invoiceSum)
	 * @method bool hasInvoiceSum()
	 * @method bool isInvoiceSumFilled()
	 * @method bool isInvoiceSumChanged()
	 * @method \float remindActualInvoiceSum()
	 * @method \float requireInvoiceSum()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetInvoiceSum()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetInvoiceSum()
	 * @method \float fillInvoiceSum()
	 * @method \int getInvoiceQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setInvoiceQty(\int|\Bitrix\Main\DB\SqlExpression $invoiceQty)
	 * @method bool hasInvoiceQty()
	 * @method bool isInvoiceQtyFilled()
	 * @method bool isInvoiceQtyChanged()
	 * @method \int remindActualInvoiceQty()
	 * @method \int requireInvoiceQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetInvoiceQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetInvoiceQty()
	 * @method \int fillInvoiceQty()
	 * @method \float getTotalInvoiceSum()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setTotalInvoiceSum(\float|\Bitrix\Main\DB\SqlExpression $totalInvoiceSum)
	 * @method bool hasTotalInvoiceSum()
	 * @method bool isTotalInvoiceSumFilled()
	 * @method bool isTotalInvoiceSumChanged()
	 * @method \float remindActualTotalInvoiceSum()
	 * @method \float requireTotalInvoiceSum()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetTotalInvoiceSum()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetTotalInvoiceSum()
	 * @method \float fillTotalInvoiceSum()
	 * @method \int getTotalInvoiceQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setTotalInvoiceQty(\int|\Bitrix\Main\DB\SqlExpression $totalInvoiceQty)
	 * @method bool hasTotalInvoiceQty()
	 * @method bool isTotalInvoiceQtyFilled()
	 * @method bool isTotalInvoiceQtyChanged()
	 * @method \int remindActualTotalInvoiceQty()
	 * @method \int requireTotalInvoiceQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetTotalInvoiceQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetTotalInvoiceQty()
	 * @method \int fillTotalInvoiceQty()
	 * @method \float getTotalSum()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setTotalSum(\float|\Bitrix\Main\DB\SqlExpression $totalSum)
	 * @method bool hasTotalSum()
	 * @method bool isTotalSumFilled()
	 * @method bool isTotalSumChanged()
	 * @method \float remindActualTotalSum()
	 * @method \float requireTotalSum()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetTotalSum()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetTotalSum()
	 * @method \float fillTotalSum()
	 * @method \float getTotalOwed()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setTotalOwed(\float|\Bitrix\Main\DB\SqlExpression $totalOwed)
	 * @method bool hasTotalOwed()
	 * @method bool isTotalOwedFilled()
	 * @method bool isTotalOwedChanged()
	 * @method \float remindActualTotalOwed()
	 * @method \float requireTotalOwed()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetTotalOwed()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetTotalOwed()
	 * @method \float fillTotalOwed()
	 * @method \int getUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics setUfAttr1(\int|\Bitrix\Main\DB\SqlExpression $ufAttr1)
	 * @method bool hasUfAttr1()
	 * @method bool isUfAttr1Filled()
	 * @method bool isUfAttr1Changed()
	 * @method \int remindActualUfAttr1()
	 * @method \int requireUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics resetUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unsetUfAttr1()
	 * @method \int fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics wakeUp($data)
	 */
	class EO_DealInvoiceStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\DealInvoiceStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\DealInvoiceStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_DealInvoiceStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] getStartDateList()
	 * @method \Bitrix\Main\Type\Date[] fillStartDate()
	 * @method \Bitrix\Main\Type\Date[] getEndDateList()
	 * @method \Bitrix\Main\Type\Date[] fillEndDate()
	 * @method \int[] getPeriodYearList()
	 * @method \int[] fillPeriodYear()
	 * @method \int[] getPeriodQuarterList()
	 * @method \int[] fillPeriodQuarter()
	 * @method \int[] getPeriodMonthList()
	 * @method \int[] fillPeriodMonth()
	 * @method \int[] getPeriodDayList()
	 * @method \int[] fillPeriodDay()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getCategoryIdList()
	 * @method \int[] fillCategoryId()
	 * @method \string[] getStageSemanticIdList()
	 * @method \string[] fillStageSemanticId()
	 * @method \string[] getStageIdList()
	 * @method \string[] fillStageId()
	 * @method \boolean[] getIsLostList()
	 * @method \boolean[] fillIsLost()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \float[] getInvoiceSumList()
	 * @method \float[] fillInvoiceSum()
	 * @method \int[] getInvoiceQtyList()
	 * @method \int[] fillInvoiceQty()
	 * @method \float[] getTotalInvoiceSumList()
	 * @method \float[] fillTotalInvoiceSum()
	 * @method \int[] getTotalInvoiceQtyList()
	 * @method \int[] fillTotalInvoiceQty()
	 * @method \float[] getTotalSumList()
	 * @method \float[] fillTotalSum()
	 * @method \float[] getTotalOwedList()
	 * @method \float[] fillTotalOwed()
	 * @method \int[] getUfAttr1List()
	 * @method \int[] fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DealInvoiceStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\DealInvoiceStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\DealInvoiceStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_DealInvoiceStatistics_Query query()
	 * @method static EO_DealInvoiceStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DealInvoiceStatistics_Result getById($id)
	 * @method static EO_DealInvoiceStatistics_Result getList(array $parameters = array())
	 * @method static EO_DealInvoiceStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics_Collection wakeUpCollection($rows)
	 */
	class DealInvoiceStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DealInvoiceStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DealInvoiceStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics_Collection fetchCollection()
	 */
	class EO_DealInvoiceStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealInvoiceStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_DealInvoiceStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\DealSumStatisticsTable:crm/lib/statistics/entity/dealsumstatistics.php:381d1ad52630631a0d736b4975efa8d2 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_DealSumStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\DealSumStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date getStartDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setStartDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $startDate)
	 * @method bool hasStartDate()
	 * @method bool isStartDateFilled()
	 * @method bool isStartDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualStartDate()
	 * @method \Bitrix\Main\Type\Date requireStartDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetStartDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetStartDate()
	 * @method \Bitrix\Main\Type\Date fillStartDate()
	 * @method \Bitrix\Main\Type\Date getEndDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setEndDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $endDate)
	 * @method bool hasEndDate()
	 * @method bool isEndDateFilled()
	 * @method bool isEndDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualEndDate()
	 * @method \Bitrix\Main\Type\Date requireEndDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetEndDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetEndDate()
	 * @method \Bitrix\Main\Type\Date fillEndDate()
	 * @method \int getPeriodYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setPeriodYear(\int|\Bitrix\Main\DB\SqlExpression $periodYear)
	 * @method bool hasPeriodYear()
	 * @method bool isPeriodYearFilled()
	 * @method bool isPeriodYearChanged()
	 * @method \int remindActualPeriodYear()
	 * @method \int requirePeriodYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetPeriodYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetPeriodYear()
	 * @method \int fillPeriodYear()
	 * @method \int getPeriodQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setPeriodQuarter(\int|\Bitrix\Main\DB\SqlExpression $periodQuarter)
	 * @method bool hasPeriodQuarter()
	 * @method bool isPeriodQuarterFilled()
	 * @method bool isPeriodQuarterChanged()
	 * @method \int remindActualPeriodQuarter()
	 * @method \int requirePeriodQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetPeriodQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetPeriodQuarter()
	 * @method \int fillPeriodQuarter()
	 * @method \int getPeriodMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setPeriodMonth(\int|\Bitrix\Main\DB\SqlExpression $periodMonth)
	 * @method bool hasPeriodMonth()
	 * @method bool isPeriodMonthFilled()
	 * @method bool isPeriodMonthChanged()
	 * @method \int remindActualPeriodMonth()
	 * @method \int requirePeriodMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetPeriodMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetPeriodMonth()
	 * @method \int fillPeriodMonth()
	 * @method \int getPeriodDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setPeriodDay(\int|\Bitrix\Main\DB\SqlExpression $periodDay)
	 * @method bool hasPeriodDay()
	 * @method bool isPeriodDayFilled()
	 * @method bool isPeriodDayChanged()
	 * @method \int remindActualPeriodDay()
	 * @method \int requirePeriodDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetPeriodDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetPeriodDay()
	 * @method \int fillPeriodDay()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getCategoryId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setCategoryId(\int|\Bitrix\Main\DB\SqlExpression $categoryId)
	 * @method bool hasCategoryId()
	 * @method bool isCategoryIdFilled()
	 * @method bool isCategoryIdChanged()
	 * @method \int remindActualCategoryId()
	 * @method \int requireCategoryId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetCategoryId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetCategoryId()
	 * @method \int fillCategoryId()
	 * @method \string getStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setStageSemanticId(\string|\Bitrix\Main\DB\SqlExpression $stageSemanticId)
	 * @method bool hasStageSemanticId()
	 * @method bool isStageSemanticIdFilled()
	 * @method bool isStageSemanticIdChanged()
	 * @method \string remindActualStageSemanticId()
	 * @method \string requireStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetStageSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetStageSemanticId()
	 * @method \string fillStageSemanticId()
	 * @method \string getStageId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setStageId(\string|\Bitrix\Main\DB\SqlExpression $stageId)
	 * @method bool hasStageId()
	 * @method bool isStageIdFilled()
	 * @method bool isStageIdChanged()
	 * @method \string remindActualStageId()
	 * @method \string requireStageId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetStageId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetStageId()
	 * @method \string fillStageId()
	 * @method \boolean getIsLost()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setIsLost(\boolean|\Bitrix\Main\DB\SqlExpression $isLost)
	 * @method bool hasIsLost()
	 * @method bool isIsLostFilled()
	 * @method bool isIsLostChanged()
	 * @method \boolean remindActualIsLost()
	 * @method \boolean requireIsLost()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetIsLost()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetIsLost()
	 * @method \boolean fillIsLost()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \float getSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setSumTotal(\float|\Bitrix\Main\DB\SqlExpression $sumTotal)
	 * @method bool hasSumTotal()
	 * @method bool isSumTotalFilled()
	 * @method bool isSumTotalChanged()
	 * @method \float remindActualSumTotal()
	 * @method \float requireSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetSumTotal()
	 * @method \float fillSumTotal()
	 * @method \float getUfSum1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setUfSum1(\float|\Bitrix\Main\DB\SqlExpression $ufSum1)
	 * @method bool hasUfSum1()
	 * @method bool isUfSum1Filled()
	 * @method bool isUfSum1Changed()
	 * @method \float remindActualUfSum1()
	 * @method \float requireUfSum1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetUfSum1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetUfSum1()
	 * @method \float fillUfSum1()
	 * @method \float getUfSum2()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setUfSum2(\float|\Bitrix\Main\DB\SqlExpression $ufSum2)
	 * @method bool hasUfSum2()
	 * @method bool isUfSum2Filled()
	 * @method bool isUfSum2Changed()
	 * @method \float remindActualUfSum2()
	 * @method \float requireUfSum2()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetUfSum2()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetUfSum2()
	 * @method \float fillUfSum2()
	 * @method \float getUfSum3()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setUfSum3(\float|\Bitrix\Main\DB\SqlExpression $ufSum3)
	 * @method bool hasUfSum3()
	 * @method bool isUfSum3Filled()
	 * @method bool isUfSum3Changed()
	 * @method \float remindActualUfSum3()
	 * @method \float requireUfSum3()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetUfSum3()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetUfSum3()
	 * @method \float fillUfSum3()
	 * @method \float getUfSum4()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setUfSum4(\float|\Bitrix\Main\DB\SqlExpression $ufSum4)
	 * @method bool hasUfSum4()
	 * @method bool isUfSum4Filled()
	 * @method bool isUfSum4Changed()
	 * @method \float remindActualUfSum4()
	 * @method \float requireUfSum4()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetUfSum4()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetUfSum4()
	 * @method \float fillUfSum4()
	 * @method \float getUfSum5()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setUfSum5(\float|\Bitrix\Main\DB\SqlExpression $ufSum5)
	 * @method bool hasUfSum5()
	 * @method bool isUfSum5Filled()
	 * @method bool isUfSum5Changed()
	 * @method \float remindActualUfSum5()
	 * @method \float requireUfSum5()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetUfSum5()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetUfSum5()
	 * @method \float fillUfSum5()
	 * @method \int getUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics setUfAttr1(\int|\Bitrix\Main\DB\SqlExpression $ufAttr1)
	 * @method bool hasUfAttr1()
	 * @method bool isUfAttr1Filled()
	 * @method bool isUfAttr1Changed()
	 * @method \int remindActualUfAttr1()
	 * @method \int requireUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics resetUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unsetUfAttr1()
	 * @method \int fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics wakeUp($data)
	 */
	class EO_DealSumStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\DealSumStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\DealSumStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_DealSumStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] getStartDateList()
	 * @method \Bitrix\Main\Type\Date[] fillStartDate()
	 * @method \Bitrix\Main\Type\Date[] getEndDateList()
	 * @method \Bitrix\Main\Type\Date[] fillEndDate()
	 * @method \int[] getPeriodYearList()
	 * @method \int[] fillPeriodYear()
	 * @method \int[] getPeriodQuarterList()
	 * @method \int[] fillPeriodQuarter()
	 * @method \int[] getPeriodMonthList()
	 * @method \int[] fillPeriodMonth()
	 * @method \int[] getPeriodDayList()
	 * @method \int[] fillPeriodDay()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getCategoryIdList()
	 * @method \int[] fillCategoryId()
	 * @method \string[] getStageSemanticIdList()
	 * @method \string[] fillStageSemanticId()
	 * @method \string[] getStageIdList()
	 * @method \string[] fillStageId()
	 * @method \boolean[] getIsLostList()
	 * @method \boolean[] fillIsLost()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \float[] getSumTotalList()
	 * @method \float[] fillSumTotal()
	 * @method \float[] getUfSum1List()
	 * @method \float[] fillUfSum1()
	 * @method \float[] getUfSum2List()
	 * @method \float[] fillUfSum2()
	 * @method \float[] getUfSum3List()
	 * @method \float[] fillUfSum3()
	 * @method \float[] getUfSum4List()
	 * @method \float[] fillUfSum4()
	 * @method \float[] getUfSum5List()
	 * @method \float[] fillUfSum5()
	 * @method \int[] getUfAttr1List()
	 * @method \int[] fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_DealSumStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\DealSumStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\DealSumStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_DealSumStatistics_Query query()
	 * @method static EO_DealSumStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_DealSumStatistics_Result getById($id)
	 * @method static EO_DealSumStatistics_Result getList(array $parameters = array())
	 * @method static EO_DealSumStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics_Collection wakeUpCollection($rows)
	 */
	class DealSumStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_DealSumStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_DealSumStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics_Collection fetchCollection()
	 */
	class EO_DealSumStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_DealSumStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_DealSumStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\InvoiceSumStatisticsTable:crm/lib/statistics/entity/invoicesumstatistics.php:9607a9c73556e561e42b415e3da5e7b7 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_InvoiceSumStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\InvoiceSumStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date getBillDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setBillDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $billDate)
	 * @method bool hasBillDate()
	 * @method bool isBillDateFilled()
	 * @method bool isBillDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualBillDate()
	 * @method \Bitrix\Main\Type\Date requireBillDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetBillDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetBillDate()
	 * @method \Bitrix\Main\Type\Date fillBillDate()
	 * @method \Bitrix\Main\Type\Date getPayBeforeDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setPayBeforeDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $payBeforeDate)
	 * @method bool hasPayBeforeDate()
	 * @method bool isPayBeforeDateFilled()
	 * @method bool isPayBeforeDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPayBeforeDate()
	 * @method \Bitrix\Main\Type\Date requirePayBeforeDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetPayBeforeDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetPayBeforeDate()
	 * @method \Bitrix\Main\Type\Date fillPayBeforeDate()
	 * @method \Bitrix\Main\Type\Date getPaidDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setPaidDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $paidDate)
	 * @method bool hasPaidDate()
	 * @method bool isPaidDateFilled()
	 * @method bool isPaidDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualPaidDate()
	 * @method \Bitrix\Main\Type\Date requirePaidDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetPaidDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetPaidDate()
	 * @method \Bitrix\Main\Type\Date fillPaidDate()
	 * @method \boolean getIsPaidIntime()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setIsPaidIntime(\boolean|\Bitrix\Main\DB\SqlExpression $isPaidIntime)
	 * @method bool hasIsPaidIntime()
	 * @method bool isIsPaidIntimeFilled()
	 * @method bool isIsPaidIntimeChanged()
	 * @method \boolean remindActualIsPaidIntime()
	 * @method \boolean requireIsPaidIntime()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetIsPaidIntime()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetIsPaidIntime()
	 * @method \boolean fillIsPaidIntime()
	 * @method \Bitrix\Main\Type\Date getClosedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setClosedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $closedDate)
	 * @method bool hasClosedDate()
	 * @method bool isClosedDateFilled()
	 * @method bool isClosedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualClosedDate()
	 * @method \Bitrix\Main\Type\Date requireClosedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetClosedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetClosedDate()
	 * @method \Bitrix\Main\Type\Date fillClosedDate()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getCompanyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setCompanyId(\int|\Bitrix\Main\DB\SqlExpression $companyId)
	 * @method bool hasCompanyId()
	 * @method bool isCompanyIdFilled()
	 * @method bool isCompanyIdChanged()
	 * @method \int remindActualCompanyId()
	 * @method \int requireCompanyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetCompanyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetCompanyId()
	 * @method \int fillCompanyId()
	 * @method \int getContactId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setContactId(\int|\Bitrix\Main\DB\SqlExpression $contactId)
	 * @method bool hasContactId()
	 * @method bool isContactIdFilled()
	 * @method bool isContactIdChanged()
	 * @method \int remindActualContactId()
	 * @method \int requireContactId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetContactId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetContactId()
	 * @method \int fillContactId()
	 * @method \string getStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setStatusSemanticId(\string|\Bitrix\Main\DB\SqlExpression $statusSemanticId)
	 * @method bool hasStatusSemanticId()
	 * @method bool isStatusSemanticIdFilled()
	 * @method bool isStatusSemanticIdChanged()
	 * @method \string remindActualStatusSemanticId()
	 * @method \string requireStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetStatusSemanticId()
	 * @method \string fillStatusSemanticId()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \boolean getIsJunk()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setIsJunk(\boolean|\Bitrix\Main\DB\SqlExpression $isJunk)
	 * @method bool hasIsJunk()
	 * @method bool isIsJunkFilled()
	 * @method bool isIsJunkChanged()
	 * @method \boolean remindActualIsJunk()
	 * @method \boolean requireIsJunk()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetIsJunk()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetIsJunk()
	 * @method \boolean fillIsJunk()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \float getSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setSumTotal(\float|\Bitrix\Main\DB\SqlExpression $sumTotal)
	 * @method bool hasSumTotal()
	 * @method bool isSumTotalFilled()
	 * @method bool isSumTotalChanged()
	 * @method \float remindActualSumTotal()
	 * @method \float requireSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetSumTotal()
	 * @method \float fillSumTotal()
	 * @method \float getUfSum1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setUfSum1(\float|\Bitrix\Main\DB\SqlExpression $ufSum1)
	 * @method bool hasUfSum1()
	 * @method bool isUfSum1Filled()
	 * @method bool isUfSum1Changed()
	 * @method \float remindActualUfSum1()
	 * @method \float requireUfSum1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetUfSum1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetUfSum1()
	 * @method \float fillUfSum1()
	 * @method \float getUfSum2()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setUfSum2(\float|\Bitrix\Main\DB\SqlExpression $ufSum2)
	 * @method bool hasUfSum2()
	 * @method bool isUfSum2Filled()
	 * @method bool isUfSum2Changed()
	 * @method \float remindActualUfSum2()
	 * @method \float requireUfSum2()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetUfSum2()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetUfSum2()
	 * @method \float fillUfSum2()
	 * @method \float getUfSum3()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setUfSum3(\float|\Bitrix\Main\DB\SqlExpression $ufSum3)
	 * @method bool hasUfSum3()
	 * @method bool isUfSum3Filled()
	 * @method bool isUfSum3Changed()
	 * @method \float remindActualUfSum3()
	 * @method \float requireUfSum3()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetUfSum3()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetUfSum3()
	 * @method \float fillUfSum3()
	 * @method \float getUfSum4()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setUfSum4(\float|\Bitrix\Main\DB\SqlExpression $ufSum4)
	 * @method bool hasUfSum4()
	 * @method bool isUfSum4Filled()
	 * @method bool isUfSum4Changed()
	 * @method \float remindActualUfSum4()
	 * @method \float requireUfSum4()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetUfSum4()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetUfSum4()
	 * @method \float fillUfSum4()
	 * @method \float getUfSum5()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setUfSum5(\float|\Bitrix\Main\DB\SqlExpression $ufSum5)
	 * @method bool hasUfSum5()
	 * @method bool isUfSum5Filled()
	 * @method bool isUfSum5Changed()
	 * @method \float remindActualUfSum5()
	 * @method \float requireUfSum5()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetUfSum5()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetUfSum5()
	 * @method \float fillUfSum5()
	 * @method \int getUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics setUfAttr1(\int|\Bitrix\Main\DB\SqlExpression $ufAttr1)
	 * @method bool hasUfAttr1()
	 * @method bool isUfAttr1Filled()
	 * @method bool isUfAttr1Changed()
	 * @method \int remindActualUfAttr1()
	 * @method \int requireUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics resetUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unsetUfAttr1()
	 * @method \int fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics wakeUp($data)
	 */
	class EO_InvoiceSumStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\InvoiceSumStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\InvoiceSumStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_InvoiceSumStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] getBillDateList()
	 * @method \Bitrix\Main\Type\Date[] fillBillDate()
	 * @method \Bitrix\Main\Type\Date[] getPayBeforeDateList()
	 * @method \Bitrix\Main\Type\Date[] fillPayBeforeDate()
	 * @method \Bitrix\Main\Type\Date[] getPaidDateList()
	 * @method \Bitrix\Main\Type\Date[] fillPaidDate()
	 * @method \boolean[] getIsPaidIntimeList()
	 * @method \boolean[] fillIsPaidIntime()
	 * @method \Bitrix\Main\Type\Date[] getClosedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillClosedDate()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getCompanyIdList()
	 * @method \int[] fillCompanyId()
	 * @method \int[] getContactIdList()
	 * @method \int[] fillContactId()
	 * @method \string[] getStatusSemanticIdList()
	 * @method \string[] fillStatusSemanticId()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \boolean[] getIsJunkList()
	 * @method \boolean[] fillIsJunk()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \float[] getSumTotalList()
	 * @method \float[] fillSumTotal()
	 * @method \float[] getUfSum1List()
	 * @method \float[] fillUfSum1()
	 * @method \float[] getUfSum2List()
	 * @method \float[] fillUfSum2()
	 * @method \float[] getUfSum3List()
	 * @method \float[] fillUfSum3()
	 * @method \float[] getUfSum4List()
	 * @method \float[] fillUfSum4()
	 * @method \float[] getUfSum5List()
	 * @method \float[] fillUfSum5()
	 * @method \int[] getUfAttr1List()
	 * @method \int[] fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_InvoiceSumStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\InvoiceSumStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\InvoiceSumStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_InvoiceSumStatistics_Query query()
	 * @method static EO_InvoiceSumStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_InvoiceSumStatistics_Result getById($id)
	 * @method static EO_InvoiceSumStatistics_Result getList(array $parameters = array())
	 * @method static EO_InvoiceSumStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics_Collection wakeUpCollection($rows)
	 */
	class InvoiceSumStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_InvoiceSumStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_InvoiceSumStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics_Collection fetchCollection()
	 */
	class EO_InvoiceSumStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_InvoiceSumStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_InvoiceSumStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\LeadActivityStatisticsTable:crm/lib/statistics/entity/leadactivitystatistics.php:112c176208984b8d94715201024e7774 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_LeadActivityStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\LeadActivityStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getDeadlineDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setDeadlineDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $deadlineDate)
	 * @method bool hasDeadlineDate()
	 * @method bool isDeadlineDateFilled()
	 * @method bool isDeadlineDateChanged()
	 * @method \int getDeadlineYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setDeadlineYear(\int|\Bitrix\Main\DB\SqlExpression $deadlineYear)
	 * @method bool hasDeadlineYear()
	 * @method bool isDeadlineYearFilled()
	 * @method bool isDeadlineYearChanged()
	 * @method \int remindActualDeadlineYear()
	 * @method \int requireDeadlineYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetDeadlineYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetDeadlineYear()
	 * @method \int fillDeadlineYear()
	 * @method \int getDeadlineQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setDeadlineQuarter(\int|\Bitrix\Main\DB\SqlExpression $deadlineQuarter)
	 * @method bool hasDeadlineQuarter()
	 * @method bool isDeadlineQuarterFilled()
	 * @method bool isDeadlineQuarterChanged()
	 * @method \int remindActualDeadlineQuarter()
	 * @method \int requireDeadlineQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetDeadlineQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetDeadlineQuarter()
	 * @method \int fillDeadlineQuarter()
	 * @method \int getDeadlineMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setDeadlineMonth(\int|\Bitrix\Main\DB\SqlExpression $deadlineMonth)
	 * @method bool hasDeadlineMonth()
	 * @method bool isDeadlineMonthFilled()
	 * @method bool isDeadlineMonthChanged()
	 * @method \int remindActualDeadlineMonth()
	 * @method \int requireDeadlineMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetDeadlineMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetDeadlineMonth()
	 * @method \int fillDeadlineMonth()
	 * @method \int getDeadlineDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setDeadlineDay(\int|\Bitrix\Main\DB\SqlExpression $deadlineDay)
	 * @method bool hasDeadlineDay()
	 * @method bool isDeadlineDayFilled()
	 * @method bool isDeadlineDayChanged()
	 * @method \int remindActualDeadlineDay()
	 * @method \int requireDeadlineDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetDeadlineDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetDeadlineDay()
	 * @method \int fillDeadlineDay()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \string getStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setStatusSemanticId(\string|\Bitrix\Main\DB\SqlExpression $statusSemanticId)
	 * @method bool hasStatusSemanticId()
	 * @method bool isStatusSemanticIdFilled()
	 * @method bool isStatusSemanticIdChanged()
	 * @method \string remindActualStatusSemanticId()
	 * @method \string requireStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetStatusSemanticId()
	 * @method \string fillStatusSemanticId()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \boolean getIsJunk()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setIsJunk(\boolean|\Bitrix\Main\DB\SqlExpression $isJunk)
	 * @method bool hasIsJunk()
	 * @method bool isIsJunkFilled()
	 * @method bool isIsJunkChanged()
	 * @method \boolean remindActualIsJunk()
	 * @method \boolean requireIsJunk()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetIsJunk()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetIsJunk()
	 * @method \boolean fillIsJunk()
	 * @method \int getCallQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setCallQty(\int|\Bitrix\Main\DB\SqlExpression $callQty)
	 * @method bool hasCallQty()
	 * @method bool isCallQtyFilled()
	 * @method bool isCallQtyChanged()
	 * @method \int remindActualCallQty()
	 * @method \int requireCallQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetCallQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetCallQty()
	 * @method \int fillCallQty()
	 * @method \int getMeetingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setMeetingQty(\int|\Bitrix\Main\DB\SqlExpression $meetingQty)
	 * @method bool hasMeetingQty()
	 * @method bool isMeetingQtyFilled()
	 * @method bool isMeetingQtyChanged()
	 * @method \int remindActualMeetingQty()
	 * @method \int requireMeetingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetMeetingQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetMeetingQty()
	 * @method \int fillMeetingQty()
	 * @method \int getEmailQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setEmailQty(\int|\Bitrix\Main\DB\SqlExpression $emailQty)
	 * @method bool hasEmailQty()
	 * @method bool isEmailQtyFilled()
	 * @method bool isEmailQtyChanged()
	 * @method \int remindActualEmailQty()
	 * @method \int requireEmailQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetEmailQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetEmailQty()
	 * @method \int fillEmailQty()
	 * @method \int getTotal()
	 * @method \int remindActualTotal()
	 * @method \int requireTotal()
	 * @method bool hasTotal()
	 * @method bool isTotalFilled()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetTotal()
	 * @method \int fillTotal()
	 * @method \int getUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics setUfAttr1(\int|\Bitrix\Main\DB\SqlExpression $ufAttr1)
	 * @method bool hasUfAttr1()
	 * @method bool isUfAttr1Filled()
	 * @method bool isUfAttr1Changed()
	 * @method \int remindActualUfAttr1()
	 * @method \int requireUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics resetUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unsetUfAttr1()
	 * @method \int fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics wakeUp($data)
	 */
	class EO_LeadActivityStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\LeadActivityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\LeadActivityStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_LeadActivityStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getDeadlineDateList()
	 * @method \int[] getDeadlineYearList()
	 * @method \int[] fillDeadlineYear()
	 * @method \int[] getDeadlineQuarterList()
	 * @method \int[] fillDeadlineQuarter()
	 * @method \int[] getDeadlineMonthList()
	 * @method \int[] fillDeadlineMonth()
	 * @method \int[] getDeadlineDayList()
	 * @method \int[] fillDeadlineDay()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \string[] getStatusSemanticIdList()
	 * @method \string[] fillStatusSemanticId()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \boolean[] getIsJunkList()
	 * @method \boolean[] fillIsJunk()
	 * @method \int[] getCallQtyList()
	 * @method \int[] fillCallQty()
	 * @method \int[] getMeetingQtyList()
	 * @method \int[] fillMeetingQty()
	 * @method \int[] getEmailQtyList()
	 * @method \int[] fillEmailQty()
	 * @method \int[] getTotalList()
	 * @method \int[] fillTotal()
	 * @method \int[] getUfAttr1List()
	 * @method \int[] fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_LeadActivityStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\LeadActivityStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\LeadActivityStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_LeadActivityStatistics_Query query()
	 * @method static EO_LeadActivityStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_LeadActivityStatistics_Result getById($id)
	 * @method static EO_LeadActivityStatistics_Result getList(array $parameters = array())
	 * @method static EO_LeadActivityStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics_Collection wakeUpCollection($rows)
	 */
	class LeadActivityStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_LeadActivityStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_LeadActivityStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics_Collection fetchCollection()
	 */
	class EO_LeadActivityStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadActivityStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_LeadActivityStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\LeadChannelStatisticsTable:crm/lib/statistics/entity/leadchannelstatistics.php:8c5d6dd63054875ec1452de2bce82329 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_LeadChannelStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\LeadChannelStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics resetCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \int getChannelTypeId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics setChannelTypeId(\int|\Bitrix\Main\DB\SqlExpression $channelTypeId)
	 * @method bool hasChannelTypeId()
	 * @method bool isChannelTypeIdFilled()
	 * @method bool isChannelTypeIdChanged()
	 * @method \string getChannelOriginId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics setChannelOriginId(\string|\Bitrix\Main\DB\SqlExpression $channelOriginId)
	 * @method bool hasChannelOriginId()
	 * @method bool isChannelOriginIdFilled()
	 * @method bool isChannelOriginIdChanged()
	 * @method \string remindActualChannelOriginId()
	 * @method \string requireChannelOriginId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics resetChannelOriginId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics unsetChannelOriginId()
	 * @method \string fillChannelOriginId()
	 * @method \string getChannelComponentId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics setChannelComponentId(\string|\Bitrix\Main\DB\SqlExpression $channelComponentId)
	 * @method bool hasChannelComponentId()
	 * @method bool isChannelComponentIdFilled()
	 * @method bool isChannelComponentIdChanged()
	 * @method \string remindActualChannelComponentId()
	 * @method \string requireChannelComponentId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics resetChannelComponentId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics unsetChannelComponentId()
	 * @method \string fillChannelComponentId()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \string getStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics setStatusSemanticId(\string|\Bitrix\Main\DB\SqlExpression $statusSemanticId)
	 * @method bool hasStatusSemanticId()
	 * @method bool isStatusSemanticIdFilled()
	 * @method bool isStatusSemanticIdChanged()
	 * @method \string remindActualStatusSemanticId()
	 * @method \string requireStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics resetStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics unsetStatusSemanticId()
	 * @method \string fillStatusSemanticId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics wakeUp($data)
	 */
	class EO_LeadChannelStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\LeadChannelStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\LeadChannelStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_LeadChannelStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \int[] getChannelTypeIdList()
	 * @method \string[] getChannelOriginIdList()
	 * @method \string[] fillChannelOriginId()
	 * @method \string[] getChannelComponentIdList()
	 * @method \string[] fillChannelComponentId()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \string[] getStatusSemanticIdList()
	 * @method \string[] fillStatusSemanticId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_LeadChannelStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\LeadChannelStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\LeadChannelStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_LeadChannelStatistics_Query query()
	 * @method static EO_LeadChannelStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_LeadChannelStatistics_Result getById($id)
	 * @method static EO_LeadChannelStatistics_Result getList(array $parameters = array())
	 * @method static EO_LeadChannelStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics_Collection wakeUpCollection($rows)
	 */
	class LeadChannelStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_LeadChannelStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_LeadChannelStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics_Collection fetchCollection()
	 */
	class EO_LeadChannelStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadChannelStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_LeadChannelStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\LeadConversionStatisticsTable:crm/lib/statistics/entity/leadconversionstatistics.php:2e632ee772859c12650b133096893c67 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_LeadConversionStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\LeadConversionStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getEntryDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics setEntryDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $entryDate)
	 * @method bool hasEntryDate()
	 * @method bool isEntryDateFilled()
	 * @method bool isEntryDateChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualCreatedDate()
	 * @method \Bitrix\Main\Type\Date requireCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics resetCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics unsetCreatedDate()
	 * @method \Bitrix\Main\Type\Date fillCreatedDate()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \int getContactQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics setContactQty(\int|\Bitrix\Main\DB\SqlExpression $contactQty)
	 * @method bool hasContactQty()
	 * @method bool isContactQtyFilled()
	 * @method bool isContactQtyChanged()
	 * @method \int remindActualContactQty()
	 * @method \int requireContactQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics resetContactQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics unsetContactQty()
	 * @method \int fillContactQty()
	 * @method \int getCompanyQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics setCompanyQty(\int|\Bitrix\Main\DB\SqlExpression $companyQty)
	 * @method bool hasCompanyQty()
	 * @method bool isCompanyQtyFilled()
	 * @method bool isCompanyQtyChanged()
	 * @method \int remindActualCompanyQty()
	 * @method \int requireCompanyQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics resetCompanyQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics unsetCompanyQty()
	 * @method \int fillCompanyQty()
	 * @method \int getDealQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics setDealQty(\int|\Bitrix\Main\DB\SqlExpression $dealQty)
	 * @method bool hasDealQty()
	 * @method bool isDealQtyFilled()
	 * @method bool isDealQtyChanged()
	 * @method \int remindActualDealQty()
	 * @method \int requireDealQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics resetDealQty()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics unsetDealQty()
	 * @method \int fillDealQty()
	 * @method \Bitrix\Main\Type\Date getTotalsDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics setTotalsDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $totalsDate)
	 * @method bool hasTotalsDate()
	 * @method bool isTotalsDateFilled()
	 * @method bool isTotalsDateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualTotalsDate()
	 * @method \Bitrix\Main\Type\Date requireTotalsDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics resetTotalsDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics unsetTotalsDate()
	 * @method \Bitrix\Main\Type\Date fillTotalsDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics getTotals()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics remindActualTotals()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics requireTotals()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics setTotals(\Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics $object)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics resetTotals()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics unsetTotals()
	 * @method bool hasTotals()
	 * @method bool isTotalsFilled()
	 * @method bool isTotalsChanged()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics fillTotals()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics wakeUp($data)
	 */
	class EO_LeadConversionStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\LeadConversionStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\LeadConversionStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_LeadConversionStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getEntryDateList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \Bitrix\Main\Type\Date[] fillCreatedDate()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \int[] getContactQtyList()
	 * @method \int[] fillContactQty()
	 * @method \int[] getCompanyQtyList()
	 * @method \int[] fillCompanyQty()
	 * @method \int[] getDealQtyList()
	 * @method \int[] fillDealQty()
	 * @method \Bitrix\Main\Type\Date[] getTotalsDateList()
	 * @method \Bitrix\Main\Type\Date[] fillTotalsDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics[] getTotalsList()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics_Collection getTotalsCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics_Collection fillTotals()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_LeadConversionStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\LeadConversionStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\LeadConversionStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_LeadConversionStatistics_Query query()
	 * @method static EO_LeadConversionStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_LeadConversionStatistics_Result getById($id)
	 * @method static EO_LeadConversionStatistics_Result getList(array $parameters = array())
	 * @method static EO_LeadConversionStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics_Collection wakeUpCollection($rows)
	 */
	class LeadConversionStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_LeadConversionStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_LeadConversionStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics_Collection fetchCollection()
	 */
	class EO_LeadConversionStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadConversionStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_LeadConversionStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Statistics\Entity\LeadSumStatisticsTable:crm/lib/statistics/entity/leadsumstatistics.php:395b081330c0b8475dfd6b50cc6c19b1 */
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_LeadSumStatistics
	 * @see \Bitrix\Crm\Statistics\Entity\LeadSumStatisticsTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \Bitrix\Main\Type\Date getCreatedDate()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setCreatedDate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $createdDate)
	 * @method bool hasCreatedDate()
	 * @method bool isCreatedDateFilled()
	 * @method bool isCreatedDateChanged()
	 * @method \int getPeriodYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setPeriodYear(\int|\Bitrix\Main\DB\SqlExpression $periodYear)
	 * @method bool hasPeriodYear()
	 * @method bool isPeriodYearFilled()
	 * @method bool isPeriodYearChanged()
	 * @method \int remindActualPeriodYear()
	 * @method \int requirePeriodYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetPeriodYear()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetPeriodYear()
	 * @method \int fillPeriodYear()
	 * @method \int getPeriodQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setPeriodQuarter(\int|\Bitrix\Main\DB\SqlExpression $periodQuarter)
	 * @method bool hasPeriodQuarter()
	 * @method bool isPeriodQuarterFilled()
	 * @method bool isPeriodQuarterChanged()
	 * @method \int remindActualPeriodQuarter()
	 * @method \int requirePeriodQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetPeriodQuarter()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetPeriodQuarter()
	 * @method \int fillPeriodQuarter()
	 * @method \int getPeriodMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setPeriodMonth(\int|\Bitrix\Main\DB\SqlExpression $periodMonth)
	 * @method bool hasPeriodMonth()
	 * @method bool isPeriodMonthFilled()
	 * @method bool isPeriodMonthChanged()
	 * @method \int remindActualPeriodMonth()
	 * @method \int requirePeriodMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetPeriodMonth()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetPeriodMonth()
	 * @method \int fillPeriodMonth()
	 * @method \int getPeriodDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setPeriodDay(\int|\Bitrix\Main\DB\SqlExpression $periodDay)
	 * @method bool hasPeriodDay()
	 * @method bool isPeriodDayFilled()
	 * @method bool isPeriodDayChanged()
	 * @method \int remindActualPeriodDay()
	 * @method \int requirePeriodDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetPeriodDay()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetPeriodDay()
	 * @method \int fillPeriodDay()
	 * @method \int getResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setResponsibleId(\int|\Bitrix\Main\DB\SqlExpression $responsibleId)
	 * @method bool hasResponsibleId()
	 * @method bool isResponsibleIdFilled()
	 * @method bool isResponsibleIdChanged()
	 * @method \int remindActualResponsibleId()
	 * @method \int requireResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetResponsibleId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetResponsibleId()
	 * @method \int fillResponsibleId()
	 * @method \string getStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setStatusSemanticId(\string|\Bitrix\Main\DB\SqlExpression $statusSemanticId)
	 * @method bool hasStatusSemanticId()
	 * @method bool isStatusSemanticIdFilled()
	 * @method bool isStatusSemanticIdChanged()
	 * @method \string remindActualStatusSemanticId()
	 * @method \string requireStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetStatusSemanticId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetStatusSemanticId()
	 * @method \string fillStatusSemanticId()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string remindActualStatusId()
	 * @method \string requireStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetStatusId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetStatusId()
	 * @method \string fillStatusId()
	 * @method \string getSourceId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setSourceId(\string|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \string remindActualSourceId()
	 * @method \string requireSourceId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetSourceId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetSourceId()
	 * @method \string fillSourceId()
	 * @method \boolean getIsJunk()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setIsJunk(\boolean|\Bitrix\Main\DB\SqlExpression $isJunk)
	 * @method bool hasIsJunk()
	 * @method bool isIsJunkFilled()
	 * @method bool isIsJunkChanged()
	 * @method \boolean remindActualIsJunk()
	 * @method \boolean requireIsJunk()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetIsJunk()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetIsJunk()
	 * @method \boolean fillIsJunk()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetCurrencyId()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \float getSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setSumTotal(\float|\Bitrix\Main\DB\SqlExpression $sumTotal)
	 * @method bool hasSumTotal()
	 * @method bool isSumTotalFilled()
	 * @method bool isSumTotalChanged()
	 * @method \float remindActualSumTotal()
	 * @method \float requireSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetSumTotal()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetSumTotal()
	 * @method \float fillSumTotal()
	 * @method \float getUfSum1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setUfSum1(\float|\Bitrix\Main\DB\SqlExpression $ufSum1)
	 * @method bool hasUfSum1()
	 * @method bool isUfSum1Filled()
	 * @method bool isUfSum1Changed()
	 * @method \float remindActualUfSum1()
	 * @method \float requireUfSum1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetUfSum1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetUfSum1()
	 * @method \float fillUfSum1()
	 * @method \float getUfSum2()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setUfSum2(\float|\Bitrix\Main\DB\SqlExpression $ufSum2)
	 * @method bool hasUfSum2()
	 * @method bool isUfSum2Filled()
	 * @method bool isUfSum2Changed()
	 * @method \float remindActualUfSum2()
	 * @method \float requireUfSum2()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetUfSum2()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetUfSum2()
	 * @method \float fillUfSum2()
	 * @method \float getUfSum3()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setUfSum3(\float|\Bitrix\Main\DB\SqlExpression $ufSum3)
	 * @method bool hasUfSum3()
	 * @method bool isUfSum3Filled()
	 * @method bool isUfSum3Changed()
	 * @method \float remindActualUfSum3()
	 * @method \float requireUfSum3()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetUfSum3()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetUfSum3()
	 * @method \float fillUfSum3()
	 * @method \float getUfSum4()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setUfSum4(\float|\Bitrix\Main\DB\SqlExpression $ufSum4)
	 * @method bool hasUfSum4()
	 * @method bool isUfSum4Filled()
	 * @method bool isUfSum4Changed()
	 * @method \float remindActualUfSum4()
	 * @method \float requireUfSum4()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetUfSum4()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetUfSum4()
	 * @method \float fillUfSum4()
	 * @method \float getUfSum5()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setUfSum5(\float|\Bitrix\Main\DB\SqlExpression $ufSum5)
	 * @method bool hasUfSum5()
	 * @method bool isUfSum5Filled()
	 * @method bool isUfSum5Changed()
	 * @method \float remindActualUfSum5()
	 * @method \float requireUfSum5()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetUfSum5()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetUfSum5()
	 * @method \float fillUfSum5()
	 * @method \int getUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics setUfAttr1(\int|\Bitrix\Main\DB\SqlExpression $ufAttr1)
	 * @method bool hasUfAttr1()
	 * @method bool isUfAttr1Filled()
	 * @method bool isUfAttr1Changed()
	 * @method \int remindActualUfAttr1()
	 * @method \int requireUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics resetUfAttr1()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unsetUfAttr1()
	 * @method \int fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics set($fieldName, $value)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics reset($fieldName)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics wakeUp($data)
	 */
	class EO_LeadSumStatistics {
		/* @var \Bitrix\Crm\Statistics\Entity\LeadSumStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\LeadSumStatisticsTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * EO_LeadSumStatistics_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \Bitrix\Main\Type\Date[] getCreatedDateList()
	 * @method \int[] getPeriodYearList()
	 * @method \int[] fillPeriodYear()
	 * @method \int[] getPeriodQuarterList()
	 * @method \int[] fillPeriodQuarter()
	 * @method \int[] getPeriodMonthList()
	 * @method \int[] fillPeriodMonth()
	 * @method \int[] getPeriodDayList()
	 * @method \int[] fillPeriodDay()
	 * @method \int[] getResponsibleIdList()
	 * @method \int[] fillResponsibleId()
	 * @method \string[] getStatusSemanticIdList()
	 * @method \string[] fillStatusSemanticId()
	 * @method \string[] getStatusIdList()
	 * @method \string[] fillStatusId()
	 * @method \string[] getSourceIdList()
	 * @method \string[] fillSourceId()
	 * @method \boolean[] getIsJunkList()
	 * @method \boolean[] fillIsJunk()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \float[] getSumTotalList()
	 * @method \float[] fillSumTotal()
	 * @method \float[] getUfSum1List()
	 * @method \float[] fillUfSum1()
	 * @method \float[] getUfSum2List()
	 * @method \float[] fillUfSum2()
	 * @method \float[] getUfSum3List()
	 * @method \float[] fillUfSum3()
	 * @method \float[] getUfSum4List()
	 * @method \float[] fillUfSum4()
	 * @method \float[] getUfSum5List()
	 * @method \float[] fillUfSum5()
	 * @method \int[] getUfAttr1List()
	 * @method \int[] fillUfAttr1()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics $object)
	 * @method bool has(\Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics getByPrimary($primary)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics[] getAll()
	 * @method bool remove(\Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_LeadSumStatistics_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Statistics\Entity\LeadSumStatisticsTable */
		static public $dataClass = '\Bitrix\Crm\Statistics\Entity\LeadSumStatisticsTable';
	}
}
namespace Bitrix\Crm\Statistics\Entity {
	/**
	 * @method static EO_LeadSumStatistics_Query query()
	 * @method static EO_LeadSumStatistics_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_LeadSumStatistics_Result getById($id)
	 * @method static EO_LeadSumStatistics_Result getList(array $parameters = array())
	 * @method static EO_LeadSumStatistics_Entity getEntity()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics_Collection createCollection()
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics wakeUpObject($row)
	 * @method static \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics_Collection wakeUpCollection($rows)
	 */
	class LeadSumStatisticsTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_LeadSumStatistics_Result exec()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_LeadSumStatistics_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics fetchObject()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics_Collection fetchCollection()
	 */
	class EO_LeadSumStatistics_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics_Collection createCollection()
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics wakeUpObject($row)
	 * @method \Bitrix\Crm\Statistics\Entity\EO_LeadSumStatistics_Collection wakeUpCollection($rows)
	 */
	class EO_LeadSumStatistics_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\StatusTable:crm/lib/status.php:590628faa47e12cbcd709f3ea4c3fe12 */
namespace Bitrix\Crm {
	/**
	 * EO_Status
	 * @see \Bitrix\Crm\StatusTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getEntityId()
	 * @method \Bitrix\Crm\EO_Status setEntityId(\string|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \string getStatusId()
	 * @method \Bitrix\Crm\EO_Status setStatusId(\string|\Bitrix\Main\DB\SqlExpression $statusId)
	 * @method bool hasStatusId()
	 * @method bool isStatusIdFilled()
	 * @method bool isStatusIdChanged()
	 * @method \string getName()
	 * @method \Bitrix\Crm\EO_Status setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\EO_Status resetName()
	 * @method \Bitrix\Crm\EO_Status unsetName()
	 * @method \string fillName()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\EO_Status setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\EO_Status resetSort()
	 * @method \Bitrix\Crm\EO_Status unsetSort()
	 * @method \int fillSort()
	 * @method string getSemantics()
	 * @method \Bitrix\Crm\EO_Status setSemantics(string $semantics)
	 * @method bool hasSemantics()
	 * @method string getColor()
	 * @method \Bitrix\Crm\EO_Status setColor(string $color)
	 * @method bool hasColor()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Status set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Status reset($fieldName)
	 * @method \Bitrix\Crm\EO_Status unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Status wakeUp($data)
	 */
	class EO_Status {
		/* @var \Bitrix\Crm\StatusTable */
		static public $dataClass = '\Bitrix\Crm\StatusTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Status_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getEntityIdList()
	 * @method \string[] getStatusIdList()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Status $object)
	 * @method bool has(\Bitrix\Crm\EO_Status $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Status getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Status[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Status $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Status_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Status current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Status_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\StatusTable */
		static public $dataClass = '\Bitrix\Crm\StatusTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Status_Query query()
	 * @method static EO_Status_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Status_Result getById($id)
	 * @method static EO_Status_Result getList(array $parameters = array())
	 * @method static EO_Status_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Status createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Status_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Status wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Status_Collection wakeUpCollection($rows)
	 */
	class StatusTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Status_Result exec()
	 * @method \Bitrix\Crm\EO_Status fetchObject()
	 * @method \Bitrix\Crm\EO_Status_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Status_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Status fetchObject()
	 * @method \Bitrix\Crm\EO_Status_Collection fetchCollection()
	 */
	class EO_Status_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Status createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Status_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Status wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Status_Collection wakeUpCollection($rows)
	 */
	class EO_Status_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Timeline\Entity\TimelineTable:crm/lib/timeline/entity/timeline.php:a9c5d20b646f4ee5ba606dd359468390 */
namespace Bitrix\Crm\Timeline\Entity {
	/**
	 * EO_Timeline
	 * @see \Bitrix\Crm\Timeline\Entity\TimelineTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline resetTypeId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \int getTypeCategoryId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setTypeCategoryId(\int|\Bitrix\Main\DB\SqlExpression $typeCategoryId)
	 * @method bool hasTypeCategoryId()
	 * @method bool isTypeCategoryIdFilled()
	 * @method bool isTypeCategoryIdChanged()
	 * @method \int remindActualTypeCategoryId()
	 * @method \int requireTypeCategoryId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline resetTypeCategoryId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unsetTypeCategoryId()
	 * @method \int fillTypeCategoryId()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline resetCreated()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \int getAuthorId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setAuthorId(\int|\Bitrix\Main\DB\SqlExpression $authorId)
	 * @method bool hasAuthorId()
	 * @method bool isAuthorIdFilled()
	 * @method bool isAuthorIdChanged()
	 * @method \int remindActualAuthorId()
	 * @method \int requireAuthorId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline resetAuthorId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unsetAuthorId()
	 * @method \int fillAuthorId()
	 * @method \int getAssociatedEntityId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setAssociatedEntityId(\int|\Bitrix\Main\DB\SqlExpression $associatedEntityId)
	 * @method bool hasAssociatedEntityId()
	 * @method bool isAssociatedEntityIdFilled()
	 * @method bool isAssociatedEntityIdChanged()
	 * @method \int remindActualAssociatedEntityId()
	 * @method \int requireAssociatedEntityId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline resetAssociatedEntityId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unsetAssociatedEntityId()
	 * @method \int fillAssociatedEntityId()
	 * @method \int getAssociatedEntityTypeId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setAssociatedEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $associatedEntityTypeId)
	 * @method bool hasAssociatedEntityTypeId()
	 * @method bool isAssociatedEntityTypeIdFilled()
	 * @method bool isAssociatedEntityTypeIdChanged()
	 * @method \int remindActualAssociatedEntityTypeId()
	 * @method \int requireAssociatedEntityTypeId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline resetAssociatedEntityTypeId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unsetAssociatedEntityTypeId()
	 * @method \int fillAssociatedEntityTypeId()
	 * @method \string getAssociatedEntityClassName()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setAssociatedEntityClassName(\string|\Bitrix\Main\DB\SqlExpression $associatedEntityClassName)
	 * @method bool hasAssociatedEntityClassName()
	 * @method bool isAssociatedEntityClassNameFilled()
	 * @method bool isAssociatedEntityClassNameChanged()
	 * @method \string remindActualAssociatedEntityClassName()
	 * @method \string requireAssociatedEntityClassName()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline resetAssociatedEntityClassName()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unsetAssociatedEntityClassName()
	 * @method \string fillAssociatedEntityClassName()
	 * @method \string getComment()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setComment(\string|\Bitrix\Main\DB\SqlExpression $comment)
	 * @method bool hasComment()
	 * @method bool isCommentFilled()
	 * @method bool isCommentChanged()
	 * @method \string remindActualComment()
	 * @method \string requireComment()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline resetComment()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unsetComment()
	 * @method \string fillComment()
	 * @method \string getSettings()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setSettings(\string|\Bitrix\Main\DB\SqlExpression $settings)
	 * @method bool hasSettings()
	 * @method bool isSettingsFilled()
	 * @method bool isSettingsChanged()
	 * @method \string remindActualSettings()
	 * @method \string requireSettings()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline resetSettings()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unsetSettings()
	 * @method \string fillSettings()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding getBindings()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding remindActualBindings()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding requireBindings()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline setBindings(\Bitrix\Crm\Timeline\Entity\EO_TimelineBinding $object)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline resetBindings()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unsetBindings()
	 * @method bool hasBindings()
	 * @method bool isBindingsFilled()
	 * @method bool isBindingsChanged()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding fillBindings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline set($fieldName, $value)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline reset($fieldName)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_Timeline wakeUp($data)
	 */
	class EO_Timeline {
		/* @var \Bitrix\Crm\Timeline\Entity\TimelineTable */
		static public $dataClass = '\Bitrix\Crm\Timeline\Entity\TimelineTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Timeline\Entity {
	/**
	 * EO_Timeline_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \int[] getTypeCategoryIdList()
	 * @method \int[] fillTypeCategoryId()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \int[] getAuthorIdList()
	 * @method \int[] fillAuthorId()
	 * @method \int[] getAssociatedEntityIdList()
	 * @method \int[] fillAssociatedEntityId()
	 * @method \int[] getAssociatedEntityTypeIdList()
	 * @method \int[] fillAssociatedEntityTypeId()
	 * @method \string[] getAssociatedEntityClassNameList()
	 * @method \string[] fillAssociatedEntityClassName()
	 * @method \string[] getCommentList()
	 * @method \string[] fillComment()
	 * @method \string[] getSettingsList()
	 * @method \string[] fillSettings()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding[] getBindingsList()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline_Collection getBindingsCollection()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding_Collection fillBindings()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Timeline\Entity\EO_Timeline $object)
	 * @method bool has(\Bitrix\Crm\Timeline\Entity\EO_Timeline $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline getByPrimary($primary)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline[] getAll()
	 * @method bool remove(\Bitrix\Crm\Timeline\Entity\EO_Timeline $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_Timeline_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Timeline_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Timeline\Entity\TimelineTable */
		static public $dataClass = '\Bitrix\Crm\Timeline\Entity\TimelineTable';
	}
}
namespace Bitrix\Crm\Timeline\Entity {
	/**
	 * @method static EO_Timeline_Query query()
	 * @method static EO_Timeline_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Timeline_Result getById($id)
	 * @method static EO_Timeline_Result getList(array $parameters = array())
	 * @method static EO_Timeline_Entity getEntity()
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_Timeline createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_Timeline_Collection createCollection()
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_Timeline wakeUpObject($row)
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_Timeline_Collection wakeUpCollection($rows)
	 */
	class TimelineTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Timeline_Result exec()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline fetchObject()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Timeline_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline fetchObject()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline_Collection fetchCollection()
	 */
	class EO_Timeline_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline_Collection createCollection()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline wakeUpObject($row)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_Timeline_Collection wakeUpCollection($rows)
	 */
	class EO_Timeline_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Timeline\Entity\TimelineBindingTable:crm/lib/timeline/entity/timelinebinding.php:45bc7b52e45332c87ba400e43b3c71d9 */
namespace Bitrix\Crm\Timeline\Entity {
	/**
	 * EO_TimelineBinding
	 * @see \Bitrix\Crm\Timeline\Entity\TimelineBindingTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \boolean getIsFixed()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding setIsFixed(\boolean|\Bitrix\Main\DB\SqlExpression $isFixed)
	 * @method bool hasIsFixed()
	 * @method bool isIsFixedFilled()
	 * @method bool isIsFixedChanged()
	 * @method \boolean remindActualIsFixed()
	 * @method \boolean requireIsFixed()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding resetIsFixed()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding unsetIsFixed()
	 * @method \boolean fillIsFixed()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding set($fieldName, $value)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding reset($fieldName)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding wakeUp($data)
	 */
	class EO_TimelineBinding {
		/* @var \Bitrix\Crm\Timeline\Entity\TimelineBindingTable */
		static public $dataClass = '\Bitrix\Crm\Timeline\Entity\TimelineBindingTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Timeline\Entity {
	/**
	 * EO_TimelineBinding_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getEntityIdList()
	 * @method \boolean[] getIsFixedList()
	 * @method \boolean[] fillIsFixed()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Timeline\Entity\EO_TimelineBinding $object)
	 * @method bool has(\Bitrix\Crm\Timeline\Entity\EO_TimelineBinding $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding getByPrimary($primary)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding[] getAll()
	 * @method bool remove(\Bitrix\Crm\Timeline\Entity\EO_TimelineBinding $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_TimelineBinding_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Timeline\Entity\TimelineBindingTable */
		static public $dataClass = '\Bitrix\Crm\Timeline\Entity\TimelineBindingTable';
	}
}
namespace Bitrix\Crm\Timeline\Entity {
	/**
	 * @method static EO_TimelineBinding_Query query()
	 * @method static EO_TimelineBinding_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_TimelineBinding_Result getById($id)
	 * @method static EO_TimelineBinding_Result getList(array $parameters = array())
	 * @method static EO_TimelineBinding_Entity getEntity()
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding_Collection createCollection()
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding wakeUpObject($row)
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding_Collection wakeUpCollection($rows)
	 */
	class TimelineBindingTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_TimelineBinding_Result exec()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding fetchObject()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_TimelineBinding_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding fetchObject()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding_Collection fetchCollection()
	 */
	class EO_TimelineBinding_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding_Collection createCollection()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding wakeUpObject($row)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineBinding_Collection wakeUpCollection($rows)
	 */
	class EO_TimelineBinding_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Timeline\Entity\TimelineSearchTable:crm/lib/timeline/entity/timelinesearch.php:3652b0cd776b71e998d0db7d4ce45233 */
namespace Bitrix\Crm\Timeline\Entity {
	/**
	 * EO_TimelineSearch
	 * @see \Bitrix\Crm\Timeline\Entity\TimelineSearchTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \string getSearchContent()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch setSearchContent(\string|\Bitrix\Main\DB\SqlExpression $searchContent)
	 * @method bool hasSearchContent()
	 * @method bool isSearchContentFilled()
	 * @method bool isSearchContentChanged()
	 * @method \string remindActualSearchContent()
	 * @method \string requireSearchContent()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch resetSearchContent()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch unsetSearchContent()
	 * @method \string fillSearchContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch set($fieldName, $value)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch reset($fieldName)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch wakeUp($data)
	 */
	class EO_TimelineSearch {
		/* @var \Bitrix\Crm\Timeline\Entity\TimelineSearchTable */
		static public $dataClass = '\Bitrix\Crm\Timeline\Entity\TimelineSearchTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Timeline\Entity {
	/**
	 * EO_TimelineSearch_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getOwnerIdList()
	 * @method \string[] getSearchContentList()
	 * @method \string[] fillSearchContent()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Timeline\Entity\EO_TimelineSearch $object)
	 * @method bool has(\Bitrix\Crm\Timeline\Entity\EO_TimelineSearch $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch getByPrimary($primary)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch[] getAll()
	 * @method bool remove(\Bitrix\Crm\Timeline\Entity\EO_TimelineSearch $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_TimelineSearch_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Timeline\Entity\TimelineSearchTable */
		static public $dataClass = '\Bitrix\Crm\Timeline\Entity\TimelineSearchTable';
	}
}
namespace Bitrix\Crm\Timeline\Entity {
	/**
	 * @method static EO_TimelineSearch_Query query()
	 * @method static EO_TimelineSearch_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_TimelineSearch_Result getById($id)
	 * @method static EO_TimelineSearch_Result getList(array $parameters = array())
	 * @method static EO_TimelineSearch_Entity getEntity()
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch_Collection createCollection()
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch wakeUpObject($row)
	 * @method static \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch_Collection wakeUpCollection($rows)
	 */
	class TimelineSearchTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_TimelineSearch_Result exec()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch fetchObject()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_TimelineSearch_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch fetchObject()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch_Collection fetchCollection()
	 */
	class EO_TimelineSearch_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch_Collection createCollection()
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch wakeUpObject($row)
	 * @method \Bitrix\Crm\Timeline\Entity\EO_TimelineSearch_Collection wakeUpCollection($rows)
	 */
	class EO_TimelineSearch_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\ExpensesPackTable:crm/lib/tracking/internals/expensespack.php:960fe8328d3713ab347c24301e45791e */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_ExpensesPack
	 * @see \Bitrix\Crm\Tracking\Internals\ExpensesPackTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateInsert()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setDateInsert(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateInsert()
	 * @method \Bitrix\Main\Type\DateTime requireDateInsert()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack resetDateInsert()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unsetDateInsert()
	 * @method \Bitrix\Main\Type\DateTime fillDateInsert()
	 * @method \int getSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setSourceId(\int|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \int remindActualSourceId()
	 * @method \int requireSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack resetSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unsetSourceId()
	 * @method \int fillSourceId()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack resetTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \Bitrix\Main\Type\Date getDateFrom()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setDateFrom(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $dateFrom)
	 * @method bool hasDateFrom()
	 * @method bool isDateFromFilled()
	 * @method bool isDateFromChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDateFrom()
	 * @method \Bitrix\Main\Type\Date requireDateFrom()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack resetDateFrom()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unsetDateFrom()
	 * @method \Bitrix\Main\Type\Date fillDateFrom()
	 * @method \Bitrix\Main\Type\Date getDateTo()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setDateTo(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $dateTo)
	 * @method bool hasDateTo()
	 * @method bool isDateToFilled()
	 * @method bool isDateToChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDateTo()
	 * @method \Bitrix\Main\Type\Date requireDateTo()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack resetDateTo()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unsetDateTo()
	 * @method \Bitrix\Main\Type\Date fillDateTo()
	 * @method \int getActions()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setActions(\int|\Bitrix\Main\DB\SqlExpression $actions)
	 * @method bool hasActions()
	 * @method bool isActionsFilled()
	 * @method bool isActionsChanged()
	 * @method \int remindActualActions()
	 * @method \int requireActions()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack resetActions()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unsetActions()
	 * @method \int fillActions()
	 * @method \float getExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setExpenses(\float|\Bitrix\Main\DB\SqlExpression $expenses)
	 * @method bool hasExpenses()
	 * @method bool isExpensesFilled()
	 * @method bool isExpensesChanged()
	 * @method \float remindActualExpenses()
	 * @method \float requireExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack resetExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unsetExpenses()
	 * @method \float fillExpenses()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack resetCurrencyId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \string getComment()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setComment(\string|\Bitrix\Main\DB\SqlExpression $comment)
	 * @method bool hasComment()
	 * @method bool isCommentFilled()
	 * @method bool isCommentChanged()
	 * @method \string remindActualComment()
	 * @method \string requireComment()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack resetComment()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unsetComment()
	 * @method \string fillComment()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source getSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source remindActualSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source requireSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack setSource(\Bitrix\Crm\Tracking\Internals\EO_Source $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack resetSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unsetSource()
	 * @method bool hasSource()
	 * @method bool isSourceFilled()
	 * @method bool isSourceChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source fillSource()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack wakeUp($data)
	 */
	class EO_ExpensesPack {
		/* @var \Bitrix\Crm\Tracking\Internals\ExpensesPackTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\ExpensesPackTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_ExpensesPack_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateInsertList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateInsert()
	 * @method \int[] getSourceIdList()
	 * @method \int[] fillSourceId()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \Bitrix\Main\Type\Date[] getDateFromList()
	 * @method \Bitrix\Main\Type\Date[] fillDateFrom()
	 * @method \Bitrix\Main\Type\Date[] getDateToList()
	 * @method \Bitrix\Main\Type\Date[] fillDateTo()
	 * @method \int[] getActionsList()
	 * @method \int[] fillActions()
	 * @method \float[] getExpensesList()
	 * @method \float[] fillExpenses()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \string[] getCommentList()
	 * @method \string[] fillComment()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source[] getSourceList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack_Collection getSourceCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source_Collection fillSource()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_ExpensesPack $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_ExpensesPack $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_ExpensesPack $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ExpensesPack_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\ExpensesPackTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\ExpensesPackTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_ExpensesPack_Query query()
	 * @method static EO_ExpensesPack_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ExpensesPack_Result getById($id)
	 * @method static EO_ExpensesPack_Result getList(array $parameters = array())
	 * @method static EO_ExpensesPack_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack_Collection wakeUpCollection($rows)
	 */
	class ExpensesPackTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ExpensesPack_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ExpensesPack_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack_Collection fetchCollection()
	 */
	class EO_ExpensesPack_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack_Collection wakeUpCollection($rows)
	 */
	class EO_ExpensesPack_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\PhoneNumberTable:crm/lib/tracking/internals/phonenumber.php:9bdfab86198e3d0ad6731d9e7509d3f0 */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_PhoneNumber
	 * @see \Bitrix\Crm\Tracking\Internals\PhoneNumberTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber resetDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber resetValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber unsetValue()
	 * @method \string fillValue()
	 * @method \int getUseCnt()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber setUseCnt(\int|\Bitrix\Main\DB\SqlExpression $useCnt)
	 * @method bool hasUseCnt()
	 * @method bool isUseCntFilled()
	 * @method bool isUseCntChanged()
	 * @method \int remindActualUseCnt()
	 * @method \int requireUseCnt()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber resetUseCnt()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber unsetUseCnt()
	 * @method \int fillUseCnt()
	 * @method \Bitrix\Main\Type\DateTime getDateUse()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber setDateUse(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateUse)
	 * @method bool hasDateUse()
	 * @method bool isDateUseFilled()
	 * @method bool isDateUseChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateUse()
	 * @method \Bitrix\Main\Type\DateTime requireDateUse()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber resetDateUse()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber unsetDateUse()
	 * @method \Bitrix\Main\Type\DateTime fillDateUse()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber wakeUp($data)
	 */
	class EO_PhoneNumber {
		/* @var \Bitrix\Crm\Tracking\Internals\PhoneNumberTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\PhoneNumberTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_PhoneNumber_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \int[] getUseCntList()
	 * @method \int[] fillUseCnt()
	 * @method \Bitrix\Main\Type\DateTime[] getDateUseList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateUse()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_PhoneNumber $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_PhoneNumber $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_PhoneNumber $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_PhoneNumber_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\PhoneNumberTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\PhoneNumberTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_PhoneNumber_Query query()
	 * @method static EO_PhoneNumber_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_PhoneNumber_Result getById($id)
	 * @method static EO_PhoneNumber_Result getList(array $parameters = array())
	 * @method static EO_PhoneNumber_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber_Collection wakeUpCollection($rows)
	 */
	class PhoneNumberTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PhoneNumber_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PhoneNumber_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber_Collection fetchCollection()
	 */
	class EO_PhoneNumber_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_PhoneNumber_Collection wakeUpCollection($rows)
	 */
	class EO_PhoneNumber_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\PoolTable:crm/lib/tracking/internals/pool.php:bbbea347e279a0e094dbb81c2acba976 */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_Pool
	 * @see \Bitrix\Crm\Tracking\Internals\PoolTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool resetDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool resetTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool resetValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool unsetValue()
	 * @method \string fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Pool wakeUp($data)
	 */
	class EO_Pool {
		/* @var \Bitrix\Crm\Tracking\Internals\PoolTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\PoolTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_Pool_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_Pool $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_Pool $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_Pool $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Pool_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Pool_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\PoolTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\PoolTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_Pool_Query query()
	 * @method static EO_Pool_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Pool_Result getById($id)
	 * @method static EO_Pool_Result getList(array $parameters = array())
	 * @method static EO_Pool_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Pool createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Pool_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Pool wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Pool_Collection wakeUpCollection($rows)
	 */
	class PoolTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Pool_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Pool_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool_Collection fetchCollection()
	 */
	class EO_Pool_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Pool_Collection wakeUpCollection($rows)
	 */
	class EO_Pool_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\SiteTable:crm/lib/tracking/internals/site.php:446ab59d0943fce3a4dbfd60147da64d */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_Site
	 * @see \Bitrix\Crm\Tracking\Internals\SiteTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site resetDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \string getHost()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setHost(\string|\Bitrix\Main\DB\SqlExpression $host)
	 * @method bool hasHost()
	 * @method bool isHostFilled()
	 * @method bool isHostChanged()
	 * @method \string remindActualHost()
	 * @method \string requireHost()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site resetHost()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unsetHost()
	 * @method \string fillHost()
	 * @method \string getAddress()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setAddress(\string|\Bitrix\Main\DB\SqlExpression $address)
	 * @method bool hasAddress()
	 * @method bool isAddressFilled()
	 * @method bool isAddressChanged()
	 * @method \string remindActualAddress()
	 * @method \string requireAddress()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site resetAddress()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unsetAddress()
	 * @method \string fillAddress()
	 * @method \string getActive()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setActive(\string|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \string remindActualActive()
	 * @method \string requireActive()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site resetActive()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unsetActive()
	 * @method \string fillActive()
	 * @method \string getIsInstalled()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setIsInstalled(\string|\Bitrix\Main\DB\SqlExpression $isInstalled)
	 * @method bool hasIsInstalled()
	 * @method bool isIsInstalledFilled()
	 * @method bool isIsInstalledChanged()
	 * @method \string remindActualIsInstalled()
	 * @method \string requireIsInstalled()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site resetIsInstalled()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unsetIsInstalled()
	 * @method \string fillIsInstalled()
	 * @method \string getPhones()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setPhones(\string|\Bitrix\Main\DB\SqlExpression $phones)
	 * @method bool hasPhones()
	 * @method bool isPhonesFilled()
	 * @method bool isPhonesChanged()
	 * @method \string remindActualPhones()
	 * @method \string requirePhones()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site resetPhones()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unsetPhones()
	 * @method \string fillPhones()
	 * @method \string getEmails()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setEmails(\string|\Bitrix\Main\DB\SqlExpression $emails)
	 * @method bool hasEmails()
	 * @method bool isEmailsFilled()
	 * @method bool isEmailsChanged()
	 * @method \string remindActualEmails()
	 * @method \string requireEmails()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site resetEmails()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unsetEmails()
	 * @method \string fillEmails()
	 * @method \boolean getReplaceText()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setReplaceText(\boolean|\Bitrix\Main\DB\SqlExpression $replaceText)
	 * @method bool hasReplaceText()
	 * @method bool isReplaceTextFilled()
	 * @method bool isReplaceTextChanged()
	 * @method \boolean remindActualReplaceText()
	 * @method \boolean requireReplaceText()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site resetReplaceText()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unsetReplaceText()
	 * @method \boolean fillReplaceText()
	 * @method \boolean getEnrichText()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setEnrichText(\boolean|\Bitrix\Main\DB\SqlExpression $enrichText)
	 * @method bool hasEnrichText()
	 * @method bool isEnrichTextFilled()
	 * @method bool isEnrichTextChanged()
	 * @method \boolean remindActualEnrichText()
	 * @method \boolean requireEnrichText()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site resetEnrichText()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unsetEnrichText()
	 * @method \boolean fillEnrichText()
	 * @method \boolean getResolveDuplicates()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site setResolveDuplicates(\boolean|\Bitrix\Main\DB\SqlExpression $resolveDuplicates)
	 * @method bool hasResolveDuplicates()
	 * @method bool isResolveDuplicatesFilled()
	 * @method bool isResolveDuplicatesChanged()
	 * @method \boolean remindActualResolveDuplicates()
	 * @method \boolean requireResolveDuplicates()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site resetResolveDuplicates()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unsetResolveDuplicates()
	 * @method \boolean fillResolveDuplicates()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Site wakeUp($data)
	 */
	class EO_Site {
		/* @var \Bitrix\Crm\Tracking\Internals\SiteTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SiteTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_Site_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \string[] getHostList()
	 * @method \string[] fillHost()
	 * @method \string[] getAddressList()
	 * @method \string[] fillAddress()
	 * @method \string[] getActiveList()
	 * @method \string[] fillActive()
	 * @method \string[] getIsInstalledList()
	 * @method \string[] fillIsInstalled()
	 * @method \string[] getPhonesList()
	 * @method \string[] fillPhones()
	 * @method \string[] getEmailsList()
	 * @method \string[] fillEmails()
	 * @method \boolean[] getReplaceTextList()
	 * @method \boolean[] fillReplaceText()
	 * @method \boolean[] getEnrichTextList()
	 * @method \boolean[] fillEnrichText()
	 * @method \boolean[] getResolveDuplicatesList()
	 * @method \boolean[] fillResolveDuplicates()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_Site $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_Site $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_Site $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Site_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Site_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\SiteTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SiteTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_Site_Query query()
	 * @method static EO_Site_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Site_Result getById($id)
	 * @method static EO_Site_Result getList(array $parameters = array())
	 * @method static EO_Site_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Site createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Site_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Site wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Site_Collection wakeUpCollection($rows)
	 */
	class SiteTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Site_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Site_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site_Collection fetchCollection()
	 */
	class EO_Site_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Site_Collection wakeUpCollection($rows)
	 */
	class EO_Site_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\SiteB24Table:crm/lib/tracking/internals/siteb24.php:3439d7ac83b7c30c9b73becdfb565a26 */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_SiteB24
	 * @see \Bitrix\Crm\Tracking\Internals\SiteB24Table
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getLandingSiteId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 setLandingSiteId(\int|\Bitrix\Main\DB\SqlExpression $landingSiteId)
	 * @method bool hasLandingSiteId()
	 * @method bool isLandingSiteIdFilled()
	 * @method bool isLandingSiteIdChanged()
	 * @method \boolean getIsShop()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 setIsShop(\boolean|\Bitrix\Main\DB\SqlExpression $isShop)
	 * @method bool hasIsShop()
	 * @method bool isIsShopFilled()
	 * @method bool isIsShopChanged()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SiteB24 wakeUp($data)
	 */
	class EO_SiteB24 {
		/* @var \Bitrix\Crm\Tracking\Internals\SiteB24Table */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SiteB24Table';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_SiteB24_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getLandingSiteIdList()
	 * @method \boolean[] getIsShopList()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_SiteB24 $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_SiteB24 $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_SiteB24 $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SiteB24_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_SiteB24_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\SiteB24Table */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SiteB24Table';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_SiteB24_Query query()
	 * @method static EO_SiteB24_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_SiteB24_Result getById($id)
	 * @method static EO_SiteB24_Result getList(array $parameters = array())
	 * @method static EO_SiteB24_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SiteB24 createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SiteB24_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SiteB24 wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SiteB24_Collection wakeUpCollection($rows)
	 */
	class SiteB24Table extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_SiteB24_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_SiteB24_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24_Collection fetchCollection()
	 */
	class EO_SiteB24_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24 wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SiteB24_Collection wakeUpCollection($rows)
	 */
	class EO_SiteB24_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\SourceTable:crm/lib/tracking/internals/source.php:620f47ff91144d077237caa89ae9fd93 */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_Source
	 * @see \Bitrix\Crm\Tracking\Internals\SourceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \boolean getActive()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetActive()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetActive()
	 * @method \boolean fillActive()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetCode()
	 * @method \string fillCode()
	 * @method \string getName()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetName()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetName()
	 * @method \string fillName()
	 * @method \string getIconColor()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setIconColor(\string|\Bitrix\Main\DB\SqlExpression $iconColor)
	 * @method bool hasIconColor()
	 * @method bool isIconColorFilled()
	 * @method bool isIconColorChanged()
	 * @method \string remindActualIconColor()
	 * @method \string requireIconColor()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetIconColor()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetIconColor()
	 * @method \string fillIconColor()
	 * @method \string getPhone()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setPhone(\string|\Bitrix\Main\DB\SqlExpression $phone)
	 * @method bool hasPhone()
	 * @method bool isPhoneFilled()
	 * @method bool isPhoneChanged()
	 * @method \string remindActualPhone()
	 * @method \string requirePhone()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetPhone()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetPhone()
	 * @method \string fillPhone()
	 * @method \string getEmail()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setEmail(\string|\Bitrix\Main\DB\SqlExpression $email)
	 * @method bool hasEmail()
	 * @method bool isEmailFilled()
	 * @method bool isEmailChanged()
	 * @method \string remindActualEmail()
	 * @method \string requireEmail()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetEmail()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetEmail()
	 * @method \string fillEmail()
	 * @method \string getUtmSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setUtmSource(\string|\Bitrix\Main\DB\SqlExpression $utmSource)
	 * @method bool hasUtmSource()
	 * @method bool isUtmSourceFilled()
	 * @method bool isUtmSourceChanged()
	 * @method \string remindActualUtmSource()
	 * @method \string requireUtmSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetUtmSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetUtmSource()
	 * @method \string fillUtmSource()
	 * @method \string getTags()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setTags(\string|\Bitrix\Main\DB\SqlExpression $tags)
	 * @method bool hasTags()
	 * @method bool isTagsFilled()
	 * @method bool isTagsChanged()
	 * @method \string remindActualTags()
	 * @method \string requireTags()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetTags()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetTags()
	 * @method \string fillTags()
	 * @method \string getAdClientId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setAdClientId(\string|\Bitrix\Main\DB\SqlExpression $adClientId)
	 * @method bool hasAdClientId()
	 * @method bool isAdClientIdFilled()
	 * @method bool isAdClientIdChanged()
	 * @method \string remindActualAdClientId()
	 * @method \string requireAdClientId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetAdClientId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetAdClientId()
	 * @method \string fillAdClientId()
	 * @method \string getAdAccountId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source setAdAccountId(\string|\Bitrix\Main\DB\SqlExpression $adAccountId)
	 * @method bool hasAdAccountId()
	 * @method bool isAdAccountIdFilled()
	 * @method bool isAdAccountIdChanged()
	 * @method \string remindActualAdAccountId()
	 * @method \string requireAdAccountId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source resetAdAccountId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unsetAdAccountId()
	 * @method \string fillAdAccountId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Source wakeUp($data)
	 */
	class EO_Source {
		/* @var \Bitrix\Crm\Tracking\Internals\SourceTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SourceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_Source_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getIconColorList()
	 * @method \string[] fillIconColor()
	 * @method \string[] getPhoneList()
	 * @method \string[] fillPhone()
	 * @method \string[] getEmailList()
	 * @method \string[] fillEmail()
	 * @method \string[] getUtmSourceList()
	 * @method \string[] fillUtmSource()
	 * @method \string[] getTagsList()
	 * @method \string[] fillTags()
	 * @method \string[] getAdClientIdList()
	 * @method \string[] fillAdClientId()
	 * @method \string[] getAdAccountIdList()
	 * @method \string[] fillAdAccountId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_Source $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_Source $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_Source $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Source_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Source_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\SourceTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SourceTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_Source_Query query()
	 * @method static EO_Source_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Source_Result getById($id)
	 * @method static EO_Source_Result getList(array $parameters = array())
	 * @method static EO_Source_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Source createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Source_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Source wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Source_Collection wakeUpCollection($rows)
	 */
	class SourceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Source_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Source_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source_Collection fetchCollection()
	 */
	class EO_Source_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source_Collection wakeUpCollection($rows)
	 */
	class EO_Source_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\SourceChildTable:crm/lib/tracking/internals/sourcechild.php:181fe64715f966692cbb0cff663c09ce */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_SourceChild
	 * @see \Bitrix\Crm\Tracking\Internals\SourceChildTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getParentId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setParentId(\int|\Bitrix\Main\DB\SqlExpression $parentId)
	 * @method bool hasParentId()
	 * @method bool isParentIdFilled()
	 * @method bool isParentIdChanged()
	 * @method \int remindActualParentId()
	 * @method \int requireParentId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild resetParentId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unsetParentId()
	 * @method \int fillParentId()
	 * @method \int getSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setSourceId(\int|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \int remindActualSourceId()
	 * @method \int requireSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild resetSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unsetSourceId()
	 * @method \int fillSourceId()
	 * @method \int getLevel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setLevel(\int|\Bitrix\Main\DB\SqlExpression $level)
	 * @method bool hasLevel()
	 * @method bool isLevelFilled()
	 * @method bool isLevelChanged()
	 * @method \int remindActualLevel()
	 * @method \int requireLevel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild resetLevel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unsetLevel()
	 * @method \int fillLevel()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild resetCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unsetCode()
	 * @method \string fillCode()
	 * @method \string getTitle()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setTitle(\string|\Bitrix\Main\DB\SqlExpression $title)
	 * @method bool hasTitle()
	 * @method bool isTitleFilled()
	 * @method bool isTitleChanged()
	 * @method \string remindActualTitle()
	 * @method \string requireTitle()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild resetTitle()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unsetTitle()
	 * @method \string fillTitle()
	 * @method \int getIsEnabled()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setIsEnabled(\int|\Bitrix\Main\DB\SqlExpression $isEnabled)
	 * @method bool hasIsEnabled()
	 * @method bool isIsEnabledFilled()
	 * @method bool isIsEnabledChanged()
	 * @method \int remindActualIsEnabled()
	 * @method \int requireIsEnabled()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild resetIsEnabled()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unsetIsEnabled()
	 * @method \int fillIsEnabled()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild getParent()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild remindActualParent()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild requireParent()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setParent(\Bitrix\Crm\Tracking\Internals\EO_SourceChild $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild resetParent()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unsetParent()
	 * @method bool hasParent()
	 * @method bool isParentFilled()
	 * @method bool isParentChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild fillParent()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source getSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source remindActualSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source requireSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setSource(\Bitrix\Crm\Tracking\Internals\EO_Source $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild resetSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unsetSource()
	 * @method bool hasSource()
	 * @method bool isSourceFilled()
	 * @method bool isSourceChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source fillSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses getSourceExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses remindActualSourceExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses requireSourceExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setSourceExpenses(\Bitrix\Crm\Tracking\Internals\EO_SourceExpenses $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild resetSourceExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unsetSourceExpenses()
	 * @method bool hasSourceExpenses()
	 * @method bool isSourceExpensesFilled()
	 * @method bool isSourceExpensesChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses fillSourceExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource getTraceSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource remindActualTraceSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource requireTraceSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild setTraceSource(\Bitrix\Crm\Tracking\Internals\EO_TraceSource $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild resetTraceSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unsetTraceSource()
	 * @method bool hasTraceSource()
	 * @method bool isTraceSourceFilled()
	 * @method bool isTraceSourceChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource fillTraceSource()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceChild wakeUp($data)
	 */
	class EO_SourceChild {
		/* @var \Bitrix\Crm\Tracking\Internals\SourceChildTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SourceChildTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_SourceChild_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getParentIdList()
	 * @method \int[] fillParentId()
	 * @method \int[] getSourceIdList()
	 * @method \int[] fillSourceId()
	 * @method \int[] getLevelList()
	 * @method \int[] fillLevel()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getTitleList()
	 * @method \string[] fillTitle()
	 * @method \int[] getIsEnabledList()
	 * @method \int[] fillIsEnabled()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild[] getParentList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection getParentCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection fillParent()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source[] getSourceList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection getSourceCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source_Collection fillSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses[] getSourceExpensesList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection getSourceExpensesCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection fillSourceExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource[] getTraceSourceList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection getTraceSourceCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection fillTraceSource()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_SourceChild $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_SourceChild $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_SourceChild $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_SourceChild_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\SourceChildTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SourceChildTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_SourceChild_Query query()
	 * @method static EO_SourceChild_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_SourceChild_Result getById($id)
	 * @method static EO_SourceChild_Result getList(array $parameters = array())
	 * @method static EO_SourceChild_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceChild createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceChild wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection wakeUpCollection($rows)
	 */
	class SourceChildTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_SourceChild_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_SourceChild_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection fetchCollection()
	 */
	class EO_SourceChild_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection wakeUpCollection($rows)
	 */
	class EO_SourceChild_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\SourceExpensesTable:crm/lib/tracking/internals/sourceexpenses.php:8473b2dea7fb489ae8b2d759562af264 */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_SourceExpenses
	 * @see \Bitrix\Crm\Tracking\Internals\SourceExpensesTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getPackId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setPackId(\int|\Bitrix\Main\DB\SqlExpression $packId)
	 * @method bool hasPackId()
	 * @method bool isPackIdFilled()
	 * @method bool isPackIdChanged()
	 * @method \int remindActualPackId()
	 * @method \int requirePackId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetPackId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetPackId()
	 * @method \int fillPackId()
	 * @method \int getSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setSourceId(\int|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \int remindActualSourceId()
	 * @method \int requireSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetSourceId()
	 * @method \int fillSourceId()
	 * @method \int getTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setTypeId(\int|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \int remindActualTypeId()
	 * @method \int requireTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetTypeId()
	 * @method \int fillTypeId()
	 * @method \Bitrix\Main\Type\Date getDateStat()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setDateStat(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $dateStat)
	 * @method bool hasDateStat()
	 * @method bool isDateStatFilled()
	 * @method bool isDateStatChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDateStat()
	 * @method \Bitrix\Main\Type\Date requireDateStat()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetDateStat()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetDateStat()
	 * @method \Bitrix\Main\Type\Date fillDateStat()
	 * @method \int getImpressions()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setImpressions(\int|\Bitrix\Main\DB\SqlExpression $impressions)
	 * @method bool hasImpressions()
	 * @method bool isImpressionsFilled()
	 * @method bool isImpressionsChanged()
	 * @method \int remindActualImpressions()
	 * @method \int requireImpressions()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetImpressions()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetImpressions()
	 * @method \int fillImpressions()
	 * @method \int getActions()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setActions(\int|\Bitrix\Main\DB\SqlExpression $actions)
	 * @method bool hasActions()
	 * @method bool isActionsFilled()
	 * @method bool isActionsChanged()
	 * @method \int remindActualActions()
	 * @method \int requireActions()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetActions()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetActions()
	 * @method \int fillActions()
	 * @method \float getExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setExpenses(\float|\Bitrix\Main\DB\SqlExpression $expenses)
	 * @method bool hasExpenses()
	 * @method bool isExpensesFilled()
	 * @method bool isExpensesChanged()
	 * @method \float remindActualExpenses()
	 * @method \float requireExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetExpenses()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetExpenses()
	 * @method \float fillExpenses()
	 * @method \string getCurrencyId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setCurrencyId(\string|\Bitrix\Main\DB\SqlExpression $currencyId)
	 * @method bool hasCurrencyId()
	 * @method bool isCurrencyIdFilled()
	 * @method bool isCurrencyIdChanged()
	 * @method \string remindActualCurrencyId()
	 * @method \string requireCurrencyId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetCurrencyId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetCurrencyId()
	 * @method \string fillCurrencyId()
	 * @method \string getComment()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setComment(\string|\Bitrix\Main\DB\SqlExpression $comment)
	 * @method bool hasComment()
	 * @method bool isCommentFilled()
	 * @method bool isCommentChanged()
	 * @method \string remindActualComment()
	 * @method \string requireComment()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetComment()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetComment()
	 * @method \string fillComment()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack getPack()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack remindActualPack()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack requirePack()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setPack(\Bitrix\Crm\Tracking\Internals\EO_ExpensesPack $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetPack()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetPack()
	 * @method bool hasPack()
	 * @method bool isPackFilled()
	 * @method bool isPackChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack fillPack()
	 * @method \int getSourceChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setSourceChildId(\int|\Bitrix\Main\DB\SqlExpression $sourceChildId)
	 * @method bool hasSourceChildId()
	 * @method bool isSourceChildIdFilled()
	 * @method bool isSourceChildIdChanged()
	 * @method \int remindActualSourceChildId()
	 * @method \int requireSourceChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetSourceChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetSourceChildId()
	 * @method \int fillSourceChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild getSourceChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild remindActualSourceChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild requireSourceChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setSourceChild(\Bitrix\Crm\Tracking\Internals\EO_SourceChild $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetSourceChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetSourceChild()
	 * @method bool hasSourceChild()
	 * @method bool isSourceChildFilled()
	 * @method bool isSourceChildChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild fillSourceChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source getSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source remindActualSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source requireSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses setSource(\Bitrix\Crm\Tracking\Internals\EO_Source $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses resetSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unsetSource()
	 * @method bool hasSource()
	 * @method bool isSourceFilled()
	 * @method bool isSourceChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source fillSource()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses wakeUp($data)
	 */
	class EO_SourceExpenses {
		/* @var \Bitrix\Crm\Tracking\Internals\SourceExpensesTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SourceExpensesTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_SourceExpenses_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getPackIdList()
	 * @method \int[] fillPackId()
	 * @method \int[] getSourceIdList()
	 * @method \int[] fillSourceId()
	 * @method \int[] getTypeIdList()
	 * @method \int[] fillTypeId()
	 * @method \Bitrix\Main\Type\Date[] getDateStatList()
	 * @method \Bitrix\Main\Type\Date[] fillDateStat()
	 * @method \int[] getImpressionsList()
	 * @method \int[] fillImpressions()
	 * @method \int[] getActionsList()
	 * @method \int[] fillActions()
	 * @method \float[] getExpensesList()
	 * @method \float[] fillExpenses()
	 * @method \string[] getCurrencyIdList()
	 * @method \string[] fillCurrencyId()
	 * @method \string[] getCommentList()
	 * @method \string[] fillComment()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack[] getPackList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection getPackCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_ExpensesPack_Collection fillPack()
	 * @method \int[] getSourceChildIdList()
	 * @method \int[] fillSourceChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild[] getSourceChildList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection getSourceChildCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection fillSourceChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source[] getSourceList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection getSourceCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source_Collection fillSource()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_SourceExpenses $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_SourceExpenses $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_SourceExpenses $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_SourceExpenses_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\SourceExpensesTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SourceExpensesTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_SourceExpenses_Query query()
	 * @method static EO_SourceExpenses_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_SourceExpenses_Result getById($id)
	 * @method static EO_SourceExpenses_Result getList(array $parameters = array())
	 * @method static EO_SourceExpenses_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection wakeUpCollection($rows)
	 */
	class SourceExpensesTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_SourceExpenses_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_SourceExpenses_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection fetchCollection()
	 */
	class EO_SourceExpenses_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceExpenses_Collection wakeUpCollection($rows)
	 */
	class EO_SourceExpenses_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\SourceFieldTable:crm/lib/tracking/internals/sourcefield.php:0b4d2637d7c0bcbc105875c36222b309 */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_SourceField
	 * @see \Bitrix\Crm\Tracking\Internals\SourceFieldTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField setSourceId(\int|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \int remindActualSourceId()
	 * @method \int requireSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField resetSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField unsetSourceId()
	 * @method \int fillSourceId()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField resetCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField unsetCode()
	 * @method \string fillCode()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField resetValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField unsetValue()
	 * @method \string fillValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source getSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source remindActualSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source requireSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField setSource(\Bitrix\Crm\Tracking\Internals\EO_Source $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField resetSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField unsetSource()
	 * @method bool hasSource()
	 * @method bool isSourceFilled()
	 * @method bool isSourceChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source fillSource()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceField wakeUp($data)
	 */
	class EO_SourceField {
		/* @var \Bitrix\Crm\Tracking\Internals\SourceFieldTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SourceFieldTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_SourceField_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getSourceIdList()
	 * @method \int[] fillSourceId()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source[] getSourceList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField_Collection getSourceCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source_Collection fillSource()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_SourceField $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_SourceField $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_SourceField $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceField_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_SourceField_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\SourceFieldTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\SourceFieldTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_SourceField_Query query()
	 * @method static EO_SourceField_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_SourceField_Result getById($id)
	 * @method static EO_SourceField_Result getList(array $parameters = array())
	 * @method static EO_SourceField_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceField createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceField_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceField wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_SourceField_Collection wakeUpCollection($rows)
	 */
	class SourceFieldTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_SourceField_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_SourceField_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField_Collection fetchCollection()
	 */
	class EO_SourceField_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceField_Collection wakeUpCollection($rows)
	 */
	class EO_SourceField_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\TraceTable:crm/lib/tracking/internals/trace.php:2a37b55c1a24984327eda530a9db605c */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_Trace
	 * @see \Bitrix\Crm\Tracking\Internals\TraceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetDateCreate()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setSourceId(\int|\Bitrix\Main\DB\SqlExpression $sourceId)
	 * @method bool hasSourceId()
	 * @method bool isSourceIdFilled()
	 * @method bool isSourceIdChanged()
	 * @method \int remindActualSourceId()
	 * @method \int requireSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetSourceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetSourceId()
	 * @method \int fillSourceId()
	 * @method \int getGuestId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setGuestId(\int|\Bitrix\Main\DB\SqlExpression $guestId)
	 * @method bool hasGuestId()
	 * @method bool isGuestIdFilled()
	 * @method bool isGuestIdChanged()
	 * @method \int remindActualGuestId()
	 * @method \int requireGuestId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetGuestId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetGuestId()
	 * @method \int fillGuestId()
	 * @method array getTagsRaw()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setTagsRaw(array|\Bitrix\Main\DB\SqlExpression $tagsRaw)
	 * @method bool hasTagsRaw()
	 * @method bool isTagsRawFilled()
	 * @method bool isTagsRawChanged()
	 * @method array remindActualTagsRaw()
	 * @method array requireTagsRaw()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetTagsRaw()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetTagsRaw()
	 * @method array fillTagsRaw()
	 * @method array getPagesRaw()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setPagesRaw(array|\Bitrix\Main\DB\SqlExpression $pagesRaw)
	 * @method bool hasPagesRaw()
	 * @method bool isPagesRawFilled()
	 * @method bool isPagesRawChanged()
	 * @method array remindActualPagesRaw()
	 * @method array requirePagesRaw()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetPagesRaw()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetPagesRaw()
	 * @method array fillPagesRaw()
	 * @method \boolean getIsMobile()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setIsMobile(\boolean|\Bitrix\Main\DB\SqlExpression $isMobile)
	 * @method bool hasIsMobile()
	 * @method bool isIsMobileFilled()
	 * @method bool isIsMobileChanged()
	 * @method \boolean remindActualIsMobile()
	 * @method \boolean requireIsMobile()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetIsMobile()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetIsMobile()
	 * @method \boolean fillIsMobile()
	 * @method \boolean getHasChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setHasChild(\boolean|\Bitrix\Main\DB\SqlExpression $hasChild)
	 * @method bool hasHasChild()
	 * @method bool isHasChildFilled()
	 * @method bool isHasChildChanged()
	 * @method \boolean remindActualHasChild()
	 * @method \boolean requireHasChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetHasChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetHasChild()
	 * @method \boolean fillHasChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source getSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source remindActualSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source requireSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setSource(\Bitrix\Crm\Tracking\Internals\EO_Source $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetSource()
	 * @method bool hasSource()
	 * @method bool isSourceFilled()
	 * @method bool isSourceChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source fillSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel getChannel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel remindActualChannel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel requireChannel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setChannel(\Bitrix\Crm\Tracking\Internals\EO_TraceChannel $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetChannel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetChannel()
	 * @method bool hasChannel()
	 * @method bool isChannelFilled()
	 * @method bool isChannelChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel fillChannel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity getEntity()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity remindActualEntity()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity requireEntity()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setEntity(\Bitrix\Crm\Tracking\Internals\EO_TraceEntity $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetEntity()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetEntity()
	 * @method bool hasEntity()
	 * @method bool isEntityFilled()
	 * @method bool isEntityChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity fillEntity()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource getTraceSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource remindActualTraceSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource requireTraceSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace setTraceSource(\Bitrix\Crm\Tracking\Internals\EO_TraceSource $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace resetTraceSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unsetTraceSource()
	 * @method bool hasTraceSource()
	 * @method bool isTraceSourceFilled()
	 * @method bool isTraceSourceChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource fillTraceSource()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Trace wakeUp($data)
	 */
	class EO_Trace {
		/* @var \Bitrix\Crm\Tracking\Internals\TraceTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\TraceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_Trace_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getSourceIdList()
	 * @method \int[] fillSourceId()
	 * @method \int[] getGuestIdList()
	 * @method \int[] fillGuestId()
	 * @method array[] getTagsRawList()
	 * @method array[] fillTagsRaw()
	 * @method array[] getPagesRawList()
	 * @method array[] fillPagesRaw()
	 * @method \boolean[] getIsMobileList()
	 * @method \boolean[] fillIsMobile()
	 * @method \boolean[] getHasChildList()
	 * @method \boolean[] fillHasChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source[] getSourceList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection getSourceCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Source_Collection fillSource()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel[] getChannelList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection getChannelCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel_Collection fillChannel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity[] getEntityList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection getEntityCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity_Collection fillEntity()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource[] getTraceSourceList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection getTraceSourceCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection fillTraceSource()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_Trace $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_Trace $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_Trace $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Trace_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\TraceTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\TraceTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_Trace_Query query()
	 * @method static EO_Trace_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Trace_Result getById($id)
	 * @method static EO_Trace_Result getList(array $parameters = array())
	 * @method static EO_Trace_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Trace createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Trace wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection wakeUpCollection($rows)
	 */
	class TraceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Trace_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Trace_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection fetchCollection()
	 */
	class EO_Trace_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection wakeUpCollection($rows)
	 */
	class EO_Trace_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\TraceChannelTable:crm/lib/tracking/internals/tracechannel.php:3fa7a864e28b9c24c1dbe80a2acbc007 */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_TraceChannel
	 * @see \Bitrix\Crm\Tracking\Internals\TraceChannelTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTraceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel setTraceId(\int|\Bitrix\Main\DB\SqlExpression $traceId)
	 * @method bool hasTraceId()
	 * @method bool isTraceIdFilled()
	 * @method bool isTraceIdChanged()
	 * @method \int remindActualTraceId()
	 * @method \int requireTraceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel resetTraceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel unsetTraceId()
	 * @method \int fillTraceId()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel resetCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel unsetCode()
	 * @method \string fillCode()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel resetValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel unsetValue()
	 * @method \string fillValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace getTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace remindActualTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace requireTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel setTrace(\Bitrix\Crm\Tracking\Internals\EO_Trace $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel resetTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel unsetTrace()
	 * @method bool hasTrace()
	 * @method bool isTraceFilled()
	 * @method bool isTraceChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace fillTrace()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceChannel wakeUp($data)
	 */
	class EO_TraceChannel {
		/* @var \Bitrix\Crm\Tracking\Internals\TraceChannelTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\TraceChannelTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_TraceChannel_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTraceIdList()
	 * @method \int[] fillTraceId()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace[] getTraceList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel_Collection getTraceCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection fillTrace()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_TraceChannel $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_TraceChannel $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_TraceChannel $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceChannel_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_TraceChannel_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\TraceChannelTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\TraceChannelTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_TraceChannel_Query query()
	 * @method static EO_TraceChannel_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_TraceChannel_Result getById($id)
	 * @method static EO_TraceChannel_Result getList(array $parameters = array())
	 * @method static EO_TraceChannel_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceChannel createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceChannel_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceChannel wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceChannel_Collection wakeUpCollection($rows)
	 */
	class TraceChannelTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_TraceChannel_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_TraceChannel_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel_Collection fetchCollection()
	 */
	class EO_TraceChannel_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceChannel_Collection wakeUpCollection($rows)
	 */
	class EO_TraceChannel_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\TraceEntityTable:crm/lib/tracking/internals/traceentity.php:85f0939689d9efd2aa3fb18cb61f6154 */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_TraceEntity
	 * @see \Bitrix\Crm\Tracking\Internals\TraceEntityTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTraceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity setTraceId(\int|\Bitrix\Main\DB\SqlExpression $traceId)
	 * @method bool hasTraceId()
	 * @method bool isTraceIdFilled()
	 * @method bool isTraceIdChanged()
	 * @method \int remindActualTraceId()
	 * @method \int requireTraceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity resetTraceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity unsetTraceId()
	 * @method \int fillTraceId()
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int remindActualEntityTypeId()
	 * @method \int requireEntityTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity resetEntityTypeId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity unsetEntityTypeId()
	 * @method \int fillEntityTypeId()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int remindActualEntityId()
	 * @method \int requireEntityId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity resetEntityId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity unsetEntityId()
	 * @method \int fillEntityId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace getTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace remindActualTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace requireTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity setTrace(\Bitrix\Crm\Tracking\Internals\EO_Trace $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity resetTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity unsetTrace()
	 * @method bool hasTrace()
	 * @method bool isTraceFilled()
	 * @method bool isTraceChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace fillTrace()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceEntity wakeUp($data)
	 */
	class EO_TraceEntity {
		/* @var \Bitrix\Crm\Tracking\Internals\TraceEntityTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\TraceEntityTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_TraceEntity_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTraceIdList()
	 * @method \int[] fillTraceId()
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] fillEntityTypeId()
	 * @method \int[] getEntityIdList()
	 * @method \int[] fillEntityId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace[] getTraceList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity_Collection getTraceCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection fillTrace()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_TraceEntity $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_TraceEntity $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_TraceEntity $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceEntity_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_TraceEntity_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\TraceEntityTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\TraceEntityTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_TraceEntity_Query query()
	 * @method static EO_TraceEntity_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_TraceEntity_Result getById($id)
	 * @method static EO_TraceEntity_Result getList(array $parameters = array())
	 * @method static EO_TraceEntity_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceEntity createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceEntity_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceEntity wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceEntity_Collection wakeUpCollection($rows)
	 */
	class TraceEntityTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_TraceEntity_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_TraceEntity_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity_Collection fetchCollection()
	 */
	class EO_TraceEntity_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceEntity_Collection wakeUpCollection($rows)
	 */
	class EO_TraceEntity_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\TraceSourceTable:crm/lib/tracking/internals/tracesource.php:1a07300374dad52b13287ca5be8b53ed */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_TraceSource
	 * @see \Bitrix\Crm\Tracking\Internals\TraceSourceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getTraceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource setTraceId(\int|\Bitrix\Main\DB\SqlExpression $traceId)
	 * @method bool hasTraceId()
	 * @method bool isTraceIdFilled()
	 * @method bool isTraceIdChanged()
	 * @method \int remindActualTraceId()
	 * @method \int requireTraceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource resetTraceId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource unsetTraceId()
	 * @method \int fillTraceId()
	 * @method \int getLevel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource setLevel(\int|\Bitrix\Main\DB\SqlExpression $level)
	 * @method bool hasLevel()
	 * @method bool isLevelFilled()
	 * @method bool isLevelChanged()
	 * @method \int remindActualLevel()
	 * @method \int requireLevel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource resetLevel()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource unsetLevel()
	 * @method \int fillLevel()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource resetCode()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource unsetCode()
	 * @method \string fillCode()
	 * @method \int getSourceChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource setSourceChildId(\int|\Bitrix\Main\DB\SqlExpression $sourceChildId)
	 * @method bool hasSourceChildId()
	 * @method bool isSourceChildIdFilled()
	 * @method bool isSourceChildIdChanged()
	 * @method \int remindActualSourceChildId()
	 * @method \int requireSourceChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource resetSourceChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource unsetSourceChildId()
	 * @method \int fillSourceChildId()
	 * @method \boolean getProcessed()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource setProcessed(\boolean|\Bitrix\Main\DB\SqlExpression $processed)
	 * @method bool hasProcessed()
	 * @method bool isProcessedFilled()
	 * @method bool isProcessedChanged()
	 * @method \boolean remindActualProcessed()
	 * @method \boolean requireProcessed()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource resetProcessed()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource unsetProcessed()
	 * @method \boolean fillProcessed()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace getTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace remindActualTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace requireTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource setTrace(\Bitrix\Crm\Tracking\Internals\EO_Trace $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource resetTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource unsetTrace()
	 * @method bool hasTrace()
	 * @method bool isTraceFilled()
	 * @method bool isTraceChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace fillTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild getSourceChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild remindActualSourceChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild requireSourceChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource setSourceChild(\Bitrix\Crm\Tracking\Internals\EO_SourceChild $object)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource resetSourceChild()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource unsetSourceChild()
	 * @method bool hasSourceChild()
	 * @method bool isSourceChildFilled()
	 * @method bool isSourceChildChanged()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild fillSourceChild()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceSource wakeUp($data)
	 */
	class EO_TraceSource {
		/* @var \Bitrix\Crm\Tracking\Internals\TraceSourceTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\TraceSourceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_TraceSource_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getTraceIdList()
	 * @method \int[] fillTraceId()
	 * @method \int[] getLevelList()
	 * @method \int[] fillLevel()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \int[] getSourceChildIdList()
	 * @method \int[] fillSourceChildId()
	 * @method \boolean[] getProcessedList()
	 * @method \boolean[] fillProcessed()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace[] getTraceList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection getTraceCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_Trace_Collection fillTrace()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild[] getSourceChildList()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection getSourceChildCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_SourceChild_Collection fillSourceChild()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_TraceSource $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_TraceSource $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_TraceSource $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_TraceSource_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\TraceSourceTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\TraceSourceTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_TraceSource_Query query()
	 * @method static EO_TraceSource_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_TraceSource_Result getById($id)
	 * @method static EO_TraceSource_Result getList(array $parameters = array())
	 * @method static EO_TraceSource_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceSource createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceSource wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection wakeUpCollection($rows)
	 */
	class TraceSourceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_TraceSource_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_TraceSource_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection fetchCollection()
	 */
	class EO_TraceSource_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceSource_Collection wakeUpCollection($rows)
	 */
	class EO_TraceSource_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Tracking\Internals\TraceTreeTable:crm/lib/tracking/internals/tracetree.php:3580d3c9871226f8dd63e5c5ee4863c1 */
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_TraceTree
	 * @see \Bitrix\Crm\Tracking\Internals\TraceTreeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree setChildId(\int|\Bitrix\Main\DB\SqlExpression $childId)
	 * @method bool hasChildId()
	 * @method bool isChildIdFilled()
	 * @method bool isChildIdChanged()
	 * @method \int remindActualChildId()
	 * @method \int requireChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree resetChildId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree unsetChildId()
	 * @method \int fillChildId()
	 * @method \int getParentId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree setParentId(\int|\Bitrix\Main\DB\SqlExpression $parentId)
	 * @method bool hasParentId()
	 * @method bool isParentIdFilled()
	 * @method bool isParentIdChanged()
	 * @method \int remindActualParentId()
	 * @method \int requireParentId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree resetParentId()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree unsetParentId()
	 * @method \int fillParentId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree set($fieldName, $value)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree reset($fieldName)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceTree wakeUp($data)
	 */
	class EO_TraceTree {
		/* @var \Bitrix\Crm\Tracking\Internals\TraceTreeTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\TraceTreeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * EO_TraceTree_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getChildIdList()
	 * @method \int[] fillChildId()
	 * @method \int[] getParentIdList()
	 * @method \int[] fillParentId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Tracking\Internals\EO_TraceTree $object)
	 * @method bool has(\Bitrix\Crm\Tracking\Internals\EO_TraceTree $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree getByPrimary($primary)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree[] getAll()
	 * @method bool remove(\Bitrix\Crm\Tracking\Internals\EO_TraceTree $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceTree_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_TraceTree_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Tracking\Internals\TraceTreeTable */
		static public $dataClass = '\Bitrix\Crm\Tracking\Internals\TraceTreeTable';
	}
}
namespace Bitrix\Crm\Tracking\Internals {
	/**
	 * @method static EO_TraceTree_Query query()
	 * @method static EO_TraceTree_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_TraceTree_Result getById($id)
	 * @method static EO_TraceTree_Result getList(array $parameters = array())
	 * @method static EO_TraceTree_Entity getEntity()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceTree createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceTree_Collection createCollection()
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceTree wakeUpObject($row)
	 * @method static \Bitrix\Crm\Tracking\Internals\EO_TraceTree_Collection wakeUpCollection($rows)
	 */
	class TraceTreeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_TraceTree_Result exec()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_TraceTree_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree fetchObject()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree_Collection fetchCollection()
	 */
	class EO_TraceTree_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree_Collection createCollection()
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree wakeUpObject($row)
	 * @method \Bitrix\Crm\Tracking\Internals\EO_TraceTree_Collection wakeUpCollection($rows)
	 */
	class EO_TraceTree_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\UI\Webpack\Internals\WebpackTable:crm/lib/ui/webpack/internals/webpack.php:0c3a67f79bc8e993f4c7397a21b26a83 */
namespace Bitrix\Crm\UI\Webpack\Internals {
	/**
	 * EO_Webpack
	 * @see \Bitrix\Crm\UI\Webpack\Internals\WebpackTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string getEntityType()
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack setEntityType(\string|\Bitrix\Main\DB\SqlExpression $entityType)
	 * @method bool hasEntityType()
	 * @method bool isEntityTypeFilled()
	 * @method bool isEntityTypeChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \int getFileId()
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack setFileId(\int|\Bitrix\Main\DB\SqlExpression $fileId)
	 * @method bool hasFileId()
	 * @method bool isFileIdFilled()
	 * @method bool isFileIdChanged()
	 * @method \int remindActualFileId()
	 * @method \int requireFileId()
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack resetFileId()
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack unsetFileId()
	 * @method \int fillFileId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack set($fieldName, $value)
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack reset($fieldName)
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack wakeUp($data)
	 */
	class EO_Webpack {
		/* @var \Bitrix\Crm\UI\Webpack\Internals\WebpackTable */
		static public $dataClass = '\Bitrix\Crm\UI\Webpack\Internals\WebpackTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\UI\Webpack\Internals {
	/**
	 * EO_Webpack_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \string[] getEntityTypeList()
	 * @method \int[] getEntityIdList()
	 * @method \int[] getFileIdList()
	 * @method \int[] fillFileId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\UI\Webpack\Internals\EO_Webpack $object)
	 * @method bool has(\Bitrix\Crm\UI\Webpack\Internals\EO_Webpack $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack getByPrimary($primary)
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack[] getAll()
	 * @method bool remove(\Bitrix\Crm\UI\Webpack\Internals\EO_Webpack $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Webpack_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\UI\Webpack\Internals\WebpackTable */
		static public $dataClass = '\Bitrix\Crm\UI\Webpack\Internals\WebpackTable';
	}
}
namespace Bitrix\Crm\UI\Webpack\Internals {
	/**
	 * @method static EO_Webpack_Query query()
	 * @method static EO_Webpack_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Webpack_Result getById($id)
	 * @method static EO_Webpack_Result getList(array $parameters = array())
	 * @method static EO_Webpack_Entity getEntity()
	 * @method static \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack_Collection createCollection()
	 * @method static \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack wakeUpObject($row)
	 * @method static \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack_Collection wakeUpCollection($rows)
	 */
	class WebpackTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Webpack_Result exec()
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack fetchObject()
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Webpack_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack fetchObject()
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack_Collection fetchCollection()
	 */
	class EO_Webpack_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack_Collection createCollection()
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack wakeUpObject($row)
	 * @method \Bitrix\Crm\UI\Webpack\Internals\EO_Webpack_Collection wakeUpCollection($rows)
	 */
	class EO_Webpack_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\UserActivityTable:crm/lib/useractivity.php:e581a282b1361884caa914c529458120 */
namespace Bitrix\Crm {
	/**
	 * EO_UserActivity
	 * @see \Bitrix\Crm\UserActivityTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\EO_UserActivity setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\EO_UserActivity setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int getOwnerTypeId()
	 * @method \Bitrix\Crm\EO_UserActivity setOwnerTypeId(\int|\Bitrix\Main\DB\SqlExpression $ownerTypeId)
	 * @method bool hasOwnerTypeId()
	 * @method bool isOwnerTypeIdFilled()
	 * @method bool isOwnerTypeIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getActivityTime()
	 * @method \Bitrix\Crm\EO_UserActivity setActivityTime(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activityTime)
	 * @method bool hasActivityTime()
	 * @method bool isActivityTimeFilled()
	 * @method bool isActivityTimeChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActivityTime()
	 * @method \Bitrix\Main\Type\DateTime requireActivityTime()
	 * @method \Bitrix\Crm\EO_UserActivity resetActivityTime()
	 * @method \Bitrix\Crm\EO_UserActivity unsetActivityTime()
	 * @method \Bitrix\Main\Type\DateTime fillActivityTime()
	 * @method \int getActivityId()
	 * @method \Bitrix\Crm\EO_UserActivity setActivityId(\int|\Bitrix\Main\DB\SqlExpression $activityId)
	 * @method bool hasActivityId()
	 * @method bool isActivityIdFilled()
	 * @method bool isActivityIdChanged()
	 * @method \int remindActualActivityId()
	 * @method \int requireActivityId()
	 * @method \Bitrix\Crm\EO_UserActivity resetActivityId()
	 * @method \Bitrix\Crm\EO_UserActivity unsetActivityId()
	 * @method \int fillActivityId()
	 * @method \int getDepartmentId()
	 * @method \Bitrix\Crm\EO_UserActivity setDepartmentId(\int|\Bitrix\Main\DB\SqlExpression $departmentId)
	 * @method bool hasDepartmentId()
	 * @method bool isDepartmentIdFilled()
	 * @method bool isDepartmentIdChanged()
	 * @method \int remindActualDepartmentId()
	 * @method \int requireDepartmentId()
	 * @method \Bitrix\Crm\EO_UserActivity resetDepartmentId()
	 * @method \Bitrix\Crm\EO_UserActivity unsetDepartmentId()
	 * @method \int fillDepartmentId()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\EO_UserActivity setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\EO_UserActivity resetSort()
	 * @method \Bitrix\Crm\EO_UserActivity unsetSort()
	 * @method \int fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_UserActivity set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_UserActivity reset($fieldName)
	 * @method \Bitrix\Crm\EO_UserActivity unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_UserActivity wakeUp($data)
	 */
	class EO_UserActivity {
		/* @var \Bitrix\Crm\UserActivityTable */
		static public $dataClass = '\Bitrix\Crm\UserActivityTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_UserActivity_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getUserIdList()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] getOwnerTypeIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getActivityTimeList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActivityTime()
	 * @method \int[] getActivityIdList()
	 * @method \int[] fillActivityId()
	 * @method \int[] getDepartmentIdList()
	 * @method \int[] fillDepartmentId()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_UserActivity $object)
	 * @method bool has(\Bitrix\Crm\EO_UserActivity $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_UserActivity getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_UserActivity[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_UserActivity $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_UserActivity_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_UserActivity current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_UserActivity_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\UserActivityTable */
		static public $dataClass = '\Bitrix\Crm\UserActivityTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_UserActivity_Query query()
	 * @method static EO_UserActivity_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_UserActivity_Result getById($id)
	 * @method static EO_UserActivity_Result getList(array $parameters = array())
	 * @method static EO_UserActivity_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_UserActivity createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_UserActivity_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_UserActivity wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_UserActivity_Collection wakeUpCollection($rows)
	 */
	class UserActivityTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_UserActivity_Result exec()
	 * @method \Bitrix\Crm\EO_UserActivity fetchObject()
	 * @method \Bitrix\Crm\EO_UserActivity_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_UserActivity_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_UserActivity fetchObject()
	 * @method \Bitrix\Crm\EO_UserActivity_Collection fetchCollection()
	 */
	class EO_UserActivity_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_UserActivity createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_UserActivity_Collection createCollection()
	 * @method \Bitrix\Crm\EO_UserActivity wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_UserActivity_Collection wakeUpCollection($rows)
	 */
	class EO_UserActivity_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\UtmTable:crm/lib/utm.php:f304f1a8ab6f9d2d1a4922b356b87b31 */
namespace Bitrix\Crm {
	/**
	 * EO_Utm
	 * @see \Bitrix\Crm\UtmTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getEntityTypeId()
	 * @method \Bitrix\Crm\EO_Utm setEntityTypeId(\int|\Bitrix\Main\DB\SqlExpression $entityTypeId)
	 * @method bool hasEntityTypeId()
	 * @method bool isEntityTypeIdFilled()
	 * @method bool isEntityTypeIdChanged()
	 * @method \int getEntityId()
	 * @method \Bitrix\Crm\EO_Utm setEntityId(\int|\Bitrix\Main\DB\SqlExpression $entityId)
	 * @method bool hasEntityId()
	 * @method bool isEntityIdFilled()
	 * @method bool isEntityIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\EO_Utm setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\EO_Utm setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\EO_Utm resetValue()
	 * @method \Bitrix\Crm\EO_Utm unsetValue()
	 * @method \string fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Utm set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Utm reset($fieldName)
	 * @method \Bitrix\Crm\EO_Utm unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Utm wakeUp($data)
	 */
	class EO_Utm {
		/* @var \Bitrix\Crm\UtmTable */
		static public $dataClass = '\Bitrix\Crm\UtmTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Utm_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getEntityTypeIdList()
	 * @method \int[] getEntityIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Utm $object)
	 * @method bool has(\Bitrix\Crm\EO_Utm $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Utm getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Utm[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Utm $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Utm_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Utm current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Utm_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\UtmTable */
		static public $dataClass = '\Bitrix\Crm\UtmTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Utm_Query query()
	 * @method static EO_Utm_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Utm_Result getById($id)
	 * @method static EO_Utm_Result getList(array $parameters = array())
	 * @method static EO_Utm_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Utm createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Utm_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Utm wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Utm_Collection wakeUpCollection($rows)
	 */
	class UtmTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Utm_Result exec()
	 * @method \Bitrix\Crm\EO_Utm fetchObject()
	 * @method \Bitrix\Crm\EO_Utm_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Utm_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Utm fetchObject()
	 * @method \Bitrix\Crm\EO_Utm_Collection fetchCollection()
	 */
	class EO_Utm_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Utm createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Utm_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Utm wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Utm_Collection wakeUpCollection($rows)
	 */
	class EO_Utm_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\VolumeTable:crm/lib/volume.php:2bd2c7ec6cdf1f9cbc10c078752f5c5f */
namespace Bitrix\Crm {
	/**
	 * EO_Volume
	 * @see \Bitrix\Crm\VolumeTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_Volume setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getIndicatorType()
	 * @method \Bitrix\Crm\EO_Volume setIndicatorType(\string|\Bitrix\Main\DB\SqlExpression $indicatorType)
	 * @method bool hasIndicatorType()
	 * @method bool isIndicatorTypeFilled()
	 * @method bool isIndicatorTypeChanged()
	 * @method \string remindActualIndicatorType()
	 * @method \string requireIndicatorType()
	 * @method \Bitrix\Crm\EO_Volume resetIndicatorType()
	 * @method \Bitrix\Crm\EO_Volume unsetIndicatorType()
	 * @method \string fillIndicatorType()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\EO_Volume setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\EO_Volume resetOwnerId()
	 * @method \Bitrix\Crm\EO_Volume unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Crm\EO_Volume setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Crm\EO_Volume resetTimestampX()
	 * @method \Bitrix\Crm\EO_Volume unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \Bitrix\Main\Type\Date getDateCreate()
	 * @method \Bitrix\Crm\EO_Volume setDateCreate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDateCreate()
	 * @method \Bitrix\Main\Type\Date requireDateCreate()
	 * @method \Bitrix\Crm\EO_Volume resetDateCreate()
	 * @method \Bitrix\Crm\EO_Volume unsetDateCreate()
	 * @method \Bitrix\Main\Type\Date fillDateCreate()
	 * @method \string getStageSemanticId()
	 * @method \Bitrix\Crm\EO_Volume setStageSemanticId(\string|\Bitrix\Main\DB\SqlExpression $stageSemanticId)
	 * @method bool hasStageSemanticId()
	 * @method bool isStageSemanticIdFilled()
	 * @method bool isStageSemanticIdChanged()
	 * @method \string remindActualStageSemanticId()
	 * @method \string requireStageSemanticId()
	 * @method \Bitrix\Crm\EO_Volume resetStageSemanticId()
	 * @method \Bitrix\Crm\EO_Volume unsetStageSemanticId()
	 * @method \string fillStageSemanticId()
	 * @method \int getEntitySize()
	 * @method \Bitrix\Crm\EO_Volume setEntitySize(\int|\Bitrix\Main\DB\SqlExpression $entitySize)
	 * @method bool hasEntitySize()
	 * @method bool isEntitySizeFilled()
	 * @method bool isEntitySizeChanged()
	 * @method \int remindActualEntitySize()
	 * @method \int requireEntitySize()
	 * @method \Bitrix\Crm\EO_Volume resetEntitySize()
	 * @method \Bitrix\Crm\EO_Volume unsetEntitySize()
	 * @method \int fillEntitySize()
	 * @method \int getEntityCount()
	 * @method \Bitrix\Crm\EO_Volume setEntityCount(\int|\Bitrix\Main\DB\SqlExpression $entityCount)
	 * @method bool hasEntityCount()
	 * @method bool isEntityCountFilled()
	 * @method bool isEntityCountChanged()
	 * @method \int remindActualEntityCount()
	 * @method \int requireEntityCount()
	 * @method \Bitrix\Crm\EO_Volume resetEntityCount()
	 * @method \Bitrix\Crm\EO_Volume unsetEntityCount()
	 * @method \int fillEntityCount()
	 * @method \int getFileSize()
	 * @method \Bitrix\Crm\EO_Volume setFileSize(\int|\Bitrix\Main\DB\SqlExpression $fileSize)
	 * @method bool hasFileSize()
	 * @method bool isFileSizeFilled()
	 * @method bool isFileSizeChanged()
	 * @method \int remindActualFileSize()
	 * @method \int requireFileSize()
	 * @method \Bitrix\Crm\EO_Volume resetFileSize()
	 * @method \Bitrix\Crm\EO_Volume unsetFileSize()
	 * @method \int fillFileSize()
	 * @method \int getFileCount()
	 * @method \Bitrix\Crm\EO_Volume setFileCount(\int|\Bitrix\Main\DB\SqlExpression $fileCount)
	 * @method bool hasFileCount()
	 * @method bool isFileCountFilled()
	 * @method bool isFileCountChanged()
	 * @method \int remindActualFileCount()
	 * @method \int requireFileCount()
	 * @method \Bitrix\Crm\EO_Volume resetFileCount()
	 * @method \Bitrix\Crm\EO_Volume unsetFileCount()
	 * @method \int fillFileCount()
	 * @method \int getDiskSize()
	 * @method \Bitrix\Crm\EO_Volume setDiskSize(\int|\Bitrix\Main\DB\SqlExpression $diskSize)
	 * @method bool hasDiskSize()
	 * @method bool isDiskSizeFilled()
	 * @method bool isDiskSizeChanged()
	 * @method \int remindActualDiskSize()
	 * @method \int requireDiskSize()
	 * @method \Bitrix\Crm\EO_Volume resetDiskSize()
	 * @method \Bitrix\Crm\EO_Volume unsetDiskSize()
	 * @method \int fillDiskSize()
	 * @method \int getDiskCount()
	 * @method \Bitrix\Crm\EO_Volume setDiskCount(\int|\Bitrix\Main\DB\SqlExpression $diskCount)
	 * @method bool hasDiskCount()
	 * @method bool isDiskCountFilled()
	 * @method bool isDiskCountChanged()
	 * @method \int remindActualDiskCount()
	 * @method \int requireDiskCount()
	 * @method \Bitrix\Crm\EO_Volume resetDiskCount()
	 * @method \Bitrix\Crm\EO_Volume unsetDiskCount()
	 * @method \int fillDiskCount()
	 * @method \int getEventSize()
	 * @method \Bitrix\Crm\EO_Volume setEventSize(\int|\Bitrix\Main\DB\SqlExpression $eventSize)
	 * @method bool hasEventSize()
	 * @method bool isEventSizeFilled()
	 * @method bool isEventSizeChanged()
	 * @method \int remindActualEventSize()
	 * @method \int requireEventSize()
	 * @method \Bitrix\Crm\EO_Volume resetEventSize()
	 * @method \Bitrix\Crm\EO_Volume unsetEventSize()
	 * @method \int fillEventSize()
	 * @method \int getEventCount()
	 * @method \Bitrix\Crm\EO_Volume setEventCount(\int|\Bitrix\Main\DB\SqlExpression $eventCount)
	 * @method bool hasEventCount()
	 * @method bool isEventCountFilled()
	 * @method bool isEventCountChanged()
	 * @method \int remindActualEventCount()
	 * @method \int requireEventCount()
	 * @method \Bitrix\Crm\EO_Volume resetEventCount()
	 * @method \Bitrix\Crm\EO_Volume unsetEventCount()
	 * @method \int fillEventCount()
	 * @method \int getActivitySize()
	 * @method \Bitrix\Crm\EO_Volume setActivitySize(\int|\Bitrix\Main\DB\SqlExpression $activitySize)
	 * @method bool hasActivitySize()
	 * @method bool isActivitySizeFilled()
	 * @method bool isActivitySizeChanged()
	 * @method \int remindActualActivitySize()
	 * @method \int requireActivitySize()
	 * @method \Bitrix\Crm\EO_Volume resetActivitySize()
	 * @method \Bitrix\Crm\EO_Volume unsetActivitySize()
	 * @method \int fillActivitySize()
	 * @method \int getActivityCount()
	 * @method \Bitrix\Crm\EO_Volume setActivityCount(\int|\Bitrix\Main\DB\SqlExpression $activityCount)
	 * @method bool hasActivityCount()
	 * @method bool isActivityCountFilled()
	 * @method bool isActivityCountChanged()
	 * @method \int remindActualActivityCount()
	 * @method \int requireActivityCount()
	 * @method \Bitrix\Crm\EO_Volume resetActivityCount()
	 * @method \Bitrix\Crm\EO_Volume unsetActivityCount()
	 * @method \int fillActivityCount()
	 * @method \string getAgentLock()
	 * @method \Bitrix\Crm\EO_Volume setAgentLock(\string|\Bitrix\Main\DB\SqlExpression $agentLock)
	 * @method bool hasAgentLock()
	 * @method bool isAgentLockFilled()
	 * @method bool isAgentLockChanged()
	 * @method \string remindActualAgentLock()
	 * @method \string requireAgentLock()
	 * @method \Bitrix\Crm\EO_Volume resetAgentLock()
	 * @method \Bitrix\Crm\EO_Volume unsetAgentLock()
	 * @method \string fillAgentLock()
	 * @method \string getDropEntity()
	 * @method \Bitrix\Crm\EO_Volume setDropEntity(\string|\Bitrix\Main\DB\SqlExpression $dropEntity)
	 * @method bool hasDropEntity()
	 * @method bool isDropEntityFilled()
	 * @method bool isDropEntityChanged()
	 * @method \string remindActualDropEntity()
	 * @method \string requireDropEntity()
	 * @method \Bitrix\Crm\EO_Volume resetDropEntity()
	 * @method \Bitrix\Crm\EO_Volume unsetDropEntity()
	 * @method \string fillDropEntity()
	 * @method \string getDropFile()
	 * @method \Bitrix\Crm\EO_Volume setDropFile(\string|\Bitrix\Main\DB\SqlExpression $dropFile)
	 * @method bool hasDropFile()
	 * @method bool isDropFileFilled()
	 * @method bool isDropFileChanged()
	 * @method \string remindActualDropFile()
	 * @method \string requireDropFile()
	 * @method \Bitrix\Crm\EO_Volume resetDropFile()
	 * @method \Bitrix\Crm\EO_Volume unsetDropFile()
	 * @method \string fillDropFile()
	 * @method \string getDropEvent()
	 * @method \Bitrix\Crm\EO_Volume setDropEvent(\string|\Bitrix\Main\DB\SqlExpression $dropEvent)
	 * @method bool hasDropEvent()
	 * @method bool isDropEventFilled()
	 * @method bool isDropEventChanged()
	 * @method \string remindActualDropEvent()
	 * @method \string requireDropEvent()
	 * @method \Bitrix\Crm\EO_Volume resetDropEvent()
	 * @method \Bitrix\Crm\EO_Volume unsetDropEvent()
	 * @method \string fillDropEvent()
	 * @method \string getDropActivity()
	 * @method \Bitrix\Crm\EO_Volume setDropActivity(\string|\Bitrix\Main\DB\SqlExpression $dropActivity)
	 * @method bool hasDropActivity()
	 * @method bool isDropActivityFilled()
	 * @method bool isDropActivityChanged()
	 * @method \string remindActualDropActivity()
	 * @method \string requireDropActivity()
	 * @method \Bitrix\Crm\EO_Volume resetDropActivity()
	 * @method \Bitrix\Crm\EO_Volume unsetDropActivity()
	 * @method \string fillDropActivity()
	 * @method \int getDroppedEntityCount()
	 * @method \Bitrix\Crm\EO_Volume setDroppedEntityCount(\int|\Bitrix\Main\DB\SqlExpression $droppedEntityCount)
	 * @method bool hasDroppedEntityCount()
	 * @method bool isDroppedEntityCountFilled()
	 * @method bool isDroppedEntityCountChanged()
	 * @method \int remindActualDroppedEntityCount()
	 * @method \int requireDroppedEntityCount()
	 * @method \Bitrix\Crm\EO_Volume resetDroppedEntityCount()
	 * @method \Bitrix\Crm\EO_Volume unsetDroppedEntityCount()
	 * @method \int fillDroppedEntityCount()
	 * @method \int getDroppedFileCount()
	 * @method \Bitrix\Crm\EO_Volume setDroppedFileCount(\int|\Bitrix\Main\DB\SqlExpression $droppedFileCount)
	 * @method bool hasDroppedFileCount()
	 * @method bool isDroppedFileCountFilled()
	 * @method bool isDroppedFileCountChanged()
	 * @method \int remindActualDroppedFileCount()
	 * @method \int requireDroppedFileCount()
	 * @method \Bitrix\Crm\EO_Volume resetDroppedFileCount()
	 * @method \Bitrix\Crm\EO_Volume unsetDroppedFileCount()
	 * @method \int fillDroppedFileCount()
	 * @method \int getDroppedEventCount()
	 * @method \Bitrix\Crm\EO_Volume setDroppedEventCount(\int|\Bitrix\Main\DB\SqlExpression $droppedEventCount)
	 * @method bool hasDroppedEventCount()
	 * @method bool isDroppedEventCountFilled()
	 * @method bool isDroppedEventCountChanged()
	 * @method \int remindActualDroppedEventCount()
	 * @method \int requireDroppedEventCount()
	 * @method \Bitrix\Crm\EO_Volume resetDroppedEventCount()
	 * @method \Bitrix\Crm\EO_Volume unsetDroppedEventCount()
	 * @method \int fillDroppedEventCount()
	 * @method \int getDroppedActivityCount()
	 * @method \Bitrix\Crm\EO_Volume setDroppedActivityCount(\int|\Bitrix\Main\DB\SqlExpression $droppedActivityCount)
	 * @method bool hasDroppedActivityCount()
	 * @method bool isDroppedActivityCountFilled()
	 * @method bool isDroppedActivityCountChanged()
	 * @method \int remindActualDroppedActivityCount()
	 * @method \int requireDroppedActivityCount()
	 * @method \Bitrix\Crm\EO_Volume resetDroppedActivityCount()
	 * @method \Bitrix\Crm\EO_Volume unsetDroppedActivityCount()
	 * @method \int fillDroppedActivityCount()
	 * @method \int getLastId()
	 * @method \Bitrix\Crm\EO_Volume setLastId(\int|\Bitrix\Main\DB\SqlExpression $lastId)
	 * @method bool hasLastId()
	 * @method bool isLastIdFilled()
	 * @method bool isLastIdChanged()
	 * @method \int remindActualLastId()
	 * @method \int requireLastId()
	 * @method \Bitrix\Crm\EO_Volume resetLastId()
	 * @method \Bitrix\Crm\EO_Volume unsetLastId()
	 * @method \int fillLastId()
	 * @method \int getFailCount()
	 * @method \Bitrix\Crm\EO_Volume setFailCount(\int|\Bitrix\Main\DB\SqlExpression $failCount)
	 * @method bool hasFailCount()
	 * @method bool isFailCountFilled()
	 * @method bool isFailCountChanged()
	 * @method \int remindActualFailCount()
	 * @method \int requireFailCount()
	 * @method \Bitrix\Crm\EO_Volume resetFailCount()
	 * @method \Bitrix\Crm\EO_Volume unsetFailCount()
	 * @method \int fillFailCount()
	 * @method \string getLastError()
	 * @method \Bitrix\Crm\EO_Volume setLastError(\string|\Bitrix\Main\DB\SqlExpression $lastError)
	 * @method bool hasLastError()
	 * @method bool isLastErrorFilled()
	 * @method bool isLastErrorChanged()
	 * @method \string remindActualLastError()
	 * @method \string requireLastError()
	 * @method \Bitrix\Crm\EO_Volume resetLastError()
	 * @method \Bitrix\Crm\EO_Volume unsetLastError()
	 * @method \string fillLastError()
	 * @method \string getFilter()
	 * @method \Bitrix\Crm\EO_Volume setFilter(\string|\Bitrix\Main\DB\SqlExpression $filter)
	 * @method bool hasFilter()
	 * @method bool isFilterFilled()
	 * @method bool isFilterChanged()
	 * @method \string remindActualFilter()
	 * @method \string requireFilter()
	 * @method \Bitrix\Crm\EO_Volume resetFilter()
	 * @method \Bitrix\Crm\EO_Volume unsetFilter()
	 * @method \string fillFilter()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_Volume set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_Volume reset($fieldName)
	 * @method \Bitrix\Crm\EO_Volume unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_Volume wakeUp($data)
	 */
	class EO_Volume {
		/* @var \Bitrix\Crm\VolumeTable */
		static public $dataClass = '\Bitrix\Crm\VolumeTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_Volume_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getIndicatorTypeList()
	 * @method \string[] fillIndicatorType()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \Bitrix\Main\Type\Date[] getDateCreateList()
	 * @method \Bitrix\Main\Type\Date[] fillDateCreate()
	 * @method \string[] getStageSemanticIdList()
	 * @method \string[] fillStageSemanticId()
	 * @method \int[] getEntitySizeList()
	 * @method \int[] fillEntitySize()
	 * @method \int[] getEntityCountList()
	 * @method \int[] fillEntityCount()
	 * @method \int[] getFileSizeList()
	 * @method \int[] fillFileSize()
	 * @method \int[] getFileCountList()
	 * @method \int[] fillFileCount()
	 * @method \int[] getDiskSizeList()
	 * @method \int[] fillDiskSize()
	 * @method \int[] getDiskCountList()
	 * @method \int[] fillDiskCount()
	 * @method \int[] getEventSizeList()
	 * @method \int[] fillEventSize()
	 * @method \int[] getEventCountList()
	 * @method \int[] fillEventCount()
	 * @method \int[] getActivitySizeList()
	 * @method \int[] fillActivitySize()
	 * @method \int[] getActivityCountList()
	 * @method \int[] fillActivityCount()
	 * @method \string[] getAgentLockList()
	 * @method \string[] fillAgentLock()
	 * @method \string[] getDropEntityList()
	 * @method \string[] fillDropEntity()
	 * @method \string[] getDropFileList()
	 * @method \string[] fillDropFile()
	 * @method \string[] getDropEventList()
	 * @method \string[] fillDropEvent()
	 * @method \string[] getDropActivityList()
	 * @method \string[] fillDropActivity()
	 * @method \int[] getDroppedEntityCountList()
	 * @method \int[] fillDroppedEntityCount()
	 * @method \int[] getDroppedFileCountList()
	 * @method \int[] fillDroppedFileCount()
	 * @method \int[] getDroppedEventCountList()
	 * @method \int[] fillDroppedEventCount()
	 * @method \int[] getDroppedActivityCountList()
	 * @method \int[] fillDroppedActivityCount()
	 * @method \int[] getLastIdList()
	 * @method \int[] fillLastId()
	 * @method \int[] getFailCountList()
	 * @method \int[] fillFailCount()
	 * @method \string[] getLastErrorList()
	 * @method \string[] fillLastError()
	 * @method \string[] getFilterList()
	 * @method \string[] fillFilter()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_Volume $object)
	 * @method bool has(\Bitrix\Crm\EO_Volume $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Volume getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_Volume[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_Volume $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_Volume_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_Volume current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Volume_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\VolumeTable */
		static public $dataClass = '\Bitrix\Crm\VolumeTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_Volume_Query query()
	 * @method static EO_Volume_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Volume_Result getById($id)
	 * @method static EO_Volume_Result getList(array $parameters = array())
	 * @method static EO_Volume_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_Volume createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_Volume_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_Volume wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_Volume_Collection wakeUpCollection($rows)
	 */
	class VolumeTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Volume_Result exec()
	 * @method \Bitrix\Crm\EO_Volume fetchObject()
	 * @method \Bitrix\Crm\EO_Volume_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Volume_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_Volume fetchObject()
	 * @method \Bitrix\Crm\EO_Volume_Collection fetchCollection()
	 */
	class EO_Volume_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_Volume createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_Volume_Collection createCollection()
	 * @method \Bitrix\Crm\EO_Volume wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_Volume_Collection wakeUpCollection($rows)
	 */
	class EO_Volume_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\VolumeTmpTable:crm/lib/volumetmp.php:f92e470815fe4c7bf43fedf803f13843 */
namespace Bitrix\Crm {
	/**
	 * EO_VolumeTmp
	 * @see \Bitrix\Crm\VolumeTmpTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\EO_VolumeTmp setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getIndicatorType()
	 * @method \Bitrix\Crm\EO_VolumeTmp setIndicatorType(\string|\Bitrix\Main\DB\SqlExpression $indicatorType)
	 * @method bool hasIndicatorType()
	 * @method bool isIndicatorTypeFilled()
	 * @method bool isIndicatorTypeChanged()
	 * @method \string remindActualIndicatorType()
	 * @method \string requireIndicatorType()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetIndicatorType()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetIndicatorType()
	 * @method \string fillIndicatorType()
	 * @method \int getOwnerId()
	 * @method \Bitrix\Crm\EO_VolumeTmp setOwnerId(\int|\Bitrix\Main\DB\SqlExpression $ownerId)
	 * @method bool hasOwnerId()
	 * @method bool isOwnerIdFilled()
	 * @method bool isOwnerIdChanged()
	 * @method \int remindActualOwnerId()
	 * @method \int requireOwnerId()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetOwnerId()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetOwnerId()
	 * @method \int fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime getTimestampX()
	 * @method \Bitrix\Crm\EO_VolumeTmp setTimestampX(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $timestampX)
	 * @method bool hasTimestampX()
	 * @method bool isTimestampXFilled()
	 * @method bool isTimestampXChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualTimestampX()
	 * @method \Bitrix\Main\Type\DateTime requireTimestampX()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetTimestampX()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetTimestampX()
	 * @method \Bitrix\Main\Type\DateTime fillTimestampX()
	 * @method \Bitrix\Main\Type\Date getDateCreate()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDateCreate(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDateCreate()
	 * @method \Bitrix\Main\Type\Date requireDateCreate()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDateCreate()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDateCreate()
	 * @method \Bitrix\Main\Type\Date fillDateCreate()
	 * @method \string getStageSemanticId()
	 * @method \Bitrix\Crm\EO_VolumeTmp setStageSemanticId(\string|\Bitrix\Main\DB\SqlExpression $stageSemanticId)
	 * @method bool hasStageSemanticId()
	 * @method bool isStageSemanticIdFilled()
	 * @method bool isStageSemanticIdChanged()
	 * @method \string remindActualStageSemanticId()
	 * @method \string requireStageSemanticId()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetStageSemanticId()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetStageSemanticId()
	 * @method \string fillStageSemanticId()
	 * @method \int getEntitySize()
	 * @method \Bitrix\Crm\EO_VolumeTmp setEntitySize(\int|\Bitrix\Main\DB\SqlExpression $entitySize)
	 * @method bool hasEntitySize()
	 * @method bool isEntitySizeFilled()
	 * @method bool isEntitySizeChanged()
	 * @method \int remindActualEntitySize()
	 * @method \int requireEntitySize()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetEntitySize()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetEntitySize()
	 * @method \int fillEntitySize()
	 * @method \int getEntityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp setEntityCount(\int|\Bitrix\Main\DB\SqlExpression $entityCount)
	 * @method bool hasEntityCount()
	 * @method bool isEntityCountFilled()
	 * @method bool isEntityCountChanged()
	 * @method \int remindActualEntityCount()
	 * @method \int requireEntityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetEntityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetEntityCount()
	 * @method \int fillEntityCount()
	 * @method \int getFileSize()
	 * @method \Bitrix\Crm\EO_VolumeTmp setFileSize(\int|\Bitrix\Main\DB\SqlExpression $fileSize)
	 * @method bool hasFileSize()
	 * @method bool isFileSizeFilled()
	 * @method bool isFileSizeChanged()
	 * @method \int remindActualFileSize()
	 * @method \int requireFileSize()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetFileSize()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetFileSize()
	 * @method \int fillFileSize()
	 * @method \int getFileCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp setFileCount(\int|\Bitrix\Main\DB\SqlExpression $fileCount)
	 * @method bool hasFileCount()
	 * @method bool isFileCountFilled()
	 * @method bool isFileCountChanged()
	 * @method \int remindActualFileCount()
	 * @method \int requireFileCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetFileCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetFileCount()
	 * @method \int fillFileCount()
	 * @method \int getDiskSize()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDiskSize(\int|\Bitrix\Main\DB\SqlExpression $diskSize)
	 * @method bool hasDiskSize()
	 * @method bool isDiskSizeFilled()
	 * @method bool isDiskSizeChanged()
	 * @method \int remindActualDiskSize()
	 * @method \int requireDiskSize()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDiskSize()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDiskSize()
	 * @method \int fillDiskSize()
	 * @method \int getDiskCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDiskCount(\int|\Bitrix\Main\DB\SqlExpression $diskCount)
	 * @method bool hasDiskCount()
	 * @method bool isDiskCountFilled()
	 * @method bool isDiskCountChanged()
	 * @method \int remindActualDiskCount()
	 * @method \int requireDiskCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDiskCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDiskCount()
	 * @method \int fillDiskCount()
	 * @method \int getEventSize()
	 * @method \Bitrix\Crm\EO_VolumeTmp setEventSize(\int|\Bitrix\Main\DB\SqlExpression $eventSize)
	 * @method bool hasEventSize()
	 * @method bool isEventSizeFilled()
	 * @method bool isEventSizeChanged()
	 * @method \int remindActualEventSize()
	 * @method \int requireEventSize()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetEventSize()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetEventSize()
	 * @method \int fillEventSize()
	 * @method \int getEventCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp setEventCount(\int|\Bitrix\Main\DB\SqlExpression $eventCount)
	 * @method bool hasEventCount()
	 * @method bool isEventCountFilled()
	 * @method bool isEventCountChanged()
	 * @method \int remindActualEventCount()
	 * @method \int requireEventCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetEventCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetEventCount()
	 * @method \int fillEventCount()
	 * @method \int getActivitySize()
	 * @method \Bitrix\Crm\EO_VolumeTmp setActivitySize(\int|\Bitrix\Main\DB\SqlExpression $activitySize)
	 * @method bool hasActivitySize()
	 * @method bool isActivitySizeFilled()
	 * @method bool isActivitySizeChanged()
	 * @method \int remindActualActivitySize()
	 * @method \int requireActivitySize()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetActivitySize()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetActivitySize()
	 * @method \int fillActivitySize()
	 * @method \int getActivityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp setActivityCount(\int|\Bitrix\Main\DB\SqlExpression $activityCount)
	 * @method bool hasActivityCount()
	 * @method bool isActivityCountFilled()
	 * @method bool isActivityCountChanged()
	 * @method \int remindActualActivityCount()
	 * @method \int requireActivityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetActivityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetActivityCount()
	 * @method \int fillActivityCount()
	 * @method \string getAgentLock()
	 * @method \Bitrix\Crm\EO_VolumeTmp setAgentLock(\string|\Bitrix\Main\DB\SqlExpression $agentLock)
	 * @method bool hasAgentLock()
	 * @method bool isAgentLockFilled()
	 * @method bool isAgentLockChanged()
	 * @method \string remindActualAgentLock()
	 * @method \string requireAgentLock()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetAgentLock()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetAgentLock()
	 * @method \string fillAgentLock()
	 * @method \string getDropEntity()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDropEntity(\string|\Bitrix\Main\DB\SqlExpression $dropEntity)
	 * @method bool hasDropEntity()
	 * @method bool isDropEntityFilled()
	 * @method bool isDropEntityChanged()
	 * @method \string remindActualDropEntity()
	 * @method \string requireDropEntity()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDropEntity()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDropEntity()
	 * @method \string fillDropEntity()
	 * @method \string getDropFile()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDropFile(\string|\Bitrix\Main\DB\SqlExpression $dropFile)
	 * @method bool hasDropFile()
	 * @method bool isDropFileFilled()
	 * @method bool isDropFileChanged()
	 * @method \string remindActualDropFile()
	 * @method \string requireDropFile()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDropFile()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDropFile()
	 * @method \string fillDropFile()
	 * @method \string getDropEvent()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDropEvent(\string|\Bitrix\Main\DB\SqlExpression $dropEvent)
	 * @method bool hasDropEvent()
	 * @method bool isDropEventFilled()
	 * @method bool isDropEventChanged()
	 * @method \string remindActualDropEvent()
	 * @method \string requireDropEvent()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDropEvent()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDropEvent()
	 * @method \string fillDropEvent()
	 * @method \string getDropActivity()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDropActivity(\string|\Bitrix\Main\DB\SqlExpression $dropActivity)
	 * @method bool hasDropActivity()
	 * @method bool isDropActivityFilled()
	 * @method bool isDropActivityChanged()
	 * @method \string remindActualDropActivity()
	 * @method \string requireDropActivity()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDropActivity()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDropActivity()
	 * @method \string fillDropActivity()
	 * @method \int getDroppedEntityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDroppedEntityCount(\int|\Bitrix\Main\DB\SqlExpression $droppedEntityCount)
	 * @method bool hasDroppedEntityCount()
	 * @method bool isDroppedEntityCountFilled()
	 * @method bool isDroppedEntityCountChanged()
	 * @method \int remindActualDroppedEntityCount()
	 * @method \int requireDroppedEntityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDroppedEntityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDroppedEntityCount()
	 * @method \int fillDroppedEntityCount()
	 * @method \int getDroppedFileCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDroppedFileCount(\int|\Bitrix\Main\DB\SqlExpression $droppedFileCount)
	 * @method bool hasDroppedFileCount()
	 * @method bool isDroppedFileCountFilled()
	 * @method bool isDroppedFileCountChanged()
	 * @method \int remindActualDroppedFileCount()
	 * @method \int requireDroppedFileCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDroppedFileCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDroppedFileCount()
	 * @method \int fillDroppedFileCount()
	 * @method \int getDroppedEventCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDroppedEventCount(\int|\Bitrix\Main\DB\SqlExpression $droppedEventCount)
	 * @method bool hasDroppedEventCount()
	 * @method bool isDroppedEventCountFilled()
	 * @method bool isDroppedEventCountChanged()
	 * @method \int remindActualDroppedEventCount()
	 * @method \int requireDroppedEventCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDroppedEventCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDroppedEventCount()
	 * @method \int fillDroppedEventCount()
	 * @method \int getDroppedActivityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp setDroppedActivityCount(\int|\Bitrix\Main\DB\SqlExpression $droppedActivityCount)
	 * @method bool hasDroppedActivityCount()
	 * @method bool isDroppedActivityCountFilled()
	 * @method bool isDroppedActivityCountChanged()
	 * @method \int remindActualDroppedActivityCount()
	 * @method \int requireDroppedActivityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetDroppedActivityCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetDroppedActivityCount()
	 * @method \int fillDroppedActivityCount()
	 * @method \int getLastId()
	 * @method \Bitrix\Crm\EO_VolumeTmp setLastId(\int|\Bitrix\Main\DB\SqlExpression $lastId)
	 * @method bool hasLastId()
	 * @method bool isLastIdFilled()
	 * @method bool isLastIdChanged()
	 * @method \int remindActualLastId()
	 * @method \int requireLastId()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetLastId()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetLastId()
	 * @method \int fillLastId()
	 * @method \int getFailCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp setFailCount(\int|\Bitrix\Main\DB\SqlExpression $failCount)
	 * @method bool hasFailCount()
	 * @method bool isFailCountFilled()
	 * @method bool isFailCountChanged()
	 * @method \int remindActualFailCount()
	 * @method \int requireFailCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetFailCount()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetFailCount()
	 * @method \int fillFailCount()
	 * @method \string getLastError()
	 * @method \Bitrix\Crm\EO_VolumeTmp setLastError(\string|\Bitrix\Main\DB\SqlExpression $lastError)
	 * @method bool hasLastError()
	 * @method bool isLastErrorFilled()
	 * @method bool isLastErrorChanged()
	 * @method \string remindActualLastError()
	 * @method \string requireLastError()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetLastError()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetLastError()
	 * @method \string fillLastError()
	 * @method \string getFilter()
	 * @method \Bitrix\Crm\EO_VolumeTmp setFilter(\string|\Bitrix\Main\DB\SqlExpression $filter)
	 * @method bool hasFilter()
	 * @method bool isFilterFilled()
	 * @method bool isFilterChanged()
	 * @method \string remindActualFilter()
	 * @method \string requireFilter()
	 * @method \Bitrix\Crm\EO_VolumeTmp resetFilter()
	 * @method \Bitrix\Crm\EO_VolumeTmp unsetFilter()
	 * @method \string fillFilter()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\EO_VolumeTmp set($fieldName, $value)
	 * @method \Bitrix\Crm\EO_VolumeTmp reset($fieldName)
	 * @method \Bitrix\Crm\EO_VolumeTmp unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\EO_VolumeTmp wakeUp($data)
	 */
	class EO_VolumeTmp {
		/* @var \Bitrix\Crm\VolumeTmpTable */
		static public $dataClass = '\Bitrix\Crm\VolumeTmpTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm {
	/**
	 * EO_VolumeTmp_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getIndicatorTypeList()
	 * @method \string[] fillIndicatorType()
	 * @method \int[] getOwnerIdList()
	 * @method \int[] fillOwnerId()
	 * @method \Bitrix\Main\Type\DateTime[] getTimestampXList()
	 * @method \Bitrix\Main\Type\DateTime[] fillTimestampX()
	 * @method \Bitrix\Main\Type\Date[] getDateCreateList()
	 * @method \Bitrix\Main\Type\Date[] fillDateCreate()
	 * @method \string[] getStageSemanticIdList()
	 * @method \string[] fillStageSemanticId()
	 * @method \int[] getEntitySizeList()
	 * @method \int[] fillEntitySize()
	 * @method \int[] getEntityCountList()
	 * @method \int[] fillEntityCount()
	 * @method \int[] getFileSizeList()
	 * @method \int[] fillFileSize()
	 * @method \int[] getFileCountList()
	 * @method \int[] fillFileCount()
	 * @method \int[] getDiskSizeList()
	 * @method \int[] fillDiskSize()
	 * @method \int[] getDiskCountList()
	 * @method \int[] fillDiskCount()
	 * @method \int[] getEventSizeList()
	 * @method \int[] fillEventSize()
	 * @method \int[] getEventCountList()
	 * @method \int[] fillEventCount()
	 * @method \int[] getActivitySizeList()
	 * @method \int[] fillActivitySize()
	 * @method \int[] getActivityCountList()
	 * @method \int[] fillActivityCount()
	 * @method \string[] getAgentLockList()
	 * @method \string[] fillAgentLock()
	 * @method \string[] getDropEntityList()
	 * @method \string[] fillDropEntity()
	 * @method \string[] getDropFileList()
	 * @method \string[] fillDropFile()
	 * @method \string[] getDropEventList()
	 * @method \string[] fillDropEvent()
	 * @method \string[] getDropActivityList()
	 * @method \string[] fillDropActivity()
	 * @method \int[] getDroppedEntityCountList()
	 * @method \int[] fillDroppedEntityCount()
	 * @method \int[] getDroppedFileCountList()
	 * @method \int[] fillDroppedFileCount()
	 * @method \int[] getDroppedEventCountList()
	 * @method \int[] fillDroppedEventCount()
	 * @method \int[] getDroppedActivityCountList()
	 * @method \int[] fillDroppedActivityCount()
	 * @method \int[] getLastIdList()
	 * @method \int[] fillLastId()
	 * @method \int[] getFailCountList()
	 * @method \int[] fillFailCount()
	 * @method \string[] getLastErrorList()
	 * @method \string[] fillLastError()
	 * @method \string[] getFilterList()
	 * @method \string[] fillFilter()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\EO_VolumeTmp $object)
	 * @method bool has(\Bitrix\Crm\EO_VolumeTmp $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\EO_VolumeTmp getByPrimary($primary)
	 * @method \Bitrix\Crm\EO_VolumeTmp[] getAll()
	 * @method bool remove(\Bitrix\Crm\EO_VolumeTmp $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\EO_VolumeTmp_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\EO_VolumeTmp current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_VolumeTmp_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\VolumeTmpTable */
		static public $dataClass = '\Bitrix\Crm\VolumeTmpTable';
	}
}
namespace Bitrix\Crm {
	/**
	 * @method static EO_VolumeTmp_Query query()
	 * @method static EO_VolumeTmp_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_VolumeTmp_Result getById($id)
	 * @method static EO_VolumeTmp_Result getList(array $parameters = array())
	 * @method static EO_VolumeTmp_Entity getEntity()
	 * @method static \Bitrix\Crm\EO_VolumeTmp createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\EO_VolumeTmp_Collection createCollection()
	 * @method static \Bitrix\Crm\EO_VolumeTmp wakeUpObject($row)
	 * @method static \Bitrix\Crm\EO_VolumeTmp_Collection wakeUpCollection($rows)
	 */
	class VolumeTmpTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_VolumeTmp_Result exec()
	 * @method \Bitrix\Crm\EO_VolumeTmp fetchObject()
	 * @method \Bitrix\Crm\EO_VolumeTmp_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_VolumeTmp_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\EO_VolumeTmp fetchObject()
	 * @method \Bitrix\Crm\EO_VolumeTmp_Collection fetchCollection()
	 */
	class EO_VolumeTmp_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\EO_VolumeTmp createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\EO_VolumeTmp_Collection createCollection()
	 * @method \Bitrix\Crm\EO_VolumeTmp wakeUpObject($row)
	 * @method \Bitrix\Crm\EO_VolumeTmp_Collection wakeUpCollection($rows)
	 */
	class EO_VolumeTmp_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\AgreementTable:crm/lib/webform/internals/agreement.php:6c578d61173e98fb6a81596b89f3587a */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_Agreement
	 * @see \Bitrix\Crm\WebForm\Internals\AgreementTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement setFormId(\int|\Bitrix\Main\DB\SqlExpression $formId)
	 * @method bool hasFormId()
	 * @method bool isFormIdFilled()
	 * @method bool isFormIdChanged()
	 * @method \int remindActualFormId()
	 * @method \int requireFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement resetFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement unsetFormId()
	 * @method \int fillFormId()
	 * @method \int getAgreementId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement setAgreementId(\int|\Bitrix\Main\DB\SqlExpression $agreementId)
	 * @method bool hasAgreementId()
	 * @method bool isAgreementIdFilled()
	 * @method bool isAgreementIdChanged()
	 * @method \int remindActualAgreementId()
	 * @method \int requireAgreementId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement resetAgreementId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement unsetAgreementId()
	 * @method \int fillAgreementId()
	 * @method \boolean getChecked()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement setChecked(\boolean|\Bitrix\Main\DB\SqlExpression $checked)
	 * @method bool hasChecked()
	 * @method bool isCheckedFilled()
	 * @method bool isCheckedChanged()
	 * @method \boolean remindActualChecked()
	 * @method \boolean requireChecked()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement resetChecked()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement unsetChecked()
	 * @method \boolean fillChecked()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Agreement wakeUp($data)
	 */
	class EO_Agreement {
		/* @var \Bitrix\Crm\WebForm\Internals\AgreementTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\AgreementTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_Agreement_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getFormIdList()
	 * @method \int[] fillFormId()
	 * @method \int[] getAgreementIdList()
	 * @method \int[] fillAgreementId()
	 * @method \boolean[] getCheckedList()
	 * @method \boolean[] fillChecked()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_Agreement $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_Agreement $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_Agreement $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Agreement_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Agreement_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\AgreementTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\AgreementTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_Agreement_Query query()
	 * @method static EO_Agreement_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Agreement_Result getById($id)
	 * @method static EO_Agreement_Result getList(array $parameters = array())
	 * @method static EO_Agreement_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Agreement createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Agreement_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Agreement wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Agreement_Collection wakeUpCollection($rows)
	 */
	class AgreementTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Agreement_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Agreement_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement_Collection fetchCollection()
	 */
	class EO_Agreement_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Agreement_Collection wakeUpCollection($rows)
	 */
	class EO_Agreement_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\FieldTable:crm/lib/webform/internals/field.php:8ad0b052c2d8baeec5c8a4109211fbb6 */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_Field
	 * @see \Bitrix\Crm\WebForm\Internals\FieldTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getType()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setType(\string|\Bitrix\Main\DB\SqlExpression $type)
	 * @method bool hasType()
	 * @method bool isTypeFilled()
	 * @method bool isTypeChanged()
	 * @method \string remindActualType()
	 * @method \string requireType()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetType()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetType()
	 * @method \string fillType()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetCode()
	 * @method \string fillCode()
	 * @method \string getCaption()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setCaption(\string|\Bitrix\Main\DB\SqlExpression $caption)
	 * @method bool hasCaption()
	 * @method bool isCaptionFilled()
	 * @method bool isCaptionChanged()
	 * @method \string remindActualCaption()
	 * @method \string requireCaption()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetCaption()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetCaption()
	 * @method \string fillCaption()
	 * @method \string getItems()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setItems(\string|\Bitrix\Main\DB\SqlExpression $items)
	 * @method bool hasItems()
	 * @method bool isItemsFilled()
	 * @method bool isItemsChanged()
	 * @method \string remindActualItems()
	 * @method \string requireItems()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetItems()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetItems()
	 * @method \string fillItems()
	 * @method \int getFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setFormId(\int|\Bitrix\Main\DB\SqlExpression $formId)
	 * @method bool hasFormId()
	 * @method bool isFormIdFilled()
	 * @method bool isFormIdChanged()
	 * @method \int remindActualFormId()
	 * @method \int requireFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetFormId()
	 * @method \int fillFormId()
	 * @method \int getSort()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setSort(\int|\Bitrix\Main\DB\SqlExpression $sort)
	 * @method bool hasSort()
	 * @method bool isSortFilled()
	 * @method bool isSortChanged()
	 * @method \int remindActualSort()
	 * @method \int requireSort()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetSort()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetSort()
	 * @method \int fillSort()
	 * @method \boolean getRequired()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setRequired(\boolean|\Bitrix\Main\DB\SqlExpression $required)
	 * @method bool hasRequired()
	 * @method bool isRequiredFilled()
	 * @method bool isRequiredChanged()
	 * @method \boolean remindActualRequired()
	 * @method \boolean requireRequired()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetRequired()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetRequired()
	 * @method \boolean fillRequired()
	 * @method \boolean getMultiple()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setMultiple(\boolean|\Bitrix\Main\DB\SqlExpression $multiple)
	 * @method bool hasMultiple()
	 * @method bool isMultipleFilled()
	 * @method bool isMultipleChanged()
	 * @method \boolean remindActualMultiple()
	 * @method \boolean requireMultiple()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetMultiple()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetMultiple()
	 * @method \boolean fillMultiple()
	 * @method \string getPlaceholder()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setPlaceholder(\string|\Bitrix\Main\DB\SqlExpression $placeholder)
	 * @method bool hasPlaceholder()
	 * @method bool isPlaceholderFilled()
	 * @method bool isPlaceholderChanged()
	 * @method \string remindActualPlaceholder()
	 * @method \string requirePlaceholder()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetPlaceholder()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetPlaceholder()
	 * @method \string fillPlaceholder()
	 * @method \string getValueType()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setValueType(\string|\Bitrix\Main\DB\SqlExpression $valueType)
	 * @method bool hasValueType()
	 * @method bool isValueTypeFilled()
	 * @method bool isValueTypeChanged()
	 * @method \string remindActualValueType()
	 * @method \string requireValueType()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetValueType()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetValueType()
	 * @method \string fillValueType()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetValue()
	 * @method \string fillValue()
	 * @method \string getSettingsData()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field setSettingsData(\string|\Bitrix\Main\DB\SqlExpression $settingsData)
	 * @method bool hasSettingsData()
	 * @method bool isSettingsDataFilled()
	 * @method bool isSettingsDataChanged()
	 * @method \string remindActualSettingsData()
	 * @method \string requireSettingsData()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field resetSettingsData()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unsetSettingsData()
	 * @method \string fillSettingsData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Field wakeUp($data)
	 */
	class EO_Field {
		/* @var \Bitrix\Crm\WebForm\Internals\FieldTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FieldTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_Field_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTypeList()
	 * @method \string[] fillType()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \string[] getCaptionList()
	 * @method \string[] fillCaption()
	 * @method \string[] getItemsList()
	 * @method \string[] fillItems()
	 * @method \int[] getFormIdList()
	 * @method \int[] fillFormId()
	 * @method \int[] getSortList()
	 * @method \int[] fillSort()
	 * @method \boolean[] getRequiredList()
	 * @method \boolean[] fillRequired()
	 * @method \boolean[] getMultipleList()
	 * @method \boolean[] fillMultiple()
	 * @method \string[] getPlaceholderList()
	 * @method \string[] fillPlaceholder()
	 * @method \string[] getValueTypeList()
	 * @method \string[] fillValueType()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 * @method \string[] getSettingsDataList()
	 * @method \string[] fillSettingsData()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_Field $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_Field $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_Field $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Field_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Field_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\FieldTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FieldTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_Field_Query query()
	 * @method static EO_Field_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Field_Result getById($id)
	 * @method static EO_Field_Result getList(array $parameters = array())
	 * @method static EO_Field_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Field createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Field_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Field wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Field_Collection wakeUpCollection($rows)
	 */
	class FieldTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Field_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Field_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field_Collection fetchCollection()
	 */
	class EO_Field_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Field_Collection wakeUpCollection($rows)
	 */
	class EO_Field_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\FieldDependenceTable:crm/lib/webform/internals/fielddependence.php:3a3f51396fc7a86fa196398eacdbdd17 */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_FieldDependence
	 * @see \Bitrix\Crm\WebForm\Internals\FieldDependenceTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence setFormId(\int|\Bitrix\Main\DB\SqlExpression $formId)
	 * @method bool hasFormId()
	 * @method bool isFormIdFilled()
	 * @method bool isFormIdChanged()
	 * @method \int remindActualFormId()
	 * @method \int requireFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence resetFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence unsetFormId()
	 * @method \int fillFormId()
	 * @method \int getIfFieldCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence setIfFieldCode(\int|\Bitrix\Main\DB\SqlExpression $ifFieldCode)
	 * @method bool hasIfFieldCode()
	 * @method bool isIfFieldCodeFilled()
	 * @method bool isIfFieldCodeChanged()
	 * @method \int remindActualIfFieldCode()
	 * @method \int requireIfFieldCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence resetIfFieldCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence unsetIfFieldCode()
	 * @method \int fillIfFieldCode()
	 * @method \string getIfAction()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence setIfAction(\string|\Bitrix\Main\DB\SqlExpression $ifAction)
	 * @method bool hasIfAction()
	 * @method bool isIfActionFilled()
	 * @method bool isIfActionChanged()
	 * @method \string remindActualIfAction()
	 * @method \string requireIfAction()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence resetIfAction()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence unsetIfAction()
	 * @method \string fillIfAction()
	 * @method \string getIfValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence setIfValue(\string|\Bitrix\Main\DB\SqlExpression $ifValue)
	 * @method bool hasIfValue()
	 * @method bool isIfValueFilled()
	 * @method bool isIfValueChanged()
	 * @method \string remindActualIfValue()
	 * @method \string requireIfValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence resetIfValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence unsetIfValue()
	 * @method \string fillIfValue()
	 * @method \string getIfValueOperation()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence setIfValueOperation(\string|\Bitrix\Main\DB\SqlExpression $ifValueOperation)
	 * @method bool hasIfValueOperation()
	 * @method bool isIfValueOperationFilled()
	 * @method bool isIfValueOperationChanged()
	 * @method \string remindActualIfValueOperation()
	 * @method \string requireIfValueOperation()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence resetIfValueOperation()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence unsetIfValueOperation()
	 * @method \string fillIfValueOperation()
	 * @method \int getDoFieldCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence setDoFieldCode(\int|\Bitrix\Main\DB\SqlExpression $doFieldCode)
	 * @method bool hasDoFieldCode()
	 * @method bool isDoFieldCodeFilled()
	 * @method bool isDoFieldCodeChanged()
	 * @method \int remindActualDoFieldCode()
	 * @method \int requireDoFieldCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence resetDoFieldCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence unsetDoFieldCode()
	 * @method \int fillDoFieldCode()
	 * @method \string getDoAction()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence setDoAction(\string|\Bitrix\Main\DB\SqlExpression $doAction)
	 * @method bool hasDoAction()
	 * @method bool isDoActionFilled()
	 * @method bool isDoActionChanged()
	 * @method \string remindActualDoAction()
	 * @method \string requireDoAction()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence resetDoAction()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence unsetDoAction()
	 * @method \string fillDoAction()
	 * @method \string getDoValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence setDoValue(\string|\Bitrix\Main\DB\SqlExpression $doValue)
	 * @method bool hasDoValue()
	 * @method bool isDoValueFilled()
	 * @method bool isDoValueChanged()
	 * @method \string remindActualDoValue()
	 * @method \string requireDoValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence resetDoValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence unsetDoValue()
	 * @method \string fillDoValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FieldDependence wakeUp($data)
	 */
	class EO_FieldDependence {
		/* @var \Bitrix\Crm\WebForm\Internals\FieldDependenceTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FieldDependenceTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_FieldDependence_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getFormIdList()
	 * @method \int[] fillFormId()
	 * @method \int[] getIfFieldCodeList()
	 * @method \int[] fillIfFieldCode()
	 * @method \string[] getIfActionList()
	 * @method \string[] fillIfAction()
	 * @method \string[] getIfValueList()
	 * @method \string[] fillIfValue()
	 * @method \string[] getIfValueOperationList()
	 * @method \string[] fillIfValueOperation()
	 * @method \int[] getDoFieldCodeList()
	 * @method \int[] fillDoFieldCode()
	 * @method \string[] getDoActionList()
	 * @method \string[] fillDoAction()
	 * @method \string[] getDoValueList()
	 * @method \string[] fillDoValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_FieldDependence $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_FieldDependence $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_FieldDependence $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FieldDependence_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_FieldDependence_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\FieldDependenceTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FieldDependenceTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_FieldDependence_Query query()
	 * @method static EO_FieldDependence_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_FieldDependence_Result getById($id)
	 * @method static EO_FieldDependence_Result getList(array $parameters = array())
	 * @method static EO_FieldDependence_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FieldDependence createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FieldDependence_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FieldDependence wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FieldDependence_Collection wakeUpCollection($rows)
	 */
	class FieldDependenceTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_FieldDependence_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_FieldDependence_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence_Collection fetchCollection()
	 */
	class EO_FieldDependence_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FieldDependence_Collection wakeUpCollection($rows)
	 */
	class EO_FieldDependence_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\FormTable:crm/lib/webform/internals/form.php:b9c6249304c5b19ac8b72c765dab07e9 */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_Form
	 * @see \Bitrix\Crm\WebForm\Internals\FormTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setCode(\string|\Bitrix\Main\DB\SqlExpression $code)
	 * @method bool hasCode()
	 * @method bool isCodeFilled()
	 * @method bool isCodeChanged()
	 * @method \string remindActualCode()
	 * @method \string requireCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetCode()
	 * @method \string fillCode()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \boolean getActive()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setActive(\boolean|\Bitrix\Main\DB\SqlExpression $active)
	 * @method bool hasActive()
	 * @method bool isActiveFilled()
	 * @method bool isActiveChanged()
	 * @method \boolean remindActualActive()
	 * @method \boolean requireActive()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetActive()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetActive()
	 * @method \boolean fillActive()
	 * @method \int getActiveChangeBy()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setActiveChangeBy(\int|\Bitrix\Main\DB\SqlExpression $activeChangeBy)
	 * @method bool hasActiveChangeBy()
	 * @method bool isActiveChangeByFilled()
	 * @method bool isActiveChangeByChanged()
	 * @method \int remindActualActiveChangeBy()
	 * @method \int requireActiveChangeBy()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetActiveChangeBy()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetActiveChangeBy()
	 * @method \int fillActiveChangeBy()
	 * @method \Bitrix\Main\Type\DateTime getActiveChangeDate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setActiveChangeDate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $activeChangeDate)
	 * @method bool hasActiveChangeDate()
	 * @method bool isActiveChangeDateFilled()
	 * @method bool isActiveChangeDateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualActiveChangeDate()
	 * @method \Bitrix\Main\Type\DateTime requireActiveChangeDate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetActiveChangeDate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetActiveChangeDate()
	 * @method \Bitrix\Main\Type\DateTime fillActiveChangeDate()
	 * @method \string getLanguageId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setLanguageId(\string|\Bitrix\Main\DB\SqlExpression $languageId)
	 * @method bool hasLanguageId()
	 * @method bool isLanguageIdFilled()
	 * @method bool isLanguageIdChanged()
	 * @method \string remindActualLanguageId()
	 * @method \string requireLanguageId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetLanguageId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetLanguageId()
	 * @method \string fillLanguageId()
	 * @method \string getName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setName(\string|\Bitrix\Main\DB\SqlExpression $name)
	 * @method bool hasName()
	 * @method bool isNameFilled()
	 * @method bool isNameChanged()
	 * @method \string remindActualName()
	 * @method \string requireName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetName()
	 * @method \string fillName()
	 * @method \string getCaption()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setCaption(\string|\Bitrix\Main\DB\SqlExpression $caption)
	 * @method bool hasCaption()
	 * @method bool isCaptionFilled()
	 * @method bool isCaptionChanged()
	 * @method \string remindActualCaption()
	 * @method \string requireCaption()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetCaption()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetCaption()
	 * @method \string fillCaption()
	 * @method \string getDescription()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setDescription(\string|\Bitrix\Main\DB\SqlExpression $description)
	 * @method bool hasDescription()
	 * @method bool isDescriptionFilled()
	 * @method bool isDescriptionChanged()
	 * @method \string remindActualDescription()
	 * @method \string requireDescription()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetDescription()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetDescription()
	 * @method \string fillDescription()
	 * @method \string getButtonCaption()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setButtonCaption(\string|\Bitrix\Main\DB\SqlExpression $buttonCaption)
	 * @method bool hasButtonCaption()
	 * @method bool isButtonCaptionFilled()
	 * @method bool isButtonCaptionChanged()
	 * @method \string remindActualButtonCaption()
	 * @method \string requireButtonCaption()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetButtonCaption()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetButtonCaption()
	 * @method \string fillButtonCaption()
	 * @method \string getButtonColorFont()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setButtonColorFont(\string|\Bitrix\Main\DB\SqlExpression $buttonColorFont)
	 * @method bool hasButtonColorFont()
	 * @method bool isButtonColorFontFilled()
	 * @method bool isButtonColorFontChanged()
	 * @method \string remindActualButtonColorFont()
	 * @method \string requireButtonColorFont()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetButtonColorFont()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetButtonColorFont()
	 * @method \string fillButtonColorFont()
	 * @method \string getButtonColorBg()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setButtonColorBg(\string|\Bitrix\Main\DB\SqlExpression $buttonColorBg)
	 * @method bool hasButtonColorBg()
	 * @method bool isButtonColorBgFilled()
	 * @method bool isButtonColorBgChanged()
	 * @method \string remindActualButtonColorBg()
	 * @method \string requireButtonColorBg()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetButtonColorBg()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetButtonColorBg()
	 * @method \string fillButtonColorBg()
	 * @method \string getCssPath()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setCssPath(\string|\Bitrix\Main\DB\SqlExpression $cssPath)
	 * @method bool hasCssPath()
	 * @method bool isCssPathFilled()
	 * @method bool isCssPathChanged()
	 * @method \string remindActualCssPath()
	 * @method \string requireCssPath()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetCssPath()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetCssPath()
	 * @method \string fillCssPath()
	 * @method \string getCssText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setCssText(\string|\Bitrix\Main\DB\SqlExpression $cssText)
	 * @method bool hasCssText()
	 * @method bool isCssTextFilled()
	 * @method bool isCssTextChanged()
	 * @method \string remindActualCssText()
	 * @method \string requireCssText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetCssText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetCssText()
	 * @method \string fillCssText()
	 * @method \int getBackgroundImage()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setBackgroundImage(\int|\Bitrix\Main\DB\SqlExpression $backgroundImage)
	 * @method bool hasBackgroundImage()
	 * @method bool isBackgroundImageFilled()
	 * @method bool isBackgroundImageChanged()
	 * @method \int remindActualBackgroundImage()
	 * @method \int requireBackgroundImage()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetBackgroundImage()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetBackgroundImage()
	 * @method \int fillBackgroundImage()
	 * @method \string getTemplateId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setTemplateId(\string|\Bitrix\Main\DB\SqlExpression $templateId)
	 * @method bool hasTemplateId()
	 * @method bool isTemplateIdFilled()
	 * @method bool isTemplateIdChanged()
	 * @method \string remindActualTemplateId()
	 * @method \string requireTemplateId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetTemplateId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetTemplateId()
	 * @method \string fillTemplateId()
	 * @method \string getEntityScheme()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setEntityScheme(\string|\Bitrix\Main\DB\SqlExpression $entityScheme)
	 * @method bool hasEntityScheme()
	 * @method bool isEntitySchemeFilled()
	 * @method bool isEntitySchemeChanged()
	 * @method \string remindActualEntityScheme()
	 * @method \string requireEntityScheme()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetEntityScheme()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetEntityScheme()
	 * @method \string fillEntityScheme()
	 * @method \boolean getIsPay()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setIsPay(\boolean|\Bitrix\Main\DB\SqlExpression $isPay)
	 * @method bool hasIsPay()
	 * @method bool isIsPayFilled()
	 * @method bool isIsPayChanged()
	 * @method \boolean remindActualIsPay()
	 * @method \boolean requireIsPay()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetIsPay()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetIsPay()
	 * @method \boolean fillIsPay()
	 * @method \string getDuplicateMode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setDuplicateMode(\string|\Bitrix\Main\DB\SqlExpression $duplicateMode)
	 * @method bool hasDuplicateMode()
	 * @method bool isDuplicateModeFilled()
	 * @method bool isDuplicateModeChanged()
	 * @method \string remindActualDuplicateMode()
	 * @method \string requireDuplicateMode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetDuplicateMode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetDuplicateMode()
	 * @method \string fillDuplicateMode()
	 * @method \string getGoogleAnalyticsId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setGoogleAnalyticsId(\string|\Bitrix\Main\DB\SqlExpression $googleAnalyticsId)
	 * @method bool hasGoogleAnalyticsId()
	 * @method bool isGoogleAnalyticsIdFilled()
	 * @method bool isGoogleAnalyticsIdChanged()
	 * @method \string remindActualGoogleAnalyticsId()
	 * @method \string requireGoogleAnalyticsId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetGoogleAnalyticsId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetGoogleAnalyticsId()
	 * @method \string fillGoogleAnalyticsId()
	 * @method \boolean getGoogleAnalyticsPageView()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setGoogleAnalyticsPageView(\boolean|\Bitrix\Main\DB\SqlExpression $googleAnalyticsPageView)
	 * @method bool hasGoogleAnalyticsPageView()
	 * @method bool isGoogleAnalyticsPageViewFilled()
	 * @method bool isGoogleAnalyticsPageViewChanged()
	 * @method \boolean remindActualGoogleAnalyticsPageView()
	 * @method \boolean requireGoogleAnalyticsPageView()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetGoogleAnalyticsPageView()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetGoogleAnalyticsPageView()
	 * @method \boolean fillGoogleAnalyticsPageView()
	 * @method \string getYandexMetricId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setYandexMetricId(\string|\Bitrix\Main\DB\SqlExpression $yandexMetricId)
	 * @method bool hasYandexMetricId()
	 * @method bool isYandexMetricIdFilled()
	 * @method bool isYandexMetricIdChanged()
	 * @method \string remindActualYandexMetricId()
	 * @method \string requireYandexMetricId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetYandexMetricId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetYandexMetricId()
	 * @method \string fillYandexMetricId()
	 * @method \string getResultSuccessText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setResultSuccessText(\string|\Bitrix\Main\DB\SqlExpression $resultSuccessText)
	 * @method bool hasResultSuccessText()
	 * @method bool isResultSuccessTextFilled()
	 * @method bool isResultSuccessTextChanged()
	 * @method \string remindActualResultSuccessText()
	 * @method \string requireResultSuccessText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetResultSuccessText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetResultSuccessText()
	 * @method \string fillResultSuccessText()
	 * @method \string getResultSuccessUrl()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setResultSuccessUrl(\string|\Bitrix\Main\DB\SqlExpression $resultSuccessUrl)
	 * @method bool hasResultSuccessUrl()
	 * @method bool isResultSuccessUrlFilled()
	 * @method bool isResultSuccessUrlChanged()
	 * @method \string remindActualResultSuccessUrl()
	 * @method \string requireResultSuccessUrl()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetResultSuccessUrl()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetResultSuccessUrl()
	 * @method \string fillResultSuccessUrl()
	 * @method \string getResultFailureText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setResultFailureText(\string|\Bitrix\Main\DB\SqlExpression $resultFailureText)
	 * @method bool hasResultFailureText()
	 * @method bool isResultFailureTextFilled()
	 * @method bool isResultFailureTextChanged()
	 * @method \string remindActualResultFailureText()
	 * @method \string requireResultFailureText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetResultFailureText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetResultFailureText()
	 * @method \string fillResultFailureText()
	 * @method \string getResultFailureUrl()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setResultFailureUrl(\string|\Bitrix\Main\DB\SqlExpression $resultFailureUrl)
	 * @method bool hasResultFailureUrl()
	 * @method bool isResultFailureUrlFilled()
	 * @method bool isResultFailureUrlChanged()
	 * @method \string remindActualResultFailureUrl()
	 * @method \string requireResultFailureUrl()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetResultFailureUrl()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetResultFailureUrl()
	 * @method \string fillResultFailureUrl()
	 * @method \boolean getUseLicence()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setUseLicence(\boolean|\Bitrix\Main\DB\SqlExpression $useLicence)
	 * @method bool hasUseLicence()
	 * @method bool isUseLicenceFilled()
	 * @method bool isUseLicenceChanged()
	 * @method \boolean remindActualUseLicence()
	 * @method \boolean requireUseLicence()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetUseLicence()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetUseLicence()
	 * @method \boolean fillUseLicence()
	 * @method \int getAgreementId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setAgreementId(\int|\Bitrix\Main\DB\SqlExpression $agreementId)
	 * @method bool hasAgreementId()
	 * @method bool isAgreementIdFilled()
	 * @method bool isAgreementIdChanged()
	 * @method \int remindActualAgreementId()
	 * @method \int requireAgreementId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetAgreementId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetAgreementId()
	 * @method \int fillAgreementId()
	 * @method \boolean getLicenceButtonIsChecked()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setLicenceButtonIsChecked(\boolean|\Bitrix\Main\DB\SqlExpression $licenceButtonIsChecked)
	 * @method bool hasLicenceButtonIsChecked()
	 * @method bool isLicenceButtonIsCheckedFilled()
	 * @method bool isLicenceButtonIsCheckedChanged()
	 * @method \boolean remindActualLicenceButtonIsChecked()
	 * @method \boolean requireLicenceButtonIsChecked()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetLicenceButtonIsChecked()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetLicenceButtonIsChecked()
	 * @method \boolean fillLicenceButtonIsChecked()
	 * @method \string getScriptIncludeSettings()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setScriptIncludeSettings(\string|\Bitrix\Main\DB\SqlExpression $scriptIncludeSettings)
	 * @method bool hasScriptIncludeSettings()
	 * @method bool isScriptIncludeSettingsFilled()
	 * @method bool isScriptIncludeSettingsChanged()
	 * @method \string remindActualScriptIncludeSettings()
	 * @method \string requireScriptIncludeSettings()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetScriptIncludeSettings()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetScriptIncludeSettings()
	 * @method \string fillScriptIncludeSettings()
	 * @method \string getInvoiceSettings()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setInvoiceSettings(\string|\Bitrix\Main\DB\SqlExpression $invoiceSettings)
	 * @method bool hasInvoiceSettings()
	 * @method bool isInvoiceSettingsFilled()
	 * @method bool isInvoiceSettingsChanged()
	 * @method \string remindActualInvoiceSettings()
	 * @method \string requireInvoiceSettings()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetInvoiceSettings()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetInvoiceSettings()
	 * @method \string fillInvoiceSettings()
	 * @method \int getAssignedById()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setAssignedById(\int|\Bitrix\Main\DB\SqlExpression $assignedById)
	 * @method bool hasAssignedById()
	 * @method bool isAssignedByIdFilled()
	 * @method bool isAssignedByIdChanged()
	 * @method \int remindActualAssignedById()
	 * @method \int requireAssignedById()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetAssignedById()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetAssignedById()
	 * @method \int fillAssignedById()
	 * @method \string getSecurityCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setSecurityCode(\string|\Bitrix\Main\DB\SqlExpression $securityCode)
	 * @method bool hasSecurityCode()
	 * @method bool isSecurityCodeFilled()
	 * @method bool isSecurityCodeChanged()
	 * @method \string remindActualSecurityCode()
	 * @method \string requireSecurityCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetSecurityCode()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetSecurityCode()
	 * @method \string fillSecurityCode()
	 * @method \boolean getUseCaptcha()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setUseCaptcha(\boolean|\Bitrix\Main\DB\SqlExpression $useCaptcha)
	 * @method bool hasUseCaptcha()
	 * @method bool isUseCaptchaFilled()
	 * @method bool isUseCaptchaChanged()
	 * @method \boolean remindActualUseCaptcha()
	 * @method \boolean requireUseCaptcha()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetUseCaptcha()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetUseCaptcha()
	 * @method \boolean fillUseCaptcha()
	 * @method \boolean getIsSystem()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setIsSystem(\boolean|\Bitrix\Main\DB\SqlExpression $isSystem)
	 * @method bool hasIsSystem()
	 * @method bool isIsSystemFilled()
	 * @method bool isIsSystemChanged()
	 * @method \boolean remindActualIsSystem()
	 * @method \boolean requireIsSystem()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetIsSystem()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetIsSystem()
	 * @method \boolean fillIsSystem()
	 * @method \string getXmlId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setXmlId(\string|\Bitrix\Main\DB\SqlExpression $xmlId)
	 * @method bool hasXmlId()
	 * @method bool isXmlIdFilled()
	 * @method bool isXmlIdChanged()
	 * @method \string remindActualXmlId()
	 * @method \string requireXmlId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetXmlId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetXmlId()
	 * @method \string fillXmlId()
	 * @method \boolean getIsCallbackForm()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setIsCallbackForm(\boolean|\Bitrix\Main\DB\SqlExpression $isCallbackForm)
	 * @method bool hasIsCallbackForm()
	 * @method bool isIsCallbackFormFilled()
	 * @method bool isIsCallbackFormChanged()
	 * @method \boolean remindActualIsCallbackForm()
	 * @method \boolean requireIsCallbackForm()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetIsCallbackForm()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetIsCallbackForm()
	 * @method \boolean fillIsCallbackForm()
	 * @method \string getCallText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setCallText(\string|\Bitrix\Main\DB\SqlExpression $callText)
	 * @method bool hasCallText()
	 * @method bool isCallTextFilled()
	 * @method bool isCallTextChanged()
	 * @method \string remindActualCallText()
	 * @method \string requireCallText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetCallText()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetCallText()
	 * @method \string fillCallText()
	 * @method \string getCallFrom()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setCallFrom(\string|\Bitrix\Main\DB\SqlExpression $callFrom)
	 * @method bool hasCallFrom()
	 * @method bool isCallFromFilled()
	 * @method bool isCallFromChanged()
	 * @method \string remindActualCallFrom()
	 * @method \string requireCallFrom()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetCallFrom()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetCallFrom()
	 * @method \string fillCallFrom()
	 * @method \string getFormSettings()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setFormSettings(\string|\Bitrix\Main\DB\SqlExpression $formSettings)
	 * @method bool hasFormSettings()
	 * @method bool isFormSettingsFilled()
	 * @method bool isFormSettingsChanged()
	 * @method \string remindActualFormSettings()
	 * @method \string requireFormSettings()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetFormSettings()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetFormSettings()
	 * @method \string fillFormSettings()
	 * @method \boolean getCopyrightRemoved()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form setCopyrightRemoved(\boolean|\Bitrix\Main\DB\SqlExpression $copyrightRemoved)
	 * @method bool hasCopyrightRemoved()
	 * @method bool isCopyrightRemovedFilled()
	 * @method bool isCopyrightRemovedChanged()
	 * @method \boolean remindActualCopyrightRemoved()
	 * @method \boolean requireCopyrightRemoved()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form resetCopyrightRemoved()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unsetCopyrightRemoved()
	 * @method \boolean fillCopyrightRemoved()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Form wakeUp($data)
	 */
	class EO_Form {
		/* @var \Bitrix\Crm\WebForm\Internals\FormTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FormTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_Form_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getCodeList()
	 * @method \string[] fillCode()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \boolean[] getActiveList()
	 * @method \boolean[] fillActive()
	 * @method \int[] getActiveChangeByList()
	 * @method \int[] fillActiveChangeBy()
	 * @method \Bitrix\Main\Type\DateTime[] getActiveChangeDateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillActiveChangeDate()
	 * @method \string[] getLanguageIdList()
	 * @method \string[] fillLanguageId()
	 * @method \string[] getNameList()
	 * @method \string[] fillName()
	 * @method \string[] getCaptionList()
	 * @method \string[] fillCaption()
	 * @method \string[] getDescriptionList()
	 * @method \string[] fillDescription()
	 * @method \string[] getButtonCaptionList()
	 * @method \string[] fillButtonCaption()
	 * @method \string[] getButtonColorFontList()
	 * @method \string[] fillButtonColorFont()
	 * @method \string[] getButtonColorBgList()
	 * @method \string[] fillButtonColorBg()
	 * @method \string[] getCssPathList()
	 * @method \string[] fillCssPath()
	 * @method \string[] getCssTextList()
	 * @method \string[] fillCssText()
	 * @method \int[] getBackgroundImageList()
	 * @method \int[] fillBackgroundImage()
	 * @method \string[] getTemplateIdList()
	 * @method \string[] fillTemplateId()
	 * @method \string[] getEntitySchemeList()
	 * @method \string[] fillEntityScheme()
	 * @method \boolean[] getIsPayList()
	 * @method \boolean[] fillIsPay()
	 * @method \string[] getDuplicateModeList()
	 * @method \string[] fillDuplicateMode()
	 * @method \string[] getGoogleAnalyticsIdList()
	 * @method \string[] fillGoogleAnalyticsId()
	 * @method \boolean[] getGoogleAnalyticsPageViewList()
	 * @method \boolean[] fillGoogleAnalyticsPageView()
	 * @method \string[] getYandexMetricIdList()
	 * @method \string[] fillYandexMetricId()
	 * @method \string[] getResultSuccessTextList()
	 * @method \string[] fillResultSuccessText()
	 * @method \string[] getResultSuccessUrlList()
	 * @method \string[] fillResultSuccessUrl()
	 * @method \string[] getResultFailureTextList()
	 * @method \string[] fillResultFailureText()
	 * @method \string[] getResultFailureUrlList()
	 * @method \string[] fillResultFailureUrl()
	 * @method \boolean[] getUseLicenceList()
	 * @method \boolean[] fillUseLicence()
	 * @method \int[] getAgreementIdList()
	 * @method \int[] fillAgreementId()
	 * @method \boolean[] getLicenceButtonIsCheckedList()
	 * @method \boolean[] fillLicenceButtonIsChecked()
	 * @method \string[] getScriptIncludeSettingsList()
	 * @method \string[] fillScriptIncludeSettings()
	 * @method \string[] getInvoiceSettingsList()
	 * @method \string[] fillInvoiceSettings()
	 * @method \int[] getAssignedByIdList()
	 * @method \int[] fillAssignedById()
	 * @method \string[] getSecurityCodeList()
	 * @method \string[] fillSecurityCode()
	 * @method \boolean[] getUseCaptchaList()
	 * @method \boolean[] fillUseCaptcha()
	 * @method \boolean[] getIsSystemList()
	 * @method \boolean[] fillIsSystem()
	 * @method \string[] getXmlIdList()
	 * @method \string[] fillXmlId()
	 * @method \boolean[] getIsCallbackFormList()
	 * @method \boolean[] fillIsCallbackForm()
	 * @method \string[] getCallTextList()
	 * @method \string[] fillCallText()
	 * @method \string[] getCallFromList()
	 * @method \string[] fillCallFrom()
	 * @method \string[] getFormSettingsList()
	 * @method \string[] fillFormSettings()
	 * @method \boolean[] getCopyrightRemovedList()
	 * @method \boolean[] fillCopyrightRemoved()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_Form $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_Form $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_Form $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Form_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Form_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\FormTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FormTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_Form_Query query()
	 * @method static EO_Form_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Form_Result getById($id)
	 * @method static EO_Form_Result getList(array $parameters = array())
	 * @method static EO_Form_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Form createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Form_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Form wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Form_Collection wakeUpCollection($rows)
	 */
	class FormTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Form_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Form_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form_Collection fetchCollection()
	 */
	class EO_Form_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form_Collection wakeUpCollection($rows)
	 */
	class EO_Form_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\FormCounterTable:crm/lib/webform/internals/formcounter.php:057a69707e1a3729d279cb58ccba4a15 */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_FormCounter
	 * @see \Bitrix\Crm\WebForm\Internals\FormCounterTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setFormId(\int|\Bitrix\Main\DB\SqlExpression $formId)
	 * @method bool hasFormId()
	 * @method bool isFormIdFilled()
	 * @method bool isFormIdChanged()
	 * @method \int remindActualFormId()
	 * @method \int requireFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetFormId()
	 * @method \int fillFormId()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 * @method \int getViews()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setViews(\int|\Bitrix\Main\DB\SqlExpression $views)
	 * @method bool hasViews()
	 * @method bool isViewsFilled()
	 * @method bool isViewsChanged()
	 * @method \int remindActualViews()
	 * @method \int requireViews()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetViews()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetViews()
	 * @method \int fillViews()
	 * @method \int getMoney()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setMoney(\int|\Bitrix\Main\DB\SqlExpression $money)
	 * @method bool hasMoney()
	 * @method bool isMoneyFilled()
	 * @method bool isMoneyChanged()
	 * @method \int remindActualMoney()
	 * @method \int requireMoney()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetMoney()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetMoney()
	 * @method \int fillMoney()
	 * @method \int getStartFill()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setStartFill(\int|\Bitrix\Main\DB\SqlExpression $startFill)
	 * @method bool hasStartFill()
	 * @method bool isStartFillFilled()
	 * @method bool isStartFillChanged()
	 * @method \int remindActualStartFill()
	 * @method \int requireStartFill()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetStartFill()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetStartFill()
	 * @method \int fillStartFill()
	 * @method \int getEndFill()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setEndFill(\int|\Bitrix\Main\DB\SqlExpression $endFill)
	 * @method bool hasEndFill()
	 * @method bool isEndFillFilled()
	 * @method bool isEndFillChanged()
	 * @method \int remindActualEndFill()
	 * @method \int requireEndFill()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetEndFill()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetEndFill()
	 * @method \int fillEndFill()
	 * @method \int getEntityContact()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setEntityContact(\int|\Bitrix\Main\DB\SqlExpression $entityContact)
	 * @method bool hasEntityContact()
	 * @method bool isEntityContactFilled()
	 * @method bool isEntityContactChanged()
	 * @method \int remindActualEntityContact()
	 * @method \int requireEntityContact()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetEntityContact()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetEntityContact()
	 * @method \int fillEntityContact()
	 * @method \int getEntityCompany()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setEntityCompany(\int|\Bitrix\Main\DB\SqlExpression $entityCompany)
	 * @method bool hasEntityCompany()
	 * @method bool isEntityCompanyFilled()
	 * @method bool isEntityCompanyChanged()
	 * @method \int remindActualEntityCompany()
	 * @method \int requireEntityCompany()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetEntityCompany()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetEntityCompany()
	 * @method \int fillEntityCompany()
	 * @method \int getEntityLead()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setEntityLead(\int|\Bitrix\Main\DB\SqlExpression $entityLead)
	 * @method bool hasEntityLead()
	 * @method bool isEntityLeadFilled()
	 * @method bool isEntityLeadChanged()
	 * @method \int remindActualEntityLead()
	 * @method \int requireEntityLead()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetEntityLead()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetEntityLead()
	 * @method \int fillEntityLead()
	 * @method \int getEntityDeal()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setEntityDeal(\int|\Bitrix\Main\DB\SqlExpression $entityDeal)
	 * @method bool hasEntityDeal()
	 * @method bool isEntityDealFilled()
	 * @method bool isEntityDealChanged()
	 * @method \int remindActualEntityDeal()
	 * @method \int requireEntityDeal()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetEntityDeal()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetEntityDeal()
	 * @method \int fillEntityDeal()
	 * @method \int getEntityQuote()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setEntityQuote(\int|\Bitrix\Main\DB\SqlExpression $entityQuote)
	 * @method bool hasEntityQuote()
	 * @method bool isEntityQuoteFilled()
	 * @method bool isEntityQuoteChanged()
	 * @method \int remindActualEntityQuote()
	 * @method \int requireEntityQuote()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetEntityQuote()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetEntityQuote()
	 * @method \int fillEntityQuote()
	 * @method \int getEntityInvoice()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter setEntityInvoice(\int|\Bitrix\Main\DB\SqlExpression $entityInvoice)
	 * @method bool hasEntityInvoice()
	 * @method bool isEntityInvoiceFilled()
	 * @method bool isEntityInvoiceChanged()
	 * @method \int remindActualEntityInvoice()
	 * @method \int requireEntityInvoice()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter resetEntityInvoice()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unsetEntityInvoice()
	 * @method \int fillEntityInvoice()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormCounter wakeUp($data)
	 */
	class EO_FormCounter {
		/* @var \Bitrix\Crm\WebForm\Internals\FormCounterTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FormCounterTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_FormCounter_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getFormIdList()
	 * @method \int[] fillFormId()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 * @method \int[] getViewsList()
	 * @method \int[] fillViews()
	 * @method \int[] getMoneyList()
	 * @method \int[] fillMoney()
	 * @method \int[] getStartFillList()
	 * @method \int[] fillStartFill()
	 * @method \int[] getEndFillList()
	 * @method \int[] fillEndFill()
	 * @method \int[] getEntityContactList()
	 * @method \int[] fillEntityContact()
	 * @method \int[] getEntityCompanyList()
	 * @method \int[] fillEntityCompany()
	 * @method \int[] getEntityLeadList()
	 * @method \int[] fillEntityLead()
	 * @method \int[] getEntityDealList()
	 * @method \int[] fillEntityDeal()
	 * @method \int[] getEntityQuoteList()
	 * @method \int[] fillEntityQuote()
	 * @method \int[] getEntityInvoiceList()
	 * @method \int[] fillEntityInvoice()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_FormCounter $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_FormCounter $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_FormCounter $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormCounter_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_FormCounter_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\FormCounterTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FormCounterTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_FormCounter_Query query()
	 * @method static EO_FormCounter_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_FormCounter_Result getById($id)
	 * @method static EO_FormCounter_Result getList(array $parameters = array())
	 * @method static EO_FormCounter_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormCounter createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormCounter_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormCounter wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormCounter_Collection wakeUpCollection($rows)
	 */
	class FormCounterTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_FormCounter_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_FormCounter_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter_Collection fetchCollection()
	 */
	class EO_FormCounter_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormCounter_Collection wakeUpCollection($rows)
	 */
	class EO_FormCounter_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\FormStartEditTable:crm/lib/webform/internals/formstartedit.php:59a09b10c7aacdbeb2e2e6af495345d8 */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_FormStartEdit
	 * @see \Bitrix\Crm\WebForm\Internals\FormStartEditTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit setFormId(\int|\Bitrix\Main\DB\SqlExpression $formId)
	 * @method bool hasFormId()
	 * @method bool isFormIdFilled()
	 * @method bool isFormIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit resetDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit wakeUp($data)
	 */
	class EO_FormStartEdit {
		/* @var \Bitrix\Crm\WebForm\Internals\FormStartEditTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FormStartEditTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_FormStartEdit_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getFormIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_FormStartEdit $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_FormStartEdit $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_FormStartEdit $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_FormStartEdit_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\FormStartEditTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FormStartEditTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_FormStartEdit_Query query()
	 * @method static EO_FormStartEdit_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_FormStartEdit_Result getById($id)
	 * @method static EO_FormStartEdit_Result getList(array $parameters = array())
	 * @method static EO_FormStartEdit_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit_Collection wakeUpCollection($rows)
	 */
	class FormStartEditTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_FormStartEdit_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_FormStartEdit_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit_Collection fetchCollection()
	 */
	class EO_FormStartEdit_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormStartEdit_Collection wakeUpCollection($rows)
	 */
	class EO_FormStartEdit_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\FormViewTable:crm/lib/webform/internals/formview.php:6baee4804e5dd91ab39be24405fd5835 */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_FormView
	 * @see \Bitrix\Crm\WebForm\Internals\FormViewTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView setFormId(\int|\Bitrix\Main\DB\SqlExpression $formId)
	 * @method bool hasFormId()
	 * @method bool isFormIdFilled()
	 * @method bool isFormIdChanged()
	 * @method \Bitrix\Main\Type\DateTime getDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView setDateCreate(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $dateCreate)
	 * @method bool hasDateCreate()
	 * @method bool isDateCreateFilled()
	 * @method bool isDateCreateChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualDateCreate()
	 * @method \Bitrix\Main\Type\DateTime requireDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView resetDateCreate()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView unsetDateCreate()
	 * @method \Bitrix\Main\Type\DateTime fillDateCreate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormView wakeUp($data)
	 */
	class EO_FormView {
		/* @var \Bitrix\Crm\WebForm\Internals\FormViewTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FormViewTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_FormView_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getFormIdList()
	 * @method \Bitrix\Main\Type\DateTime[] getDateCreateList()
	 * @method \Bitrix\Main\Type\DateTime[] fillDateCreate()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_FormView $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_FormView $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_FormView $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormView_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_FormView_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\FormViewTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\FormViewTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_FormView_Query query()
	 * @method static EO_FormView_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_FormView_Result getById($id)
	 * @method static EO_FormView_Result getList(array $parameters = array())
	 * @method static EO_FormView_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormView createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormView_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormView wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_FormView_Collection wakeUpCollection($rows)
	 */
	class FormViewTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_FormView_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_FormView_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView_Collection fetchCollection()
	 */
	class EO_FormView_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_FormView_Collection wakeUpCollection($rows)
	 */
	class EO_FormView_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\PresetFieldTable:crm/lib/webform/internals/presetfield.php:230aae79ff114b170a3c5ea67aa50224 */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_PresetField
	 * @see \Bitrix\Crm\WebForm\Internals\PresetFieldTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField setFormId(\int|\Bitrix\Main\DB\SqlExpression $formId)
	 * @method bool hasFormId()
	 * @method bool isFormIdFilled()
	 * @method bool isFormIdChanged()
	 * @method \string getEntityName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField setEntityName(\string|\Bitrix\Main\DB\SqlExpression $entityName)
	 * @method bool hasEntityName()
	 * @method bool isEntityNameFilled()
	 * @method bool isEntityNameChanged()
	 * @method \string remindActualEntityName()
	 * @method \string requireEntityName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField resetEntityName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField unsetEntityName()
	 * @method \string fillEntityName()
	 * @method \string getFieldName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField setFieldName(\string|\Bitrix\Main\DB\SqlExpression $fieldName)
	 * @method bool hasFieldName()
	 * @method bool isFieldNameFilled()
	 * @method bool isFieldNameChanged()
	 * @method \string remindActualFieldName()
	 * @method \string requireFieldName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField resetFieldName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField unsetFieldName()
	 * @method \string fillFieldName()
	 * @method \string getValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField setValue(\string|\Bitrix\Main\DB\SqlExpression $value)
	 * @method bool hasValue()
	 * @method bool isValueFilled()
	 * @method bool isValueChanged()
	 * @method \string remindActualValue()
	 * @method \string requireValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField resetValue()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField unsetValue()
	 * @method \string fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_PresetField wakeUp($data)
	 */
	class EO_PresetField {
		/* @var \Bitrix\Crm\WebForm\Internals\PresetFieldTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\PresetFieldTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_PresetField_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getFormIdList()
	 * @method \string[] getEntityNameList()
	 * @method \string[] fillEntityName()
	 * @method \string[] getFieldNameList()
	 * @method \string[] fillFieldName()
	 * @method \string[] getValueList()
	 * @method \string[] fillValue()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_PresetField $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_PresetField $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_PresetField $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_PresetField_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_PresetField_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\PresetFieldTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\PresetFieldTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_PresetField_Query query()
	 * @method static EO_PresetField_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_PresetField_Result getById($id)
	 * @method static EO_PresetField_Result getList(array $parameters = array())
	 * @method static EO_PresetField_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_PresetField createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_PresetField_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_PresetField wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_PresetField_Collection wakeUpCollection($rows)
	 */
	class PresetFieldTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_PresetField_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_PresetField_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField_Collection fetchCollection()
	 */
	class EO_PresetField_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_PresetField_Collection wakeUpCollection($rows)
	 */
	class EO_PresetField_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\QueueTable:crm/lib/webform/internals/queue.php:c532d8dc8700be79e3f8fe2c8a36a2ac */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_Queue
	 * @see \Bitrix\Crm\WebForm\Internals\QueueTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \int getFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue setFormId(\int|\Bitrix\Main\DB\SqlExpression $formId)
	 * @method bool hasFormId()
	 * @method bool isFormIdFilled()
	 * @method bool isFormIdChanged()
	 * @method \int remindActualFormId()
	 * @method \int requireFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue resetFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue unsetFormId()
	 * @method \int fillFormId()
	 * @method \int getUserId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue setUserId(\int|\Bitrix\Main\DB\SqlExpression $userId)
	 * @method bool hasUserId()
	 * @method bool isUserIdFilled()
	 * @method bool isUserIdChanged()
	 * @method \int remindActualUserId()
	 * @method \int requireUserId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue resetUserId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue unsetUserId()
	 * @method \int fillUserId()
	 * @method \boolean getWorkTime()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue setWorkTime(\boolean|\Bitrix\Main\DB\SqlExpression $workTime)
	 * @method bool hasWorkTime()
	 * @method bool isWorkTimeFilled()
	 * @method bool isWorkTimeChanged()
	 * @method \boolean remindActualWorkTime()
	 * @method \boolean requireWorkTime()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue resetWorkTime()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue unsetWorkTime()
	 * @method \boolean fillWorkTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Queue wakeUp($data)
	 */
	class EO_Queue {
		/* @var \Bitrix\Crm\WebForm\Internals\QueueTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\QueueTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_Queue_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \int[] getFormIdList()
	 * @method \int[] fillFormId()
	 * @method \int[] getUserIdList()
	 * @method \int[] fillUserId()
	 * @method \boolean[] getWorkTimeList()
	 * @method \boolean[] fillWorkTime()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_Queue $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_Queue $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_Queue $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Queue_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Queue_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\QueueTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\QueueTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_Queue_Query query()
	 * @method static EO_Queue_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Queue_Result getById($id)
	 * @method static EO_Queue_Result getList(array $parameters = array())
	 * @method static EO_Queue_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Queue createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Queue_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Queue wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Queue_Collection wakeUpCollection($rows)
	 */
	class QueueTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Queue_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Queue_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue_Collection fetchCollection()
	 */
	class EO_Queue_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Queue_Collection wakeUpCollection($rows)
	 */
	class EO_Queue_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\ResultTable:crm/lib/webform/internals/result.php:c079579d7dc45eb320e2a5823f9f409b */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_Result
	 * @see \Bitrix\Crm\WebForm\Internals\ResultTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \Bitrix\Main\Type\Date getDateInsert()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result setDateInsert(\Bitrix\Main\Type\Date|\Bitrix\Main\DB\SqlExpression $dateInsert)
	 * @method bool hasDateInsert()
	 * @method bool isDateInsertFilled()
	 * @method bool isDateInsertChanged()
	 * @method \Bitrix\Main\Type\Date remindActualDateInsert()
	 * @method \Bitrix\Main\Type\Date requireDateInsert()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result resetDateInsert()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result unsetDateInsert()
	 * @method \Bitrix\Main\Type\Date fillDateInsert()
	 * @method \int getFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result setFormId(\int|\Bitrix\Main\DB\SqlExpression $formId)
	 * @method bool hasFormId()
	 * @method bool isFormIdFilled()
	 * @method bool isFormIdChanged()
	 * @method \int remindActualFormId()
	 * @method \int requireFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result resetFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result unsetFormId()
	 * @method \int fillFormId()
	 * @method \string getOriginId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result setOriginId(\string|\Bitrix\Main\DB\SqlExpression $originId)
	 * @method bool hasOriginId()
	 * @method bool isOriginIdFilled()
	 * @method bool isOriginIdChanged()
	 * @method \string remindActualOriginId()
	 * @method \string requireOriginId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result resetOriginId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result unsetOriginId()
	 * @method \string fillOriginId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form getForm()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form remindActualForm()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form requireForm()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result setForm(\Bitrix\Crm\WebForm\Internals\EO_Form $object)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result resetForm()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result unsetForm()
	 * @method bool hasForm()
	 * @method bool isFormFilled()
	 * @method bool isFormChanged()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form fillForm()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Result wakeUp($data)
	 */
	class EO_Result {
		/* @var \Bitrix\Crm\WebForm\Internals\ResultTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\ResultTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_Result_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \Bitrix\Main\Type\Date[] getDateInsertList()
	 * @method \Bitrix\Main\Type\Date[] fillDateInsert()
	 * @method \int[] getFormIdList()
	 * @method \int[] fillFormId()
	 * @method \string[] getOriginIdList()
	 * @method \string[] fillOriginId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form[] getFormList()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result_Collection getFormCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Form_Collection fillForm()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_Result $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_Result $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_Result $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Result_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_Result_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\ResultTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\ResultTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_Result_Query query()
	 * @method static EO_Result_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_Result_Result getById($id)
	 * @method static EO_Result_Result getList(array $parameters = array())
	 * @method static EO_Result_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Result createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Result_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Result wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_Result_Collection wakeUpCollection($rows)
	 */
	class ResultTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_Result_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_Result_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result_Collection fetchCollection()
	 */
	class EO_Result_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_Result_Collection wakeUpCollection($rows)
	 */
	class EO_Result_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\WebForm\Internals\ResultEntityTable:crm/lib/webform/internals/resultentity.php:24ad7ee74214768e470d6a57b0170cbb */
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_ResultEntity
	 * @see \Bitrix\Crm\WebForm\Internals\ResultEntityTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getFormId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity setFormId(\int|\Bitrix\Main\DB\SqlExpression $formId)
	 * @method bool hasFormId()
	 * @method bool isFormIdFilled()
	 * @method bool isFormIdChanged()
	 * @method \int getResultId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity setResultId(\int|\Bitrix\Main\DB\SqlExpression $resultId)
	 * @method bool hasResultId()
	 * @method bool isResultIdFilled()
	 * @method bool isResultIdChanged()
	 * @method \string getEntityName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity setEntityName(\string|\Bitrix\Main\DB\SqlExpression $entityName)
	 * @method bool hasEntityName()
	 * @method bool isEntityNameFilled()
	 * @method bool isEntityNameChanged()
	 * @method \string remindActualEntityName()
	 * @method \string requireEntityName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity resetEntityName()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity unsetEntityName()
	 * @method \string fillEntityName()
	 * @method \int getItemId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity setItemId(\int|\Bitrix\Main\DB\SqlExpression $itemId)
	 * @method bool hasItemId()
	 * @method bool isItemIdFilled()
	 * @method bool isItemIdChanged()
	 * @method \int remindActualItemId()
	 * @method \int requireItemId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity resetItemId()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity unsetItemId()
	 * @method \int fillItemId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity set($fieldName, $value)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity reset($fieldName)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_ResultEntity wakeUp($data)
	 */
	class EO_ResultEntity {
		/* @var \Bitrix\Crm\WebForm\Internals\ResultEntityTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\ResultEntityTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * EO_ResultEntity_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getFormIdList()
	 * @method \int[] getResultIdList()
	 * @method \string[] getEntityNameList()
	 * @method \string[] fillEntityName()
	 * @method \int[] getItemIdList()
	 * @method \int[] fillItemId()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\WebForm\Internals\EO_ResultEntity $object)
	 * @method bool has(\Bitrix\Crm\WebForm\Internals\EO_ResultEntity $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity getByPrimary($primary)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity[] getAll()
	 * @method bool remove(\Bitrix\Crm\WebForm\Internals\EO_ResultEntity $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_ResultEntity_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_ResultEntity_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\WebForm\Internals\ResultEntityTable */
		static public $dataClass = '\Bitrix\Crm\WebForm\Internals\ResultEntityTable';
	}
}
namespace Bitrix\Crm\WebForm\Internals {
	/**
	 * @method static EO_ResultEntity_Query query()
	 * @method static EO_ResultEntity_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_ResultEntity_Result getById($id)
	 * @method static EO_ResultEntity_Result getList(array $parameters = array())
	 * @method static EO_ResultEntity_Entity getEntity()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_ResultEntity createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_ResultEntity_Collection createCollection()
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_ResultEntity wakeUpObject($row)
	 * @method static \Bitrix\Crm\WebForm\Internals\EO_ResultEntity_Collection wakeUpCollection($rows)
	 */
	class ResultEntityTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_ResultEntity_Result exec()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_ResultEntity_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity fetchObject()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity_Collection fetchCollection()
	 */
	class EO_ResultEntity_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity_Collection createCollection()
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity wakeUpObject($row)
	 * @method \Bitrix\Crm\WebForm\Internals\EO_ResultEntity_Collection wakeUpCollection($rows)
	 */
	class EO_ResultEntity_Entity extends \Bitrix\Main\ORM\Entity {}
}
/* ORMENTITYANNOTATION:Bitrix\Crm\Widget\Custom\Entity\SaleTargetTable:crm/lib/widget/custom/entity/saletarget.php:3b67b1a18feee5e8372356d743584719 */
namespace Bitrix\Crm\Widget\Custom\Entity {
	/**
	 * EO_SaleTarget
	 * @see \Bitrix\Crm\Widget\Custom\Entity\SaleTargetTable
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int getId()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setId(\int|\Bitrix\Main\DB\SqlExpression $id)
	 * @method bool hasId()
	 * @method bool isIdFilled()
	 * @method bool isIdChanged()
	 * @method \string getTypeId()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setTypeId(\string|\Bitrix\Main\DB\SqlExpression $typeId)
	 * @method bool hasTypeId()
	 * @method bool isTypeIdFilled()
	 * @method bool isTypeIdChanged()
	 * @method \string remindActualTypeId()
	 * @method \string requireTypeId()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetTypeId()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetTypeId()
	 * @method \string fillTypeId()
	 * @method \string getPeriodType()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setPeriodType(\string|\Bitrix\Main\DB\SqlExpression $periodType)
	 * @method bool hasPeriodType()
	 * @method bool isPeriodTypeFilled()
	 * @method bool isPeriodTypeChanged()
	 * @method \string remindActualPeriodType()
	 * @method \string requirePeriodType()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetPeriodType()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetPeriodType()
	 * @method \string fillPeriodType()
	 * @method \int getPeriodYear()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setPeriodYear(\int|\Bitrix\Main\DB\SqlExpression $periodYear)
	 * @method bool hasPeriodYear()
	 * @method bool isPeriodYearFilled()
	 * @method bool isPeriodYearChanged()
	 * @method \int remindActualPeriodYear()
	 * @method \int requirePeriodYear()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetPeriodYear()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetPeriodYear()
	 * @method \int fillPeriodYear()
	 * @method \int getPeriodHalf()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setPeriodHalf(\int|\Bitrix\Main\DB\SqlExpression $periodHalf)
	 * @method bool hasPeriodHalf()
	 * @method bool isPeriodHalfFilled()
	 * @method bool isPeriodHalfChanged()
	 * @method \int remindActualPeriodHalf()
	 * @method \int requirePeriodHalf()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetPeriodHalf()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetPeriodHalf()
	 * @method \int fillPeriodHalf()
	 * @method \int getPeriodQuarter()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setPeriodQuarter(\int|\Bitrix\Main\DB\SqlExpression $periodQuarter)
	 * @method bool hasPeriodQuarter()
	 * @method bool isPeriodQuarterFilled()
	 * @method bool isPeriodQuarterChanged()
	 * @method \int remindActualPeriodQuarter()
	 * @method \int requirePeriodQuarter()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetPeriodQuarter()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetPeriodQuarter()
	 * @method \int fillPeriodQuarter()
	 * @method \int getPeriodMonth()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setPeriodMonth(\int|\Bitrix\Main\DB\SqlExpression $periodMonth)
	 * @method bool hasPeriodMonth()
	 * @method bool isPeriodMonthFilled()
	 * @method bool isPeriodMonthChanged()
	 * @method \int remindActualPeriodMonth()
	 * @method \int requirePeriodMonth()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetPeriodMonth()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetPeriodMonth()
	 * @method \int fillPeriodMonth()
	 * @method \string getTargetType()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setTargetType(\string|\Bitrix\Main\DB\SqlExpression $targetType)
	 * @method bool hasTargetType()
	 * @method bool isTargetTypeFilled()
	 * @method bool isTargetTypeChanged()
	 * @method \string remindActualTargetType()
	 * @method \string requireTargetType()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetTargetType()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetTargetType()
	 * @method \string fillTargetType()
	 * @method \string getTargetGoal()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setTargetGoal(\string|\Bitrix\Main\DB\SqlExpression $targetGoal)
	 * @method bool hasTargetGoal()
	 * @method bool isTargetGoalFilled()
	 * @method bool isTargetGoalChanged()
	 * @method \string remindActualTargetGoal()
	 * @method \string requireTargetGoal()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetTargetGoal()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetTargetGoal()
	 * @method \string fillTargetGoal()
	 * @method \Bitrix\Main\Type\DateTime getCreated()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setCreated(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $created)
	 * @method bool hasCreated()
	 * @method bool isCreatedFilled()
	 * @method bool isCreatedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualCreated()
	 * @method \Bitrix\Main\Type\DateTime requireCreated()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetCreated()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetCreated()
	 * @method \Bitrix\Main\Type\DateTime fillCreated()
	 * @method \Bitrix\Main\Type\DateTime getModified()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setModified(\Bitrix\Main\Type\DateTime|\Bitrix\Main\DB\SqlExpression $modified)
	 * @method bool hasModified()
	 * @method bool isModifiedFilled()
	 * @method bool isModifiedChanged()
	 * @method \Bitrix\Main\Type\DateTime remindActualModified()
	 * @method \Bitrix\Main\Type\DateTime requireModified()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetModified()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetModified()
	 * @method \Bitrix\Main\Type\DateTime fillModified()
	 * @method \int getAuthorId()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setAuthorId(\int|\Bitrix\Main\DB\SqlExpression $authorId)
	 * @method bool hasAuthorId()
	 * @method bool isAuthorIdFilled()
	 * @method bool isAuthorIdChanged()
	 * @method \int remindActualAuthorId()
	 * @method \int requireAuthorId()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetAuthorId()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetAuthorId()
	 * @method \int fillAuthorId()
	 * @method \int getEditorId()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setEditorId(\int|\Bitrix\Main\DB\SqlExpression $editorId)
	 * @method bool hasEditorId()
	 * @method bool isEditorIdFilled()
	 * @method bool isEditorIdChanged()
	 * @method \int remindActualEditorId()
	 * @method \int requireEditorId()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetEditorId()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetEditorId()
	 * @method \int fillEditorId()
	 * @method \int getLeftBorder()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setLeftBorder(\int|\Bitrix\Main\DB\SqlExpression $leftBorder)
	 * @method bool hasLeftBorder()
	 * @method bool isLeftBorderFilled()
	 * @method bool isLeftBorderChanged()
	 * @method \int remindActualLeftBorder()
	 * @method \int requireLeftBorder()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetLeftBorder()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetLeftBorder()
	 * @method \int fillLeftBorder()
	 * @method \int getRightBorder()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget setRightBorder(\int|\Bitrix\Main\DB\SqlExpression $rightBorder)
	 * @method bool hasRightBorder()
	 * @method bool isRightBorderFilled()
	 * @method bool isRightBorderChanged()
	 * @method \int remindActualRightBorder()
	 * @method \int requireRightBorder()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget resetRightBorder()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unsetRightBorder()
	 * @method \int fillRightBorder()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @property-read array $primary
	 * @property-read int $state @see \Bitrix\Main\ORM\Objectify\State
	 * @property-read \Bitrix\Main\Type\Dictionary $customData
	 * @property \Bitrix\Main\Authentication\Context $authContext
	 * @method mixed get($fieldName)
	 * @method mixed remindActual($fieldName)
	 * @method mixed require($fieldName)
	 * @method bool has($fieldName)
	 * @method bool isFilled($fieldName)
	 * @method bool isChanged($fieldName)
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget set($fieldName, $value)
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget reset($fieldName)
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget unset($fieldName)
	 * @method void addTo($fieldName, $value)
	 * @method void removeFrom($fieldName, $value)
	 * @method void removeAll($fieldName)
	 * @method \Bitrix\Main\ORM\Data\Result delete()
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method mixed[] collectValues($valuesType = \Bitrix\Main\ORM\Objectify\Values::ALL, $fieldsMask = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL)
	 * @method \Bitrix\Main\ORM\Data\AddResult|\Bitrix\Main\ORM\Data\UpdateResult|\Bitrix\Main\ORM\Data\Result save()
	 * @method static \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget wakeUp($data)
	 */
	class EO_SaleTarget {
		/* @var \Bitrix\Crm\Widget\Custom\Entity\SaleTargetTable */
		static public $dataClass = '\Bitrix\Crm\Widget\Custom\Entity\SaleTargetTable';
		/**
		 * @param bool|array $setDefaultValues
		 */
		public function __construct($setDefaultValues = true) {}
	}
}
namespace Bitrix\Crm\Widget\Custom\Entity {
	/**
	 * EO_SaleTarget_Collection
	 *
	 * Custom methods:
	 * ---------------
	 *
	 * @method \int[] getIdList()
	 * @method \string[] getTypeIdList()
	 * @method \string[] fillTypeId()
	 * @method \string[] getPeriodTypeList()
	 * @method \string[] fillPeriodType()
	 * @method \int[] getPeriodYearList()
	 * @method \int[] fillPeriodYear()
	 * @method \int[] getPeriodHalfList()
	 * @method \int[] fillPeriodHalf()
	 * @method \int[] getPeriodQuarterList()
	 * @method \int[] fillPeriodQuarter()
	 * @method \int[] getPeriodMonthList()
	 * @method \int[] fillPeriodMonth()
	 * @method \string[] getTargetTypeList()
	 * @method \string[] fillTargetType()
	 * @method \string[] getTargetGoalList()
	 * @method \string[] fillTargetGoal()
	 * @method \Bitrix\Main\Type\DateTime[] getCreatedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillCreated()
	 * @method \Bitrix\Main\Type\DateTime[] getModifiedList()
	 * @method \Bitrix\Main\Type\DateTime[] fillModified()
	 * @method \int[] getAuthorIdList()
	 * @method \int[] fillAuthorId()
	 * @method \int[] getEditorIdList()
	 * @method \int[] fillEditorId()
	 * @method \int[] getLeftBorderList()
	 * @method \int[] fillLeftBorder()
	 * @method \int[] getRightBorderList()
	 * @method \int[] fillRightBorder()
	 *
	 * Common methods:
	 * ---------------
	 *
	 * @property-read \Bitrix\Main\ORM\Entity $entity
	 * @method void add(\Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget $object)
	 * @method bool has(\Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget $object)
	 * @method bool hasByPrimary($primary)
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget getByPrimary($primary)
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget[] getAll()
	 * @method bool remove(\Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget $object)
	 * @method void removeByPrimary($primary)
	 * @method void fill($fields = \Bitrix\Main\ORM\Fields\FieldTypeMask::ALL) flag or array of field names
	 * @method static \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget_Collection wakeUp($data)
	 * @method \Bitrix\Main\ORM\Data\Result save($ignoreEvents = false)
	 * @method void offsetSet() ArrayAccess
	 * @method void offsetExists() ArrayAccess
	 * @method void offsetUnset() ArrayAccess
	 * @method void offsetGet() ArrayAccess
	 * @method void rewind() Iterator
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget current() Iterator
	 * @method mixed key() Iterator
	 * @method void next() Iterator
	 * @method bool valid() Iterator
	 * @method int count() Countable
	 */
	class EO_SaleTarget_Collection implements \ArrayAccess, \Iterator, \Countable {
		/* @var \Bitrix\Crm\Widget\Custom\Entity\SaleTargetTable */
		static public $dataClass = '\Bitrix\Crm\Widget\Custom\Entity\SaleTargetTable';
	}
}
namespace Bitrix\Crm\Widget\Custom\Entity {
	/**
	 * @method static EO_SaleTarget_Query query()
	 * @method static EO_SaleTarget_Result getByPrimary($primary, array $parameters = array())
	 * @method static EO_SaleTarget_Result getById($id)
	 * @method static EO_SaleTarget_Result getList(array $parameters = array())
	 * @method static EO_SaleTarget_Entity getEntity()
	 * @method static \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget createObject($setDefaultValues = true)
	 * @method static \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget_Collection createCollection()
	 * @method static \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget wakeUpObject($row)
	 * @method static \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget_Collection wakeUpCollection($rows)
	 */
	class SaleTargetTable extends \Bitrix\Main\ORM\Data\DataManager {}
	/**
	 * Common methods:
	 * ---------------
	 *
	 * @method EO_SaleTarget_Result exec()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget fetchObject()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget_Collection fetchCollection()
	 *
	 * Custom methods:
	 * ---------------
	 *
	 */
	class EO_SaleTarget_Query extends \Bitrix\Main\ORM\Query\Query {}
	/**
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget fetchObject()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget_Collection fetchCollection()
	 */
	class EO_SaleTarget_Result extends \Bitrix\Main\ORM\Query\Result {}
	/**
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget createObject($setDefaultValues = true)
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget_Collection createCollection()
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget wakeUpObject($row)
	 * @method \Bitrix\Crm\Widget\Custom\Entity\EO_SaleTarget_Collection wakeUpCollection($rows)
	 */
	class EO_SaleTarget_Entity extends \Bitrix\Main\ORM\Entity {}
}