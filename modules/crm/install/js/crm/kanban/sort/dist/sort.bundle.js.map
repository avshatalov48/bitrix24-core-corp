{"version":3,"file":"sort.bundle.js","sources":["../src/type.js","../src/settings.js","../src/settings-controller.js","../src/sorter.js","../src/index.js"],"sourcesContent":["import { Loc } from \"main.core\";\n\n/**\n * @memberOf BX.Crm.Kanban.Sort\n */\nconst Type = {\n\tBY_ID: 'BY_ID',\n\tBY_LAST_ACTIVITY_TIME: 'BY_LAST_ACTIVITY_TIME',\n\n\tisDefined(type: string): boolean\n\t{\n\t\treturn (\n\t\t\ttype === this.BY_ID\n\t\t\t|| type === this.BY_LAST_ACTIVITY_TIME\n\t\t);\n\t},\n\n\tgetAll(): string[]\n\t{\n\t\treturn [\n\t\t\tthis.BY_ID,\n\t\t\tthis.BY_LAST_ACTIVITY_TIME,\n\t\t];\n\t},\n\n\tgetCaption(type: string): string\n\t{\n\t\tif (type === this.BY_ID)\n\t\t{\n\t\t\treturn Loc.getMessage('CRM_KANBAN_SORT_TYPE_BY_ID');\n\t\t}\n\t\telse if (type === this.BY_LAST_ACTIVITY_TIME)\n\t\t{\n\t\t\treturn Loc.getMessage('CRM_KANBAN_SORT_TYPE_BY_LAST_ACTIVITY_TIME');\n\t\t}\n\n\t\treturn '';\n\t},\n};\n\nObject.freeze(Type);\n\nexport { Type };\n","import { Type as SortType } from \"./type\";\nimport { Type } from \"main.core\";\n\n/**\n * @memberOf BX.CRM.Kanban.Sort.Settings\n */\nexport class Settings\n{\n\t#supportedTypes: string[];\n\t#currentType: string;\n\n\tconstructor(supportedTypes: string[], currentType: string)\n\t{\n\t\tsupportedTypes = Type.isArray(supportedTypes) ? supportedTypes : [];\n\t\tthis.#supportedTypes = supportedTypes.filter((type) => SortType.isDefined(type));\n\n\t\tif (this.#supportedTypes.length <= 0)\n\t\t{\n\t\t\tthrow new Error('No valid supported types provided');\n\t\t}\n\n\t\tif (!Type.isString(currentType) || !SortType.isDefined(currentType))\n\t\t{\n\t\t\tthrow new Error('currentType is not a valid sort type');\n\t\t}\n\t\tif (!this.#supportedTypes.includes(currentType))\n\t\t{\n\t\t\tthrow new Error('currentType is not supported')\n\t\t}\n\n\t\tthis.#currentType = currentType;\n\t}\n\n\tgetSupportedTypes(): string[]\n\t{\n\t\treturn this.#supportedTypes;\n\t}\n\n\tgetCurrentType(): string\n\t{\n\t\treturn this.#currentType;\n\t}\n\n\tstatic createFromJson(json: string): Settings\n\t{\n\t\tconst {supportedTypes, currentType} = JSON.parse(json);\n\n\t\treturn new Settings(supportedTypes, currentType);\n\t}\n}\n","import { Settings } from \"./settings\";\nimport { Type as SortType } from \"./type\";\nimport { Loc, Reflection } from \"main.core\";\nimport { BaseEvent } from \"main.core.events\";\nimport { MenuItem, MenuItemOptions } from \"main.popup\";\nimport { Restriction } from \"crm.kanban.restriction\";\n\nlet instance = null;\nconst NOT_SELECTED_CLASSNAME = 'menu-popup-item menu-popup-item-sort-field menu-popup-item-none';\nconst SELECTED_CLASSNAME = NOT_SELECTED_CLASSNAME + ' menu-popup-item-accept';\n\n/**\n * @memberOf BX.CRM.Kanban.Sort\n */\nexport class SettingsController\n{\n\t#grid: BX.CRM.Kanban.Grid;\n\t#settings: Settings;\n\n\t#isRequestRunning: boolean = false;\n\n\tstatic get Instance(): SettingsController\n\t{\n\t\tif ((window.top !== window) && Reflection.getClass('top.BX.CRM.Kanban.Sort.SettingsController'))\n\t\t{\n\t\t\treturn window.top.BX.CRM.Kanban.Sort.SettingsController;\n\t\t}\n\n\t\tif (!instance)\n\t\t{\n\t\t\tthrow new Error('SettingsController must be inited before use');\n\t\t}\n\n\t\treturn instance;\n\t}\n\n\tstatic init(grid: BX.CRM.Kanban.Grid, settings: Settings): void\n\t{\n\t\tif (instance)\n\t\t{\n\t\t\tconsole.warn('Attempt to re-init SettingsController');\n\n\t\t\treturn;\n\t\t}\n\n\t\tinstance = new SettingsController(grid, settings);\n\t}\n\n\tconstructor(grid: BX.CRM.Kanban.Grid, settings: Settings)\n\t{\n\t\tif (instance)\n\t\t{\n\t\t\tthrow new Error('SettingsController is a singleton, another instance exists already. Use Instance to access it');\n\t\t}\n\n\t\tif (!(grid instanceof BX.CRM.Kanban.Grid))\n\t\t{\n\t\t\tconsole.error(grid);\n\n\t\t\tthrow new Error('grid should be an instance of BX.CRM.Kanban.Grid');\n\t\t}\n\n\t\tthis.#grid = grid;\n\n\t\tif (!(settings instanceof Settings))\n\t\t{\n\t\t\tconsole.error(settings);\n\n\t\t\tthrow new Error('settings should be an instance of Settings');\n\t\t}\n\n\t\tthis.#settings = settings;\n\n\t\tthis.#bindEvents();\n\t}\n\n\t#bindEvents(): void\n\t{\n\t\tconst kanbanSettingsSubMenu: ?MenuItem = this.#grid.getSettingsButtonMenu()?.getMenuItem('crm-kanban-settings-sub-menu');\n\n\t\tif (\n\t\t\tkanbanSettingsSubMenu\n\t\t\t&& (this.#settings.getSupportedTypes().length > 1)\n\t\t\t&& Restriction.Instance.isSortTypeChangeAvailable()\n\t\t)\n\t\t{\n\t\t\tkanbanSettingsSubMenu.subscribe('SubMenu:onShow', (event: BaseEvent) => {\n\t\t\t\tconst menuItem: MenuItem = event.getTarget();\n\n\t\t\t\tconst sortItems: MenuItemOptions[] = [];\n\t\t\t\tfor (const sortType of this.#settings.getSupportedTypes())\n\t\t\t\t{\n\t\t\t\t\tsortItems.push({\n\t\t\t\t\t\ttext: SortType.getCaption(sortType),\n\t\t\t\t\t\tclassName: (sortType === this.#settings.getCurrentType()) ? SELECTED_CLASSNAME : NOT_SELECTED_CLASSNAME,\n\t\t\t\t\t\tonclick: (event: PointerEvent, targetItem: MenuItem) => {\n\t\t\t\t\t\t\ttargetItem.getMenuWindow()?.getRootMenuWindow()?.close();\n\n\t\t\t\t\t\t\tthis.#setCurrentSortType(sortType);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdisabled: this.#isRequestRunning,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst subMenu = menuItem.getSubMenu();\n\t\t\t\tsubMenu.addMenuItem({\n\t\t\t\t\ttext: Loc.getMessage('CRM_KANBAN_SORT_CAPTION'),\n\t\t\t\t\titems: sortItems,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t#setCurrentSortType(sortType: string): void\n\t{\n\t\tif (this.#isRequestRunning)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#isRequestRunning = true;\n\n\t\tthis.#grid.setCurrentSortType(sortType).then(() => {\n\t\t\t//save new current sort type\n\t\t\tthis.#settings = new Settings(\n\t\t\t\tthis.#settings.getSupportedTypes(),\n\t\t\t\tsortType,\n\t\t\t);\n\n\t\t\tthis.#grid.reload();\n\t\t}).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t}).finally(() => {\n\t\t\tthis.#isRequestRunning = false;\n\t\t});\n\t}\n\n\tgetCurrentSettings(): Settings\n\t{\n\t\treturn this.#settings;\n\t}\n}\n","import { Text, Type } from \"main.core\";\nimport { SortParams } from \"./sort-params\";\nimport { Type as SortType } from \"./type\";\nimport { SettingsController } from \"./settings-controller\";\n\n/**\n * @memberOf BX.CRM.Kanban.Sort\n */\nexport class Sorter\n{\n\t#sortType: string;\n\t#items: BX.CRM.Kanban.Item[];\n\n\tstatic createWithCurrentSortType(items: BX.CRM.Kanban.Item[]): Sorter\n\t{\n\t\treturn new Sorter(\n\t\t\tSettingsController.Instance.getCurrentSettings().getCurrentType(),\n\t\t\titems,\n\t\t);\n\t}\n\n\tconstructor(sortType: string, items: BX.CRM.Kanban.Item[])\n\t{\n\t\tif (!SortType.isDefined(sortType))\n\t\t{\n\t\t\tthrow new Error('Undefined sort type');\n\t\t}\n\t\tthis.#sortType = sortType;\n\n\t\tthis.#items = Type.isArray(items) ? items : [];\n\t}\n\n\t/**\n\t * Returns items sorted in descending order. Beginning of array - is column top, end - column bottom.\n\t *\n\t * @returns {BX.CRM.Kanban.Item[]}\n\t */\n\tgetSortedItems(): BX.CRM.Kanban.Item[]\n\t{\n\t\tlet extractValue: (BX.CRM.Kanban.Item) => number;\n\t\tif (this.#sortType === SortType.BY_ID)\n\t\t{\n\t\t\textractValue = this.#extractId;\n\t\t}\n\t\telse if (this.#sortType === SortType.BY_LAST_ACTIVITY_TIME)\n\t\t{\n\t\t\textractValue = this.#extractTimestamp;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new Error('Unknown sort type');\n\t\t}\n\n\t\tconst sortedItems = Array.from(this.#items);\n\n\t\tsortedItems.sort((left, right) => {\n\t\t\treturn extractValue(right) - extractValue(left);\n\t\t});\n\n\t\treturn sortedItems;\n\t}\n\n\t#extractId(item: BX.CRM.Kanban.Item): number\n\t{\n\t\treturn Text.toInteger(item.getData()?.sort?.id);\n\t}\n\n\t#extractTimestamp(item: BX.CRM.Kanban.Item): number\n\t{\n\t\treturn Text.toInteger(item.getData()?.sort?.lastActivityTimestamp);\n\t}\n\n\tcalcBeforeItem(item: BX.CRM.Kanban.Item): ?BX.CRM.Kanban.Item\n\t{\n\t\tconst sortParams: ?SortParams = item.getData().sort;\n\n\t\treturn Type.isPlainObject(sortParams) ? this.calcBeforeItemByParams(sortParams) : null;\n\t}\n\n\tcalcBeforeItemByParams(sort: SortParams): ?BX.CRM.Kanban.Item\n\t{\n\t\tconst id = Text.toInteger(sort?.id);\n\t\tconst lastActivityTimestamp = Text.toInteger(sort?.lastActivityTimestamp);\n\t\tif (id <= 0 || lastActivityTimestamp <= 0)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this.#sortType === SortType.BY_ID)\n\t\t{\n\t\t\treturn this.#calcById(id);\n\t\t}\n\t\telse if (this.#sortType === SortType.BY_LAST_ACTIVITY_TIME)\n\t\t{\n\t\t\treturn this.#calcByLastActivityTime(id, lastActivityTimestamp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new Error('Unknown sort type');\n\t\t}\n\t}\n\n\t#calcById(id: number): ?BX.CRM.Kanban.Item\n\t{\n\t\tconst notSortedItems = this.#items;\n\t\tfor (let index = 0; index < notSortedItems.length; index++)\n\t\t{\n\t\t\tconst item = notSortedItems[index];\n\t\t\tif (this.#extractId(item) === id)\n\t\t\t{\n\t\t\t\treturn this.#findFirstDifferentItem(id, notSortedItems, index);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t#calcByLastActivityTime(id: number, lastActivityTimestamp: number): ?BX.CRM.Kanban.Item\n\t{\n\t\tconst sortedItems = this.getSortedItems();\n\t\tfor (let index = 0; index < sortedItems.length; index++)\n\t\t{\n\t\t\tconst item = sortedItems[index];\n\t\t\tif (this.#extractTimestamp(item) <= lastActivityTimestamp)\n\t\t\t{\n\t\t\t\treturn this.#findFirstDifferentItem(id, sortedItems, index);\n\t\t\t}\n\t\t}\n\n\t\tif (sortedItems.length > 0)\n\t\t{\n\t\t\t// item should be placed at bottom\n\t\t\treturn sortedItems[sortedItems.length - 1];\n\t\t}\n\n\t\t// no items, place item on top\n\t\treturn null;\n\t}\n\n\t#findFirstDifferentItem(itemId: number, items: BX.CRM.Kanban.Item[], startIndex: number): ?BX.CRM.Kanban.Item\n\t{\n\t\tfor (let index = startIndex; index < items.length; index++)\n\t\t{\n\t\t\tconst item = items[index];\n\n\t\t\tif (itemId !== this.#extractId(item))\n\t\t\t{\n\t\t\t\treturn item;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","import { Reflection } from \"main.core\";\n\nimport { Sorter } from \"./sorter\";\nimport { Settings } from \"./settings\";\nimport { SettingsController } from \"./settings-controller\";\nimport { Type } from \"./type\";\nimport type { SortParams } from \"./sort-params\";\n\nconst namespace = Reflection.namespace('BX.CRM.Kanban.Sort');\nnamespace.Sorter = Sorter;\nnamespace.Settings = Settings;\nnamespace.SettingsController = SettingsController;\nnamespace.Type = Type;\n\nexport {\n\tSorter,\n\tSettings,\n\tSettingsController,\n\tType,\n};\n\nexport type {\n\tSortParams,\n};\n"],"names":["Type","BY_ID","BY_LAST_ACTIVITY_TIME","isDefined","type","getAll","getCaption","Loc","getMessage","Object","freeze","Settings","constructor","supportedTypes","currentType","isArray","filter","SortType","length","Error","isString","includes","getSupportedTypes","getCurrentType","createFromJson","json","JSON","parse","instance","NOT_SELECTED_CLASSNAME","SELECTED_CLASSNAME","SettingsController","Instance","window","top","Reflection","getClass","BX","CRM","Kanban","Sort","init","grid","settings","console","warn","Grid","error","getCurrentSettings","kanbanSettingsSubMenu","getSettingsButtonMenu","getMenuItem","Restriction","isSortTypeChangeAvailable","subscribe","event","menuItem","getTarget","sortItems","sortType","push","text","className","onclick","targetItem","getMenuWindow","getRootMenuWindow","close","disabled","subMenu","getSubMenu","addMenuItem","items","setCurrentSortType","then","reload","catch","finally","Sorter","createWithCurrentSortType","getSortedItems","extractValue","sortedItems","Array","from","sort","left","right","calcBeforeItem","item","sortParams","getData","isPlainObject","calcBeforeItemByParams","id","Text","toInteger","lastActivityTimestamp","notSortedItems","index","itemId","startIndex","namespace"],"mappings":";;;;;CAEA;CACA;CACA;;AACA,OAAMA,IAAI,GAAG;GACZC,KAAK,EAAE,OADK;GAEZC,qBAAqB,EAAE,uBAFX;;GAIZC,SAAS,CAACC,IAAD,EACT;KACC,OACCA,IAAI,KAAK,KAAKH,KAAd,IACGG,IAAI,KAAK,KAAKF,qBAFlB;IANW;;GAYZG,MAAM,GACN;KACC,OAAO,CACN,KAAKJ,KADC,EAEN,KAAKC,qBAFC,CAAP;IAdW;;GAoBZI,UAAU,CAACF,IAAD,EACV;KACC,IAAIA,IAAI,KAAK,KAAKH,KAAlB,EACA;OACC,OAAOM,aAAG,CAACC,UAAJ,CAAe,4BAAf,CAAP;MAFD,MAIK,IAAIJ,IAAI,KAAK,KAAKF,qBAAlB,EACL;OACC,OAAOK,aAAG,CAACC,UAAJ,CAAe,4CAAf,CAAP;;;KAGD,OAAO,EAAP;;;CA/BW,CAAb;CAmCAC,MAAM,CAACC,MAAP,CAAcV,IAAd;;CCrCA;CACA;CACA;;;;;;AACA,CAAO,MAAMW,QAAN,CACP;GAICC,WAAW,CAACC,cAAD,EAA2BC,WAA3B,EACX;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KACCD,cAAc,GAAGb,cAAI,CAACe,OAAL,CAAaF,cAAb,IAA+BA,cAA/B,GAAgD,EAAjE;KACA,kFAAuBA,cAAc,CAACG,MAAf,CAAuBZ,IAAD,IAAUa,IAAQ,CAACd,SAAT,CAAmBC,IAAnB,CAAhC,CAAvB;;KAEA,IAAI,gFAAqBc,MAArB,IAA+B,CAAnC,EACA;OACC,MAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;;;KAGD,IAAI,CAACnB,cAAI,CAACoB,QAAL,CAAcN,WAAd,CAAD,IAA+B,CAACG,IAAQ,CAACd,SAAT,CAAmBW,WAAnB,CAApC,EACA;OACC,MAAM,IAAIK,KAAJ,CAAU,sCAAV,CAAN;;;KAED,IAAI,CAAC,gFAAqBE,QAArB,CAA8BP,WAA9B,CAAL,EACA;OACC,MAAM,IAAIK,KAAJ,CAAU,8BAAV,CAAN;;;KAGD,4EAAoBL,WAApB;;;GAGDQ,iBAAiB,GACjB;KACC,+CAAO,IAAP;;;GAGDC,cAAc,GACd;KACC,+CAAO,IAAP;;;GAGoB,OAAdC,cAAc,CAACC,IAAD,EACrB;KACC,MAAM;OAACZ,cAAD;OAAiBC;SAAeY,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAtC;KAEA,OAAO,IAAId,QAAJ,CAAaE,cAAb,EAA6BC,WAA7B,CAAP;;;CAxCF;;CCAA,IAAIc,QAAQ,GAAG,IAAf;CACA,MAAMC,sBAAsB,GAAG,iEAA/B;CACA,MAAMC,kBAAkB,GAAGD,sBAAsB,GAAG,yBAApD;CAEA;CACA;CACA;;;;;;;;;;;;AACA,CAAO,MAAME,kBAAN,CACP;GAMoB,WAARC,QAAQ,GACnB;KACC,IAAKC,MAAM,CAACC,GAAP,KAAeD,MAAhB,IAA2BE,oBAAU,CAACC,QAAX,CAAoB,2CAApB,CAA/B,EACA;OACC,OAAOH,MAAM,CAACC,GAAP,CAAWG,EAAX,CAAcC,GAAd,CAAkBC,MAAlB,CAAyBC,IAAzB,CAA8BT,kBAArC;;;KAGD,IAAI,CAACH,QAAL,EACA;OACC,MAAM,IAAIT,KAAJ,CAAU,8CAAV,CAAN;;;KAGD,OAAOS,QAAP;;;GAGU,OAAJa,IAAI,CAACC,IAAD,EAA2BC,QAA3B,EACX;KACC,IAAIf,QAAJ,EACA;OACCgB,OAAO,CAACC,IAAR,CAAa,uCAAb;OAEA;;;KAGDjB,QAAQ,GAAG,IAAIG,kBAAJ,CAAuBW,IAAvB,EAA6BC,QAA7B,CAAX;;;GAGD/B,WAAW,CAAC8B,IAAD,EAA2BC,QAA3B,EACX;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA,OA9B6B;;;KA+B5B,IAAIf,QAAJ,EACA;OACC,MAAM,IAAIT,KAAJ,CAAU,+FAAV,CAAN;;;KAGD,IAAI,EAAEuB,IAAI,YAAYL,EAAE,CAACC,GAAH,CAAOC,MAAP,CAAcO,IAAhC,CAAJ,EACA;OACCF,OAAO,CAACG,KAAR,CAAcL,IAAd;OAEA,MAAM,IAAIvB,KAAJ,CAAU,kDAAV,CAAN;;;KAGD,8DAAauB,IAAb;;KAEA,IAAI,EAAEC,QAAQ,YAAYhC,QAAtB,CAAJ,EACA;OACCiC,OAAO,CAACG,KAAR,CAAcJ,QAAd;OAEA,MAAM,IAAIxB,KAAJ,CAAU,4CAAV,CAAN;;;KAGD,sEAAiBwB,QAAjB;;KAEA;;;GAgEDK,kBAAkB,GAClB;KACC,+CAAO,IAAP;;;CA5HF;;yBA8DC;GAAA;;GACC,MAAMC,qBAAgC,4BAAG,4DAAWC,qBAAX,EAAH,qBAAG,sBAAoCC,WAApC,CAAgD,8BAAhD,CAAzC;;GAEA,IACCF,qBAAqB,IACjB,oEAAe3B,iBAAf,GAAmCJ,MAAnC,GAA4C,CADhD,IAEGkC,kCAAW,CAACpB,QAAZ,CAAqBqB,yBAArB,EAHJ,EAKA;KACCJ,qBAAqB,CAACK,SAAtB,CAAgC,gBAAhC,EAAmDC,KAAD,IAAsB;OACvE,MAAMC,QAAkB,GAAGD,KAAK,CAACE,SAAN,EAA3B;OAEA,MAAMC,SAA4B,GAAG,EAArC;;OACA,KAAK,MAAMC,QAAX,IAAuB,oEAAerC,iBAAf,EAAvB,EACA;SACCoC,SAAS,CAACE,IAAV,CAAe;WACdC,IAAI,EAAE5C,IAAQ,CAACX,UAAT,CAAoBqD,QAApB,CADQ;WAEdG,SAAS,EAAGH,QAAQ,KAAK,oEAAepC,cAAf,EAAd,GAAiDO,kBAAjD,GAAsED,sBAFnE;WAGdkC,OAAO,EAAE,CAACR,KAAD,EAAsBS,UAAtB,KAA+C;aAAA;;aACvD,yBAAAA,UAAU,CAACC,aAAX,uEAA4BC,iBAA5B,8CAAiDC,KAAjD;;aAEA,wFAAyBR,QAAzB;YANa;WAQdS,QAAQ,0CAAE,IAAF;UART;;;OAYD,MAAMC,OAAO,GAAGb,QAAQ,CAACc,UAAT,EAAhB;OACAD,OAAO,CAACE,WAAR,CAAoB;SACnBV,IAAI,EAAEtD,aAAG,CAACC,UAAJ,CAAe,yBAAf,CADa;SAEnBgE,KAAK,EAAEd;QAFR;MAnBD;;CAyBD;;+BAEmBC,UACpB;GACC,4CAAI,IAAJ,yCACA;KACC;;;GAGD,sFAAyB,IAAzB;;GAEA,4DAAWc,kBAAX,CAA8Bd,QAA9B,EAAwCe,IAAxC,CAA6C,MAAM;;KAElD,sEAAiB,IAAI/D,QAAJ,CAChB,oEAAeW,iBAAf,EADgB,EAEhBqC,QAFgB,CAAjB;;KAKA,4DAAWgB,MAAX;IAPD,EAQGC,KARH,CAQU7B,KAAD,IAAW;KACnBH,OAAO,CAACG,KAAR,CAAcA,KAAd;IATD,EAUG8B,OAVH,CAUW,MAAM;KAChB,sFAAyB,KAAzB;IAXD;CAaA;;CClIF;CACA;CACA;;;;;;;;;;;;;;;;AACA,CAAO,MAAMC,MAAN,CACP;GAIiC,OAAzBC,yBAAyB,CAACP,KAAD,EAChC;KACC,OAAO,IAAIM,MAAJ,CACN/C,kBAAkB,CAACC,QAAnB,CAA4BgB,kBAA5B,GAAiDzB,cAAjD,EADM,EAENiD,KAFM,CAAP;;;GAMD5D,WAAW,CAAC+C,QAAD,EAAmBa,OAAnB,EACX;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;;KAAA;OAAA;OAAA;;KAAA;OAAA;OAAA;;;KACC,IAAI,CAACvD,IAAQ,CAACd,SAAT,CAAmBwD,QAAnB,CAAL,EACA;OACC,MAAM,IAAIxC,KAAJ,CAAU,qBAAV,CAAN;;;KAED,sEAAiBwC,QAAjB;KAEA,gEAAc3D,cAAI,CAACe,OAAL,CAAayD,OAAb,IAAsBA,OAAtB,GAA8B,EAA5C;;;CAIF;CACA;CACA;CACA;;;GACCQ,cAAc,GACd;KACC,IAAIC,YAAJ;;KACA,IAAI,wEAAmBhE,IAAQ,CAAChB,KAAhC,EACA;OACCgF,YAAY,2CAAG,IAAH,yBAAZ;MAFD,MAIK,IAAI,wEAAmBhE,IAAQ,CAACf,qBAAhC,EACL;OACC+E,YAAY,2CAAG,IAAH,uCAAZ;MAFI,MAKL;OACC,MAAM,IAAI9D,KAAJ,CAAU,mBAAV,CAAN;;;KAGD,MAAM+D,WAAW,GAAGC,KAAK,CAACC,IAAN,yCAAW,IAAX,kBAApB;KAEAF,WAAW,CAACG,IAAZ,CAAiB,CAACC,IAAD,EAAOC,KAAP,KAAiB;OACjC,OAAON,YAAY,CAACM,KAAD,CAAZ,GAAsBN,YAAY,CAACK,IAAD,CAAzC;MADD;KAIA,OAAOJ,WAAP;;;GAaDM,cAAc,CAACC,IAAD,EACd;KACC,MAAMC,UAAuB,GAAGD,IAAI,CAACE,OAAL,GAAeN,IAA/C;KAEA,OAAOrF,cAAI,CAAC4F,aAAL,CAAmBF,UAAnB,IAAiC,KAAKG,sBAAL,CAA4BH,UAA5B,CAAjC,GAA2E,IAAlF;;;GAGDG,sBAAsB,CAACR,IAAD,EACtB;KACC,MAAMS,EAAE,GAAGC,cAAI,CAACC,SAAL,CAAeX,IAAf,oBAAeA,IAAI,CAAES,EAArB,CAAX;KACA,MAAMG,qBAAqB,GAAGF,cAAI,CAACC,SAAL,CAAeX,IAAf,oBAAeA,IAAI,CAAEY,qBAArB,CAA9B;;KACA,IAAIH,EAAE,IAAI,CAAN,IAAWG,qBAAqB,IAAI,CAAxC,EACA;OACC,OAAO,IAAP;;;KAGD,IAAI,wEAAmBhF,IAAQ,CAAChB,KAAhC,EACA;OACC,+CAAO,IAAP,wBAAsB6F,EAAtB;MAFD,MAIK,IAAI,wEAAmB7E,IAAQ,CAACf,qBAAhC,EACL;OACC,+CAAO,IAAP,oDAAoC4F,EAApC,EAAwCG,qBAAxC;MAFI,MAKL;OACC,MAAM,IAAI9E,KAAJ,CAAU,mBAAV,CAAN;;;;CAzFH;;sBAqDYsE,MACX;GAAA;;GACC,OAAOM,cAAI,CAACC,SAAL,kBAAeP,IAAI,CAACE,OAAL,EAAf,2CAAe,cAAgBN,IAA/B,qBAAe,mBAAsBS,EAArC,CAAP;CACA;;6BAEiBL,MAClB;GAAA;;GACC,OAAOM,cAAI,CAACC,SAAL,mBAAeP,IAAI,CAACE,OAAL,EAAf,4CAAe,eAAgBN,IAA/B,qBAAe,oBAAsBY,qBAArC,CAAP;CACA;;qBAgCSH,IACV;GACC,MAAMI,cAAc,2CAAG,IAAH,iBAApB;;GACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,cAAc,CAAChF,MAA3C,EAAmDiF,KAAK,EAAxD,EACA;KACC,MAAMV,IAAI,GAAGS,cAAc,CAACC,KAAD,CAA3B;;KACA,IAAI,sEAAgBV,IAAhB,MAA0BK,EAA9B,EACA;OACC,+CAAO,IAAP,oDAAoCA,EAApC,EAAwCI,cAAxC,EAAwDC,KAAxD;;;;GAIF,OAAO,IAAP;CACA;;mCAEuBL,IAAYG,uBACpC;GACC,MAAMf,WAAW,GAAG,KAAKF,cAAL,EAApB;;GACA,KAAK,IAAImB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGjB,WAAW,CAAChE,MAAxC,EAAgDiF,KAAK,EAArD,EACA;KACC,MAAMV,IAAI,GAAGP,WAAW,CAACiB,KAAD,CAAxB;;KACA,IAAI,oFAAuBV,IAAvB,KAAgCQ,qBAApC,EACA;OACC,+CAAO,IAAP,oDAAoCH,EAApC,EAAwCZ,WAAxC,EAAqDiB,KAArD;;;;GAIF,IAAIjB,WAAW,CAAChE,MAAZ,GAAqB,CAAzB,EACA;;KAEC,OAAOgE,WAAW,CAACA,WAAW,CAAChE,MAAZ,GAAqB,CAAtB,CAAlB;IAdF;;;GAkBC,OAAO,IAAP;CACA;;mCAEuBkF,QAAgB5B,OAA6B6B,YACrE;GACC,KAAK,IAAIF,KAAK,GAAGE,UAAjB,EAA6BF,KAAK,GAAG3B,KAAK,CAACtD,MAA3C,EAAmDiF,KAAK,EAAxD,EACA;KACC,MAAMV,IAAI,GAAGjB,KAAK,CAAC2B,KAAD,CAAlB;;KAEA,IAAIC,MAAM,6CAAK,IAAL,0BAAqBX,IAArB,CAAV,EACA;OACC,OAAOA,IAAP;;;;GAIF,OAAO,IAAP;CACA;;CChJF,MAAMa,SAAS,GAAGnE,oBAAU,CAACmE,SAAX,CAAqB,oBAArB,CAAlB;CACAA,SAAS,CAACxB,MAAV,GAAmBA,MAAnB;CACAwB,SAAS,CAAC3F,QAAV,GAAqBA,QAArB;CACA2F,SAAS,CAACvE,kBAAV,GAA+BA,kBAA/B;CACAuE,SAAS,CAACtG,IAAV,GAAiBA,IAAjB;;;;;;;;;;;"}