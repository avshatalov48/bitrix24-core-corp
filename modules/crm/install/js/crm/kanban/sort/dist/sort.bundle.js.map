{"version":3,"file":"sort.bundle.js","sources":["../src/type.js","../src/settings.js","../src/settings-controller.js","../src/sorter.js","../src/index.js"],"sourcesContent":["/**\n * @memberOf BX.Crm.Kanban.Sort\n */\nconst Type = {\n\tBY_ID: 'BY_ID',\n\tBY_LAST_ACTIVITY_TIME: 'BY_LAST_ACTIVITY_TIME',\n\n\tisDefined(type: string): boolean\n\t{\n\t\treturn (\n\t\t\ttype === this.BY_ID\n\t\t\t|| type === this.BY_LAST_ACTIVITY_TIME\n\t\t);\n\t},\n\n\tgetAll(): string[]\n\t{\n\t\treturn [\n\t\t\tthis.BY_ID,\n\t\t\tthis.BY_LAST_ACTIVITY_TIME,\n\t\t];\n\t},\n};\n\nObject.freeze(Type);\n\nexport { Type };\n","import { Type as SortType } from \"./type\";\nimport { Type } from \"main.core\";\n\n/**\n * @memberOf BX.CRM.Kanban.Sort.Settings\n */\nexport class Settings\n{\n\t#supportedTypes: string[];\n\t#currentType: string;\n\n\tconstructor(supportedTypes: string[], currentType: string)\n\t{\n\t\tsupportedTypes = Type.isArray(supportedTypes) ? supportedTypes : [];\n\t\tthis.#supportedTypes = supportedTypes.filter((type) => SortType.isDefined(type));\n\n\t\tif (this.#supportedTypes.length <= 0)\n\t\t{\n\t\t\tthrow new Error('No valid supported types provided');\n\t\t}\n\n\t\tif (!Type.isString(currentType) || !SortType.isDefined(currentType))\n\t\t{\n\t\t\tthrow new Error('currentType is not a valid sort type');\n\t\t}\n\t\tif (!this.#supportedTypes.includes(currentType))\n\t\t{\n\t\t\tthrow new Error('currentType is not supported')\n\t\t}\n\n\t\tthis.#currentType = currentType;\n\t}\n\n\tgetSupportedTypes(): string[]\n\t{\n\t\treturn this.#supportedTypes;\n\t}\n\n\tisTypeSupported(sortType: string): boolean\n\t{\n\t\treturn this.#supportedTypes.includes(sortType);\n\t}\n\n\tgetCurrentType(): string\n\t{\n\t\treturn this.#currentType;\n\t}\n\n\tstatic createFromJson(json: string): Settings\n\t{\n\t\tconst {supportedTypes, currentType} = JSON.parse(json);\n\n\t\treturn new Settings(supportedTypes, currentType);\n\t}\n}\n","import { Settings } from \"./settings\";\nimport { Reflection } from \"main.core\";\n\nlet instance = null;\n\n/**\n * @memberOf BX.CRM.Kanban.Sort\n */\nexport class SettingsController\n{\n\t#grid: BX.CRM.Kanban.Grid;\n\t#settings: Settings;\n\n\t#sortChangePromise: ?Promise = null;\n\n\tstatic get Instance(): SettingsController\n\t{\n\t\tif ((window.top !== window) && Reflection.getClass('top.BX.CRM.Kanban.Sort.SettingsController'))\n\t\t{\n\t\t\treturn window.top.BX.CRM.Kanban.Sort.SettingsController;\n\t\t}\n\n\t\tif (!instance)\n\t\t{\n\t\t\tthrow new Error('SettingsController must be inited before use');\n\t\t}\n\n\t\treturn instance;\n\t}\n\n\tstatic init(grid: BX.CRM.Kanban.Grid, settings: Settings): void\n\t{\n\t\tif (instance)\n\t\t{\n\t\t\tconsole.warn('Attempt to re-init SettingsController');\n\n\t\t\treturn;\n\t\t}\n\n\t\tinstance = new SettingsController(grid, settings);\n\t}\n\n\tconstructor(grid: BX.CRM.Kanban.Grid, settings: Settings)\n\t{\n\t\tif (instance)\n\t\t{\n\t\t\tthrow new Error('SettingsController is a singleton, another instance exists already. Use Instance to access it');\n\t\t}\n\n\t\tif (!(grid instanceof BX.CRM.Kanban.Grid))\n\t\t{\n\t\t\tconsole.error(grid);\n\n\t\t\tthrow new Error('grid should be an instance of BX.CRM.Kanban.Grid');\n\t\t}\n\n\t\tthis.#grid = grid;\n\n\t\tif (!(settings instanceof Settings))\n\t\t{\n\t\t\tconsole.error(settings);\n\n\t\t\tthrow new Error('settings should be an instance of Settings');\n\t\t}\n\n\t\tthis.#settings = settings;\n\t}\n\n\tsetCurrentSortType(sortType: string): Promise<void>\n\t{\n\t\tif (!this.#sortChangePromise)\n\t\t{\n\t\t\tthis.#sortChangePromise = this.#grid.setCurrentSortType(sortType).then(() => {\n\t\t\t\t//save new current sort type\n\t\t\t\tthis.#settings = new Settings(\n\t\t\t\t\tthis.#settings.getSupportedTypes(),\n\t\t\t\t\tsortType,\n\t\t\t\t);\n\n\t\t\t\tthis.#grid.reload();\n\t\t\t}).catch((error) => {\n\t\t\t\tconsole.error(error);\n\n\t\t\t\tthrow error;\n\t\t\t}).finally(() => {\n\t\t\t\tthis.#sortChangePromise = null;\n\t\t\t});\n\t\t}\n\n\t\treturn this.#sortChangePromise;\n\t}\n\n\tgetCurrentSettings(): Settings\n\t{\n\t\treturn this.#settings;\n\t}\n}\n","import { Text, Type } from \"main.core\";\nimport { SortParams } from \"./sort-params\";\nimport { Type as SortType } from \"./type\";\nimport { SettingsController } from \"./settings-controller\";\n\n/**\n * @memberOf BX.CRM.Kanban.Sort\n */\nexport class Sorter\n{\n\t#sortType: string;\n\t#items: BX.CRM.Kanban.Item[];\n\n\tstatic createWithCurrentSortType(items: BX.CRM.Kanban.Item[]): Sorter\n\t{\n\t\treturn new Sorter(\n\t\t\tSettingsController.Instance.getCurrentSettings().getCurrentType(),\n\t\t\titems,\n\t\t);\n\t}\n\n\tconstructor(sortType: string, items: BX.CRM.Kanban.Item[])\n\t{\n\t\tif (!SortType.isDefined(sortType))\n\t\t{\n\t\t\tthrow new Error('Undefined sort type');\n\t\t}\n\t\tthis.#sortType = sortType;\n\n\t\tthis.#items = Type.isArray(items) ? items : [];\n\t}\n\n\tgetSortType()\n\t{\n\t\treturn this.#sortType;\n\t}\n\n\t/**\n\t * Returns items sorted in descending order. Beginning of array - is column top, end - column bottom.\n\t *\n\t * @returns {BX.CRM.Kanban.Item[]}\n\t */\n\tgetSortedItems(): BX.CRM.Kanban.Item[]\n\t{\n\t\tlet extractValue: (BX.CRM.Kanban.Item) => number;\n\t\tif (this.#sortType === SortType.BY_ID)\n\t\t{\n\t\t\textractValue = this.#extractId;\n\t\t}\n\t\telse if (this.#sortType === SortType.BY_LAST_ACTIVITY_TIME)\n\t\t{\n\t\t\textractValue = this.#extractTimestamp;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new Error('Unknown sort type');\n\t\t}\n\n\t\tconst sortedItems = Array.from(this.#items);\n\n\t\tsortedItems.sort((left, right) => {\n\t\t\treturn extractValue(right) - extractValue(left);\n\t\t});\n\n\t\treturn sortedItems;\n\t}\n\n\t#extractId(item: BX.CRM.Kanban.Item): number\n\t{\n\t\treturn Text.toInteger(item.getData()?.sort?.id);\n\t}\n\n\t#extractTimestamp(item: BX.CRM.Kanban.Item): number\n\t{\n\t\treturn Text.toInteger(item.getData()?.sort?.lastActivityTimestamp);\n\t}\n\n\tcalcBeforeItem(item: BX.CRM.Kanban.Item): ?BX.CRM.Kanban.Item\n\t{\n\t\tconst sortParams: ?SortParams = item.getData().sort;\n\n\t\treturn Type.isPlainObject(sortParams) ? this.calcBeforeItemByParams(sortParams) : null;\n\t}\n\n\tcalcBeforeItemByParams(sort: SortParams): ?BX.CRM.Kanban.Item\n\t{\n\t\tconst id = Text.toInteger(sort?.id);\n\t\tif (id <= 0)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this.#sortType === SortType.BY_ID)\n\t\t{\n\t\t\treturn this.#calcById(id);\n\t\t}\n\t\telse if (this.#sortType === SortType.BY_LAST_ACTIVITY_TIME)\n\t\t{\n\t\t\tconst lastActivityTimestamp = Text.toInteger(sort?.lastActivityTimestamp);\n\t\t\tif (lastActivityTimestamp <= 0)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.#calcByLastActivityTime(id, lastActivityTimestamp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new Error('Unknown sort type');\n\t\t}\n\t}\n\n\t#calcById(id: number): ?BX.CRM.Kanban.Item\n\t{\n\t\tconst notSortedItems = this.#items;\n\t\tfor (let index = 0; index < notSortedItems.length; index++)\n\t\t{\n\t\t\tconst item = notSortedItems[index];\n\t\t\tif (this.#extractId(item) === id)\n\t\t\t{\n\t\t\t\treturn this.#findFirstDifferentItem(id, notSortedItems, index);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t#calcByLastActivityTime(id: number, lastActivityTimestamp: number): ?BX.CRM.Kanban.Item\n\t{\n\t\tconst sortedItems = this.getSortedItems();\n\t\tfor (let index = 0; index < sortedItems.length; index++)\n\t\t{\n\t\t\tconst item = sortedItems[index];\n\t\t\tif (this.#extractTimestamp(item) <= lastActivityTimestamp)\n\t\t\t{\n\t\t\t\treturn this.#findFirstDifferentItem(id, sortedItems, index);\n\t\t\t}\n\t\t}\n\n\t\tif (sortedItems.length > 0)\n\t\t{\n\t\t\t// item should be placed at bottom\n\t\t\treturn sortedItems[sortedItems.length - 1];\n\t\t}\n\n\t\t// no items, place item on top\n\t\treturn null;\n\t}\n\n\t#findFirstDifferentItem(itemId: number, items: BX.CRM.Kanban.Item[], startIndex: number): ?BX.CRM.Kanban.Item\n\t{\n\t\tfor (let index = startIndex; index < items.length; index++)\n\t\t{\n\t\t\tconst item = items[index];\n\n\t\t\tif (itemId !== this.#extractId(item))\n\t\t\t{\n\t\t\t\treturn item;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","import { Reflection } from \"main.core\";\n\nimport { Sorter } from \"./sorter\";\nimport { Settings } from \"./settings\";\nimport { SettingsController } from \"./settings-controller\";\nimport { Type } from \"./type\";\nimport type { SortParams } from \"./sort-params\";\n\nconst namespace = Reflection.namespace('BX.CRM.Kanban.Sort');\nnamespace.Sorter = Sorter;\nnamespace.Settings = Settings;\nnamespace.SettingsController = SettingsController;\nnamespace.Type = Type;\n\nexport {\n\tSorter,\n\tSettings,\n\tSettingsController,\n\tType,\n};\n\nexport type {\n\tSortParams,\n};\n"],"names":["Type","BY_ID","BY_LAST_ACTIVITY_TIME","isDefined","type","getAll","Object","freeze","Settings","constructor","supportedTypes","currentType","isArray","filter","SortType","length","Error","isString","includes","getSupportedTypes","isTypeSupported","sortType","getCurrentType","createFromJson","json","JSON","parse","instance","SettingsController","Instance","window","top","Reflection","getClass","BX","CRM","Kanban","Sort","init","grid","settings","console","warn","Grid","error","setCurrentSortType","then","reload","catch","finally","getCurrentSettings","Sorter","createWithCurrentSortType","items","getSortType","getSortedItems","extractValue","sortedItems","Array","from","sort","left","right","calcBeforeItem","item","sortParams","getData","isPlainObject","calcBeforeItemByParams","id","Text","toInteger","lastActivityTimestamp","notSortedItems","index","itemId","startIndex","namespace"],"mappings":"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"}