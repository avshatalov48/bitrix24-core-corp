{"version":3,"file":"datetime.bundle.js","sources":["../src/dictionary/timezone-offset.js","../src/timestamp-converter.js","../src/factory.js","../src/dictionary/format.js","../src/index.js"],"sourcesContent":["import { Loc, Text } from \"main.core\";\n\n/**\n * @memberOf BX.Crm.DateTime.Dictionary\n */\nconst TimezoneOffset = {\n\tSERVER_TO_UTC: Text.toInteger(Loc.getMessage('SERVER_TZ_OFFSET')),\n\tUSER_TO_SERVER: Text.toInteger(Loc.getMessage('USER_TZ_OFFSET')),\n\n\t// Date returns timezone offset in minutes by default, change it to seconds\n\t// Also offset is negative in UTC+ timezones and positive in UTC- timezones.\n\t// By convention Bitrix uses the opposite approach, so change offset sign.\n\tBROWSER_TO_UTC: - Text.toInteger((new Date()).getTimezoneOffset() * 60),\n};\n\nObject.freeze(TimezoneOffset);\n\nexport {\n\tTimezoneOffset,\n};\n","import { Loc, Text } from \"main.core\";\nimport { TimezoneOffset } from \"./dictionary/timezone-offset\";\n\n/**\n * @memberOf BX.Crm.DateTime\n */\nexport class TimestampConverter\n{\n\tstatic serverToUser(serverTimestamp: number): number\n\t{\n\t\tserverTimestamp = this.#normalizeTimestampFromArgs(serverTimestamp);\n\n\t\treturn serverTimestamp + TimezoneOffset.USER_TO_SERVER;\n\t}\n\n\tstatic userToServer(userTimestamp: number): number\n\t{\n\t\tuserTimestamp = this.#normalizeTimestampFromArgs(userTimestamp);\n\n\t\treturn userTimestamp - TimezoneOffset.USER_TO_SERVER;\n\t}\n\n\tstatic browserToUser(browserTimestamp: number): number\n\t{\n\t\tbrowserTimestamp = this.#normalizeTimestampFromArgs(browserTimestamp);\n\n\t\treturn browserTimestamp + TimezoneOffset.USER_TO_SERVER;\n\t}\n\n\tstatic browserToServer(browserTimestamp: number): number\n\t{\n\t\tbrowserTimestamp = this.#normalizeTimestampFromArgs(browserTimestamp);\n\n\t\treturn this.#browserToUtc(browserTimestamp) + TimezoneOffset.SERVER_TO_UTC;\n\t}\n\n\tstatic userToBrowser(userTimestamp: number): number\n\t{\n\t\tuserTimestamp = this.#normalizeTimestampFromArgs(userTimestamp);\n\n\t\treturn userTimestamp + TimezoneOffset.BROWSER_TO_UTC - TimezoneOffset.SERVER_TO_UTC - TimezoneOffset.USER_TO_SERVER;\n\t}\n\n\tstatic serverToBrowser(serverTimestamp: number): number\n\t{\n\t\tserverTimestamp = this.#normalizeTimestampFromArgs(serverTimestamp);\n\n\t\treturn serverTimestamp + TimezoneOffset.BROWSER_TO_UTC - TimezoneOffset.SERVER_TO_UTC;\n\t}\n\n\tstatic #browserToUtc(browserTimestamp: number): number\n\t{\n\t\tbrowserTimestamp = this.#normalizeTimestampFromArgs(browserTimestamp);\n\n\t\treturn browserTimestamp - TimezoneOffset.BROWSER_TO_UTC;\n\t}\n\n\tstatic #normalizeTimestampFromArgs(timestamp: any): number\n\t{\n\t\tconst normalized = Text.toInteger(timestamp);\n\t\tif (normalized < 0)\n\t\t{\n\t\t\tthrow new Error('BX.Crm.DateTime.TimestampConverter: input timestamp could not be negative');\n\t\t}\n\n\t\treturn normalized;\n\t}\n}\n","import { TimestampConverter } from \"./timestamp-converter\";\n\n/**\n * @memberOf BX.Crm.DateTime\n */\nexport class Factory\n{\n\t/**\n\t * Returns Date object with current time in user timezone.\n\t *\n\t * WARNING! In Bitrix user timezone !== browser timezone. Users can change their timezone from profile settings and\n\t * will be different from browser timezone.\n\t *\n\t * If you need to get 'now' in a user's perspective, use this method instead of 'new Date()'\n\t *\n\t * Note that 'getTimezoneOffset' will not return correct user timezone, its always returns browser offset\n\t *\n\t * @returns {Date}\n\t */\n\tstatic getUserNow(): Date\n\t{\n\t\tconst userTimestamp = TimestampConverter.browserToUser(this.#getBrowserNowTimestamp());\n\n\t\treturn new Date(userTimestamp * 1000);\n\t}\n\n\t/**\n\t * Returns Date object with current time in server timezone\n\t * Note that 'getTimezoneOffset' will not return correct server timezone, its always returns browser offset\n\t *\n\t * @returns {Date}\n\t */\n\tstatic getServerNow(): Date\n\t{\n\t\tconst serverTimestamp = TimestampConverter.browserToServer(this.#getBrowserNowTimestamp());\n\n\t\treturn new Date(serverTimestamp * 1000);\n\t}\n\n\tstatic createFromTimestampInUserTimezone(timestamp): Date\n\t{\n\t\tconst browserTimestamp = TimestampConverter.browserToUser(timestamp);\n\n\t\treturn new Date(browserTimestamp * 1000);\n\t}\n\n\tstatic createFromTimestampInServerTimezone(timestamp): Date\n\t{\n\t\tconst browserTimestamp = TimestampConverter.browserToServer(timestamp);\n\n\t\treturn new Date(browserTimestamp * 1000);\n\t}\n\n\tstatic #getBrowserNowTimestamp(): number\n\t{\n\t\treturn Math.floor(Date.now() / 1000);\n\t}\n}\n","import { Extension, Type } from \"main.core\";\nimport { DateTimeFormat } from \"main.date\";\n\n/**\n * Contains datetime formats for current culture.\n * See config.php of this extension for specific format details.\n * All formats are in BX.Main.DateTimeFormat format (de-facto - php format), even FORMAT_DATE and FORMAT_DATETIME\n *\n * @memberOf BX.Crm.DateTime.Dictionary\n */\nconst Format: {[key: string]: string} = {};\n\nconst formatsRaw = Extension.getSettings('crm.datetime').get('formats', {});\nfor (const name in formatsRaw)\n{\n\tif (formatsRaw.hasOwnProperty(name) && Type.isStringFilled(formatsRaw[name]))\n\t{\n\t\tlet value = formatsRaw[name];\n\t\tif (name === 'FORMAT_DATE' || name === 'FORMAT_DATETIME')\n\t\t{\n\t\t\tvalue = DateTimeFormat.convertBitrixFormat(value);\n\t\t}\n\n\t\tFormat[name] = value;\n\t}\n}\n\nObject.freeze(Format);\n\nexport {\n\tFormat,\n}\n","import { Reflection } from \"main.core\";\n\nimport { Factory } from \"./factory\";\nimport { TimestampConverter } from \"./timestamp-converter\";\nimport { TimezoneOffset } from \"./dictionary/timezone-offset\";\nimport { Format } from \"./dictionary/format\";\n\nconst namespace = Reflection.namespace('BX.Crm.DateTime');\n\nnamespace.Factory = Factory;\nnamespace.TimestampConverter = TimestampConverter;\nnamespace.Dictionary = {\n\tTimezoneOffset,\n\tFormat,\n};\n\nexport {\n\tFactory,\n\tTimestampConverter,\n\tTimezoneOffset,\n\tFormat,\n};\n"],"names":["TimezoneOffset","SERVER_TO_UTC","Text","toInteger","Loc","getMessage","USER_TO_SERVER","BROWSER_TO_UTC","Date","getTimezoneOffset","Object","freeze","TimestampConverter","serverToUser","serverTimestamp","userToServer","userTimestamp","browserToUser","browserTimestamp","browserToServer","userToBrowser","serverToBrowser","timestamp","normalized","Error","Factory","getUserNow","getServerNow","createFromTimestampInUserTimezone","createFromTimestampInServerTimezone","Math","floor","now","Format","formatsRaw","Extension","getSettings","get","name","hasOwnProperty","Type","isStringFilled","value","DateTimeFormat","convertBitrixFormat","namespace","Reflection","Dictionary"],"mappings":"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"}