this.BX=this.BX||{};(function(e,t){"use strict";function n(e,t){i(e,t);t.add(e)}function i(e,t){if(t.has(e)){throw new TypeError("Cannot initialize the same private elements twice on an object")}}function s(e,t,n){if(!t.has(e)){throw new TypeError("attempted to get private field on non-instance")}return n}var r=new WeakSet;var a=new WeakSet;var o=function(){function e(){babelHelpers.classCallCheck(this,e);n(this,a);n(this,r);this._id="";this._settings={};this._grid=null;this._kanban=null;this._entityTypeId=BX.CrmEntityType.enumeration.undefined;this._entityIds=null;this._errors=null;this._isRunning=false;this._documentUnloadHandler=BX.delegate(this.onDocumentUnload,this);this._requestCompleteHandler=BX.delegate(this.onRequestComplete,this);this._externalEventHandler=null}babelHelpers.createClass(e,[{key:"initialize",value:function e(n,i){this._id=t.Type.isStringFilled(n)?n:"crm_batch_merge_mgr_"+Math.random().toString().substring(2);this._settings=i?i:{};var s=BX.prop.getString(this._settings,"gridId",null);if(s&&BX.Main.gridManager){this._grid=BX.Main.gridManager.getInstanceById(s)}this._kanban=BX.prop.get(this._settings,"kanban",null);this._entityTypeId=BX.prop.getInteger(this._settings,"entityTypeId",BX.CrmEntityType.enumeration.undefined);this._errors=[]}},{key:"getId",value:function e(){return this._id}},{key:"getMessage",value:function e(t){var n;return(n=this.getMessageFromSettings(t))!==null&&n!==void 0?n:this.getMessageFromLocalization(t)}},{key:"getEntityIds",value:function e(){return this._entityIds}},{key:"getEntityTypeId",value:function e(){return this._entityTypeId}},{key:"getMessageFromSettings",value:function e(t){var n,i,s;return(n=(i=this._settings)===null||i===void 0?void 0:(s=i.messages)===null||s===void 0?void 0:s[t])!==null&&n!==void 0?n:null}},{key:"getMessageFromLocalization",value:function e(n){var i="CRM_BATCH_MERGER_MANAGER_#ENTITY_TYPE_NAME#_#NAME#".replace("#ENTITY_TYPE_NAME#",this.getMessageEntityTypeName()).replace("#NAME#",n.toUpperCase());return t.Loc.getMessage(i)}},{key:"getMessageEntityTypeName",value:function e(){var t=BX.CrmEntityType.isDynamicTypeByTypeId(this.getEntityTypeId())?BX.CrmEntityType.names.dynamic:BX.CrmEntityType.resolveName(this.getEntityTypeId());return t.toUpperCase()}},{key:"setEntityIds",value:function e(n){this._entityIds=t.Type.isArray(n)?n:[]}},{key:"resetEntityIds",value:function e(){this._entityIds=[]}},{key:"getErrors",value:function e(){return this._errors?this._errors:[]}},{key:"execute",value:function e(){var t=this._id.toLowerCase();var n=BX.Crm.ConfirmationDialog.get(t);if(!n){n=BX.Crm.ConfirmationDialog.create(t,{title:this.getMessage("title"),content:this.getMessage("confirmation")})}if(!n.isOpened()){n.open().then(function(e){if(!BX.prop.getBoolean(e,"cancel",true)){this.startRequest()}}.bind(this))}}},{key:"isRunning",value:function e(){return this._isRunning}},{key:"startRequest",value:function e(){if(this._isRunning){return}this._isRunning=true;this.disableItemsList();BX.bind(window,"beforeunload",this._documentUnloadHandler);var n={entityTypeId:this._entityTypeId,extras:BX.prop.getObject(this._settings,"extras",{})};if(t.Type.isArray(this._entityIds)&&this._entityIds.length>0){n["entityIds"]=this._entityIds}BX.ajax.runAction("crm.api.entity.mergeBatch",{data:{params:n}}).then(this._requestCompleteHandler)["catch"](this._requestCompleteHandler)}},{key:"disableItemsList",value:function e(){if(this._grid){this._grid.tableFade()}if(this._kanban){this._kanban.fadeOut()}}},{key:"enableItemsList",value:function e(){if(this._grid){this._grid.tableUnfade()}if(this._kanban){this._kanban.fadeIn()}}},{key:"reloadItemsList",value:function e(){if(this._grid){this._grid.reload()}if(this._kanban){this._kanban.reload()}}},{key:"onRequestComplete",value:function e(t){this.enableItemsList();BX.unbind(window,"beforeunload",this._documentUnloadHandler);this._isRunning=false;this._errors=[];var n=BX.prop.getString(t,"status","");var i=BX.prop.getObject(t,"data",{});if(n==="error"){if(BX.prop.getString(i,"STATUS","")==="CONFLICT"){this.openMerger();return}var s=BX.prop.getArray(t,"errors",[]);for(var r=0,a=s.length;r<a;r++){this._errors.push(BX.prop.getString(s[r],"message"))}}this.displaySummary();if(this._errors.length===0){window.setTimeout(this.complete.bind(this),0)}}},{key:"displaySummary",value:function e(){var t=[this.getMessage("summaryCaption")];if(this._errors.length>0){t.push(this.getMessage("summaryFailed").replace(/#number#/gi,this._entityIds.length));t=t.concat(this._errors)}else{t.push(this.getMessage("summarySucceeded").replace(/#number#/gi,this._entityIds.length))}BX.UI.Notification.Center.notify({content:t.join("<br/>"),position:"top-center",autoHideDelay:5e3})}},{key:"openMerger",value:function e(){this._contextId=this._id+"_"+BX.util.getRandomString(6).toUpperCase();BX.Crm.Page.open(s(this,r,l).call(this));if(!this._externalEventHandler){this._externalEventHandler=BX.delegate(this.onExternalEvent,this);BX.addCustomEvent(window,"onLocalStorageSet",this._externalEventHandler)}}},{key:"complete",value:function e(){BX.onCustomEvent(window,"BX.Crm.BatchMergeManager:onComplete",[this]);this.reloadItemsList()}},{key:"onDocumentUnload",value:function e(t){return t.returnValue=this.getMessage("windowCloseConfirm")}},{key:"onExternalEvent",value:function e(t){var n=BX.prop.getString(t,"key","");if(n!=="onCrmEntityMergeComplete"){return}var i=BX.prop.getObject(t,"value",{});if(this._contextId!==BX.prop.getString(i,"context","")){return}BX.removeCustomEvent(window,"onLocalStorageSet",this._externalEventHandler);this._externalEventHandler=null;this.displaySummary();window.setTimeout(this.complete.bind(this),0)}}],[{key:"getItem",value:function e(t){return BX.prop.get(this.items,t,null)}},{key:"create",value:function t(n,i){var s=new e;s.initialize(n,i);this.items[s.getId()]=s;return s}}]);return e}();function l(){var e=BX.prop.getString(this._settings,"mergerUrl",s(this,a,u).call(this));var n=new t.Uri(e);n.setQueryParams({externalContextId:this._contextId,id:this._entityIds});return n.toString()}function u(){var e=BX.CrmEntityType.resolveName(this._entityTypeId).toLowerCase();return"/crm/".concat(e,"/merge/")}o.messages={};o.items={};e.BatchMergeManager=o})(this.BX.Crm=this.BX.Crm||{},BX);
//# sourceMappingURL=manager.bundle.map.js