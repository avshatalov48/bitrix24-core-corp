this.BX=this.BX||{},function(e,t,s,i,o,l,a,n,r,d){"use strict";const c=e=>new Promise((t=>{setTimeout(t,e)})),u=async(e,t,s)=>{if(s<=0)return;const i=(t-e.scrollTop)/s*10;await c(10),e.scrollTop+=i,e.scrollTop!==t&&await u(e,t,s-10)},p={name:"CloseConfirm",data:()=>({messageBoxInstance:null,uniquePopupId:"ai-form-fill-feedback-popup_"+n.Text.getRandom(20).toLowerCase()}),methods:{...i.mapMutations(["setIsConfirmPopupShow"]),onMessageClose(e){e.uniquePopupId===this.uniquePopupId&&this.setIsConfirmPopupShow(!1)}},mounted(){this.messageBoxInstance=t.MessageBox.create({message:n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_CANCEL_CONFIRM_TEXT"),title:n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_CANCEL_CONFIRM_TITLE"),okCaption:n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_CANCEL_CONFIRM_CLOSE"),cancelCaption:n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_CANCEL_CONFIRM_CANCEL"),onOk:()=>{this.$Bitrix.eventEmitter.emit("crm:ai:form-fill:close-confirm:confirmClose",{})},onCancel:()=>{this.setIsConfirmPopupShow(!1)},buttons:BX.UI.Dialogs.MessageBoxButtons.OK_CANCEL,popupOptions:{targetContainer:this.$refs.closeConfirmRoot,id:this.uniquePopupId}}),n.addCustomEvent(window,"BX.Main.Popup:onClose",this.onMessageClose),this.messageBoxInstance.show()},unmounted(){this.messageBoxInstance&&this.messageBoxInstance.close(),n.removeCustomEvent(window,"BX.Main.Popup:onClose",this.onMessageClose)},template:'\n\t\t<div ref="closeConfirmRoot" class="crm-ai-form-fill__close-confirm"></div>\n\t'},b={name:"EntityEditorWrapper",computed:{...i.mapGetters(["mergeUuid"]),entityEditorContainerId(){return`crm-ai-merge-fields__container__${this.mergeUuid}_container`}},template:'<div v-bind:id="entityEditorContainerId"></div>'},m={name:"FeedbackMessage",data:()=>({messageBoxInstance:null,uniquePopupId:"ai-form-fill-feedback-popup_"+n.Text.getRandom(20).toLowerCase()}),methods:{...i.mapActions(["closeFeedbackMessage","sendAiCallParsingData"]),async onOKButton(){this.closeFeedbackMessage(!0)},onCancelButton(){this.closeFeedbackMessage(!1),this.sendAiCallParsingData("feedback_refused")},onMessageClose(e){e.uniquePopupId===this.uniquePopupId&&this.closeFeedbackMessage(!1)}},mounted(){this.messageBoxInstance=a.createFeedbackMessageBox({onOk:this.onOKButton,onCancel:this.onCancelButton,popupOptions:{targetContainer:this.$refs.feedbackMessageRoot,id:this.uniquePopupId}}),n.addCustomEvent(window,"BX.Main.Popup:onClose",this.onMessageClose),this.messageBoxInstance.show()},unmounted(){this.messageBoxInstance&&this.messageBoxInstance.close(),n.removeCustomEvent(window,"BX.Main.Popup:onClose",this.onMessageClose)},template:'\n\t\t<div ref="feedbackMessageRoot" class="crm-ai-form-fill__confirm" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0;"></div>\n\t'},h={name:"FloatingActionButton",computed:{...i.mapGetters({count:"getNotVisibleUnresolvedCount"}),showCounter(){return this.count>0}},methods:{click(){this.$Bitrix.eventEmitter.emit("crm:ai:form-fill:scroll-to-next",{})}},template:'\n\t\t<div @click="click" class="bx-crm-ai-merge-fields-fab">\n\t\t\t<div\n\t\t\t\tv-if="showCounter"\n\t\t\t\tclass="bx-crm-ai-merge-fields-fab_counter"\n\t\t\t>{{count}}</div>\n\t\t\t<i class="bx-crm-ai-merge-fields-fab_icon"></i>\n\t\t</div>\n\t'},f={name:"Main",components:{Loader:{name:"Loader",data:()=>({loaderInstance:null}),template:'\n\t\t<div ref="root" class="bx-crm-ai-merge-fields-loading">\n\t\n\t\t</div>\n\t'},EntityEditorWrapper:b,ToolBar:{name:"ToolBar",computed:{...i.mapGetters(["conflictFields"]),conflictCount(){return this.conflictFields.length},resolvedCount(){return this.conflictFields.filter((e=>e.isAiValuesUsed)).length},isApplyAllDisabled(){return this.conflictCount===this.resolvedCount},isRevertDisabled(){return 0===this.resolvedCount},titleText:()=>n.Loc.getMessage("CRM_AI_FORM_FILL_TOOLBAR_CONFLICT_COUNT_TITLE"),applyAllBtnText:()=>n.Loc.getMessage("CRM_AI_FORM_FILL_TOOLBAR_BUTTON_APPLY_ALL"),revertText:()=>n.Loc.getMessage("CRM_AI_FORM_FILL_TOOLBAR_BUTTON_ROLLBACK")},methods:{...i.mapActions(["applyAllAiFields","revertAllAiFields"])},template:'\n\t\t<div class="bx-crm-ai-form-fill__toolbar">\n\t\t\t<div class="bx-crm-ai-form-fill__toolbar__conflict_count">\n\t\t\t\t{{ titleText }}<span class="bx-crm-ai-form-fill__toolbar__conflict_count__count">{{conflictCount}}</span>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclass="bx-crm-ai-form-fill__toolbar__button"\n\t\t\t\t@click="applyAllAiFields"\n\t\t\t>{{ applyAllBtnText }}</div>\n\t\t\t<div\n\t\t\t\tclass="bx-crm-ai-form-fill__toolbar__button"\n\t\t\t\t@click="revertAllAiFields"\n\t\t\t>{{ revertText }}</div>\n\t\t</div>\n\t'},Merger:{name:"Merger",components:{MergeControl:{name:"MergeControl",props:{field:{type:Object,required:!0},tmp:Number},data:()=>({hasLargeContent:!0,isExpanded:!1,coveredByAnother:!1}),computed:{...i.mapGetters(["getexpandedConflictControls","eeControlPositions"]),replaceBtnText(){return this.field.isAiValuesUsed?n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_REPLACE_BTN_BACK"):n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_REPLACE_BTN_FORTH")},value(){return this.field.isAiValuesUsed?this.field.originalValue:this.field.aiValue}},methods:{...i.mapActions(["setEditorFieldValue","showEntityEditorControlOutline"]),...i.mapMutations(["toggleExpandedConflictControls"]),async toggleAiValue(e){await this.setEditorFieldValue(e),await this.expand(!1),this.hasLargeContent=this.checkHasLargeContent()},async expand(e){this.hasLargeContent&&(this.isExpanded=e,await s.nextTick(),this.toggleExpandedConflictControls({fieldId:this.field.name,size:this.$refs.root.getBoundingClientRect().height,isExpanded:e}))},onControlsExpandedModeChange(){let e=!1;const t=this.eeControlPositions.get(this.field.name,0);for(const[s,i]of this.getexpandedConflictControls){const o=this.eeControlPositions.get(s,0);if(t>o&&t-o<i){e=!0;break}}this.coveredByAnother=e},checkHasLargeContent(){return this.$refs.fieldValue.scrollWidth>this.$refs.fieldValue.clientWidth},onMouseenter(e){this.showEntityEditorControlOutline({fieldName:this.field.name,isShow:!0}),this.expand(!0)},onMouseleave(e){this.showEntityEditorControlOutline({fieldName:this.field.name,isShow:!1}),this.expand(!1)}},mounted(){this.hasLargeContent=this.checkHasLargeContent(),s.watch(this.getexpandedConflictControls,this.onControlsExpandedModeChange)},template:'\n\t\t<div \n\t\t\tclass="bx-crm-ai-form-fill-merge-control__container"\n\t\t\t:class="{\'expanded\': isExpanded, \'covered\': coveredByAnother}"\n\t\t\t@mouseenter="onMouseenter"\n\t\t\t@mouseleave="onMouseleave"\n\t\t\tref="root"\n\t\t>\n\t\t\t<div \n\t\t\t\tclass="bx-crm-ai-form-fill-merge-control-icon"\n\t\t\t\t@click="toggleAiValue(field)"\n\t\t\t>\n\n\t\t\t</div>\n\t\t\t<div class="bx-crm-ai-form-fill-merge-control-field">\n\t\t\t\t<div\n\t\t\t\t\tclass="bx-crm-ai-form-fill-merge-control-field-title"\n\t\t\t\t\t:title="field.title"\n\t\t\t\t>{{ field.title }}</div>\n\t\t\t\t<div class="bx-crm-ai-form-fill-merge-control-field-value-container">\n\t\t\t\t\t<div\n\t\t\t\t\t\tref="fieldValue"\n\t\t\t\t\t\tclass="bx-crm-ai-form-fill-merge-control-field-value-container__value"\n\t\t\t\t\t\t:class="{\'expanded\': isExpanded, \'ai-value\': !field.isAiValuesUsed}"\n\t\t\t\t\t\t:title="this.value"\n\t\t\t\t\t>{{ this.value }}</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass="bx-crm-ai-form-fill-merge-control-field-value-container__control"\n\t\t\t\t\t\t:class="{\'expanded\': isExpanded}"\n\t\t\t\t\t\t:style="{display: hasLargeContent ? \'block\': \'none\'}"\n\t\t\t\t\t></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclass="bx-crm-ai-form-fill-merge-control-right-column"\n\t\t\t\t@click="toggleAiValue(field)"\n\t\t\t>\n\t\t\t\t<div \n\t\t\t\t\tclass="bx-crm-ai-form-fill-merge-control-button">\n\t\t\t\t\t{{ replaceBtnText }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t'}},data:()=>({isRootMounted:!1}),computed:{...i.mapGetters(["conflictFields","eeControlPosition","eeControlPositions","getMainLayoutScrollPosition"])},methods:{getControlTopOffset(e){return this.eeControlPositions.get(e.name,0)}},mounted(){this.isRootMounted=!0},template:'\n\t\t<div ref="root" class="bx-crm-ai-merge-fields-merger ">\n\t\t\t<MergeControl\n\t\t\t\tv-if="isRootMounted"\n\t\t\t\tv-for="field in conflictFields" :key="field.name"\n\t\t\t\tclass="bx-crm-ai-merge-fields-merger__field"\n\t\t\t\t:style="{top: getControlTopOffset(field) + \'px\'}"\n\t\t\t\t:field="field"\n\t\t\t\t:tmp="getControlTopOffset(field)"\n\t\t\t></MergeControl>\n\t\t</div>\n\t'},FloatingActionButton:h,CloseConfirm:p,FeedbackMessage:m},data:()=>({}),computed:{...i.mapGetters(["conflictFields","isLoading","eeControlPositions","getFirstUnseenFieldPosition","aiValuesAppliedCount","mergeUuid","isSliderConfirmPopupShown","isFeedbackMessageShown","getFirstUnseenFieldPosition"])},methods:{...i.mapActions(["initialize","saveFormFieldsToMerge","updateControlPositionInfo","updateSaveButtonStatus","closeFormWithoutConfirm","sendAiCallParsingData"]),...i.mapMutations(["changeMainLayoutScrollPosition","startLoading","stopLoading","setMainLayoutScrollHeight"]),onFooterSaveBtn(){this.saveFormFieldsToMerge().then((()=>this.sendAiCallParsingData("conflict_accept_changes"))).catch((()=>{}))},onFooterCancelBtn(){this.closeFormWithoutConfirm(),this.sendAiCallParsingData("conflict_cancel_changes")},onCloseConfirm(){this.closeFormWithoutConfirm()},handleScroll:null,positionChanged(){this.setMainLayoutScrollHeight(this.$refs.layout.scrollHeight),this.changeMainLayoutScrollPosition({scrollTop:this.$refs.layout.scrollTop,containerHeight:this.$refs.layout.getBoundingClientRect().height})},resizeHandler(){this.handleScroll()},scrollToNext(){const e=this.getFirstUnseenFieldPosition;e&&u(this.$refs.layout,e,300)},subscribeInternalEvents(){this.$Bitrix.eventEmitter.subscribe("crm:ai:form-fill:scroll-to-next",this.scrollToNext),this.$Bitrix.eventEmitter.subscribe("crm:ai:form-fill:close-confirm:confirmClose",this.onCloseConfirm),this.$Bitrix.eventEmitter.subscribe("crm:ai:form-fill:close-confirm:cancelClose",this.scrollToNext)},unSubscribeInternalEvents(){this.$Bitrix.eventEmitter.unsubscribe("crm:ai:form-fill:scroll-to-next",this.scrollToNext),this.$Bitrix.eventEmitter.unsubscribe("crm:ai:form-fill:close-confirm:confirmClose",this.onCloseConfirm),this.$Bitrix.eventEmitter.unsubscribe("crm:ai:form-fill:close-confirm:cancelClose",this.scrollToNext)},autoScrollToFirst(){const e=this.$refs.layout.getBoundingClientRect().height,t=this.getFirstUnseenFieldPosition;t&&t>e&&u(this.$refs.layout,t,800)}},async mounted(){this.updateSaveButtonStatus(),this.startLoading(),this.handleScroll=n.Runtime.throttle((()=>{this.positionChanged()}),300),await this.initialize(),this.positionChanged(),this.subscribeInternalEvents(),await this.$nextTick((()=>{n.Event.bind(window,"resize",this.resizeHandler)})),this.stopLoading(),this.autoScrollToFirst(),e.sliderButtonsAdapter.onSaveCallback=this.onFooterSaveBtn,e.sliderButtonsAdapter.onCancelCallback=this.onFooterCancelBtn},watch:{aiValuesAppliedCount:{handler(e,t){this.updateSaveButtonStatus()},immediate:!0}},unmounted(){this.unSubscribeInternalEvents(),n.Event.unbind(window,"resize",this.resizeHandler)},template:'\n\t\t<div class="bx-crm-ai-merge-fields">\n\t\t\t<div \n\t\t\t\tclass="bx-crm-ai-merge-fields-layout" \n\t\t\t\t@scroll="handleScroll"\n\t\t\t\tref="layout"\n\t\t\t\t:style="{\'visibility\': !isLoading ? \'visible\' : \'hidden\'}"\n\t\t\t>\n\t\t\t\t<EntityEditorWrapper class="bx-crm-ai-merge-fields-layout__ee_column"/>\n\t\t\t\t<Merger class="bx-crm-ai-merge-fields-layout__aifields_column"/>\n\t\t\t\t<div class="bx-crm-ai-merge-fields-layout__floating-button_column">\n\t\t\t\t\t<FloatingActionButton/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Loader v-if="isLoading" />\n\t\t\t<CloseConfirm v-if="isSliderConfirmPopupShown" />\n\t\t\t<FeedbackMessage v-if="isFeedbackMessageShown" />\n\t\t</div>\n\t'};var C=babelHelpers.classPrivateFieldLooseKey("editor"),g=babelHelpers.classPrivateFieldLooseKey("initialContainerTop"),F=babelHelpers.classPrivateFieldLooseKey("onUserFieldDeployedCb"),v=babelHelpers.classPrivateFieldLooseKey("refreshControlLayout"),L=babelHelpers.classPrivateFieldLooseKey("setEntityEditorBBValue"),B=babelHelpers.classPrivateFieldLooseKey("setPlainTextFieldValue"),P=babelHelpers.classPrivateFieldLooseKey("setUserFieldValue"),y=babelHelpers.classPrivateFieldLooseKey("getValueFromControl");class E{constructor(){Object.defineProperty(this,y,{value:H}),Object.defineProperty(this,P,{value:w}),Object.defineProperty(this,B,{value:I}),Object.defineProperty(this,L,{value:M}),Object.defineProperty(this,v,{value:_}),Object.defineProperty(this,C,{writable:!0,value:null}),Object.defineProperty(this,g,{writable:!0,value:void 0}),Object.defineProperty(this,F,{writable:!0,value:null})}async init(e){babelHelpers.classPrivateFieldLooseBase(this,C)[C]=e;babelHelpers.classPrivateFieldLooseBase(this,g)[g]=babelHelpers.classPrivateFieldLooseBase(this,C)[C].getContainer().getBoundingClientRect().y+5,n.addCustomEvent(window,"BX.UI.EntityUserFieldLayoutLoader:onUserFieldDeployed",(e=>{n.Type.isFunction(babelHelpers.classPrivateFieldLooseBase(this,F)[F])&&babelHelpers.classPrivateFieldLooseBase(this,F)[F](e)}))}setOnUserFieldDeployedCb(e){babelHelpers.classPrivateFieldLooseBase(this,F)[F]=e}async getEditorControlsParams(e){await c(10);const t=[];let s=0;for(const i of babelHelpers.classPrivateFieldLooseBase(this,C)[C].getAllControls()){if(!e.has(i.getId())||!i.getWrapper())continue;const[o,l]=babelHelpers.classPrivateFieldLooseBase(this,y)[y](i);t.push({fieldId:i.getId(),relatedFieldOffsetY:i.getWrapper().getBoundingClientRect().y,originalValue:o,originalModel:l,order:s}),s++}return t}async getEditorControlsPositions(e){const t=new Map;for(const s of babelHelpers.classPrivateFieldLooseBase(this,C)[C].getAllControls()){if(!e.has(s.getId())||!s.getWrapper())continue;const i=s.getWrapper().getBoundingClientRect().y;t.set(s.getId(),i-babelHelpers.classPrivateFieldLooseBase(this,g)[g])}return t}setControlOutline(e,t){const s=babelHelpers.classPrivateFieldLooseBase(this,C)[C].getControlById(e);if(!s)return;const i=s.getWrapper();t?n.Dom.addClass(i,"bx-crm-ai-merge-fields-ee-control-outline"):n.Dom.removeClass(i,"bx-crm-ai-merge-fields-ee-control-outline")}setControlAiClass(e,t){const s=babelHelpers.classPrivateFieldLooseBase(this,C)[C].getControlById(e);if(!s)return;const i=s.getWrapper();t?n.Dom.addClass(i,"bx-crm-ai-merge-fields-ee-control-ai-value"):n.Dom.removeClass(i,"bx-crm-ai-merge-fields-ee-control-ai-value")}async setFieldValue(e,t){const s=babelHelpers.classPrivateFieldLooseBase(this,C)[C].getControlById(e);if(s)switch(s.constructor){case BX.Crm.EntityEditorText:babelHelpers.classPrivateFieldLooseBase(this,B)[B](e,t.value);break;case BX.UI.EntityEditorBB:babelHelpers.classPrivateFieldLooseBase(this,L)[L](e,t.value),babelHelpers.classPrivateFieldLooseBase(this,v)[v](s);break;case BX.Crm.EntityEditorUserField:babelHelpers.classPrivateFieldLooseBase(this,P)[P](e,t.model),babelHelpers.classPrivateFieldLooseBase(this,v)[v](s);break;default:throw new Error("Not supported field type")}}}function _(e){e.refreshLayout({reset:!0})}function M(e,t){const s=e+"_HTML";babelHelpers.classPrivateFieldLooseBase(this,C)[C].getModel().setField(s,t,{enableNotification:!0})}function I(e,t){babelHelpers.classPrivateFieldLooseBase(this,C)[C].getModel().setField(e,t,{enableNotification:!0})}function w(e,t){babelHelpers.classPrivateFieldLooseBase(this,C)[C].getModel().setField(e,t)}function H(e){const t=e.getValue();let s=null,i=null;if(e.constructor===BX.UI.EntityEditorBB){const t=babelHelpers.classPrivateFieldLooseBase(this,C)[C].getModel(),i=e.getId()+"_HTML";s=t.getField(i,"")}else n.Type.isObject(t)&&Object.hasOwn(t,"VALUE")?(s=t.VALUE,i=t):(n.Type.isString(t)||n.Type.isNumber(t))&&(s=t,i=null);return[s,i]}var A={isLoading:e=>e.isLoading,conflictFields:e=>e.conflictFields.sort(((e,t)=>e.order-t.order)),getAiAppliedCount:e=>e.aiValuesAppliedCount,mergeUuid:e=>e.mergeUuid,crmMode:e=>e.crmMode,callId:e=>e.callId,getEntityInfo:e=>e.entityInfo,isEntityEditorLoaded:e=>e.isEntityEditorLoaded,eeControlPosition:e=>t=>e.eeControlPositions.get(t,0),eeControlPositions:e=>e.eeControlPositions,getexpandedConflictControls:e=>e.expandedConflictControls,getNotVisibleUnresolvedCount:e=>e.notVisibleUnresolvedCount,getMainLayoutScrollPosition:e=>e.mainLayoutScrollPosition,getMainLayoutContainerHeight:e=>e.mainLayoutContainerHeight,getMainLayoutScrollHeight:e=>e.mainLayoutScrollHeight,getFirstUnseenFieldPosition:e=>{const t=e.mainLayoutScrollPosition;let s=null,i=1/0;for(const[o,l]of e.eeControlPositions){const a=e.conflictFields.find((e=>e.name===o));!a||a.isAiValuesUsed||t+120>l||l<i&&(i=l,s=o)}return s?e.eeControlPositions.get(s):null},isFieldsTouched:e=>e.isFieldsTouched,aiValuesAppliedCount:e=>e.aiValuesAppliedCount,isSliderConfirmPopupShown:e=>e.isSliderConfirmPopupShown,isNeededShowCloseConfirm:e=>e.isNeededShowCloseConfirm,isFeedbackMessageShown:e=>e.aiFeedback.isMessageComponentShown,isAiFeedbackShowBeforeClose:e=>e.aiFeedback.showBeforeClose,aiFeedback:e=>e.aiFeedback},S={setMergeUUID:(e,t)=>{e.mergeUuid=t},setCrmMode:(e,t)=>{e.crmMode=t},setCallId:(e,t)=>{e.callId=t},startLoading:e=>{e.isLoading=!0},stopLoading:e=>{e.isLoading=!1},setEntityInfo:(e,t)=>{e.entityInfo=t},setConflictFields:(e,t)=>{e.conflictFields=t},setEditMode:(e,t)=>{e.isEditMode=t},setIsEntityEditorLoaded(e,t){e.isEntityEditorLoaded=t},updateConflictField:(e,{name:t,field:s})=>{e.conflictFields=e.conflictFields.map((e=>e.name===t?{...e,...s}:e));const i=e.conflictFields.filter((e=>e.isAiValuesUsed)).length;e.aiValuesAppliedCount=i,e.isNeededShowCloseConfirm=i>0},setEeControlPositions:(e,{fieldId:t,topPosition:s})=>{e.eeControlPositions.set(t,s)},toggleExpandedConflictControls:(e,{fieldId:t,size:s,isExpanded:i})=>{i?e.expandedConflictControls.set(t,s):e.expandedConflictControls.delete(t)},changeMainLayoutScrollPosition:(e,{scrollTop:t,containerHeight:s})=>{const i=t+s;e.mainLayoutScrollPosition=t,e.mainLayoutContainerHeight=s;const o=[];for(const[t,s]of e.eeControlPositions)i<s+30&&o.push(t);if(0===o.length)return void(e.notVisibleUnresolvedCount=0);let l=0;for(const t of o){const s=e.conflictFields.find((e=>e.name===t));s&&!s.isAiValuesUsed&&l++}e.notVisibleUnresolvedCount=l},setIsFieldsTouched(e,t){e.isFieldsTouched=t},setIsConfirmPopupShow(e,t){e.isSliderConfirmPopupShown=t},setNeededShowCloseConfirm(e,t){e.isNeededShowCloseConfirm=t},showFeedbackMessageIfNeeded(e,t){e.aiFeedback.feedbackWasSent||"FEEDBACK_TRIGGER_CONTROL"===t&&e.aiFeedback.isShownByReturnBtn||(e.aiFeedback.lastTriggeredBy=t,"FEEDBACK_TRIGGER_CONTROL"===t&&(e.aiFeedback.isShownByReturnBtn=!0),e.aiFeedback.isMessageComponentShown=!0)},hideFeedbackMessage(e){e.aiFeedback.isMessageComponentShown=!1},setAiFeedbackWasSent(e,t){e.aiFeedback.feedbackWasSent=t},setAiFeedbackShowBeforeClose(e,t){e.aiFeedback.showBeforeClose=t},setMainLayoutScrollHeight(e,t){e.mainLayoutScrollHeight=t}},T=babelHelpers.classPrivateFieldLooseKey("params"),O=babelHelpers.classPrivateFieldLooseKey("fetchEntityEditor");class R{constructor(e){Object.defineProperty(this,O,{value:x}),Object.defineProperty(this,T,{writable:!0,value:void 0}),babelHelpers.classPrivateFieldLooseBase(this,T)[T]=e}async render(){return babelHelpers.classPrivateFieldLooseBase(this,O)[O](babelHelpers.classPrivateFieldLooseBase(this,T)[T]),new Promise((e=>{n.addCustomEvent(window,"BX.Crm.EntityEditor:onUserFieldsDeployed",(async t=>{t.getId()===babelHelpers.classPrivateFieldLooseBase(this,T)[T].domContainerId&&e(t)}))}))}}function x(e){let t="";switch(e.entityTypeName){case"DEAL":t="/bitrix/components/bitrix/crm.deal.details/ajax.php";break;case"LEAD":t="/bitrix/components/bitrix/crm.lead.details/ajax.php";break;default:throw new Error("Unknown entity type: "+e.entityTypeName)}t=`${t}?sessid=${BX.bitrix_sessid()}`,BX.ajax.post(t,{ACTION:"PREPARE_EDITOR_HTML",ACTION_ENTITY_TYPE_NAME:e.entityTypeName,ACTION_ENTITY_ID:e.entityId,GUID:e.domContainerId,CONFIG_ID:e.configId,FORCE_DEFAULT_CONFIG:"N",FORCE_DEFAULT_OPTIONS:"Y",IS_EMBEDDED:"Y",ENABLE_CONFIG_SCOPE_TOGGLE:"N",ENABLE_CONFIGURATION_UPDATE:"N",ENABLE_REQUIRED_USER_FIELD_CHECK:"N",ENABLE_FIELDS_CONTEXT_MENU:"N",CONTEXT:{},READ_ONLY:"Y",MODULE_ID:"crm"},(()=>{}))}var k={async initialize({dispatch:e,getters:t}){await e("fetchFormFieldsToMerge"),await e("createEntityEditor"),await e("collectFieldDataFromEntityEditor"),await e("updateControlPositionInfo")},async fetchFormFieldsToMerge({commit:e,getters:t}){const s=await N(t.mergeUuid);e("setConflictFields",s.fields.map((e=>({name:e.name,type:e.type,title:e.title,aiModel:e.aiModel,isMultiple:e.isMultiple,isUserField:e.isUserField,aiValue:e.aiModel.VALUE,originalValue:null,originalModel:null,isAiValuesUsed:!1})))),e("setEditMode",s.editMode),e("setEntityInfo",s.target),e("setAiFeedbackWasSent",s.target.feedbackWasSent),e("setAiFeedbackShowBeforeClose",!s.target.feedbackWasSent)},async saveFormFieldsToMerge({getters:e,commit:t,dispatch:s}){const i=e.conflictFields.filter((e=>e.isAiValuesUsed)).map((e=>e.name)),o=e.mergeUuid,a=await BX.ajax.runAction("crm.timeline.ai.applyMerge",{method:"GET",getParameters:{mergeUuid:o,fieldNamesToApply:i}});t("setAiFeedbackShowBeforeClose",!1),"success"===a.status?s("closeFormWithoutConfirm"):l.UI.Notification.Center.notify({content:n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_SAVE_ERROR"),autoHideDelay:5e3})},showFeedbackMessageBeforeClose({getters:e,commit:t}){t("showFeedbackMessageIfNeeded","FEEDBACK_TRIGGER_APP_CLOSE"),t("setAiFeedbackShowBeforeClose",!1)},closeFeedbackMessage({getters:e,commit:t,dispatch:s},i=!1){i&&(s("sendFeedBack"),t("setAiFeedbackShowBeforeClose",!1)),t("hideFeedbackMessage"),"FEEDBACK_TRIGGER_APP_CLOSE"===e.aiFeedback.lastTriggeredBy&&s("closeFormWithoutConfirm")},closeFormWithoutConfirm({getters:e,commit:t}){t("setNeededShowCloseConfirm",!1),t("setIsConfirmPopupShow",!1);const s=e.mergeUuid;n.onCustomEvent(window,"BX.Crm.AiFormFill:CloseSlider",{mergeUuid:s})},async setEditorFieldValue({dispatch:e,getters:t,commit:s},i){const o=i.name,l=!i.isAiValuesUsed,a=l?i.aiValue:i.originalValue,n=l?i.aiModel:i.originalModel;l||s("showFeedbackMessageIfNeeded","FEEDBACK_TRIGGER_CONTROL");const r={value:a,model:n};await V.setFieldValue(o,r),await V.setControlAiClass(o,l),s("setIsFieldsTouched",!0),s("updateConflictField",{name:o,field:{isAiValuesUsed:!i.isAiValuesUsed}})},async createEntityEditor({getters:e,commit:t,dispatch:s}){const i=e.getEntityInfo,o=new R({entityId:i.entityId,configId:i.editorId,entityTypeName:i.entityTypeName,domContainerId:"crm-ai-merge-fields__container__"+e.mergeUuid}),l=await o.render();await V.init(l),V.setOnUserFieldDeployedCb((async()=>{const t=Math.floor(e.getMainLayoutScrollPosition+e.getMainLayoutContainerHeight);let i=0;(e.getMainLayoutScrollHeight||0)-t<40&&(i=400),await c(i),s("updateControlPositionInfo")}))},async collectFieldDataFromEntityEditor({getters:e,commit:t,dispatch:s}){const i=e.conflictFields,o=new Set(i.map((e=>e.name))),l=await V.getEditorControlsParams(o);if(0!==l.length){for(const e of l)t("updateConflictField",{name:e.fieldId,field:{originalValue:e.originalValue,originalModel:e.originalModel,order:e.order}}),t("setEeControlPositions",{fieldId:e.fieldId,topPosition:e.relatedFieldOffsetY});t("setIsEntityEditorLoaded",!0)}},async updateControlPositionInfo({getters:e,commit:t},{updateOnlyFrom:s}={}){const i=e.conflictFields;if(0===i.length)return;const o=new Set(i.map((e=>e.name))),l=await V.getEditorControlsPositions(o),a=e.getMainLayoutScrollPosition||0;for(const[e,t]of l)l.set(e,a+t);for(const e of i){const i=e.name;!s&&s>e.order||l.has(i)&&t("setEeControlPositions",{fieldId:i,topPosition:l.get(i)})}},async applyAllAiFields({dispatch:e,getters:t}){for(const s of t.conflictFields)s.isAiValuesUsed||e("setEditorFieldValue",s)},revertAllAiFields({dispatch:e,getters:t}){for(const s of t.conflictFields)s.isAiValuesUsed&&e("setEditorFieldValue",s)},showEntityEditorControlOutline(e,{fieldName:t,isShow:s}){V.setControlOutline(t,s)},updateSaveButtonStatus({getters:t}){const s=0===t.aiValuesAppliedCount;e.sliderButtonsAdapter.saveButton.setDisabled(s)},async sendFeedBack({commit:e,getters:t}){const s=t.mergeUuid;if(t.aiFeedback.checkFeedbackBeforeSend){if(await U(s))return void e("setAiFeedbackWasSent",!0)}const i=t.getEntityInfo.entityTypeName.toLowerCase();a.sendFeedback(s,i,t.crmMode,t.callId),e("setAiFeedbackWasSent",!0)},sendAiCallParsingData({getters:e},t){const s=e.getEntityInfo.entityTypeName.toLowerCase(),i=e.crmMode,l=e.callId;o.sendData({event:"call_parsing",tool:"AI",category:"crm_operations",type:"manual",c_section:"crm",c_element:t,c_sub_section:s,p1:i,p2:l,status:"success"})}};const U=async e=>a.wasFeedbackSent(e),N=async e=>(await BX.ajax.runAction("crm.timeline.ai.mergeFields",{method:"GET",getParameters:{mergeUuid:e}})).data;let V=null;var D=babelHelpers.classPrivateFieldLooseKey("application"),K=babelHelpers.classPrivateFieldLooseKey("options"),j=babelHelpers.classPrivateFieldLooseKey("store");class G{constructor(e,t={}){if(Object.defineProperty(this,D,{writable:!0,value:void 0}),Object.defineProperty(this,K,{writable:!0,value:void 0}),Object.defineProperty(this,j,{writable:!0,value:void 0}),babelHelpers.classPrivateFieldLooseBase(this,K)[K]=t,this.rootNode=document.querySelector("#"+e),!babelHelpers.classPrivateFieldLooseBase(this,K)[K].mergeUuid)throw new Error("param mergeUuid is required")}get application(){return babelHelpers.classPrivateFieldLooseBase(this,D)[D]}get store(){return babelHelpers.classPrivateFieldLooseBase(this,j)[j]}start(){V=new E,babelHelpers.classPrivateFieldLooseBase(this,j)[j]=i.createStore({state:{mergeUuid:null,isLoading:!0,conflictFields:[],isEditMode:!1,isEntityEditorLoaded:!1,entityInfo:null,eeControlPositions:new Map,expandedConflictControls:new Map,mainLayoutScrollPosition:null,mainLayoutContainerHeight:null,mainLayoutScrollHeight:null,notVisibleUnresolvedCount:0,isFieldsTouched:!1,aiValuesAppliedCount:0,isSliderConfirmPopupShown:!1,isNeededShowCloseConfirm:!1,aiFeedback:{feedbackWasSent:!1,isShownByReturnBtn:!1,isMessageComponentShown:!1,lastTriggeredBy:null,showBeforeClose:!0,checkFeedbackBeforeSend:!1}},getters:A,mutations:S,actions:k}),babelHelpers.classPrivateFieldLooseBase(this,D)[D]=s.BitrixVue.createApp({name:"AiFormFill",components:{Main:f},beforeCreate(){this.$bitrix.Application.set(this)},template:"\n\t\t\t\t<Main/>\n\t\t\t"}),babelHelpers.classPrivateFieldLooseBase(this,j)[j].commit("setMergeUUID",babelHelpers.classPrivateFieldLooseBase(this,K)[K].mergeUuid),babelHelpers.classPrivateFieldLooseBase(this,j)[j].commit("setCrmMode",babelHelpers.classPrivateFieldLooseBase(this,K)[K].crmMode),babelHelpers.classPrivateFieldLooseBase(this,j)[j].commit("setCallId",babelHelpers.classPrivateFieldLooseBase(this,K)[K].callId),babelHelpers.classPrivateFieldLooseBase(this,D)[D].use(babelHelpers.classPrivateFieldLooseBase(this,j)[j]),babelHelpers.classPrivateFieldLooseBase(this,D)[D].mount(this.rootNode)}stop(){babelHelpers.classPrivateFieldLooseBase(this,D)[D].unmount(),babelHelpers.classPrivateFieldLooseBase(this,D)[D]=null,babelHelpers.classPrivateFieldLooseBase(this,j)[j]=null,V=null}isNeededShowCloseConfirm(){return babelHelpers.classPrivateFieldLooseBase(this,j)[j].getters.isNeededShowCloseConfirm}showCloseConfirm(){babelHelpers.classPrivateFieldLooseBase(this,j)[j].commit("setIsConfirmPopupShow",!0)}isShowAiFeedbackBeforeClose(){return babelHelpers.classPrivateFieldLooseBase(this,j)[j].getters.isAiFeedbackShowBeforeClose}showAiFeedbackBeforeClose(){babelHelpers.classPrivateFieldLooseBase(this,j)[j].dispatch("showFeedbackMessageBeforeClose")}isAppLoading(){return babelHelpers.classPrivateFieldLooseBase(this,j)[j].getters.isLoading}}var X=babelHelpers.classPrivateFieldLooseKey("onSaveCallback"),W=babelHelpers.classPrivateFieldLooseKey("onCancelCallback"),$=babelHelpers.classPrivateFieldLooseKey("saveButton"),z=babelHelpers.classPrivateFieldLooseKey("cancelButton"),q=babelHelpers.classPrivateFieldLooseKey("createButtons");class Y{constructor(){Object.defineProperty(this,q,{value:Q}),Object.defineProperty(this,X,{writable:!0,value:null}),Object.defineProperty(this,W,{writable:!0,value:null}),Object.defineProperty(this,$,{writable:!0,value:null}),Object.defineProperty(this,z,{writable:!0,value:null}),babelHelpers.classPrivateFieldLooseBase(this,q)[q]()}set onSaveCallback(e){babelHelpers.classPrivateFieldLooseBase(this,X)[X]=e}set onCancelCallback(e){babelHelpers.classPrivateFieldLooseBase(this,W)[W]=e}get saveButton(){return babelHelpers.classPrivateFieldLooseBase(this,$)[$]}get cancelButton(){return babelHelpers.classPrivateFieldLooseBase(this,z)[z]}getButtons(){return[babelHelpers.classPrivateFieldLooseBase(this,$)[$],babelHelpers.classPrivateFieldLooseBase(this,z)[z]]}}function Q(){babelHelpers.classPrivateFieldLooseBase(this,$)[$]=new r.Button({text:n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_SAVE"),size:r.Button.Size.MEDIUM,color:r.Button.Color.SUCCESS,dependOnTheme:!0,onclick:()=>{n.Type.isFunction(babelHelpers.classPrivateFieldLooseBase(this,X)[X])&&babelHelpers.classPrivateFieldLooseBase(this,X)[X]()}}),babelHelpers.classPrivateFieldLooseBase(this,z)[z]=new r.Button({text:n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_CANCEL"),size:r.Button.Size.MEDIUM,color:r.ButtonColor.LIGHT_BORDER,onclick:()=>{n.Type.isFunction(babelHelpers.classPrivateFieldLooseBase(this,W)[W])&&babelHelpers.classPrivateFieldLooseBase(this,W)[W]()}})}e.sliderButtonsAdapter=null;var J=babelHelpers.classPrivateFieldLooseKey("options"),Z=babelHelpers.classPrivateFieldLooseKey("copilotSliderClass"),ee=babelHelpers.classPrivateFieldLooseKey("app"),te=babelHelpers.classPrivateFieldLooseKey("sliderInstance"),se=babelHelpers.classPrivateFieldLooseKey("onLoadEventName"),ie=babelHelpers.classPrivateFieldLooseKey("onCloseEventName"),oe=babelHelpers.classPrivateFieldLooseKey("sliderUrl"),le=babelHelpers.classPrivateFieldLooseKey("containerId"),ae=babelHelpers.classPrivateFieldLooseKey("makeSliderToolbar"),ne=babelHelpers.classPrivateFieldLooseKey("createSliderWrapper"),re=babelHelpers.classPrivateFieldLooseKey("calculateSliderWidth"),de=babelHelpers.classPrivateFieldLooseKey("onSliderLoadFn"),ce=babelHelpers.classPrivateFieldLooseKey("onSliderCloseFn"),ue=babelHelpers.classPrivateFieldLooseKey("onAiFormFillDownFn");class pe{constructor(t,s){Object.defineProperty(this,ue,{value:Be}),Object.defineProperty(this,ce,{value:Le}),Object.defineProperty(this,de,{value:ve}),Object.defineProperty(this,re,{value:Fe}),Object.defineProperty(this,ne,{value:ge}),Object.defineProperty(this,ae,{value:Ce}),Object.defineProperty(this,le,{get:fe,set:void 0}),Object.defineProperty(this,oe,{get:he,set:void 0}),Object.defineProperty(this,ie,{get:me,set:void 0}),Object.defineProperty(this,se,{get:be,set:void 0}),Object.defineProperty(this,J,{writable:!0,value:void 0}),Object.defineProperty(this,Z,{writable:!0,value:void 0}),Object.defineProperty(this,ee,{writable:!0,value:void 0}),Object.defineProperty(this,te,{writable:!0,value:void 0}),babelHelpers.classPrivateFieldLooseBase(this,J)[J]=t,babelHelpers.classPrivateFieldLooseBase(this,Z)[Z]=s,e.sliderButtonsAdapter=new Y}create(){babelHelpers.classPrivateFieldLooseBase(this,te)[te]=babelHelpers.classPrivateFieldLooseBase(this,ne)[ne](),n.addCustomEvent("SidePanel.Slider:onLoad",babelHelpers.classPrivateFieldLooseBase(this,de)[de].bind(this),babelHelpers.classPrivateFieldLooseBase(this,se)[se]),n.addCustomEvent("SidePanel.Slider:onClose",babelHelpers.classPrivateFieldLooseBase(this,ce)[ce].bind(this),babelHelpers.classPrivateFieldLooseBase(this,ie)[ie]),n.addCustomEvent(window,"BX.Crm.AiFormFill:CloseSlider",babelHelpers.classPrivateFieldLooseBase(this,ue)[ue].bind(this)),babelHelpers.classPrivateFieldLooseBase(this,te)[te].open()}}function be(){return"CopilotSliderWrapper:onLoad_"+babelHelpers.classPrivateFieldLooseBase(this,J)[J].mergeUuid}function me(){return"CopilotSliderWrapper:onClose_"+babelHelpers.classPrivateFieldLooseBase(this,J)[J].mergeUuid}function he(){return"crm:copilot-wrapper-slider-"+babelHelpers.classPrivateFieldLooseBase(this,J)[J].mergeUuid}function fe(){return"crm-ai-merge-fields__container__"+babelHelpers.classPrivateFieldLooseBase(this,J)[J].mergeUuid}function Ce(){const e=babelHelpers.classPrivateFieldLooseBase(this,Z)[Z].makeDefaultToolbarButtons();return[new r.Button({text:n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_TRANSCRIPTION"),size:r.Button.Size.MEDIUM,color:r.Button.Color.LIGHT_BORDER,dependOnTheme:!0,onclick:()=>{if(top.BX.Helper){new d.Call.Transcription({activityId:babelHelpers.classPrivateFieldLooseBase(this,J)[J].activityId,ownerTypeId:babelHelpers.classPrivateFieldLooseBase(this,J)[J].ownerTypeId,ownerId:babelHelpers.classPrivateFieldLooseBase(this,J)[J].ownerId}).open()}}}),new r.Button({text:n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_RESUME"),size:r.Button.Size.MEDIUM,color:r.Button.Color.LIGHT_BORDER,dependOnTheme:!0,onclick:()=>{if(top.BX.Helper){new d.Call.Summary({activityId:babelHelpers.classPrivateFieldLooseBase(this,J)[J].activityId,ownerTypeId:babelHelpers.classPrivateFieldLooseBase(this,J)[J].ownerTypeId,ownerId:babelHelpers.classPrivateFieldLooseBase(this,J)[J].ownerId}).open()}}}),...e]}function ge(){const t=e.sliderButtonsAdapter.getButtons(),s=babelHelpers.classPrivateFieldLooseBase(this,ae)[ae]();return new(babelHelpers.classPrivateFieldLooseBase(this,Z)[Z])({content:()=>`<div id="${babelHelpers.classPrivateFieldLooseBase(this,le)[le]}"></div>`,sliderTitle:n.Loc.getMessage("CRM_AI_FORM_FILL_MERGER_TITLE"),label:babelHelpers.classPrivateFieldLooseBase(this,J)[J].label,extensions:["crm.ai-form-fill","crm.entity-editor"],url:babelHelpers.classPrivateFieldLooseBase(this,oe)[oe],width:babelHelpers.classPrivateFieldLooseBase(this,re)[re](),toolbar:()=>s,buttons:()=>t})}function Fe(){const e=BX.SidePanel.Instance.getTopSlider().getWidth()||.86*window.screen.width;return Math.floor(.86*e)}function ve(e){e.getSlider().getUrl()===babelHelpers.classPrivateFieldLooseBase(this,oe)[oe]&&(babelHelpers.classPrivateFieldLooseBase(this,ee)[ee]=new G(babelHelpers.classPrivateFieldLooseBase(this,le)[le],{mergeUuid:babelHelpers.classPrivateFieldLooseBase(this,J)[J].mergeUuid,crmMode:babelHelpers.classPrivateFieldLooseBase(this,J)[J].crmMode,callId:babelHelpers.classPrivateFieldLooseBase(this,J)[J].callId}),babelHelpers.classPrivateFieldLooseBase(this,ee)[ee].start(),n.removeAllCustomEvents("SidePanel.Slider:onLoad",babelHelpers.classPrivateFieldLooseBase(this,se)[se]))}function Le(t){if(t.getSlider().getUrl()===babelHelpers.classPrivateFieldLooseBase(this,oe)[oe])if(babelHelpers.classPrivateFieldLooseBase(this,ee)[ee]&&!babelHelpers.classPrivateFieldLooseBase(this,ee)[ee].isAppLoading()){if(babelHelpers.classPrivateFieldLooseBase(this,ee)[ee].isNeededShowCloseConfirm())return babelHelpers.classPrivateFieldLooseBase(this,ee)[ee].showCloseConfirm(),void t.denyAction();if(babelHelpers.classPrivateFieldLooseBase(this,ee)[ee].isShowAiFeedbackBeforeClose())return babelHelpers.classPrivateFieldLooseBase(this,ee)[ee].showAiFeedbackBeforeClose(),void t.denyAction();n.removeAllCustomEvents("SidePanel.Slider:onClose",babelHelpers.classPrivateFieldLooseBase(this,ie)[ie]),n.removeAllCustomEvents(window,"BX.Crm.AiFormFill:CloseSlider"),babelHelpers.classPrivateFieldLooseBase(this,ee)[ee]&&(babelHelpers.classPrivateFieldLooseBase(this,ee)[ee].stop(),babelHelpers.classPrivateFieldLooseBase(this,ee)[ee]=null),e.sliderButtonsAdapter=null}else t.denyAction()}function Be(e){var t;(null==e||null==(t=e.data)?void 0:t.mergeUuid)===babelHelpers.classPrivateFieldLooseBase(this,J)[J].mergeUuid&&babelHelpers.classPrivateFieldLooseBase(this,te)[te].close()}e.createAiFormFillApplicationInsideSlider=function(e){var t,s,i;const o=t=>{new pe(e,t).create()};n.Type.isFunction(null==(t=BX)||null==(s=t.Crm)||null==(i=s.AI)?void 0:i.Slider)?o(BX.Crm.AI.Slider):top.BX.Runtime.loadExtension("crm.ai.slider").then((e=>{const{Slider:t}=e;o(t)})).catch((()=>{throw new Error("Cant load Crm.AI.Slider extension")}))}}(this.BX.Crm=this.BX.Crm||{},BX.UI.Dialogs,BX.Vue3,BX.Vue3.Vuex,BX.UI.Analytics,BX,BX.Crm.AI.Feedback,BX,BX.UI,BX.Crm.AI);
//# sourceMappingURL=ai-form-fill.bundle.map.js