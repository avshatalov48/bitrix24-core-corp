{"version":3,"file":"ai-form-fill.bundle.js","sources":["../src/services/utils.js","../src/components/close-confirm.js","../src/components/entity-editor-wrapper.js","../src/components/feedback-message.js","../src/components/floating-action-button.js","../src/components/main.js","../src/components/loader.js","../src/components/tool-bar.js","../src/components/merger.js","../src/components/merge-control.js","../src/services/entity-editor-proxy.js","../src/store/getters.js","../src/store/mutations.js","../src/store/types.js","../src/services/entity-editor-render.js","../src/store/actions.js","../src/app.js","../src/store/index.js","../src/services/slider-buttons-adapter.js","../src/ai-form-fill-app.js"],"sourcesContent":["\nexport const timeout = (ms: number) => {\n\treturn new Promise((resolve) => {\n\t\tsetTimeout(resolve, ms);\n\t});\n};\n\nexport const myScrollTo = async (element: Element, to: number, duration: number) => {\n\tif (duration <= 0)\n\t{\n\t\treturn;\n\t}\n\tconst difference = to - element.scrollTop;\n\tconst perTick = difference / duration * 10;\n\tawait timeout(10);\n\telement.scrollTop += perTick;\n\tif (element.scrollTop === to)\n\t{\n\t\treturn;\n\t}\n\tawait myScrollTo(element, to, duration - 10);\n};\n","import { addCustomEvent, Loc, removeCustomEvent, Text } from 'main.core';\nimport { mapGetters, mapMutations } from 'ui.vue3.vuex';\nimport { MessageBox } from 'ui.dialogs.messagebox';\nimport '../css/close-confirm.css';\n\nexport const CloseConfirm = {\n\tname: 'CloseConfirm',\n\tdata() {\n\t\treturn {\n\t\t\tmessageBoxInstance: null,\n\t\t\tuniquePopupId: `ai-form-fill-feedback-popup_${Text.getRandom(20).toLowerCase()}`,\n\t\t};\n\t},\n\tcomputed: {\n\t\t...mapGetters(['isFooterHiddenAndSaveDisabled']),\n\t},\n\tmethods: {\n\t\t...mapMutations(['setIsConfirmPopupShow']),\n\t\tonMessageClose(event) {\n\t\t\tif (event.uniquePopupId === this.uniquePopupId)\n\t\t\t{\n\t\t\t\tthis.setIsConfirmPopupShow(false);\n\t\t\t}\n\t\t},\n\t},\n\tmounted()\n\t{\n\t\tthis.messageBoxInstance = MessageBox.create({\n\t\t\tmessage: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_CANCEL_CONFIRM_TEXT'),\n\t\t\ttitle: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_CANCEL_CONFIRM_TITLE'),\n\t\t\tokCaption: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_CANCEL_CONFIRM_CLOSE'),\n\t\t\tcancelCaption: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_CANCEL_CONFIRM_CANCEL'),\n\t\t\tonOk: () => {\n\t\t\t\tthis.$Bitrix.eventEmitter.emit('crm:ai:form-fill:close-confirm:confirmClose', {});\n\t\t\t},\n\t\t\tonCancel: () => {\n\t\t\t\tthis.setIsConfirmPopupShow(false);\n\t\t\t},\n\t\t\tbuttons: BX.UI.Dialogs.MessageBoxButtons.OK_CANCEL,\n\t\t\tpopupOptions: {\n\t\t\t\ttargetContainer: this.$refs.closeConfirmRoot,\n\t\t\t\tid: this.uniquePopupId,\n\t\t\t},\n\t\t});\n\n\t\taddCustomEvent(window, 'BX.Main.Popup:onClose', this.onMessageClose);\n\n\t\tthis.messageBoxInstance.show();\n\t},\n\tunmounted()\n\t{\n\t\tif (this.messageBoxInstance)\n\t\t{\n\t\t\tthis.messageBoxInstance.close();\n\t\t}\n\t\tremoveCustomEvent(window, 'BX.Main.Popup:onClose', this.onMessageClose);\n\t},\n\ttemplate: `\n\t\t<div \n\t\t\tref=\"closeConfirmRoot\" \n\t\t\tclass=\"crm-ai-form-fill__close-confirm\"\n\t\t\t:class=\"{'hidden-footer': isFooterHiddenAndSaveDisabled}\"\n\t\t></div>\n\t`,\n};\n","import { mapGetters } from 'ui.vue3.vuex';\nimport '../css/entity-editor-wrapper.css';\n\nexport const EntityEditorWrapper = {\n\tname: 'EntityEditorWrapper',\n\tcomputed: {\n\t\t...mapGetters([\n\t\t\t'mergeUuid',\n\t\t]),\n\t\tentityEditorContainerId(): string {\n\t\t\treturn `crm-ai-merge-fields__container__${this.mergeUuid}_container`;\n\t\t},\n\t},\n\ttemplate: '<div v-bind:id=\"entityEditorContainerId\"></div>',\n};\n","import { addCustomEvent, removeCustomEvent, Text } from 'main.core';\nimport '../css/feedback-message.css';\nimport { mapActions, mapGetters } from 'ui.vue3.vuex';\nimport { createFeedbackMessageBox } from 'crm.ai.feedback';\n\nexport const FeedbackMessage = {\n\tname: 'FeedbackMessage',\n\tdata() {\n\t\treturn {\n\t\t\tmessageBoxInstance: null,\n\t\t\tuniquePopupId: `ai-form-fill-feedback-popup_${Text.getRandom(20).toLowerCase()}`,\n\t\t};\n\t},\n\tcomputed: {\n\t\t...mapGetters(['isFooterHiddenAndSaveDisabled']),\n\t},\n\tmethods: {\n\t\t...mapActions(['closeFeedbackMessage', 'sendAiCallParsingData']),\n\t\tasync onOKButton() {\n\t\t\tthis.closeFeedbackMessage(true);\n\t\t},\n\t\tonCancelButton() {\n\t\t\tthis.closeFeedbackMessage(false);\n\t\t\tthis.sendAiCallParsingData('feedback_refused');\n\t\t},\n\t\tonMessageClose(event) {\n\t\t\tif (event.uniquePopupId === this.uniquePopupId)\n\t\t\t{\n\t\t\t\tthis.closeFeedbackMessage(false);\n\t\t\t}\n\t\t},\n\t},\n\tmounted() {\n\t\tthis.messageBoxInstance = createFeedbackMessageBox({\n\t\t\tonOk: this.onOKButton,\n\t\t\tonCancel: this.onCancelButton,\n\t\t\tpopupOptions: {\n\t\t\t\ttargetContainer: this.$refs.feedbackMessageRoot,\n\t\t\t\tid: this.uniquePopupId,\n\t\t\t},\n\t\t});\n\n\t\taddCustomEvent(window, 'BX.Main.Popup:onClose', this.onMessageClose);\n\n\t\tthis.messageBoxInstance.show();\n\t},\n\tunmounted() {\n\t\tif (this.messageBoxInstance)\n\t\t{\n\t\t\tthis.messageBoxInstance.close();\n\t\t}\n\t\tremoveCustomEvent(window, 'BX.Main.Popup:onClose', this.onMessageClose);\n\t},\n\ttemplate: `\n\t\t<div \n\t\t\tref=\"feedbackMessageRoot\" \n\t\t\tclass=\"crm-ai-form-fill__confirm\" \n\t\t\t:class=\"{'hidden-footer': isFooterHiddenAndSaveDisabled}\"\n\t\t></div>\n\t`,\n};\n","import '../css/floating-action-button.css';\nimport { mapGetters } from 'ui.vue3.vuex';\n\nexport const FloatingActionButton = {\n\tname: 'FloatingActionButton',\n\tcomputed: {\n\t\t...mapGetters({\n\t\t\tcount: 'getNotVisibleUnresolvedCount',\n\t\t}),\n\t\tshowCounter(): boolean {\n\t\t\treturn this.count > 0;\n\t\t},\n\t},\n\tmethods: {\n\t\tclick() {\n\t\t\tthis.$Bitrix.eventEmitter.emit('crm:ai:form-fill:scroll-to-next', {});\n\t\t},\n\t},\n\ttemplate: `\n\t\t<div @click=\"click\" class=\"bx-crm-ai-merge-fields-fab\">\n\t\t\t<div\n\t\t\t\tv-if=\"showCounter\"\n\t\t\t\tclass=\"bx-crm-ai-merge-fields-fab_counter\"\n\t\t\t>{{count}}</div>\n\t\t\t<i class=\"bx-crm-ai-merge-fields-fab_icon\"></i>\n\t\t</div>\n\t`,\n};\n","import '../css/main.css';\nimport { Event, Runtime } from 'main.core';\nimport { sliderButtonsAdapter } from '../ai-form-fill-app';\nimport { myScrollTo } from '../services/utils';\nimport { CloseConfirm } from './close-confirm';\nimport { EntityEditorWrapper } from './entity-editor-wrapper';\nimport { FeedbackMessage } from './feedback-message';\nimport { FloatingActionButton } from './floating-action-button';\nimport { Loader } from './loader';\nimport { mapActions, mapGetters, mapMutations } from 'ui.vue3.vuex';\nimport { ToolBar } from './tool-bar';\nimport { Merger } from './merger';\n\nexport const Main = {\n\tname: 'Main',\n\tcomponents: {\n\t\tLoader,\n\t\tEntityEditorWrapper,\n\t\tToolBar,\n\t\tMerger,\n\t\tFloatingActionButton,\n\t\tCloseConfirm,\n\t\tFeedbackMessage,\n\t},\n\tdata() {\n\t\treturn {};\n\t},\n\tcomputed: {\n\t\t...mapGetters([\n\t\t\t'conflictFields',\n\t\t\t'isLoading',\n\t\t\t'eeControlPositions',\n\t\t\t'getFirstUnseenFieldPosition',\n\t\t\t'aiValuesAppliedCount',\n\t\t\t'mergeUuid',\n\t\t\t'isSliderConfirmPopupShown',\n\t\t\t'isFeedbackMessageShown',\n\t\t\t'isFooterHiddenAndSaveDisabled',\n\t\t]),\n\t},\n\tmethods: {\n\t\t...mapActions([\n\t\t\t'initialize',\n\t\t\t'saveFormFieldsToMerge',\n\t\t\t'updateControlPositionInfo',\n\t\t\t'updateSliderFooter',\n\t\t\t'closeFormWithoutConfirm',\n\t\t\t'sendAiCallParsingData',\n\t\t]),\n\t\t...mapMutations([\n\t\t\t'changeMainLayoutScrollPosition',\n\t\t\t'startLoading',\n\t\t\t'stopLoading',\n\t\t\t'setMainLayoutScrollHeight',\n\t\t]),\n\t\tonFooterSaveBtn() {\n\t\t\tthis.saveFormFieldsToMerge()\n\t\t\t\t.then(() => this.sendAiCallParsingData('conflict_accept_changes'))\n\t\t\t\t.catch(() => {})\n\t\t\t;\n\t\t},\n\t\tonFooterCancelBtn() {\n\t\t\tthis.closeFormWithoutConfirm();\n\t\t\tthis.sendAiCallParsingData('conflict_cancel_changes');\n\t\t},\n\t\tonCloseConfirm() {\n\t\t\tthis.closeFormWithoutConfirm();\n\t\t},\n\t\thandleScroll: null, // will be assigned in the mounted callback\n\t\tpositionChanged() {\n\t\t\tthis.setMainLayoutScrollHeight(this.$refs.layout.scrollHeight);\n\t\t\tthis.changeMainLayoutScrollPosition({\n\t\t\t\tscrollTop: this.$refs.layout.scrollTop,\n\t\t\t\tcontainerHeight: this.$refs.layout.getBoundingClientRect().height,\n\t\t\t});\n\t\t},\n\t\tresizeHandler() {\n\t\t\tthis.handleScroll();\n\t\t},\n\t\tscrollToNext() {\n\t\t\tconst scrollTo = this.getFirstUnseenFieldPosition;\n\t\t\tif (scrollTo)\n\t\t\t{\n\t\t\t\tmyScrollTo(this.$refs.layout, scrollTo, 300);\n\t\t\t}\n\t\t},\n\t\tsubscribeInternalEvents() {\n\t\t\tthis.$Bitrix.eventEmitter.subscribe('crm:ai:form-fill:scroll-to-next', this.scrollToNext);\n\t\t\tthis.$Bitrix.eventEmitter.subscribe('crm:ai:form-fill:close-confirm:confirmClose', this.onCloseConfirm);\n\t\t\tthis.$Bitrix.eventEmitter.subscribe('crm:ai:form-fill:close-confirm:cancelClose', this.scrollToNext);\n\t\t},\n\t\tunSubscribeInternalEvents() {\n\t\t\tthis.$Bitrix.eventEmitter.unsubscribe('crm:ai:form-fill:scroll-to-next', this.scrollToNext);\n\t\t\tthis.$Bitrix.eventEmitter.unsubscribe('crm:ai:form-fill:close-confirm:confirmClose', this.onCloseConfirm);\n\t\t\tthis.$Bitrix.eventEmitter.unsubscribe('crm:ai:form-fill:close-confirm:cancelClose', this.scrollToNext);\n\t\t},\n\t\tautoScrollToFirst() {\n\t\t\tconst height = this.$refs.layout.getBoundingClientRect().height;\n\t\t\tconst firstPosY = this.getFirstUnseenFieldPosition;\n\t\t\tif (firstPosY && firstPosY > height)\n\t\t\t{\n\t\t\t\tmyScrollTo(this.$refs.layout, firstPosY, 800);\n\t\t\t}\n\t\t},\n\t},\n\tasync mounted() {\n\t\tthis.updateSliderFooter();\n\t\tthis.startLoading();\n\t\tthis.handleScroll = Runtime.throttle(() => {\n\t\t\tthis.positionChanged();\n\t\t}, 300);\n\n\t\tawait this.initialize();\n\t\tthis.positionChanged();\n\n\t\tthis.subscribeInternalEvents();\n\n\t\tawait this.$nextTick(() => {\n\t\t\tEvent.bind(window, 'resize', this.resizeHandler);\n\t\t});\n\t\tthis.stopLoading();\n\n\t\tthis.autoScrollToFirst();\n\n\t\tsliderButtonsAdapter.onSaveCallback = this.onFooterSaveBtn;\n\t\tsliderButtonsAdapter.onCancelCallback = this.onFooterCancelBtn;\n\t},\n\twatch: {\n\t\taiValuesAppliedCount: {\n\t\t\thandler(newVal, oldVal) {\n\t\t\t\tthis.updateSliderFooter();\n\t\t\t},\n\t\t\timmediate: true,\n\t\t},\n\t},\n\tunmounted() {\n\t\tthis.unSubscribeInternalEvents();\n\t\tEvent.unbind(window, 'resize', this.resizeHandler);\n\t},\n\ttemplate: `\n\t\t<div class=\"bx-crm-ai-merge-fields\" :class=\"{'hidden-footer': isFooterHiddenAndSaveDisabled}\">\n\t\t\t<div \n\t\t\t\tclass=\"bx-crm-ai-merge-fields-layout\" \n\t\t\t\t@scroll=\"handleScroll\"\n\t\t\t\tref=\"layout\"\n\t\t\t\t:style=\"{'visibility': !isLoading ? 'visible' : 'hidden'}\"\n\t\t\t\t:class=\"{'hidden-footer': isFooterHiddenAndSaveDisabled}\"\n\t\t\t>\n\t\t\t\t<EntityEditorWrapper class=\"bx-crm-ai-merge-fields-layout__ee_column\"/>\n\t\t\t\t<Merger class=\"bx-crm-ai-merge-fields-layout__aifields_column\"/>\n\t\t\t\t<div class=\"bx-crm-ai-merge-fields-layout__floating-button_column\">\n\t\t\t\t\t<FloatingActionButton/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Loader v-if=\"isLoading\" />\n\t\t\t<CloseConfirm v-if=\"isSliderConfirmPopupShown\" />\n\t\t\t<FeedbackMessage v-if=\"isFeedbackMessageShown\" />\n\t\t</div>\n\t`,\n};\n","import '../css/loader.css';\n\nexport const Loader = {\n\tname: 'Loader',\n\tdata() {\n\t\treturn {\n\t\t\tloaderInstance: null,\n\t\t};\n\t},\n\ttemplate: `\n\t\t<div ref=\"root\" class=\"bx-crm-ai-merge-fields-loading\">\n\t\t\t<div class=\"bx-crm-ai-merge-fields-loading__image\"></div>\n\t\t</div>\n\t`,\n};\n","import '../css/tool-bar.css';\nimport { mapActions, mapGetters } from 'ui.vue3.vuex';\nimport { ConflictField } from '../store/types';\nimport { Loc } from 'main.core';\n\nexport const ToolBar = {\n\tname: 'ToolBar',\n\tcomputed: {\n\t\t...mapGetters(['conflictFields']),\n\t\tconflictCount(): number {\n\t\t\treturn this.conflictFields.length;\n\t\t},\n\t\tresolvedCount(): number {\n\t\t\treturn this.conflictFields.filter((f: ConflictField) => f.isAiValuesUsed).length;\n\t\t},\n\t\tisApplyAllDisabled(): boolean {\n\t\t\treturn this.conflictCount === this.resolvedCount;\n\t\t},\n\t\tisRevertDisabled(): boolean {\n\t\t\treturn this.resolvedCount === 0;\n\t\t},\n\t\ttitleText(): string {\n\t\t\treturn Loc.getMessage('CRM_AI_FORM_FILL_TOOLBAR_CONFLICT_COUNT_TITLE');\n\t\t},\n\t\tapplyAllBtnText(): string {\n\t\t\treturn Loc.getMessage('CRM_AI_FORM_FILL_TOOLBAR_BUTTON_APPLY_ALL');\n\t\t},\n\t\trevertText(): string {\n\t\t\treturn Loc.getMessage('CRM_AI_FORM_FILL_TOOLBAR_BUTTON_ROLLBACK');\n\t\t},\n\t},\n\tmethods: {\n\t\t...mapActions(['applyAllAiFields', 'revertAllAiFields']),\n\t},\n\ttemplate: `\n\t\t<div class=\"bx-crm-ai-form-fill__toolbar\">\n\t\t\t<div class=\"bx-crm-ai-form-fill__toolbar__conflict_count\">\n\t\t\t\t{{ titleText }}<span class=\"bx-crm-ai-form-fill__toolbar__conflict_count__count\">{{conflictCount}}</span>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclass=\"bx-crm-ai-form-fill__toolbar__button\"\n\t\t\t\t@click=\"applyAllAiFields\"\n\t\t\t>{{ applyAllBtnText }}</div>\n\t\t\t<div\n\t\t\t\tclass=\"bx-crm-ai-form-fill__toolbar__button\"\n\t\t\t\t@click=\"revertAllAiFields\"\n\t\t\t>{{ revertText }}</div>\n\t\t</div>\n\t`,\n};\n","import { mapGetters } from 'ui.vue3.vuex';\nimport '../css/merger.css';\nimport type { ConflictField } from '../store/types';\nimport { MergeControl } from './merge-control';\n\nexport const Merger = {\n\tname: 'Merger',\n\tcomponents: {\n\t\tMergeControl,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tisRootMounted: false,\n\t\t};\n\t},\n\tcomputed: {\n\t\t...mapGetters([\n\t\t\t'conflictFields',\n\t\t\t'eeControlPosition',\n\t\t\t'eeControlPositions',\n\t\t\t'getMainLayoutScrollPosition',\n\t\t]),\n\t},\n\tmethods: {\n\t\tgetControlTopOffset(field: ConflictField): number {\n\t\t\treturn this.eeControlPositions.get(field.name, 0);\n\t\t},\n\t},\n\tmounted()\n\t{\n\t\tthis.isRootMounted = true;\n\t},\n\ttemplate: `\n\t\t<div ref=\"root\" class=\"bx-crm-ai-merge-fields-merger \">\n\t\t\t<MergeControl\n\t\t\t\tv-if=\"isRootMounted\"\n\t\t\t\tv-for=\"field in conflictFields\" :key=\"field.name\"\n\t\t\t\tclass=\"bx-crm-ai-merge-fields-merger__field\"\n\t\t\t\t:style=\"{top: getControlTopOffset(field) + 'px'}\"\n\t\t\t\t:field=\"field\"\n\t\t\t\t:tmp=\"getControlTopOffset(field)\"\n\t\t\t></MergeControl>\n\t\t</div>\n\t`,\n};\n","import '../css/merge-control.css';\nimport { Loc } from 'main.core';\nimport { watch, nextTick } from 'ui.vue3';\nimport { mapActions, mapGetters, mapMutations } from 'ui.vue3.vuex';\n\nexport const MergeControl = {\n\tname: 'MergeControl',\n\tprops: {\n\t\tfield: {\n\t\t\ttype: Object,\n\t\t\trequired: true,\n\t\t},\n\t\ttmp: Number,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\thasLargeContent: true,\n\t\t\tisExpanded: false,\n\t\t\tcoveredByAnother: false,\n\t\t};\n\t},\n\tcomputed: {\n\t\t...mapGetters(['getexpandedConflictControls', 'eeControlPositions']),\n\t\treplaceBtnText(): string {\n\t\t\treturn this.field.isAiValuesUsed\n\t\t\t\t? Loc.getMessage('CRM_AI_FORM_FILL_MERGER_REPLACE_BTN_BACK')\n\t\t\t\t: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_REPLACE_BTN_FORTH');\n\t\t},\n\t\tvalue(): string {\n\t\t\treturn this.field.isAiValuesUsed ? this.field.originalValue : this.field.aiValue;\n\t\t},\n\t},\n\tmethods: {\n\t\t...mapActions(['setEditorFieldValue', 'showEntityEditorControlOutline']),\n\t\t...mapMutations(['toggleExpandedConflictControls']),\n\t\tasync toggleAiValue(field) {\n\t\t\tawait this.setEditorFieldValue(field);\n\t\t\tawait this.expand(false);\n\t\t\tthis.hasLargeContent = this.checkHasLargeContent();\n\t\t},\n\t\tasync expand(expand: boolean) {\n\t\t\tif (!this.hasLargeContent)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.isExpanded = expand;\n\t\t\tawait nextTick();\n\t\t\tthis.toggleExpandedConflictControls({\n\t\t\t\tfieldId: this.field.name,\n\t\t\t\tsize: this.$refs.root.getBoundingClientRect().height,\n\t\t\t\tisExpanded: expand,\n\t\t\t});\n\t\t},\n\t\tonControlsExpandedModeChange() {\n\t\t\tlet coveredByAnother = false;\n\t\t\tconst selfPosY = this.eeControlPositions.get(this.field.name, 0);\n\n\t\t\tfor (const [fieldName, size] of this.getexpandedConflictControls)\n\t\t\t{\n\t\t\t\tconst expandedPosY = this.eeControlPositions.get(fieldName, 0);\n\n\t\t\t\tif (selfPosY > expandedPosY && selfPosY - expandedPosY < size)\n\t\t\t\t{\n\t\t\t\t\tcoveredByAnother = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.coveredByAnother = coveredByAnother;\n\t\t},\n\t\tcheckHasLargeContent(): boolean {\n\t\t\treturn this.$refs.fieldValue.scrollWidth > this.$refs.fieldValue.clientWidth;\n\t\t},\n\t\tonMouseenter(e) {\n\t\t\tthis.showEntityEditorControlOutline({ fieldName: this.field.name, isShow: true });\n\t\t\tthis.expand(true);\n\t\t},\n\t\tonMouseleave(e) {\n\t\t\tthis.showEntityEditorControlOutline({ fieldName: this.field.name, isShow: false });\n\t\t\tthis.expand(false);\n\t\t},\n\t},\n\tmounted()\n\t{\n\t\tthis.hasLargeContent = this.checkHasLargeContent();\n\t\twatch(this.getexpandedConflictControls, this.onControlsExpandedModeChange);\n\t},\n\ttemplate: `\n\t\t<div \n\t\t\tclass=\"bx-crm-ai-form-fill-merge-control__container\"\n\t\t\t:class=\"{'expanded': isExpanded, 'covered': coveredByAnother}\"\n\t\t\t@mouseenter=\"onMouseenter\"\n\t\t\t@mouseleave=\"onMouseleave\"\n\t\t\tref=\"root\"\n\t\t>\n\t\t\t<div \n\t\t\t\tclass=\"bx-crm-ai-form-fill-merge-control-icon\"\n\t\t\t\t@click=\"toggleAiValue(field)\"\n\t\t\t>\n\n\t\t\t</div>\n\t\t\t<div class=\"bx-crm-ai-form-fill-merge-control-field\">\n\t\t\t\t<div\n\t\t\t\t\tclass=\"bx-crm-ai-form-fill-merge-control-field-title\"\n\t\t\t\t\t:title=\"field.title\"\n\t\t\t\t>{{ field.title }}</div>\n\t\t\t\t<div class=\"bx-crm-ai-form-fill-merge-control-field-value-container\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tref=\"fieldValue\"\n\t\t\t\t\t\tclass=\"bx-crm-ai-form-fill-merge-control-field-value-container__value\"\n\t\t\t\t\t\t:class=\"{'expanded': isExpanded, 'ai-value': !field.isAiValuesUsed}\"\n\t\t\t\t\t\t:title=\"this.value\"\n\t\t\t\t\t>{{ this.value }}</div>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=\"bx-crm-ai-form-fill-merge-control-field-value-container__control\"\n\t\t\t\t\t\t:class=\"{'expanded': isExpanded}\"\n\t\t\t\t\t\t:style=\"{display: hasLargeContent ? 'block': 'none'}\"\n\t\t\t\t\t></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclass=\"bx-crm-ai-form-fill-merge-control-right-column\"\n\t\t\t\t@click=\"toggleAiValue(field)\"\n\t\t\t>\n\t\t\t\t<div \n\t\t\t\t\tclass=\"bx-crm-ai-form-fill-merge-control-button\">\n\t\t\t\t\t{{ replaceBtnText }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`,\n};\n","import { Type, Dom, addCustomEvent } from 'main.core';\nimport { EditorControlsParams } from '../store/types';\nimport type { UserFieldModel } from '../store/types';\nimport { timeout } from './utils';\n\nconst controlOutlineClassName = 'bx-crm-ai-merge-fields-ee-control-outline';\nconst controlAiValueClassName = 'bx-crm-ai-merge-fields-ee-control-ai-value';\n\nexport class EntityEditorProxy\n{\n\t#editor = null;\n\n\t#initialContainerTop;\n\n\t#onUserFieldDeployedCb = null;\n\n\tasync init(entityEditor)\n\t{\n\t\tthis.#editor = entityEditor;\n\t\tconst correctionY = 5;\n\t\tthis.#initialContainerTop = this.#editor.getContainer().getBoundingClientRect().y + correctionY;\n\n\t\taddCustomEvent(\n\t\t\twindow,\n\t\t\t'BX.UI.EntityUserFieldLayoutLoader:onUserFieldDeployed',\n\t\t\t(field) => {\n\t\t\t\tif (!Type.isFunction(this.#onUserFieldDeployedCb))\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.#onUserFieldDeployedCb(field);\n\t\t\t},\n\t\t);\n\t}\n\n\tsetOnUserFieldDeployedCb(cb) {\n\t\tthis.#onUserFieldDeployedCb = cb;\n\t}\n\n\tasync getEditorControlsParams(fieldsIds: Set<string[]>): Promise<EditorControlsParams[]>\n\t{\n\t\tawait timeout(10);\n\t\tconst result: EditorControlsParams[] = [];\n\n\t\tlet counter = 0;\n\t\tfor (const control of this.#editor.getAllControls())\n\t\t{\n\t\t\tif (!fieldsIds.has(control.getId()) || !control.getWrapper())\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [value, model] = this.#getValueFromControl(control);\n\n\t\t\tresult.push({\n\t\t\t\tfieldId: control.getId(),\n\t\t\t\trelatedFieldOffsetY: control.getWrapper().getBoundingClientRect().y,\n\t\t\t\toriginalValue: value,\n\t\t\t\toriginalModel: model,\n\t\t\t\torder: counter,\n\t\t\t});\n\t\t\tcounter++;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync getEditorControlsPositions(fieldsIds: Set<string[]>): Promise<Map<string, number>>\n\t{\n\t\tconst result = new Map();\n\n\t\tfor (const control of this.#editor.getAllControls())\n\t\t{\n\t\t\tif (!fieldsIds.has(control.getId()) || !control.getWrapper())\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst y = control.getWrapper().getBoundingClientRect().y;\n\t\t\tresult.set(control.getId(), y - this.#initialContainerTop);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tsetControlOutline(fieldId: string, show: boolean): void\n\t{\n\t\tconst control = this.#editor.getControlById(fieldId);\n\n\t\tif (!control)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tconst wrapper = control.getWrapper();\n\n\t\tif (show)\n\t\t{\n\t\t\tDom.addClass(wrapper, controlOutlineClassName);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tDom.removeClass(wrapper, controlOutlineClassName);\n\t\t}\n\t}\n\n\tsetControlAiClass(fieldId: string, show: boolean): void\n\t{\n\t\tconst control = this.#editor.getControlById(fieldId);\n\n\t\tif (!control)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tconst wrapper = control.getWrapper();\n\n\t\tif (show)\n\t\t{\n\t\t\tDom.addClass(wrapper, controlAiValueClassName);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tDom.removeClass(wrapper, controlAiValueClassName);\n\t\t}\n\t}\n\n\tasync setFieldValue(fieldName: string, newValue: ControlValue)\n\t{\n\t\tconst control = this.#editor.getControlById(fieldName);\n\n\t\tif (!control)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (control.constructor)\n\t\t{\n\t\t\tcase BX.Crm.EntityEditorText:\n\t\t\t\tthis.#setPlainTextFieldValue(fieldName, newValue.value);\n\t\t\t\tbreak;\n\t\t\tcase BX.UI.EntityEditorBB:\n\t\t\t\tthis.#setEntityEditorBBValue(fieldName, newValue.value);\n\t\t\t\tthis.#refreshControlLayout(control);\n\t\t\t\tbreak;\n\t\t\tcase BX.Crm.EntityEditorUserField:\n\t\t\t\tthis.#setUserFieldValue(fieldName, newValue.model);\n\t\t\t\tthis.#refreshControlLayout(control);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Not supported field type');\n\t\t}\n\t}\n\n\t#refreshControlLayout(control)\n\t{\n\t\tcontrol.refreshLayout({ reset: true });\n\t}\n\n\t#setEntityEditorBBValue(fieldId, value)\n\t{\n\t\tconst fieldKey = `${fieldId}_HTML`;\n\t\tconst model = this.#editor.getModel();\n\t\tmodel.setField(fieldKey, value, { enableNotification: true });\n\t}\n\n\t#setPlainTextFieldValue(fieldId, value)\n\t{\n\t\tconst model = this.#editor.getModel();\n\t\tmodel.setField(fieldId, value, { enableNotification: true });\n\t}\n\n\t#setUserFieldValue(fieldId, signedModel)\n\t{\n\t\tconst model = this.#editor.getModel();\n\t\tmodel.setField(fieldId, signedModel);\n\t}\n\n\t#getValueFromControl(control): [?any, ?UserFieldModel] {\n\t\tconst controlValue = control.getValue();\n\n\t\tlet value: ?any = null;\n\t\tlet ufModel: ?UserFieldModel = null;\n\n\t\tif (control.constructor === BX.UI.EntityEditorBB)\n\t\t{\n\t\t\tconst model = this.#editor.getModel();\n\t\t\tconst fieldKey = `${control.getId()}_HTML`;\n\t\t\tvalue = model.getField(fieldKey, '');\n\t\t}\n\t\telse if (\n\t\t\tType.isObject(controlValue)\n\t\t\t&& Object.hasOwn(controlValue, 'VALUE')\n\t\t)\n\t\t{\n\t\t\tvalue = controlValue.VALUE;\n\t\t\tufModel = controlValue;\n\t\t}\n\t\telse if (Type.isString(controlValue) || Type.isNumber(controlValue))\n\t\t{\n\t\t\tvalue = controlValue;\n\t\t\tufModel = null;\n\t\t}\n\n\t\treturn [value, ufModel];\n\t}\n}\n\nexport interface ControlValue {\n\tmodel: ?UserFieldModel,\n\tvalue: string | number | null\n}\n","import type { ConflictField } from './types';\nimport { EntityInfo } from './types';\n\nexport default {\n\tisLoading(state): boolean {\n\t\treturn state.isLoading;\n\t},\n\tconflictFields(state): string[] {\n\t\treturn state.conflictFields.sort((a, b) => a.order - b.order);\n\t},\n\tmergeUuid(state): string {\n\t\treturn state.mergeUuid;\n\t},\n\tcrmMode(state): string {\n\t\treturn state.crmMode;\n\t},\n\tcallId(state): string {\n\t\treturn state.callId;\n\t},\n\tgetEntityInfo(state): ?EntityInfo {\n\t\treturn state.entityInfo;\n\t},\n\tisEntityEditorLoaded(state): boolean {\n\t\treturn state.isEntityEditorLoaded;\n\t},\n\teeControlPosition: (state) => (fieldId: string) => {\n\t\treturn state.eeControlPositions.get(fieldId, 0);\n\t},\n\teeControlPositions: (state) => {\n\t\treturn state.eeControlPositions;\n\t},\n\tgetexpandedConflictControls: (state) => {\n\t\treturn state.expandedConflictControls;\n\t},\n\tgetNotVisibleUnresolvedCount: (state) => {\n\t\treturn state.notVisibleUnresolvedCount;\n\t},\n\tgetMainLayoutScrollPosition: (state) => {\n\t\treturn state.mainLayoutScrollPosition;\n\t},\n\tgetMainLayoutContainerHeight: (state) => {\n\t\treturn state.mainLayoutContainerHeight;\n\t},\n\tgetMainLayoutScrollHeight: (state) => {\n\t\treturn state.mainLayoutScrollHeight;\n\t},\n\tgetFirstUnseenFieldPosition: (state) => {\n\t\tconst position = state.mainLayoutScrollPosition;\n\n\t\tlet lowerField = null;\n\t\tlet min = Infinity;\n\t\tfor (const [fieldName, value] of state.eeControlPositions)\n\t\t{\n\t\t\tconst field: ConflictField = state.conflictFields.find((f) => f.name === fieldName);\n\n\t\t\tif (!field || field.isAiValuesUsed || position + 120 > value)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (value < min)\n\t\t\t{\n\t\t\t\tmin = value;\n\t\t\t\tlowerField = fieldName;\n\t\t\t}\n\t\t}\n\n\t\tif (!lowerField)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\treturn state.eeControlPositions.get(lowerField);\n\t},\n\tisFieldsTouched: (state): boolean => {\n\t\treturn state.isFieldsTouched;\n\t},\n\taiValuesAppliedCount: (state): number => {\n\t\treturn state.aiValuesAppliedCount;\n\t},\n\tisFooterHiddenAndSaveDisabled(state): boolean {\n\t\treturn state.aiValuesAppliedCount === 0;\n\t},\n\tisSliderConfirmPopupShown: (state): boolean => {\n\t\treturn state.isSliderConfirmPopupShown;\n\t},\n\tisNeededShowCloseConfirm: (state): boolean => {\n\t\treturn state.isNeededShowCloseConfirm;\n\t},\n\tisFeedbackMessageShown: (state): boolean => {\n\t\treturn state.aiFeedback.isMessageComponentShown;\n\t},\n\tisAiFeedbackShowBeforeClose(state): boolean {\n\t\treturn state.aiFeedback.showBeforeClose;\n\t},\n\taiFeedback(state) {\n\t\treturn state.aiFeedback;\n\t},\n};\n","import type { ConflictField } from './types';\nimport { EntityInfo, FEEDBACK_TRIGGER_CONTROL } from './types';\n\n/* eslint no-param-reassign: off */\nexport default {\n\tsetMergeUUID: (state, val) => {\n\t\tstate.mergeUuid = val;\n\t},\n\tsetCrmMode: (state, val) => {\n\t\tstate.crmMode = val;\n\t},\n\tsetCallId: (state, val) => {\n\t\tstate.callId = val;\n\t},\n\tstartLoading: (state) => {\n\t\tstate.isLoading = true;\n\t},\n\tstopLoading: (state) => {\n\t\tstate.isLoading = false;\n\t},\n\tsetEntityInfo: (state, entityInfo: EntityInfo) => {\n\t\tstate.entityInfo = entityInfo;\n\t},\n\tsetConflictFields: (state, conflictFields) => {\n\t\tstate.conflictFields = conflictFields;\n\t},\n\tsetEditMode: (state, isEditMode) => {\n\t\tstate.isEditMode = isEditMode;\n\t},\n\tsetIsEntityEditorLoaded(state, isEntityEditorLoaded) {\n\t\tstate.isEntityEditorLoaded = isEntityEditorLoaded;\n\t},\n\tupdateConflictField: (state, { name, field }) => {\n\t\tstate.conflictFields = state.conflictFields.map((f) => {\n\t\t\tif (f.name === name)\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\t...f,\n\t\t\t\t\t...field,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn f;\n\t\t});\n\t\tconst aiAppliedCount = state.conflictFields.filter((f) => f.isAiValuesUsed).length;\n\t\tstate.aiValuesAppliedCount = aiAppliedCount;\n\t\tstate.isNeededShowCloseConfirm = aiAppliedCount > 0;\n\t},\n\tsetEeControlPositions: (state, { fieldId, topPosition }) => {\n\t\tstate.eeControlPositions.set(fieldId, topPosition);\n\t},\n\ttoggleExpandedConflictControls: (state, { fieldId, size, isExpanded }) => {\n\t\tif (isExpanded)\n\t\t{\n\t\t\tstate.expandedConflictControls.set(fieldId, size);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstate.expandedConflictControls.delete(fieldId);\n\t\t}\n\t},\n\tchangeMainLayoutScrollPosition: (state, { scrollTop, containerHeight }) => {\n\t\tconst containerBottomPosition = scrollTop + containerHeight;\n\t\tstate.mainLayoutScrollPosition = scrollTop;\n\t\tstate.mainLayoutContainerHeight = containerHeight;\n\n\t\tconst hidden = [];\n\t\tconst controlHeight = 30;\n\n\t\tfor (const [key, value] of state.eeControlPositions)\n\t\t{\n\t\t\tif (containerBottomPosition < value + controlHeight)\n\t\t\t{\n\t\t\t\thidden.push(key);\n\t\t\t}\n\t\t}\n\n\t\tif (hidden.length === 0)\n\t\t{\n\t\t\tstate.notVisibleUnresolvedCount = 0;\n\n\t\t\treturn;\n\t\t}\n\n\t\tlet counter = 0;\n\t\tfor (const hideName of hidden)\n\t\t{\n\t\t\tconst field: ConflictField = state.conflictFields.find((f) => f.name === hideName);\n\n\t\t\tif (!field || field.isAiValuesUsed)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcounter++;\n\t\t}\n\t\tstate.notVisibleUnresolvedCount = counter;\n\t},\n\tsetIsFieldsTouched(state, isFieldsTouched) {\n\t\tstate.isFieldsTouched = isFieldsTouched;\n\t},\n\tsetIsConfirmPopupShow(state, isSliderConfirmPopupShown) {\n\t\tstate.isSliderConfirmPopupShown = isSliderConfirmPopupShown;\n\t},\n\tsetNeededShowCloseConfirm(state, isNeededShowCloseConfirm) {\n\t\tstate.isNeededShowCloseConfirm = isNeededShowCloseConfirm;\n\t},\n\tshowFeedbackMessageIfNeeded(state, source) {\n\t\tif (\n\t\t\tstate.aiFeedback.feedbackWasSent\n\t\t\t|| (source === FEEDBACK_TRIGGER_CONTROL && state.aiFeedback.isShownByReturnBtn)\n\t\t)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tstate.aiFeedback.lastTriggeredBy = source;\n\t\tif (source === FEEDBACK_TRIGGER_CONTROL)\n\t\t{\n\t\t\tstate.aiFeedback.isShownByReturnBtn = true;\n\t\t}\n\t\tstate.aiFeedback.isMessageComponentShown = true;\n\t},\n\thideFeedbackMessage(state) {\n\t\tstate.aiFeedback.isMessageComponentShown = false;\n\t},\n\tsetAiFeedbackWasSent(state, isFeedbackWasSent) {\n\t\tstate.aiFeedback.feedbackWasSent = isFeedbackWasSent;\n\t},\n\tsetAiFeedbackShowBeforeClose(state, showBeforeClose) {\n\t\tstate.aiFeedback.showBeforeClose = showBeforeClose;\n\t},\n\tsetMainLayoutScrollHeight(state, height) {\n\t\tstate.mainLayoutScrollHeight = height;\n\t},\n};\n/* eslint no-param-reassign: 2 */\n","export interface FormFieldsToMergeResult {\n\ttarget: EntityInfo,\n\teditMode: boolean;\n\tfields: FieldInfo[];\n\tentity: {\n\t\tentityId: number;\n\t\tentityTypeName: string;\n\t\teditorId: string;\n\t}\n}\n\nexport interface FieldInfo {\n\tname: string;\n\ttype: string;\n\ttitle: string;\n\taiModel: UserFieldModel;\n\tisMultiple: boolean;\n\tisUserField: boolean;\n}\n\nexport interface EntityInfo {\n\tentityTypeName: string;\n\tentityTypeId: number;\n\tentityId: number;\n\tcategoryId: ?number;\n\teditorId: string;\n\tfeedbackWasSent: boolean;\n}\n\nexport interface ConflictField extends FieldInfo {\n\taiValue: any;\n\toriginalValue: any;\n\toriginalModel: ?UserFieldModel,\n\tisAiValuesUsed: boolean;\n\torder: number;\n}\n\nexport interface UserFieldModel {\n\tVALUE: any;\n\tIS_EMPTY: boolean;\n\tSIGNATURE: string;\n}\n\nexport interface EditorControlsParams {\n\tfieldId: string;\n\trelatedFieldOffsetY: number;\n\toriginalValue: any;\n\toriginalModel: ?UserFieldModel,\n\torder: number;\n}\n\nexport const FEEDBACK_TRIGGER_CONTROL = 'FEEDBACK_TRIGGER_CONTROL';\nexport const FEEDBACK_TRIGGER_APP_CLOSE = 'FEEDBACK_TRIGGER_APP_CLOSE';\n\n","import { addCustomEvent } from 'main.core';\n\nexport class EntityEditorRender\n{\n\t#params: EntityEditorRenderParams;\n\tconstructor(params: EntityEditorRenderParams)\n\t{\n\t\tthis.#params = params;\n\t}\n\n\tasync render(): Promise\n\t{\n\t\tthis.#fetchEntityEditor(this.#params);\n\n\t\treturn new Promise((resolve) => {\n\t\t\taddCustomEvent(\n\t\t\t\twindow,\n\t\t\t\t'BX.Crm.EntityEditor:onUserFieldsDeployed',\n\t\t\t\tasync (editor) => {\n\t\t\t\t\tif (editor.getId() !== this.#params.domContainerId)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tresolve(editor);\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t}\n\n\t#fetchEntityEditor(params: EntityEditorRenderParams): void\n\t{\n\t\tlet eeUrl = '';\n\t\tswitch (params.entityTypeName)\n\t\t{\n\t\t\tcase 'DEAL':\n\t\t\t\teeUrl = '/bitrix/components/bitrix/crm.deal.details/ajax.php';\n\t\t\t\tbreak;\n\t\t\tcase 'LEAD':\n\t\t\t\teeUrl = '/bitrix/components/bitrix/crm.lead.details/ajax.php';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown entity type: ${params.entityTypeName}`);\n\t\t}\n\n\t\t// eslint-disable-next-line @bitrix24/bitrix24-rules/no-bx\n\t\teeUrl = `${eeUrl}?sessid=${BX.bitrix_sessid()}`;\n\n\t\tBX.ajax.post(\n\t\t\teeUrl,\n\t\t\t{\n\t\t\t\tACTION: 'PREPARE_EDITOR_HTML',\n\t\t\t\tACTION_ENTITY_TYPE_NAME: params.entityTypeName,\n\t\t\t\tACTION_ENTITY_ID: params.entityId,\n\t\t\t\tGUID: params.domContainerId,\n\t\t\t\tCONFIG_ID: params.configId,\n\t\t\t\tFORCE_DEFAULT_CONFIG: 'N',\n\t\t\t\tFORCE_DEFAULT_OPTIONS: 'Y',\n\t\t\t\tIS_EMBEDDED: 'Y',\n\t\t\t\tENABLE_CONFIG_SCOPE_TOGGLE: 'N',\n\t\t\t\tENABLE_CONFIGURATION_UPDATE: 'N',\n\t\t\t\tENABLE_REQUIRED_USER_FIELD_CHECK: 'N',\n\t\t\t\tENABLE_FIELDS_CONTEXT_MENU: 'N',\n\t\t\t\tCONTEXT: {},\n\t\t\t\tREAD_ONLY: 'Y',\n\t\t\t\tMODULE_ID: 'crm',\n\t\t\t},\n\t\t\t() => {},\n\t\t);\n\t}\n}\n\nexport interface EntityEditorRenderParams {\n\tentityTypeName: string;\n\tentityId: number;\n\tconfigId: string;\n\tdomContainerId: string;\n}\n","import { Loc, onCustomEvent } from 'main.core';\nimport { sendData } from 'ui.analytics';\nimport { UI } from 'ui.notification';\nimport { copilotSliderInstance, sliderButtonsAdapter } from '../ai-form-fill-app';\nimport { sendFeedback, wasFeedbackSent } from 'crm.ai.feedback';\nimport { entityEditorProxy } from '../app';\nimport { ControlValue } from '../services/entity-editor-proxy';\nimport { EntityEditorRender } from '../services/entity-editor-render';\nimport { timeout } from '../services/utils';\nimport type { EntityInfo } from './types';\nimport {\n\tConflictField,\n\tEditorControlsParams,\n\tFEEDBACK_TRIGGER_APP_CLOSE,\n\tFEEDBACK_TRIGGER_CONTROL,\n\tFormFieldsToMergeResult,\n} from './types';\n\nexport default {\n\tasync initialize({ dispatch, getters }) {\n\t\tawait dispatch('fetchFormFieldsToMerge');\n\t\tawait dispatch('createEntityEditor');\n\t\tawait dispatch('collectFieldDataFromEntityEditor');\n\t\tawait dispatch('updateControlPositionInfo');\n\t},\n\tasync fetchFormFieldsToMerge({ commit, getters }) {\n\t\tconst data: FormFieldsToMergeResult = await fetchMergeFields(getters.mergeUuid);\n\n\t\tconst fields: ConflictField[] = data.fields.map((field): ConflictField => {\n\t\t\treturn {\n\t\t\t\tname: field.name,\n\t\t\t\ttype: field.type,\n\t\t\t\ttitle: field.title,\n\t\t\t\taiModel: field.aiModel,\n\t\t\t\tisMultiple: field.isMultiple,\n\t\t\t\tisUserField: field.isUserField,\n\t\t\t\taiValue: field.aiModel.VALUE,\n\t\t\t\toriginalValue: null,\n\t\t\t\toriginalModel: null,\n\t\t\t\tisAiValuesUsed: false,\n\t\t\t};\n\t\t});\n\n\t\tcommit('setConflictFields', fields);\n\t\tcommit('setEditMode', data.editMode);\n\t\tcommit('setEntityInfo', data.target);\n\t\tcommit('setAiFeedbackWasSent', data.target.feedbackWasSent);\n\t\tcommit('setAiFeedbackShowBeforeClose', !data.target.feedbackWasSent);\n\t},\n\tasync saveFormFieldsToMerge({ getters, commit, dispatch }) {\n\t\tconst fieldNamesToApply = getters.conflictFields\n\t\t\t.filter((field: ConflictField) => field.isAiValuesUsed)\n\t\t\t.map((field: ConflictField) => field.name);\n\n\t\tconst mergeUuid = getters.mergeUuid;\n\n\t\tconst response = await BX.ajax.runAction('crm.timeline.ai.applyMerge', {\n\t\t\tmethod: 'GET',\n\t\t\tgetParameters: { mergeUuid, fieldNamesToApply },\n\t\t});\n\t\tcommit('setAiFeedbackShowBeforeClose', false);\n\n\t\tif (response.status === 'success')\n\t\t{\n\t\t\tdispatch('closeFormWithoutConfirm');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUI.Notification.Center.notify({\n\t\t\t\tcontent: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_SAVE_ERROR'),\n\t\t\t\tautoHideDelay: 5000,\n\t\t\t});\n\t\t}\n\t},\n\tshowFeedbackMessageBeforeClose({ getters, commit }) {\n\t\tcommit('showFeedbackMessageIfNeeded', FEEDBACK_TRIGGER_APP_CLOSE);\n\t\tcommit('setAiFeedbackShowBeforeClose', false);\n\t},\n\tcloseFeedbackMessage({ getters, commit, dispatch }, sendFeedback: boolean = false) {\n\t\tif (sendFeedback)\n\t\t{\n\t\t\tdispatch('sendFeedBack');\n\t\t\tcommit('setAiFeedbackShowBeforeClose', false);\n\t\t}\n\t\tcommit('hideFeedbackMessage');\n\t\tif (getters.aiFeedback.lastTriggeredBy === FEEDBACK_TRIGGER_APP_CLOSE)\n\t\t{\n\t\t\tdispatch('closeFormWithoutConfirm');\n\t\t}\n\t},\n\tcloseFormWithoutConfirm({ getters, commit }) {\n\t\tcommit('setNeededShowCloseConfirm', false);\n\t\tcommit('setIsConfirmPopupShow', false);\n\t\tconst mergeUuid = getters.mergeUuid;\n\t\tonCustomEvent(window, 'BX.Crm.AiFormFill:CloseSlider', { mergeUuid });\n\t},\n\tasync setEditorFieldValue({ dispatch, getters, commit }, conflictField)\n\t{\n\t\tconst fieldName = conflictField.name;\n\t\tconst isSetAiValue = !conflictField.isAiValuesUsed;\n\n\t\tconst value = isSetAiValue ? conflictField.aiValue : conflictField.originalValue;\n\t\tconst model = isSetAiValue ? conflictField.aiModel : conflictField.originalModel;\n\n\t\tif (!isSetAiValue)\n\t\t{\n\t\t\tsetTimeout(() => {\n\t\t\t\tcommit('showFeedbackMessageIfNeeded', FEEDBACK_TRIGGER_CONTROL);\n\t\t\t}, 300);\n\t\t}\n\n\t\tconst controlValue: ControlValue = { value, model };\n\n\t\tawait entityEditorProxy.setFieldValue(fieldName, controlValue);\n\t\tawait entityEditorProxy.setControlAiClass(fieldName, isSetAiValue);\n\n\t\tcommit('setIsFieldsTouched', true);\n\t\tcommit('updateConflictField', {\n\t\t\tname: fieldName,\n\t\t\tfield: {\n\t\t\t\tisAiValuesUsed: !conflictField.isAiValuesUsed,\n\t\t\t},\n\t\t});\n\t},\n\tasync createEntityEditor({ getters, commit, dispatch }) {\n\t\tconst getEntityInfo: EntityInfo = getters.getEntityInfo;\n\t\tconst entityEditorRender = new EntityEditorRender({\n\t\t\tentityId: getEntityInfo.entityId,\n\t\t\tconfigId: getEntityInfo.editorId,\n\t\t\tentityTypeName: getEntityInfo.entityTypeName,\n\t\t\tdomContainerId: `crm-ai-merge-fields__container__${getters.mergeUuid}`,\n\t\t});\n\n\t\tconst editor = await entityEditorRender.render();\n\n\t\tawait entityEditorProxy.init(editor);\n\n\t\tentityEditorProxy.setOnUserFieldDeployedCb(async () => {\n\t\t\tconst scrollPositionThreshold = 40;\n\t\t\tconst scrollPosY = Math.floor(\n\t\t\t\tgetters.getMainLayoutScrollPosition + getters.getMainLayoutContainerHeight,\n\t\t\t);\n\n\t\t\tconst scrollHeight = getters.getMainLayoutScrollHeight || 0;\n\n\t\t\tlet waitMs = 0;\n\t\t\tif (scrollHeight - scrollPosY < scrollPositionThreshold)\n\t\t\t{\n\t\t\t\twaitMs = 400;\n\t\t\t}\n\t\t\t// at the scroll bottom position entity editor will shake and resize, to prevent it do some timeout before\n\t\t\t// update control positions info\n\t\t\tawait timeout(waitMs);\n\t\t\tdispatch('updateControlPositionInfo');\n\t\t});\n\t},\n\n\tasync collectFieldDataFromEntityEditor({ getters, commit, dispatch }) {\n\t\tconst conflictFields = getters.conflictFields;\n\n\t\tconst fieldsIds: Set<string> = new Set(conflictFields.map((field) => field.name));\n\n\t\tconst fieldParams: EditorControlsParams[] = await entityEditorProxy.getEditorControlsParams(fieldsIds);\n\t\tif (fieldParams.length === 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const param of fieldParams)\n\t\t{\n\t\t\tcommit('updateConflictField', {\n\t\t\t\tname: param.fieldId,\n\t\t\t\tfield: {\n\t\t\t\t\toriginalValue: param.originalValue,\n\t\t\t\t\toriginalModel: param.originalModel,\n\t\t\t\t\torder: param.order,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tcommit('setEeControlPositions', {\n\t\t\t\tfieldId: param.fieldId,\n\t\t\t\ttopPosition: param.relatedFieldOffsetY,\n\t\t\t});\n\t\t}\n\t\tcommit('setIsEntityEditorLoaded', true);\n\t},\n\n\tasync updateControlPositionInfo({ getters, commit }, { updateOnlyFrom } = {}) {\n\t\tconst conflictFields: ConflictField[] = getters.conflictFields;\n\n\t\tif (conflictFields.length === 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tconst fieldsIds: Set<string> = new Set(conflictFields.map((field) => field.name));\n\n\t\tconst positions = await entityEditorProxy.getEditorControlsPositions(fieldsIds);\n\n\t\tconst scrollPosition = getters.getMainLayoutScrollPosition || 0;\n\n\t\tfor (const [fieldId, topPosition] of positions)\n\t\t{\n\t\t\tpositions.set(fieldId, scrollPosition + topPosition);\n\t\t}\n\n\t\tfor (const field of conflictFields)\n\t\t{\n\t\t\tconst fieldId = field.name;\n\t\t\tif (!updateOnlyFrom && updateOnlyFrom > field.order)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!positions.has(fieldId))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcommit('setEeControlPositions', {\n\t\t\t\tfieldId,\n\t\t\t\ttopPosition: positions.get(fieldId),\n\t\t\t});\n\t\t}\n\t},\n\n\tasync applyAllAiFields({ dispatch, getters }) {\n\t\tfor (const field: ConflictField of getters.conflictFields)\n\t\t{\n\t\t\tif (field.isAiValuesUsed)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdispatch('setEditorFieldValue', field);\n\t\t}\n\t},\n\n\trevertAllAiFields({ dispatch, getters }) {\n\t\tfor (const field: ConflictField of getters.conflictFields)\n\t\t{\n\t\t\tif (!field.isAiValuesUsed)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdispatch('setEditorFieldValue', field);\n\t\t}\n\t},\n\tshowEntityEditorControlOutline(store, { fieldName, isShow }) {\n\t\tentityEditorProxy.setControlOutline(fieldName, isShow);\n\t},\n\tupdateSliderFooter({ getters }) {\n\t\tconst disable = getters.isFooterHiddenAndSaveDisabled;\n\t\tsliderButtonsAdapter.saveButton.setDisabled(disable);\n\n\t\tcopilotSliderInstance?.footerDisplay(!disable);\n\t},\n\tasync sendFeedBack({ commit, getters }) {\n\t\tconst mergeUuid = getters.mergeUuid;\n\n\t\tif (getters.aiFeedback.checkFeedbackBeforeSend)\n\t\t{\n\t\t\tconst checkResult = await checkIsFeedbackAlreadySend(mergeUuid);\n\t\t\tif (checkResult)\n\t\t\t{\n\t\t\t\tcommit('setAiFeedbackWasSent', true);\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst getEntityInfo: EntityInfo = getters.getEntityInfo;\n\t\tconst ownerType: string = getEntityInfo.entityTypeName.toLowerCase();\n\t\tsendFeedback(mergeUuid, ownerType, getters.crmMode, getters.callId);\n\t\tcommit('setAiFeedbackWasSent', true);\n\t},\n\n\tsendAiCallParsingData({ getters }, element: string): void\n\t{\n\t\tconst getEntityInfo: EntityInfo = getters.getEntityInfo;\n\t\tconst ownerType: string = getEntityInfo.entityTypeName.toLowerCase();\n\t\tconst crmMode: string = getters.crmMode;\n\t\tconst callId: string = getters.callId;\n\n\t\tsendData({\n\t\t\tevent: 'call_parsing',\n\t\t\ttool: 'AI',\n\t\t\tcategory: 'crm_operations',\n\t\t\ttype: 'manual',\n\t\t\tc_section: 'crm',\n\t\t\tc_element: element,\n\t\t\tc_sub_section: ownerType,\n\t\t\tp1: crmMode,\n\t\t\tp2: callId,\n\t\t\tstatus: 'success',\n\t\t});\n\t},\n};\n\nconst checkIsFeedbackAlreadySend = async (mergeUuid: string) => {\n\treturn wasFeedbackSent(mergeUuid);\n};\n\nconst fetchMergeFields = async (mergeUuid: string) => {\n\tconst response = await BX.ajax.runAction('crm.timeline.ai.mergeFields', {\n\t\tmethod: 'GET',\n\t\tgetParameters: { mergeUuid },\n\t});\n\n\treturn response.data;\n};\n","import { BitrixVue } from 'ui.vue3';\nimport { createStore } from 'ui.vue3.vuex';\nimport { Main } from './components/main';\nimport { EntityEditorProxy } from './services/entity-editor-proxy';\nimport store from './store/index';\n\nexport let entityEditorProxy: ?EntityEditorProxy = null;\n\nexport class AiFormFillApplication\n{\n\t#application;\n\n\t#options;\n\n\t#store;\n\n\tconstructor(rootNode, options = {})\n\t{\n\t\tthis.#options = options;\n\t\tthis.rootNode = document.querySelector(`#${rootNode}`);\n\n\t\tif (!this.#options.mergeUuid)\n\t\t{\n\t\t\tthrow new Error('param mergeUuid is required');\n\t\t}\n\t}\n\n\tget application(): BitrixVue\n\t{\n\t\treturn this.#application;\n\t}\n\n\tget store(): any\n\t{\n\t\treturn this.#store;\n\t}\n\n\tstart(): void\n\t{\n\t\tentityEditorProxy = new EntityEditorProxy();\n\t\tthis.#store = createStore(store());\n\t\tthis.#application = BitrixVue.createApp({\n\t\t\tname: 'AiFormFill',\n\t\t\tcomponents: { Main },\n\t\t\tbeforeCreate(): void\n\t\t\t{\n\t\t\t\tthis.$bitrix.Application.set(this);\n\t\t\t},\n\t\t\ttemplate: `\n\t\t\t\t<Main/>\n\t\t\t`,\n\t\t});\n\n\t\tthis.#store.commit('setMergeUUID', this.#options.mergeUuid);\n\t\tthis.#store.commit('setCrmMode', this.#options.crmMode);\n\t\tthis.#store.commit('setCallId', this.#options.callId);\n\t\tthis.#application.use(this.#store);\n\t\tthis.#application.mount(this.rootNode);\n\t}\n\n\tstop(): void\n\t{\n\t\tthis.#application.unmount();\n\t\tthis.#application = null;\n\t\tthis.#store = null;\n\t\tentityEditorProxy = null;\n\t}\n\n\tisNeededShowCloseConfirm(): boolean\n\t{\n\t\treturn this.#store.getters.isNeededShowCloseConfirm;\n\t}\n\n\tshowCloseConfirm(): void {\n\t\tthis.#store.commit('setIsConfirmPopupShow', true);\n\t}\n\n\tisShowAiFeedbackBeforeClose(): boolean {\n\t\treturn this.#store.getters.isAiFeedbackShowBeforeClose;\n\t}\n\n\tshowAiFeedbackBeforeClose(): void {\n\t\tthis.#store.dispatch('showFeedbackMessageBeforeClose');\n\t}\n\n\tisAppLoading(): boolean {\n\t\treturn this.#store.getters.isLoading;\n\t}\n}\n","import getters from './getters';\nimport mutations from './mutations';\nimport actions from './actions';\n\nexport default () => {\n\treturn {\n\t\tstate: {\n\t\t\tmergeUuid: null,\n\t\t\tisLoading: true,\n\t\t\tconflictFields: [],\n\t\t\tisEditMode: false,\n\t\t\tisEntityEditorLoaded: false,\n\t\t\tentityInfo: null,\n\t\t\teeControlPositions: new Map(),\n\t\t\texpandedConflictControls: new Map(),\n\t\t\tmainLayoutScrollPosition: null,\n\t\t\tmainLayoutContainerHeight: null,\n\t\t\tmainLayoutScrollHeight: null,\n\t\t\tnotVisibleUnresolvedCount: 0,\n\t\t\tisFieldsTouched: false,\n\t\t\taiValuesAppliedCount: 0,\n\t\t\tisSliderConfirmPopupShown: false,\n\t\t\tisNeededShowCloseConfirm: false,\n\t\t\taiFeedback: {\n\t\t\t\tfeedbackWasSent: false,\n\t\t\t\tisShownByReturnBtn: false,\n\t\t\t\tisMessageComponentShown: false,\n\t\t\t\tlastTriggeredBy: null,\n\t\t\t\tshowBeforeClose: true,\n\t\t\t\tcheckFeedbackBeforeSend: false, // Send check request before sending\n\t\t\t},\n\t\t},\n\t\tgetters,\n\t\tmutations,\n\t\tactions,\n\t};\n};\n\n// export default store;\n","import { Loc, Type } from 'main.core';\nimport { Button, ButtonColor } from 'ui.buttons';\n\nexport default class SliderButtonsAdapter\n{\n\t#onSaveCallback: ?() => void = null;\n\n\t#onCancelCallback: ?() => void = null;\n\n\t#saveButton: ?Button = null;\n\t#cancelButton: ?Button = null;\n\n\tconstructor()\n\t{\n\t\tthis.#createButtons();\n\t}\n\n\tset onSaveCallback(cb: () => void): void {\n\t\tthis.#onSaveCallback = cb;\n\t}\n\n\tset onCancelCallback(cb: () => void): void {\n\t\tthis.#onCancelCallback = cb;\n\t}\n\n\tget saveButton(): Button {\n\t\treturn this.#saveButton;\n\t}\n\n\tget cancelButton(): Button {\n\t\treturn this.#cancelButton;\n\t}\n\n\t#createButtons() {\n\t\tthis.#saveButton = new Button({\n\t\t\ttext: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_SAVE'),\n\t\t\tsize: Button.Size.MEDIUM,\n\t\t\tcolor: Button.Color.SUCCESS,\n\t\t\tdependOnTheme: true,\n\t\t\tonclick: () => {\n\t\t\t\tif (Type.isFunction(this.#onSaveCallback))\n\t\t\t\t{\n\t\t\t\t\tthis.#onSaveCallback();\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\n\t\tthis.#cancelButton = new Button({\n\t\t\ttext: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_CANCEL'),\n\t\t\tsize: Button.Size.MEDIUM,\n\t\t\tcolor: ButtonColor.LIGHT_BORDER,\n\t\t\tonclick: () => {\n\t\t\t\tif (Type.isFunction(this.#onCancelCallback))\n\t\t\t\t{\n\t\t\t\t\tthis.#onCancelCallback();\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\tgetButtons(): Button[]\n\t{\n\t\treturn [this.#saveButton, this.#cancelButton];\n\t}\n}","import { addCustomEvent, Loc, removeAllCustomEvents, Type } from 'main.core';\nimport { Button } from 'ui.buttons';\nimport { AiFormFillApplication } from './app';\nimport SliderButtonsAdapter from './services/slider-buttons-adapter';\nimport { Call } from 'crm.ai.call';\nimport { Slider } from 'crm.ai.slider';\n\nexport let sliderButtonsAdapter: ?SliderButtonsAdapter = null;\n\nexport let copilotSliderInstance: ?Slider = null;\n\ninterface CreateOptions\n{\n\tmergeUuid: string;\n\tlabel: string;\n\tactivityId: number;\n\townerId: number;\n\townerTypeId: number;\n\tcrmMode: string,\n\tcallId: string,\n}\n\nclass ConflictFieldsliderCreator\n{\n\t#options: CreateOptions;\n\n\t#copilotSliderClass: function;\n\n\t#app: AiFormFillApplication;\n\n\t#sliderInstance;\n\n\tconstructor(options: CreateOptions, CopilotSliderWrapper: function)\n\t{\n\t\tthis.#options = options;\n\t\tthis.#copilotSliderClass = CopilotSliderWrapper;\n\t\tsliderButtonsAdapter = new SliderButtonsAdapter();\n\t}\n\n\tget #onLoadEventName(): string {\n\t\treturn `CopilotSliderWrapper:onLoad_${this.#options.mergeUuid}`;\n\t}\n\n\tget #onCloseEventName(): string {\n\t\treturn `CopilotSliderWrapper:onClose_${this.#options.mergeUuid}`;\n\t}\n\n\tget #sliderUrl(): string {\n\t\treturn `crm:copilot-wrapper-slider-${this.#options.mergeUuid}`;\n\t}\n\n\tget #containerId(): string {\n\t\treturn `crm-ai-merge-fields__container__${this.#options.mergeUuid}`;\n\t}\n\n\tcreate() {\n\t\tthis.#sliderInstance = this.#createSliderWrapper();\n\n\t\taddCustomEvent('SidePanel.Slider:onLoad', this.#onSliderLoadFn.bind(this), this.#onLoadEventName);\n\t\taddCustomEvent('SidePanel.Slider:onClose', this.#onSliderCloseFn.bind(this), this.#onCloseEventName);\n\t\taddCustomEvent(window, 'BX.Crm.AiFormFill:CloseSlider', this.#onAiFormFillDownFn.bind(this));\n\n\t\tthis.#sliderInstance.open();\n\t}\n\n\t#makeSliderToolbar(): Array {\n\t\tconst toolbarButtons = this.#copilotSliderClass.makeDefaultToolbarButtons();\n\n\t\tconst transcriptButton = new Button({\n\t\t\ttext: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_TRANSCRIPTION'),\n\t\t\tsize: Button.Size.MEDIUM,\n\t\t\tcolor: Button.Color.LIGHT_BORDER,\n\t\t\tdependOnTheme: true,\n\t\t\tonclick: () => {\n\t\t\t\tif (top.BX.Helper)\n\t\t\t\t{\n\t\t\t\t\tconst transcription = new Call.Transcription({\n\t\t\t\t\t\tactivityId: this.#options.activityId,\n\t\t\t\t\t\townerTypeId: this.#options.ownerTypeId,\n\t\t\t\t\t\townerId: this.#options.ownerId,\n\t\t\t\t\t});\n\n\t\t\t\t\ttranscription.open();\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\n\t\tconst resumeButton = new Button({\n\t\t\ttext: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_RESUME'),\n\t\t\tsize: Button.Size.MEDIUM,\n\t\t\tcolor: Button.Color.LIGHT_BORDER,\n\t\t\tdependOnTheme: true,\n\t\t\tonclick: () => {\n\t\t\t\tif (top.BX.Helper)\n\t\t\t\t{\n\t\t\t\t\tconst resume = new Call.Summary({\n\t\t\t\t\t\tactivityId: this.#options.activityId,\n\t\t\t\t\t\townerTypeId: this.#options.ownerTypeId,\n\t\t\t\t\t\townerId: this.#options.ownerId,\n\t\t\t\t\t});\n\n\t\t\t\t\tresume.open();\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\n\t\treturn [\n\t\t\ttranscriptButton,\n\t\t\tresumeButton,\n\t\t\t...toolbarButtons,\n\t\t];\n\t}\n\n\t#createSliderWrapper() {\n\t\tconst buttons = sliderButtonsAdapter.getButtons();\n\t\tconst toolbarButtons = this.#makeSliderToolbar();\n\n\t\treturn new this.#copilotSliderClass({\n\t\t\tcontent: () => `<div id=\"${this.#containerId}\"></div>`,\n\t\t\tsliderTitle: Loc.getMessage('CRM_AI_FORM_FILL_MERGER_TITLE'),\n\t\t\tlabel: this.#options.label,\n\t\t\textensions: ['crm.ai-form-fill', 'crm.entity-editor'],\n\t\t\turl: this.#sliderUrl,\n\t\t\twidth: this.#calculateSliderWidth(),\n\t\t\ttoolbar: () => toolbarButtons,\n\t\t\tbuttons: () => buttons,\n\t\t});\n\t}\n\n\t#calculateSliderWidth(): number {\n\t\tconst topSlider = BX.SidePanel.Instance.getTopSlider();\n\t\tconst width = topSlider.getWidth() || (window.screen.width * 0.86);\n\n\t\treturn Math.floor(width * 0.86);\n\t}\n\n\t#onSliderLoadFn(event) {\n\t\tif (event.getSlider().getUrl() !== this.#sliderUrl)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tcopilotSliderInstance = this.#sliderInstance;\n\n\t\tthis.#app = new AiFormFillApplication(\n\t\t\tthis.#containerId,\n\t\t\t{\n\t\t\t\tmergeUuid: this.#options.mergeUuid,\n\t\t\t\tcrmMode: this.#options.crmMode,\n\t\t\t\tcallId: this.#options.callId,\n\t\t\t},\n\t\t);\n\t\tthis.#app.start();\n\t\tremoveAllCustomEvents('SidePanel.Slider:onLoad', this.#onLoadEventName);\n\t}\n\n\t#onSliderCloseFn(event) {\n\t\tif (event.getSlider().getUrl() !== this.#sliderUrl)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.#app || this.#app.isAppLoading())\n\t\t{\n\t\t\tevent.denyAction();\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.#app.isNeededShowCloseConfirm())\n\t\t{\n\t\t\tthis.#app.showCloseConfirm();\n\t\t\tevent.denyAction();\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.#app.isShowAiFeedbackBeforeClose())\n\t\t{\n\t\t\tthis.#app.showAiFeedbackBeforeClose();\n\t\t\tevent.denyAction();\n\n\t\t\treturn;\n\t\t}\n\n\t\tremoveAllCustomEvents('SidePanel.Slider:onClose', this.#onCloseEventName);\n\t\tremoveAllCustomEvents(window, 'BX.Crm.AiFormFill:CloseSlider');\n\t\tif (this.#app)\n\t\t{\n\t\t\tthis.#app.stop();\n\t\t\tthis.#app = null;\n\t\t}\n\t\tsliderButtonsAdapter = null;\n\t\tcopilotSliderInstance = null;\n\t}\n\n\t#onAiFormFillDownFn(event) {\n\t\tconst mergeUuid = event?.data?.mergeUuid;\n\t\tif (mergeUuid === this.#options.mergeUuid)\n\t\t{\n\t\t\tthis.#sliderInstance.close();\n\t\t}\n\t}\n}\n\nexport const createAiFormFillApplicationInsideSlider = function(options: CreateOptions)\n{\n\tconst makeApp = (CopilotSliderWrapper: function) => {\n\t\tconst creator = new ConflictFieldsliderCreator(options, CopilotSliderWrapper);\n\t\tcreator.create();\n\t};\n\n\tif (Type.isFunction(BX?.Crm?.AI?.Slider))\n\t{\n\t\tmakeApp(BX.Crm.AI.Slider);\n\t}\n\telse\n\t{\n\t\ttop.BX.Runtime.loadExtension('crm.ai.slider')\n\t\t\t.then((exports) => {\n\t\t\t\tconst { Slider } = exports;\n\t\t\t\tmakeApp(Slider);\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tthrow new Error('Cant load Crm.AI.Slider extension');\n\t\t\t});\n\t}\n};\n"],"names":["timeout","ms","Promise","resolve","setTimeout","myScrollTo","async","element","to","duration","perTick","scrollTop","CloseConfirm","name","data","messageBoxInstance","uniquePopupId","Text","getRandom","toLowerCase","computed","mapGetters","methods","mapMutations","onMessageClose","event","this","setIsConfirmPopupShow","mounted","MessageBox","create","message","Loc","getMessage","title","okCaption","cancelCaption","onOk","$Bitrix","eventEmitter","emit","onCancel","buttons","BX","UI","Dialogs","MessageBoxButtons","OK_CANCEL","popupOptions","targetContainer","$refs","closeConfirmRoot","id","addCustomEvent","window","show","unmounted","close","removeCustomEvent","template","EntityEditorWrapper","entityEditorContainerId","mergeUuid","FeedbackMessage","mapActions","[object Object]","closeFeedbackMessage","onCancelButton","sendAiCallParsingData","createFeedbackMessageBox","onOKButton","feedbackMessageRoot","FloatingActionButton","count","showCounter","click","Main","components","Loader","loaderInstance","ToolBar","conflictCount","conflictFields","length","resolvedCount","filter","f","isAiValuesUsed","isApplyAllDisabled","isRevertDisabled","titleText","applyAllBtnText","revertText","Merger","MergeControl","props","field","type","Object","required","tmp","Number","hasLargeContent","isExpanded","coveredByAnother","replaceBtnText","value","originalValue","aiValue","setEditorFieldValue","expand","checkHasLargeContent","nextTick","toggleExpandedConflictControls","fieldId","size","root","getBoundingClientRect","height","onControlsExpandedModeChange","selfPosY","eeControlPositions","get","fieldName","getexpandedConflictControls","expandedPosY","fieldValue","scrollWidth","clientWidth","onMouseenter","e","showEntityEditorControlOutline","isShow","onMouseleave","watch","isRootMounted","getControlTopOffset","onFooterSaveBtn","saveFormFieldsToMerge","then","catch","onFooterCancelBtn","closeFormWithoutConfirm","onCloseConfirm","handleScroll","positionChanged","setMainLayoutScrollHeight","layout","scrollHeight","changeMainLayoutScrollPosition","containerHeight","resizeHandler","scrollToNext","scrollTo","getFirstUnseenFieldPosition","subscribeInternalEvents","subscribe","unSubscribeInternalEvents","unsubscribe","autoScrollToFirst","firstPosY","updateSliderFooter","startLoading","Runtime","throttle","initialize","$nextTick","Event","bind","stopLoading","sliderButtonsAdapter","onSaveCallback","onCancelCallback","aiValuesAppliedCount","handler","newVal","oldVal","immediate","unbind","EntityEditorProxy","writable","entityEditor","babelHelpers","getContainer","y","Type","isFunction","setOnUserFieldDeployedCb","cb","fieldsIds","result","counter","control","getAllControls","has","getId","getWrapper","model","push","relatedFieldOffsetY","originalModel","order","Map","set","setControlOutline","getControlById","wrapper","Dom","addClass","removeClass","setControlAiClass","newValue","constructor","Crm","EntityEditorText","EntityEditorBB","EntityEditorUserField","Error","refreshLayout","reset","fieldKey","getModel","setField","enableNotification","signedModel","controlValue","getValue","ufModel","getField","isObject","hasOwn","VALUE","isString","isNumber","isLoading","state","sort","a","b","crmMode","callId","getEntityInfo","entityInfo","isEntityEditorLoaded","eeControlPosition","expandedConflictControls","getNotVisibleUnresolvedCount","notVisibleUnresolvedCount","getMainLayoutScrollPosition","mainLayoutScrollPosition","getMainLayoutContainerHeight","mainLayoutContainerHeight","getMainLayoutScrollHeight","mainLayoutScrollHeight","position","lowerField","min","Infinity","find","isFieldsTouched","isFooterHiddenAndSaveDisabled","isSliderConfirmPopupShown","isNeededShowCloseConfirm","isFeedbackMessageShown","aiFeedback","isMessageComponentShown","isAiFeedbackShowBeforeClose","showBeforeClose","setMergeUUID","val","setCrmMode","setCallId","setEntityInfo","setConflictFields","setEditMode","isEditMode","setIsEntityEditorLoaded","updateConflictField","map","aiAppliedCount","setEeControlPositions","topPosition","delete","containerBottomPosition","hidden","key","hideName","setIsFieldsTouched","setNeededShowCloseConfirm","showFeedbackMessageIfNeeded","source","feedbackWasSent","isShownByReturnBtn","lastTriggeredBy","hideFeedbackMessage","setAiFeedbackWasSent","isFeedbackWasSent","setAiFeedbackShowBeforeClose","EntityEditorRender","params","editor","domContainerId","eeUrl","entityTypeName","bitrix_sessid","ajax","post","ACTION","ACTION_ENTITY_TYPE_NAME","ACTION_ENTITY_ID","entityId","GUID","CONFIG_ID","configId","FORCE_DEFAULT_CONFIG","FORCE_DEFAULT_OPTIONS","IS_EMBEDDED","ENABLE_CONFIG_SCOPE_TOGGLE","ENABLE_CONFIGURATION_UPDATE","ENABLE_REQUIRED_USER_FIELD_CHECK","ENABLE_FIELDS_CONTEXT_MENU","CONTEXT","READ_ONLY","MODULE_ID","dispatch","getters","commit","fetchMergeFields","fields","aiModel","isMultiple","isUserField","editMode","target","fieldNamesToApply","response","runAction","method","getParameters","status","Notification","Center","notify","content","autoHideDelay","showFeedbackMessageBeforeClose","sendFeedback","onCustomEvent","conflictField","isSetAiValue","entityEditorProxy","setFieldValue","entityEditorRender","editorId","render","init","scrollPosY","Math","floor","waitMs","Set","fieldParams","getEditorControlsParams","param","updateOnlyFrom","positions","getEditorControlsPositions","scrollPosition","revertAllAiFields","store","disable","saveButton","setDisabled","copilotSliderInstance","footerDisplay","checkFeedbackBeforeSend","checkIsFeedbackAlreadySend","ownerType","sendData","tool","category","c_section","c_element","c_sub_section","p1","p2","wasFeedbackSent","AiFormFillApplication","rootNode","options","document","querySelector","application","start","createStore","mutations","actions","BitrixVue","createApp","beforeCreate","$bitrix","Application","use","mount","stop","unmount","showCloseConfirm","isShowAiFeedbackBeforeClose","showAiFeedbackBeforeClose","isAppLoading","SliderButtonsAdapter","cancelButton","getButtons","Button","text","Size","MEDIUM","color","Color","SUCCESS","dependOnTheme","onclick","ButtonColor","LIGHT_BORDER","ConflictFieldsliderCreator","CopilotSliderWrapper","open","toolbarButtons","makeDefaultToolbarButtons","top","Helper","Call","Transcription","activityId","ownerTypeId","ownerId","Summary","sliderTitle","label","extensions","url","width","toolbar","SidePanel","Instance","getTopSlider","getWidth","screen","getSlider","getUrl","removeAllCustomEvents","denyAction","_event$data","makeApp","_BX","_BX$Crm","AI","_BX$Crm$AI","Slider","loadExtension","exports"],"mappings":"iEACO,MAAMA,EAAWC,GAChB,IAAIC,QAASC,IACnBC,WAAWD,EAASF,KAITI,EAAaC,MAAOC,EAAkBC,EAAYC,KAC9D,GAAIA,GAAY,EAEf,OAED,MACMC,GADaF,EAAKD,EAAQI,WACHF,EAAW,SAClCT,EAAQ,IACdO,EAAQI,WAAaD,EACjBH,EAAQI,YAAcH,SAIpBH,EAAWE,EAASC,EAAIC,EAAW,KCf7BG,EAAe,CAC3BC,KAAM,eACNC,KAAI,KACI,CACNC,mBAAoB,KACpBC,cAAgB,+BAA8BC,OAAKC,UAAU,IAAIC,gBAGnEC,SAAU,IACNC,aAAW,CAAC,mCAEhBC,QAAS,IACLC,eAAa,CAAC,0BACjBC,eAAeC,GACVA,EAAMT,gBAAkBU,KAAKV,eAEhCU,KAAKC,uBAAsB,KAI9BC,UAECF,KAAKX,mBAAqBc,aAAWC,OAAO,CAC3CC,QAASC,MAAIC,WAAW,+CACxBC,MAAOF,MAAIC,WAAW,gDACtBE,UAAWH,MAAIC,WAAW,gDAC1BG,cAAeJ,MAAIC,WAAW,iDAC9BI,KAAM,KACLX,KAAKY,QAAQC,aAAaC,KAAK,8CAA+C,KAE/EC,SAAU,KACTf,KAAKC,uBAAsB,IAE5Be,QAASC,GAAGC,GAAGC,QAAQC,kBAAkBC,UACzCC,aAAc,CACbC,gBAAiBvB,KAAKwB,MAAMC,iBAC5BC,GAAI1B,KAAKV,iBAIXqC,iBAAeC,OAAQ,wBAAyB5B,KAAKF,gBAErDE,KAAKX,mBAAmBwC,QAEzBC,YAEK9B,KAAKX,oBAERW,KAAKX,mBAAmB0C,QAEzBC,oBAAkBJ,OAAQ,wBAAyB5B,KAAKF,iBAEzDmC,SAAW,iLCtDCC,EAAsB,CAClC/C,KAAM,sBACNO,SAAU,IACNC,aAAW,CACb,cAEDwC,0BACC,MAAQ,mCAAkCnC,KAAKoC,wBAGjDH,SAAU,mDCREI,EAAkB,CAC9BlD,KAAM,kBACNC,KAAI,KACI,CACNC,mBAAoB,KACpBC,cAAgB,+BAA8BC,OAAKC,UAAU,IAAIC,gBAGnEC,SAAU,IACNC,aAAW,CAAC,mCAEhBC,QAAS,IACL0C,aAAW,CAAC,uBAAwB,0BACvCC,mBACCvC,KAAKwC,sBAAqB,IAE3BC,iBACCzC,KAAKwC,sBAAqB,GAC1BxC,KAAK0C,sBAAsB,qBAE5B5C,eAAeC,GACVA,EAAMT,gBAAkBU,KAAKV,eAEhCU,KAAKwC,sBAAqB,KAI7BtC,UACCF,KAAKX,mBAAqBsD,2BAAyB,CAClDhC,KAAMX,KAAK4C,WACX7B,SAAUf,KAAKyC,eACfnB,aAAc,CACbC,gBAAiBvB,KAAKwB,MAAMqB,oBAC5BnB,GAAI1B,KAAKV,iBAIXqC,iBAAeC,OAAQ,wBAAyB5B,KAAKF,gBAErDE,KAAKX,mBAAmBwC,QAEzBC,YACK9B,KAAKX,oBAERW,KAAKX,mBAAmB0C,QAEzBC,oBAAkBJ,OAAQ,wBAAyB5B,KAAKF,iBAEzDmC,SAAW,+KClDCa,EAAuB,CACnC3D,KAAM,uBACNO,SAAU,IACNC,aAAW,CACboD,MAAO,iCAERC,cACC,OAAOhD,KAAK+C,MAAQ,IAGtBnD,QAAS,CACRqD,QACCjD,KAAKY,QAAQC,aAAaC,KAAK,kCAAmC,MAGpEmB,SAAW,4PCLCiB,EAAO,CACnB/D,KAAM,OACNgE,WAAY,CACXC,OCdoB,CACrBjE,KAAM,SACNC,KAAI,KACI,CACNiE,eAAgB,OAGlBpB,SAAW,kJDQVC,oBAAAA,EACAoB,QEbqB,CACtBnE,KAAM,UACNO,SAAU,IACNC,aAAW,CAAC,mBACf4D,gBACC,OAAOvD,KAAKwD,eAAeC,QAE5BC,gBACC,OAAO1D,KAAKwD,eAAeG,OAAQC,GAAqBA,EAAEC,gBAAgBJ,QAE3EK,qBACC,OAAO9D,KAAKuD,gBAAkBvD,KAAK0D,eAEpCK,mBACC,OAA8B,IAAvB/D,KAAK0D,eAEbM,UAAS,IACD1D,MAAIC,WAAW,iDAEvB0D,gBAAe,IACP3D,MAAIC,WAAW,6CAEvB2D,WAAU,IACF5D,MAAIC,WAAW,6CAGxBX,QAAS,IACL0C,aAAW,CAAC,mBAAoB,uBAEpCL,SAAW,qhBFfVkC,OGdoB,CACrBhF,KAAM,SACNgE,WAAY,CACXiB,aCH0B,CAC3BjF,KAAM,eACNkF,MAAO,CACNC,MAAO,CACNC,KAAMC,OACNC,UAAU,GAEXC,IAAKC,QAENvF,KAAI,KACI,CACNwF,iBAAiB,EACjBC,YAAY,EACZC,kBAAkB,IAGpBpF,SAAU,IACNC,aAAW,CAAC,8BAA+B,uBAC9CoF,iBACC,OAAO/E,KAAKsE,MAAMT,eACfvD,MAAIC,WAAW,4CACfD,MAAIC,WAAW,8CAEnByE,QACC,OAAOhF,KAAKsE,MAAMT,eAAiB7D,KAAKsE,MAAMW,cAAgBjF,KAAKsE,MAAMY,UAG3EtF,QAAS,IACL0C,aAAW,CAAC,sBAAuB,sCACnCzC,eAAa,CAAC,mCACjB0C,oBAAoB+B,SACbtE,KAAKmF,oBAAoBb,SACzBtE,KAAKoF,QAAO,GAClBpF,KAAK4E,gBAAkB5E,KAAKqF,wBAE7B9C,aAAa6C,GACPpF,KAAK4E,kBAKV5E,KAAK6E,WAAaO,QACZE,aACNtF,KAAKuF,+BAA+B,CACnCC,QAASxF,KAAKsE,MAAMnF,KACpBsG,KAAMzF,KAAKwB,MAAMkE,KAAKC,wBAAwBC,OAC9Cf,WAAYO,MAGdS,+BACC,IAAIf,GAAmB,EACvB,MAAMgB,EAAW9F,KAAK+F,mBAAmBC,IAAIhG,KAAKsE,MAAMnF,KAAM,GAE9D,IAAK,MAAO8G,EAAWR,KAASzF,KAAKkG,4BACrC,CACC,MAAMC,EAAenG,KAAK+F,mBAAmBC,IAAIC,EAAW,GAE5D,GAAIH,EAAWK,GAAgBL,EAAWK,EAAeV,EACzD,CACCX,GAAmB,EACnB,OAGF9E,KAAK8E,iBAAmBA,GAEzBO,uBACC,OAAOrF,KAAKwB,MAAM4E,WAAWC,YAAcrG,KAAKwB,MAAM4E,WAAWE,aAElEC,aAAaC,GACZxG,KAAKyG,+BAA+B,CAAER,UAAWjG,KAAKsE,MAAMnF,KAAMuH,QAAQ,IAC1E1G,KAAKoF,QAAO,IAEbuB,aAAaH,GACZxG,KAAKyG,+BAA+B,CAAER,UAAWjG,KAAKsE,MAAMnF,KAAMuH,QAAQ,IAC1E1G,KAAKoF,QAAO,KAGdlF,UAECF,KAAK4E,gBAAkB5E,KAAKqF,uBAC5BuB,QAAM5G,KAAKkG,4BAA6BlG,KAAK6F,+BAE9C5D,SAAW,s9CD7EX7C,KAAI,KACI,CACNyH,eAAe,IAGjBnH,SAAU,IACNC,aAAW,CACb,iBACA,oBACA,qBACA,iCAGFC,QAAS,CACRkH,oBAAoBxC,GACnB,OAAOtE,KAAK+F,mBAAmBC,IAAI1B,EAAMnF,KAAM,KAGjDe,UAECF,KAAK6G,eAAgB,GAEtB5E,SAAW,6YHZVa,qBAAAA,EACA5D,aAAAA,EACAmD,gBAAAA,GAEDjD,KAAI,KACI,IAERM,SAAU,IACNC,aAAW,CACb,iBACA,YACA,qBACA,8BACA,uBACA,YACA,4BACA,yBACA,mCAGFC,QAAS,IACL0C,aAAW,CACb,aACA,wBACA,4BACA,qBACA,0BACA,6BAEEzC,eAAa,CACf,iCACA,eACA,cACA,8BAEDkH,kBACC/G,KAAKgH,wBACHC,KAAK,IAAMjH,KAAK0C,sBAAsB,4BACtCwE,MAAM,SAGTC,oBACCnH,KAAKoH,0BACLpH,KAAK0C,sBAAsB,4BAE5B2E,iBACCrH,KAAKoH,2BAENE,aAAc,KACdC,kBACCvH,KAAKwH,0BAA0BxH,KAAKwB,MAAMiG,OAAOC,cACjD1H,KAAK2H,+BAA+B,CACnC1I,UAAWe,KAAKwB,MAAMiG,OAAOxI,UAC7B2I,gBAAiB5H,KAAKwB,MAAMiG,OAAO9B,wBAAwBC,UAG7DiC,gBACC7H,KAAKsH,gBAENQ,eACC,MAAMC,EAAW/H,KAAKgI,4BAClBD,GAEHpJ,EAAWqB,KAAKwB,MAAMiG,OAAQM,EAAU,MAG1CE,0BACCjI,KAAKY,QAAQC,aAAaqH,UAAU,kCAAmClI,KAAK8H,cAC5E9H,KAAKY,QAAQC,aAAaqH,UAAU,8CAA+ClI,KAAKqH,gBACxFrH,KAAKY,QAAQC,aAAaqH,UAAU,6CAA8ClI,KAAK8H,eAExFK,4BACCnI,KAAKY,QAAQC,aAAauH,YAAY,kCAAmCpI,KAAK8H,cAC9E9H,KAAKY,QAAQC,aAAauH,YAAY,8CAA+CpI,KAAKqH,gBAC1FrH,KAAKY,QAAQC,aAAauH,YAAY,6CAA8CpI,KAAK8H,eAE1FO,oBACC,MAAMzC,EAAS5F,KAAKwB,MAAMiG,OAAO9B,wBAAwBC,OACnD0C,EAAYtI,KAAKgI,4BACnBM,GAAaA,EAAY1C,GAE5BjH,EAAWqB,KAAKwB,MAAMiG,OAAQa,EAAW,OAI5C/F,gBACCvC,KAAKuI,qBACLvI,KAAKwI,eACLxI,KAAKsH,aAAemB,UAAQC,SAAS,KACpC1I,KAAKuH,mBACH,WAEGvH,KAAK2I,aACX3I,KAAKuH,kBAELvH,KAAKiI,gCAECjI,KAAK4I,UAAU,KACpBC,QAAMC,KAAKlH,OAAQ,SAAU5B,KAAK6H,iBAEnC7H,KAAK+I,cAEL/I,KAAKqI,oBAELW,uBAAqBC,eAAiBjJ,KAAK+G,gBAC3CiC,uBAAqBE,iBAAmBlJ,KAAKmH,mBAE9CP,MAAO,CACNuC,qBAAsB,CACrBC,QAAQC,EAAQC,GACftJ,KAAKuI,sBAENgB,WAAW,IAGbzH,YACC9B,KAAKmI,4BACLU,QAAMW,OAAO5H,OAAQ,SAAU5B,KAAK6H,gBAErC5F,SAAW,m0BKrIiE,8fAEtE,MAAMwH,EACblH,cAAAiC,8BAAAQ,UAAAR,8BAAAQ,UAAAR,8BAAAQ,UAAAR,8BAAAQ,UAAAR,8BAAAQ,UAAAR,8BAAAkF,YAAA1E,MACW,OAAIR,8BAAAkF,YAAA1E,eAAAR,8BAAAkF,YAAA1E,MAIW,OAEzBzC,WAAWoH,GAEVC,mDAAeD,EAEfC,mDAA4BA,mDAAaC,eAAelE,wBAAwBmE,EAD5D,EAGpBnI,iBACCC,OACA,wDACC0C,IACKyF,OAAKC,mDAAWhK,aAIrB4J,mDAA4BtF,KAK/B2F,yBAAyBC,GACxBN,mDAA8BM,EAG/B3H,8BAA8B4H,SAEvB7L,EAAQ,IACd,MAAM8L,EAAiC,GAEvC,IAAIC,EAAU,EACd,IAAK,MAAMC,KAAWV,mDAAaW,iBACnC,CACC,IAAKJ,EAAUK,IAAIF,EAAQG,WAAaH,EAAQI,aAE/C,SAGD,MAAO1F,EAAO2F,2CAAS3K,WAA0BsK,GAEjDF,EAAOQ,KAAK,CACXpF,QAAS8E,EAAQG,QACjBI,oBAAqBP,EAAQI,aAAa/E,wBAAwBmE,EAClE7E,cAAeD,EACf8F,cAAeH,EACfI,MAAOV,IAERA,IAGD,OAAOD,EAGR7H,iCAAiC4H,GAEhC,MAAMC,EAAS,IAAIY,IAEnB,IAAK,MAAMV,KAAWV,mDAAaW,iBACnC,CACC,IAAKJ,EAAUK,IAAIF,EAAQG,WAAaH,EAAQI,aAE/C,SAED,MAAMZ,EAAIQ,EAAQI,aAAa/E,wBAAwBmE,EACvDM,EAAOa,IAAIX,EAAQG,QAASX,0CAAI9J,YAGjC,OAAOoK,EAGRc,kBAAkB1F,EAAiB3D,GAElC,MAAMyI,EAAUV,mDAAauB,eAAe3F,GAE5C,IAAK8E,EAEJ,OAGD,MAAMc,EAAUd,EAAQI,aAEpB7I,EAEHwJ,MAAIC,SAASF,EA5FgB,6CAgG7BC,MAAIE,YAAYH,EAhGa,6CAoG/BI,kBAAkBhG,EAAiB3D,GAElC,MAAMyI,EAAUV,mDAAauB,eAAe3F,GAE5C,IAAK8E,EAEJ,OAGD,MAAMc,EAAUd,EAAQI,aAEpB7I,EAEHwJ,MAAIC,SAASF,EAhHgB,8CAoH7BC,MAAIE,YAAYH,EApHa,8CAwH/B7I,oBAAoB0D,EAAmBwF,GAEtC,MAAMnB,EAAUV,mDAAauB,eAAelF,GAE5C,GAAKqE,EAKL,OAAQA,EAAQoB,aAEf,KAAKzK,GAAG0K,IAAIC,iBACXhC,mDAA6B3D,EAAWwF,EAASzG,OACjD,MACD,KAAK/D,GAAGC,GAAG2K,eACVjC,mDAA6B3D,EAAWwF,EAASzG,OACjD4E,mDAA2BU,GAC3B,MACD,KAAKrJ,GAAG0K,IAAIG,sBACXlC,mDAAwB3D,EAAWwF,EAASd,OAC5Cf,mDAA2BU,GAC3B,MACD,QACC,MAAM,IAAIyB,MAAM,8BAwDnB,WApDsBzB,GAErBA,EAAQ0B,cAAc,CAAEC,OAAO,IAC/B,WAEuBzG,EAASR,GAEhC,MAAMkH,EAAc1G,EAAF,QACJoE,mDAAauC,WACrBC,SAASF,EAAUlH,EAAO,CAAEqH,oBAAoB,IACtD,WAEuB7G,EAASR,GAElB4E,mDAAauC,WACrBC,SAAS5G,EAASR,EAAO,CAAEqH,oBAAoB,IACrD,WAEkB7G,EAAS8G,GAEb1C,mDAAauC,WACrBC,SAAS5G,EAAS8G,GACxB,WAEoBhC,GACpB,MAAMiC,EAAejC,EAAQkC,WAE7B,IAAIxH,EAAc,KACdyH,EAA2B,KAE/B,GAAInC,EAAQoB,cAAgBzK,GAAGC,GAAG2K,eAClC,CACC,MAAMlB,EAAQf,mDAAauC,WACrBD,EAAc5B,EAAQG,QAAV,QAClBzF,EAAQ2F,EAAM+B,SAASR,EAAU,SAGjCnC,OAAK4C,SAASJ,IACX/H,OAAOoI,OAAOL,EAAc,UAG/BvH,EAAQuH,EAAaM,MACrBJ,EAAUF,IAEFxC,OAAK+C,SAASP,IAAiBxC,OAAKgD,SAASR,MAErDvH,EAAQuH,EACRE,EAAU,MAGX,MAAO,CAACzH,EAAOyH,SCxMF,CACdO,UAAUC,GACFA,EAAMD,UAEdxJ,eAAeyJ,GACPA,EAAMzJ,eAAe0J,KAAK,CAACC,EAAGC,IAAMD,EAAEpC,MAAQqC,EAAErC,OAExD3I,UAAU6K,GACFA,EAAM7K,UAEdiL,QAAQJ,GACAA,EAAMI,QAEdC,OAAOL,GACCA,EAAMK,OAEdC,cAAcN,GACNA,EAAMO,WAEdC,qBAAqBR,GACbA,EAAMQ,qBAEdC,kBAAoBT,GAAWzH,GACvByH,EAAMlH,mBAAmBC,IAAIR,EAAS,GAE9CO,mBAAqBkH,GACbA,EAAMlH,mBAEdG,4BAA8B+G,GACtBA,EAAMU,yBAEdC,6BAA+BX,GACvBA,EAAMY,0BAEdC,4BAA8Bb,GACtBA,EAAMc,yBAEdC,6BAA+Bf,GACvBA,EAAMgB,0BAEdC,0BAA4BjB,GACpBA,EAAMkB,uBAEdnG,4BAA8BiF,IAC7B,MAAMmB,EAAWnB,EAAMc,yBAEvB,IAAIM,EAAa,KACbC,EAAMC,EAAAA,EACV,IAAK,MAAOtI,EAAWjB,KAAUiI,EAAMlH,mBACvC,CACC,MAAMzB,EAAuB2I,EAAMzJ,eAAegL,KAAM5K,GAAMA,EAAEzE,OAAS8G,IAEpE3B,GAASA,EAAMT,gBAAkBuK,EAAW,IAAMpJ,GAKnDA,EAAQsJ,IAEXA,EAAMtJ,EACNqJ,EAAapI,GAIf,OAAKoI,EAKEpB,EAAMlH,mBAAmBC,IAAIqI,GAH5B,MAKTI,gBAAkBxB,GACVA,EAAMwB,gBAEdtF,qBAAuB8D,GACfA,EAAM9D,qBAEduF,8BAA8BzB,GACS,IAA/BA,EAAM9D,qBAEdwF,0BAA4B1B,GACpBA,EAAM0B,0BAEdC,yBAA2B3B,GACnBA,EAAM2B,yBAEdC,uBAAyB5B,GACjBA,EAAM6B,WAAWC,wBAEzBC,4BAA4B/B,GACpBA,EAAM6B,WAAWG,gBAEzBH,WAAW7B,GACHA,EAAM6B,cC5FA,CACdI,aAAc,CAACjC,EAAOkC,KACrBlC,EAAM7K,UAAY+M,GAEnBC,WAAY,CAACnC,EAAOkC,KACnBlC,EAAMI,QAAU8B,GAEjBE,UAAW,CAACpC,EAAOkC,KAClBlC,EAAMK,OAAS6B,GAEhB3G,aAAeyE,IACdA,EAAMD,WAAY,GAEnBjE,YAAckE,IACbA,EAAMD,WAAY,GAEnBsC,cAAe,CAACrC,EAAOO,KACtBP,EAAMO,WAAaA,GAEpB+B,kBAAmB,CAACtC,EAAOzJ,KAC1ByJ,EAAMzJ,eAAiBA,GAExBgM,YAAa,CAACvC,EAAOwC,KACpBxC,EAAMwC,WAAaA,GAEpBC,wBAAwBzC,EAAOQ,GAC9BR,EAAMQ,qBAAuBA,GAE9BkC,oBAAqB,CAAC1C,GAAS9N,KAAAA,EAAMmF,MAAAA,MACpC2I,EAAMzJ,eAAiByJ,EAAMzJ,eAAeoM,IAAKhM,GAC5CA,EAAEzE,OAASA,EAEP,IACHyE,KACAU,GAIEV,GAER,MAAMiM,EAAiB5C,EAAMzJ,eAAeG,OAAQC,GAAMA,EAAEC,gBAAgBJ,OAC5EwJ,EAAM9D,qBAAuB0G,EAC7B5C,EAAM2B,yBAA2BiB,EAAiB,GAEnDC,sBAAuB,CAAC7C,GAASzH,QAAAA,EAASuK,YAAAA,MACzC9C,EAAMlH,mBAAmBkF,IAAIzF,EAASuK,IAEvCxK,+BAAgC,CAAC0H,GAASzH,QAAAA,EAASC,KAAAA,EAAMZ,WAAAA,MACpDA,EAEHoI,EAAMU,yBAAyB1C,IAAIzF,EAASC,GAI5CwH,EAAMU,yBAAyBqC,OAAOxK,IAGxCmC,+BAAgC,CAACsF,GAAShO,UAAAA,EAAW2I,gBAAAA,MACpD,MAAMqI,EAA0BhR,EAAY2I,EAC5CqF,EAAMc,yBAA2B9O,EACjCgO,EAAMgB,0BAA4BrG,EAElC,MAAMsI,EAAS,GAGf,IAAK,MAAOC,EAAKnL,KAAUiI,EAAMlH,mBAE5BkK,EAA0BjL,EAJT,IAMpBkL,EAAOtF,KAAKuF,GAId,GAAsB,IAAlBD,EAAOzM,OAIV,YAFAwJ,EAAMY,0BAA4B,GAKnC,IAAIxD,EAAU,EACd,IAAK,MAAM+F,KAAYF,EACvB,CACC,MAAM5L,EAAuB2I,EAAMzJ,eAAegL,KAAM5K,GAAMA,EAAEzE,OAASiR,GAEpE9L,IAASA,EAAMT,gBAIpBwG,IAED4C,EAAMY,0BAA4BxD,GAEnCgG,mBAAmBpD,EAAOwB,GACzBxB,EAAMwB,gBAAkBA,GAEzBxO,sBAAsBgN,EAAO0B,GAC5B1B,EAAM0B,0BAA4BA,GAEnC2B,0BAA0BrD,EAAO2B,GAChC3B,EAAM2B,yBAA2BA,GAElC2B,4BAA4BtD,EAAOuD,GAEjCvD,EAAM6B,WAAW2B,iBCzDoB,6BD0DjCD,GAAuCvD,EAAM6B,WAAW4B,qBAM7DzD,EAAM6B,WAAW6B,gBAAkBH,EChEG,6BDiElCA,IAEHvD,EAAM6B,WAAW4B,oBAAqB,GAEvCzD,EAAM6B,WAAWC,yBAA0B,IAE5C6B,oBAAoB3D,GACnBA,EAAM6B,WAAWC,yBAA0B,GAE5C8B,qBAAqB5D,EAAO6D,GAC3B7D,EAAM6B,WAAW2B,gBAAkBK,GAEpCC,6BAA6B9D,EAAOgC,GACnChC,EAAM6B,WAAWG,gBAAkBA,GAEpCzH,0BAA0ByF,EAAOrH,GAChCqH,EAAMkB,uBAAyBvI,qHElI1B,MAAMoL,EAGZtF,YAAYuF,GACZzM,8BAAAQ,UAAAR,8BAAAkF,YAAA1E,eACC4E,mDAAeqH,EAGhB1O,eAIC,OAFAqH,2FAAwB5J,YAEjB,IAAIxB,QAASC,IACnBkD,iBACCC,OACA,2CACAhD,MAAAA,IACKsS,EAAOzG,UAAYb,mDAAauH,gBAIpC1S,EAAQyS,QA8CZ,WAxCmBD,GAElB,IAAIG,EAAQ,GACZ,OAAQH,EAAOI,gBAEd,IAAK,OACJD,EAAQ,sDACR,MACD,IAAK,OACJA,EAAQ,sDACR,MACD,QACC,MAAM,IAAIrF,MAAO,wBAAuBkF,EAAOI,gBAIjDD,EAAS,GAAEA,YAAgBnQ,GAAGqQ,kBAE9BrQ,GAAGsQ,KAAKC,KACPJ,EACA,CACCK,OAAQ,sBACRC,wBAAyBT,EAAOI,eAChCM,iBAAkBV,EAAOW,SACzBC,KAAMZ,EAAOE,eACbW,UAAWb,EAAOc,SAClBC,qBAAsB,IACtBC,sBAAuB,IACvBC,YAAa,IACbC,2BAA4B,IAC5BC,4BAA6B,IAC7BC,iCAAkC,IAClCC,2BAA4B,IAC5BC,QAAS,GACTC,UAAW,IACXC,UAAW,OAEZ,cChDY,CACdlQ,kBAAiBmQ,SAAEA,EAAQC,QAAEA,UACtBD,EAAS,gCACTA,EAAS,4BACTA,EAAS,0CACTA,EAAS,8BAEhBnQ,8BAA6BqQ,OAAEA,EAAMD,QAAEA,IACtC,MAAMvT,QAAsCyT,EAAiBF,EAAQvQ,WAiBrEwQ,EAAO,oBAfyBxT,EAAK0T,OAAOlD,IAAKtL,IACzC,CACNnF,KAAMmF,EAAMnF,KACZoF,KAAMD,EAAMC,KACZ/D,MAAO8D,EAAM9D,MACbuS,QAASzO,EAAMyO,QACfC,WAAY1O,EAAM0O,WAClBC,YAAa3O,EAAM2O,YACnB/N,QAASZ,EAAMyO,QAAQlG,MACvB5H,cAAe,KACf6F,cAAe,KACfjH,gBAAgB,MAKlB+O,EAAO,cAAexT,EAAK8T,UAC3BN,EAAO,gBAAiBxT,EAAK+T,QAC7BP,EAAO,uBAAwBxT,EAAK+T,OAAO1C,iBAC3CmC,EAAO,gCAAiCxT,EAAK+T,OAAO1C,kBAErDlO,6BAA4BoQ,QAAEA,EAAOC,OAAEA,EAAMF,SAAEA,IAC9C,MAAMU,EAAoBT,EAAQnP,eAChCG,OAAQW,GAAyBA,EAAMT,gBACvC+L,IAAKtL,GAAyBA,EAAMnF,MAEhCiD,EAAYuQ,EAAQvQ,UAEpBiR,QAAiBpS,GAAGsQ,KAAK+B,UAAU,6BAA8B,CACtEC,OAAQ,MACRC,cAAe,CAAEpR,UAAAA,EAAWgR,kBAAAA,KAE7BR,EAAO,gCAAgC,GAEf,YAApBS,EAASI,OAEZf,EAAS,2BAITxR,KAAGwS,aAAaC,OAAOC,OAAO,CAC7BC,QAASvT,MAAIC,WAAW,sCACxBuT,cAAe,OAIlBC,gCAA+BpB,QAAEA,EAAOC,OAAEA,IACzCA,EAAO,8BFvBiC,8BEwBxCA,EAAO,gCAAgC,IAExCpQ,sBAAqBmQ,QAAEA,EAAOC,OAAEA,EAAMF,SAAEA,GAAYsB,GAAwB,GACvEA,IAEHtB,EAAS,gBACTE,EAAO,gCAAgC,IAExCA,EAAO,uBFhCiC,+BEiCpCD,EAAQ7D,WAAW6B,iBAEtB+B,EAAS,4BAGXtL,yBAAwBuL,QAAEA,EAAOC,OAAEA,IAClCA,EAAO,6BAA6B,GACpCA,EAAO,yBAAyB,GAChC,MAAMxQ,EAAYuQ,EAAQvQ,UAC1B6R,gBAAcrS,OAAQ,gCAAiC,CAAEQ,UAAAA,KAE1DG,2BAA0BmQ,SAAEA,EAAQC,QAAEA,EAAOC,OAAEA,GAAUsB,GAExD,MAAMjO,EAAYiO,EAAc/U,KAC1BgV,GAAgBD,EAAcrQ,eAE9BmB,EAAQmP,EAAeD,EAAchP,QAAUgP,EAAcjP,cAC7D0F,EAAQwJ,EAAeD,EAAcnB,QAAUmB,EAAcpJ,cAE9DqJ,GAEJzV,WAAW,KACVkU,EAAO,8BFxD6B,6BEyDlC,KAGJ,MAAMrG,EAA6B,CAAEvH,MAAAA,EAAO2F,MAAAA,SAEtCyJ,EAAkBC,cAAcpO,EAAWsG,SAC3C6H,EAAkB5I,kBAAkBvF,EAAWkO,GAErDvB,EAAO,sBAAsB,GAC7BA,EAAO,sBAAuB,CAC7BzT,KAAM8G,EACN3B,MAAO,CACNT,gBAAiBqQ,EAAcrQ,mBAIlCtB,0BAAyBoQ,QAAEA,EAAOC,OAAEA,EAAMF,SAAEA,IAC3C,MAAMnF,EAA4BoF,EAAQpF,cACpC+G,EAAqB,IAAItD,EAAmB,CACjDY,SAAUrE,EAAcqE,SACxBG,SAAUxE,EAAcgH,SACxBlD,eAAgB9D,EAAc8D,eAC9BF,eAAiB,mCAAkCwB,EAAQvQ,YAGtD8O,QAAeoD,EAAmBE,eAElCJ,EAAkBK,KAAKvD,GAE7BkD,EAAkBnK,yBAAyBrL,UAC1C,MACM8V,EAAaC,KAAKC,MACvBjC,EAAQ7E,4BAA8B6E,EAAQ3E,8BAK/C,IAAI6G,EAAS,GAFQlC,EAAQzE,2BAA6B,GAGvCwG,EARa,KAU/BG,EAAS,WAIJvW,EAAQuW,GACdnC,EAAS,gCAIXnQ,wCAAuCoQ,QAAEA,EAAOC,OAAEA,EAAMF,SAAEA,IACzD,MAAMlP,EAAiBmP,EAAQnP,eAEzB2G,EAAyB,IAAI2K,IAAItR,EAAeoM,IAAKtL,GAAUA,EAAMnF,OAErE4V,QAA4CX,EAAkBY,wBAAwB7K,GAC5F,GAA2B,IAAvB4K,EAAYtR,OAAhB,CAKA,IAAK,MAAMwR,KAASF,EAEnBnC,EAAO,sBAAuB,CAC7BzT,KAAM8V,EAAMzP,QACZlB,MAAO,CACNW,cAAegQ,EAAMhQ,cACrB6F,cAAemK,EAAMnK,cACrBC,MAAOkK,EAAMlK,SAIf6H,EAAO,wBAAyB,CAC/BpN,QAASyP,EAAMzP,QACfuK,YAAakF,EAAMpK,sBAGrB+H,EAAO,2BAA2B,KAGnCrQ,iCAAgCoQ,QAAEA,EAAOC,OAAEA,IAAUsC,eAAEA,GAAmB,IACzE,MAAM1R,EAAkCmP,EAAQnP,eAEhD,GAA8B,IAA1BA,EAAeC,OAElB,OAGD,MAAM0G,EAAyB,IAAI2K,IAAItR,EAAeoM,IAAKtL,GAAUA,EAAMnF,OAErEgW,QAAkBf,EAAkBgB,2BAA2BjL,GAE/DkL,EAAiB1C,EAAQ7E,6BAA+B,EAE9D,IAAK,MAAOtI,EAASuK,KAAgBoF,EAEpCA,EAAUlK,IAAIzF,EAAS6P,EAAiBtF,GAGzC,IAAK,MAAMzL,KAASd,EACpB,CACC,MAAMgC,EAAUlB,EAAMnF,MACjB+V,GAAkBA,EAAiB5Q,EAAMyG,OAKzCoK,EAAU3K,IAAIhF,IAKnBoN,EAAO,wBAAyB,CAC/BpN,QAAAA,EACAuK,YAAaoF,EAAUnP,IAAIR,OAK9BjD,wBAAuBmQ,SAAEA,EAAQC,QAAEA,IAClC,IAAK,MAAMrO,KAAwBqO,EAAQnP,eAEtCc,EAAMT,gBAIV6O,EAAS,sBAAuBpO,IAIlCgR,mBAAkB5C,SAAEA,EAAQC,QAAEA,IAC7B,IAAK,MAAMrO,KAAwBqO,EAAQnP,eAErCc,EAAMT,gBAIX6O,EAAS,sBAAuBpO,IAGlCmC,+BAA+B8O,GAAOtP,UAAEA,EAASS,OAAEA,IAClD0N,EAAkBlJ,kBAAkBjF,EAAWS,IAEhD6B,oBAAmBoK,QAAEA,IACpB,MAAM6C,EAAU7C,EAAQjE,8BACxB1F,uBAAqByM,WAAWC,YAAYF,SAE5CG,yBAAAA,wBAAuBC,eAAeJ,IAEvCjT,oBAAmBqQ,OAAEA,EAAMD,QAAEA,IAC5B,MAAMvQ,EAAYuQ,EAAQvQ,UAE1B,GAAIuQ,EAAQ7D,WAAW+G,wBACvB,CAEC,SAD0BC,EAA2B1T,GAKpD,YAFAwQ,EAAO,wBAAwB,GAMjC,MACMmD,EAD4BpD,EAAQpF,cACF8D,eAAe5R,cACvDuU,eAAa5R,EAAW2T,EAAWpD,EAAQtF,QAASsF,EAAQrF,QAC5DsF,EAAO,wBAAwB,IAGhClQ,uBAAsBiQ,QAAEA,GAAW9T,GAElC,MACMkX,EAD4BpD,EAAQpF,cACF8D,eAAe5R,cACjD4N,EAAkBsF,EAAQtF,QAC1BC,EAAiBqF,EAAQrF,OAE/B0I,WAAS,CACRjW,MAAO,eACPkW,KAAM,KACNC,SAAU,iBACV3R,KAAM,SACN4R,UAAW,MACXC,UAAWvX,EACXwX,cAAeN,EACfO,GAAIjJ,EACJkJ,GAAIjJ,EACJmG,OAAQ,cAKX,MAAMqC,EAA6BlX,MAAAA,GAC3B4X,kBAAgBpU,GAGlByQ,EAAmBjU,MAAAA,UACDqC,GAAGsQ,KAAK+B,UAAU,8BAA+B,CACvEC,OAAQ,MACRC,cAAe,CAAEpR,UAAAA,MAGFhD,KC9SV,IAAIgV,EAAwC,KAAK,kKAEjD,MAAMqC,EAQZ/K,YAAYgL,EAAUC,EAAU,IAK/B,GAJDnS,8BAAAkF,YAAA1E,eAAAR,8BAAAkF,YAAA1E,eAAAR,8BAAAkF,YAAA1E,eACC4E,mDAAgB+M,EAChB3W,KAAK0W,SAAWE,SAASC,cAAe,IAAGH,IAEtC9M,mDAAcxH,UAElB,MAAM,IAAI2J,MAAM,+BAIlB+K,kBAEC,+CAAO9W,WAGRuV,YAEC,+CAAOvV,WAGR+W,QAEC3C,EAAoB,IAAI3K,EACxBG,mDAAcoN,cCnCR,CACN/J,MAAO,CACN7K,UAAW,KACX4K,WAAW,EACXxJ,eAAgB,GAChBiM,YAAY,EACZhC,sBAAsB,EACtBD,WAAY,KACZzH,mBAAoB,IAAIiF,IACxB2C,yBAA0B,IAAI3C,IAC9B+C,yBAA0B,KAC1BE,0BAA2B,KAC3BE,uBAAwB,KACxBN,0BAA2B,EAC3BY,iBAAiB,EACjBtF,qBAAsB,EACtBwF,2BAA2B,EAC3BC,0BAA0B,EAC1BE,WAAY,CACX2B,iBAAiB,EACjBC,oBAAoB,EACpB3B,yBAAyB,EACzB4B,gBAAiB,KACjB1B,iBAAiB,EACjB4G,yBAAyB,IAG3BlD,QAAAA,EACAsE,UAAAA,EACAC,QAAAA,IDOAtN,mDAAoBuN,YAAUC,UAAU,CACvCjY,KAAM,aACNgE,WAAY,CAAED,KAAAA,GACdmU,eAECrX,KAAKsX,QAAQC,YAAYtM,IAAIjL,OAE9BiC,SAAW,8BAKZ2H,mDAAYgJ,OAAO,eAAgBhJ,mDAAcxH,WACjDwH,mDAAYgJ,OAAO,aAAchJ,mDAAcyD,SAC/CzD,mDAAYgJ,OAAO,YAAahJ,mDAAc0D,QAC9C1D,mDAAkB4N,4CAAIxX,YACtB4J,mDAAkB6N,MAAMzX,KAAK0W,UAG9BgB,OAEC9N,mDAAkB+N,UAClB/N,mDAAoB,KACpBA,mDAAc,KACdwK,EAAoB,KAGrBxF,2BAEC,OAAOhF,mDAAY+I,QAAQ/D,yBAG5BgJ,mBACChO,mDAAYgJ,OAAO,yBAAyB,GAG7CiF,8BACC,OAAOjO,mDAAY+I,QAAQ3D,4BAG5B8I,4BACClO,mDAAY8I,SAAS,kCAGtBqF,eACC,OAAOnO,mDAAY+I,QAAQ3F,iTEnFd,MAAMgL,EASpBtM,cACAlH,8BAAAQ,UAAAR,8BAAAkF,YAAA1E,MAR+B,OAAIR,8BAAAkF,YAAA1E,MAEF,OAAIR,8BAAAkF,YAAA1E,MAEd,OAAIR,8BAAAkF,YAAA1E,MACF,OAIxB4E,qDAGDX,mBAAmBiB,GAClBN,mDAAuBM,EAGxBhB,qBAAqBgB,GACpBN,mDAAyBM,EAG1BuL,iBACC,+CAAOzV,WAGRiY,mBACC,+CAAOjY,WA8BRkY,aAEC,MAAO,yCAAClY,mDAAkBA,aAE3B,aA9BC4J,mDAAmB,IAAIuO,SAAO,CAC7BC,KAAM9X,MAAIC,WAAW,gCACrBkF,KAAM0S,SAAOE,KAAKC,OAClBC,MAAOJ,SAAOK,MAAMC,QACpBC,eAAe,EACfC,QAAS,KACJ5O,OAAKC,mDAAWhK,aAEnB4J,wDAKHA,mDAAqB,IAAIuO,SAAO,CAC/BC,KAAM9X,MAAIC,WAAW,kCACrBkF,KAAM0S,SAAOE,KAAKC,OAClBC,MAAOK,cAAYC,aACnBF,QAAS,KACJ5O,OAAKC,mDAAWhK,aAEnB4J,+EC/CoD,6BAEb,KAAK,20BAajD,MAAMkP,GAULpN,YAAYiL,EAAwBoC,GACpCvU,+BAAAQ,WAAAR,+BAAAQ,WAAAR,+BAAAQ,WAAAR,+BAAAQ,WAAAR,+BAAAQ,WAAAR,+BAAAQ,WAAAR,+BAAAwB,OAAAiF,aAAAzG,+BAAAwB,OAAAiF,aAAAzG,+BAAAwB,OAAAiF,aAAAzG,+BAAAwB,OAAAiF,aAAAzG,8BAAAkF,YAAA1E,eAAAR,+BAAAkF,YAAA1E,eAAAR,+BAAAkF,YAAA1E,eAAAR,+BAAAkF,YAAA1E,eACC4E,mDAAgB+M,EAChB/M,qDAA2BmP,EAC3B/P,uBAAuB,IAAIgP,EAmB5B5X,SACCwJ,6FAAuB5J,eAEvB2B,iBAAe,0BAA2BiI,qDAAqBd,KAAK9I,8CAAOA,cAC3E2B,iBAAe,2BAA4BiI,qDAAsBd,KAAK9I,8CAAOA,cAC7E2B,iBAAeC,OAAQ,gCAAiCgI,qDAAyBd,KAAK9I,OAEtF4J,qDAAqBoP,QA4ItB,cAlKC,MAAQ,+BAA8BpP,mDAAcxH,UACpD,cAGA,MAAQ,gCAA+BwH,mDAAcxH,UACrD,cAGA,MAAQ,8BAA6BwH,mDAAcxH,UACnD,cAGA,MAAQ,mCAAkCwH,78/DAAcxH,UACxD,cAaA,MAAM6W,EAAiBrP,qDAAyBsP,4BAwChD,MAAO,CAtCkB,IAAIf,SAAO,CACnCC,KAAM9X,MAAIC,WAAW,yCACrBkF,KAAM0S,SAAOE,KAAKC,OAClBC,MAAOJ,SAAOK,MAAMK,aACpBH,eAAe,EACfC,QAAS,KACR,GAAIQ,IAAIlY,GAAGmY,OACX,CACuB,IAAIC,OAAKC,cAAc,CAC5CC,WAAY3P,mDAAc2P,WAC1BC,YAAa5P,mDAAc4P,YAC3BC,QAAS7P,mDAAc6P,UAGVT,WAKI,IAAIb,SAAO,CAC/BC,KAAM9X,MAAIC,WAAW,kCACrBkF,KAAM0S,SAAOE,KAAKC,OAClBC,MAAOJ,SAAOK,MAAMK,aACpBH,eAAe,EACfC,QAAS,KACR,GAAIQ,IAAIlY,GAAGmY,OACX,CACgB,IAAIC,OAAKK,QAAQ,CAC/BH,WAAY3P,mDAAc2P,WAC1BC,YAAa5P,mDAAc4P,YAC3BC,QAAS7P,mDAAc6P,UAGjBT,cAQNC,GAEJ,cAGA,MAAMjY,EAAUgI,uBAAqBkP,aAC/Be,0CAAiBjZ,eAEvB,OAAO,4CAAIA,cAAyB,CACnC6T,QAAS,IAAO,YAASjK,wCAAE5J,uBAC3B2Z,YAAarZ,MAAIC,WAAW,iCAC5BqZ,MAAOhQ,mDAAcgQ,MACrBC,WAAY,CAAC,mBAAoB,qBACjCC,4CAAK9Z,aACL+Z,8CAAO/Z,eACPga,QAAS,IAAMf,EACfjY,QAAS,IAAMA,IAEhB,cAGA,MACM+Y,EADY9Y,GAAGgZ,UAAUC,SAASC,eAChBC,YAAqC,IAAtBxY,OAAOyY,OAAON,MAErD,OAAOpF,KAAKC,MAAc,IAARmF,GAClB,YAEeha,GACXA,EAAMua,YAAYC,mDAAava,eAInC2V,gEAAwB3V,aAExB4J,qDAAY,IAAI6M,0CACfzW,aACA,CACCoC,UAAWwH,mDAAcxH,UACzBiL,QAASzD,mDAAcyD,QACvBC,OAAQ1D,mDAAc0D,SAGxB1D,qDAAUmN,QACVyD,wBAAsB,kEAA2Bxa,eACjD,YAEgBD,GAChB,GAAIA,EAAMua,YAAYC,mDAAava,aAKnC,2CAAKA,eAAa4J,qDAAUmO,eAA5B,CAOA,GAAInO,qDAAUgF,2BAKb,OAHAhF,qDAAUgO,wBACV7X,EAAM0a,aAKP,GAAI7Q,qDAAUiO,8BAKb,OAHAjO,qDAAUkO,iCACV/X,EAAM0a,aAKPD,wBAAsB,mEAA4Bxa,cAClDwa,wBAAsB5Y,OAAQ,yEAC1B5B,eAEH4J,qDAAU8N,OACV9N,qDAAY,MAEbZ,uBAAuB,KACvB2M,wBAAwB,UA7BvB5V,EAAM0a,aA8BP,YAEmB1a,GAAO,aACRA,YAAAA,EAAOX,aAAPsb,EAAatY,aACbwH,mDAAcxH,WAE/BwH,qDAAqB7H,kDAK+B,SAAS4U,GAChE,UACC,MAAMgE,EAAW5B,IACA,IAAID,GAA2BnC,EAASoC,GAChD3Y,UAGL2J,OAAKC,oBAAW/I,cAAA2Z,EAAIjP,eAAJkP,EAASC,WAATC,EAAaC,QAEhCL,EAAQ1Z,GAAG0K,IAAImP,GAAGE,QAIlB7B,IAAIlY,GAAGwH,QAAQwS,cAAc,iBAC3BhU,KAAMiU,IACN,MAAMF,OAAEA,GAAWE,EACnBP,EAAQK,KAER9T,MAAM,KACN,MAAM,IAAI6E,MAAM"}