{"version":3,"file":"messagesender.bundle.js","sources":["../src/condition-checker.js","../src/internal/validation.js","../src/receiver.js","../src/internal/extract-receivers.js","../src/receiver-repository.js"],"sourcesContent":["import { ajax, Loc, Type } from 'main.core';\n\ntype OpenLineItems = {\n\t[key: string]: OpenLineItem;\n}\n\ntype OpenLineItem = {\n\tname: string;\n\tselected: boolean;\n\turl: string;\n}\n\ntype StringObject = {\n\t[key: string]: string;\n};\n\n/**\n * @namespace {BX.Crm.Sender}\n */\n\nexport const OpenLineCodes: Readonly<string, string> = Object.freeze({\n\ttelegram: 'telegrambot',\n\tnotifications: 'notifications',\n\t// maybe whatsapp, vk, facebook in the future\n});\n\nexport const Types: Readonly<string, string> = Object.freeze({\n\tbitrix24: 'bitrix24',\n\tsms: 'sms_provider',\n});\n\nconst defaultMessages = Object.freeze({\n\tagreement: Loc.getMessage('CRM_MESSAGESENDER_B24_AGREEMENT_NOTIFY'),\n\tconnectSuccess: Loc.getMessage('CRM_MESSAGESENDER_B24_CONNECT_SUCCESS'),\n\tconnectAccessDenied: Loc.getMessage('CRM_MESSAGESENDER_B24_CONNECT_ACCESS_DENIED'),\n\tconsentAgreementValidationError: Loc.getMessage('CRM_MESSAGESENDER_B24_CONSENT_AGREEMENT_VALIDATION_ERROR'),\n});\n\nexport class ConditionChecker\n{\n\topenLineItems: ?OpenLineItems = null;\n\topenLineCode: string;\n\tsenderType: string;\n\tmessages: StringObject;\n\n\t/**\n\t * @param {string} openLineCode\n\t * @param {string} senderType\n\t * @param {StringObject | null} messages\n\t * @param {OpenLineItems | null} openLineItems\n\t * @returns {Promise<number|null>}\n\t */\n\tstatic async checkAndGetLine({ openLineCode, senderType, messages = null, openLineItems = null }): Promise<boolean>\n\t{\n\t\tconst instance = new ConditionChecker({ openLineCode, senderType, messages })\n\n\t\tif (Type.isObjectLike(openLineItems))\n\t\t{\n\t\t\tinstance.setOpenLineItems(openLineItems);\n\t\t}\n\n\t\treturn instance.check();\n\t}\n\n\tstatic async checkIsApproved({ openLineCode, senderType }): Promise<boolean>\n\t{\n\t\tconst instance = new ConditionChecker({ openLineCode, senderType })\n\n\t\treturn instance.checkApproveConsent();\n\t}\n\n\t/**\n\t * @param {string} openLineCode\n\t * @param {string} senderType\n\t * @param {StringObject | null} messages\n\t */\n\tconstructor({ openLineCode, senderType, messages = null })\n\t{\n\t\tthis.openLineCode = openLineCode;\n\t\tthis.senderType = senderType;\n\n\t\tif (!Type.isObjectLike(messages))\n\t\t{\n\t\t\tmessages = {};\n\t\t}\n\n\t\tthis.messages = { ...defaultMessages, ...messages };\n\t}\n\n\tsetOpenLineItems(items: OpenLineItems): ConditionChecker\n\t{\n\t\tthis.openLineItems = items;\n\n\t\treturn this;\n\t}\n\n\tasync check(): Promise<number | null>\n\t{\n\t\tconst isSelected = await this.#isOpenLineItemSelected();\n\n\t\tif (isSelected)\n\t\t{\n\t\t\tconst isApproved = await this.#checkConsentApproved();\n\t\t\tif (isApproved)\n\t\t\t{\n\t\t\t\tconst lineId: number = await this.#getLineId();\n\t\t\t\tif (!lineId)\n\t\t\t\t{\n\t\t\t\t\treturn this.#openConnectSidePanel();\n\t\t\t\t}\n\n\t\t\t\treturn Promise.resolve(lineId);\n\t\t\t}\n\n\t\t\tthis.#showNotify(this.messages.agreement);\n\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tconst canEditConnector = await this.#canEditConnector();\n\t\tif (canEditConnector)\n\t\t{\n\t\t\treturn this.#openConnectSidePanel();\n\t\t}\n\n\t\tthis.#showConnectAlertMessage();\n\n\t\treturn Promise.resolve(null);\n\t}\n\n\tasync checkApproveConsent(): Promise<boolean | null>\n\t{\n\t\tconst isApproved = await this.#checkConsentApproved();\n\t\tif (isApproved)\n\t\t{\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\treturn Promise.resolve(null);\n\t}\n\n\tasync #isOpenLineItemSelected(): Promise<boolean>\n\t{\n\t\tconst item = await this.#getOpenLineItem();\n\n\t\tif (!item)\n\t\t{\n\t\t\tthrow new Error(`OpenLine item with code: ${this.openLineCode} not found`);\n\t\t}\n\n\t\treturn item.selected;\n\t}\n\n\tasync #fetchOpenLineItems(): Promise<OpenLineItems>\n\t{\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tajax.runAction('crm.controller.integration.openlines.getItems')\n\t\t\t\t.then(({ status, data, errors }) => {\n\t\t\t\t\tif (status === 'success')\n\t\t\t\t\t{\n\t\t\t\t\t\tresolve(data);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treject(errors);\n\t\t\t\t})\n\t\t\t\t.catch((data) => reject(data))\n\t\t\t;\n\t\t});\n\t}\n\n\tasync #getOpenLineItem(force: boolean = false): ?OpenLineItem\n\t{\n\t\tif (this.openLineItems === null || force)\n\t\t{\n\t\t\tthis.openLineItems = await this.#fetchOpenLineItems();\n\t\t}\n\n\t\treturn this.openLineItems[this.openLineCode];\n\t}\n\n\tasync #checkConsentApproved(): Promise<boolean>\n\t{\n\t\tif (this.senderType !== Types.bitrix24)\n\t\t{\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\treturn new Promise((resolve) => {\n\t\t\tajax.runAction('notifications.consent.Agreement.get')\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t\tif (!data || !data.html)\n\t\t\t\t\t{\n\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tBX.UI.Dialogs.MessageBox.show({\n\t\t\t\t\t\t\tmodal: true,\n\t\t\t\t\t\t\tminWidth: 980,\n\t\t\t\t\t\t\ttitle: data.title,\n\t\t\t\t\t\t\tmessage: data.html,\n\t\t\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t\t\tnew BX.UI.Button({\n\t\t\t\t\t\t\t\t\tclassName: 'ui-btn-round',\n\t\t\t\t\t\t\t\t\tcolor: BX.UI.Button.Color.SUCCESS,\n\t\t\t\t\t\t\t\t\ttext: Loc.getMessage('CRM_MESSAGESENDER_B24_CONSENT_ACCEPT'),\n\t\t\t\t\t\t\t\t\tonclick: (button) => {\n\t\t\t\t\t\t\t\t\t\tvoid ajax.runAction('notifications.consent.Agreement.approve');\n\t\t\t\t\t\t\t\t\t\tthis.#showNotify(Loc.getMessage('CRM_MESSAGESENDER_B24_AGREEMENT_ACCEPT'));\n\n\t\t\t\t\t\t\t\t\t\tbutton.context.close();\n\t\t\t\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tnew BX.UI.Button({\n\t\t\t\t\t\t\t\t\tclassName: 'ui-btn-round',\n\t\t\t\t\t\t\t\t\tcolor: BX.UI.Button.Color.LIGHT_BORDER,\n\t\t\t\t\t\t\t\t\ttext: Loc.getMessage('CRM_MESSAGESENDER_B24_CONSENT_REJECT'),\n\t\t\t\t\t\t\t\t\tonclick: (button) => {\n\t\t\t\t\t\t\t\t\t\tbutton.context.close();\n\t\t\t\t\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tpopupOptions: {\n\t\t\t\t\t\t\t\tclassName: 'crm-agreement-terms-popup',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tthis.#showNotify(this.messages.consentAgreementValidationError);\n\t\t\t\t\tresolve(false);\n\t\t\t\t})\n\t\t\t;\n\t\t});\n\t}\n\n\tasync #getLineId(): Promise<number | null>\n\t{\n\t\treturn new Promise((resolve) => {\n\t\t\tconst ajaxParameters = {\n\t\t\t\tconnectorId: this.openLineCode,\n\t\t\t\twithConnector: true,\n\t\t\t};\n\n\t\t\tajax.runAction('imconnector.Openlines.list', { data: ajaxParameters })\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t\tif (data.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst { lineId } = data[data.length - 1];\n\t\t\t\t\t\tresolve(lineId);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(null);\n\t\t\t\t})\n\t\t\t\t.catch(() => this.#showNotify(Loc.getMessage('CRM_MESSAGESENDER_B24_OPENLINE_LINEID_ERROR')))\n\t\t\t;\n\t\t});\n\t}\n\n\tasync #canEditConnector(): Promise<boolean>\n\t{\n\t\treturn new Promise((resolve) => {\n\t\t\tajax.runAction('imconnector.Openlines.hasAccess')\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t\tif (data.canEditConnector)\n\t\t\t\t\t{\n\t\t\t\t\t\tresolve(true);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(false);\n\t\t\t\t})\n\t\t\t\t.catch(() => this.#showConnectAlertMessage())\n\t\t\t;\n\t\t});\n\t}\n\n\t#showNotify(content: string): void\n\t{\n\t\tBX.UI.Notification.Center.notify({ content });\n\t}\n\n\tasync #openConnectSidePanel(): Promise<boolean>\n\t{\n\t\tconst item = await this.#getOpenLineItem();\n\n\t\treturn new Promise((resolve) => {\n\t\t\tif (Type.isStringFilled(item.url))\n\t\t\t{\n\t\t\t\tBX.SidePanel.Instance.open(\n\t\t\t\t\titem.url,\n\t\t\t\t\t{\n\t\t\t\t\t\twidth: 700,\n\t\t\t\t\t\tcacheable: false,\n\t\t\t\t\t\tevents: {\n\t\t\t\t\t\t\tonClose: () => this.#onConnect(resolve),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.#showNotify(Loc.getMessage('CRM_MESSAGESENDER_B24_OPENLINE_LINEID_ERROR'));\n\t\t\tresolve(null);\n\t\t});\n\t}\n\n\tasync #onConnect(resolve): Promise<number | null>\n\t{\n\t\tconst lineId = await this.#getLineId();\n\t\tif (!lineId)\n\t\t{\n\t\t\tresolve(null);\n\t\t\tthis.#showNotify(this.messages.agreement);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst item = await this.#getOpenLineItem(true);\n\t\tthis.#showNotify(this.messages.connectSuccess.replace('#LINE_NAME#', item.name));\n\n\t\tconst isApproved = await this.#checkConsentApproved();\n\t\tif (isApproved)\n\t\t{\n\t\t\tresolve(lineId);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.#showNotify(this.messages.agreement);\n\t\t\tresolve(null);\n\t\t}\n\t}\n\n\tasync #showConnectAlertMessage(): void\n\t{\n\t\tconst item = await this.#getOpenLineItem();\n\n\t\tconst message = this.messages.connectAccessDenied.replace('#SERVICE_NAME#', item.name);\n\t\tBX.UI.Dialogs.MessageBox.alert(message);\n\t}\n}","import { Type } from 'main.core';\nimport { ItemIdentifier } from 'crm.data-structures';\nimport { Receiver } from '../receiver';\n\nexport function ensureIsItemIdentifier(candidate: any): void\n{\n\tif (candidate instanceof ItemIdentifier)\n\t{\n\t\treturn;\n\t}\n\n\tthrow new Error('Argument should be an instance of ItemIdentifier');\n}\n\nexport function ensureIsReceiver(candidate: any): void\n{\n\tif (candidate instanceof Receiver)\n\t{\n\t\treturn;\n\t}\n\n\tthrow new Error('Argument should be an instance of Receiver');\n}\n\nexport function ensureIsValidMultifieldValue(candidate: any): void\n{\n\t// noinspection OverlyComplexBooleanExpressionJS\n\tconst isValidValue = (\n\t\tType.isPlainObject(candidate)\n\t\t&& (Type.isNil(candidate.id) || Type.isInteger(candidate.id))\n\t\t&& Type.isStringFilled(candidate.typeId)\n\t\t&& Type.isStringFilled(candidate.valueType)\n\t\t&& Type.isStringFilled(candidate.value)\n\t);\n\n\tif (isValidValue)\n\t{\n\t\treturn;\n\t}\n\n\tthrow new Error('Argument should be an object of valid MultifieldValue structure');\n}\n\nexport function ensureIsValidSourceData(candidate: any): void\n{\n\tconst isValid = (\n\t\tType.isPlainObject(candidate)\n\t\t&& Type.isStringFilled(candidate.title)\n\t);\n\n\tif (isValid)\n\t{\n\t\treturn;\n\t}\n\n\tthrow new Error('Argument should be an object of valid SourceData structure')\n}\n","import { ItemIdentifier } from 'crm.data-structures';\nimport { ensureIsItemIdentifier, ensureIsValidMultifieldValue, ensureIsValidSourceData } from './internal/validation';\n\nexport type MultifieldValue = {\n\tid: ?number,\n\ttypeId: string,\n\tvalueType: string,\n\tvalue: string,\n\tvalueFormatted: ?string,\n};\n\nexport type SourceData = {\n\ttitle: string,\n};\n\nexport class Receiver\n{\n\t#rootSource: ItemIdentifier;\n\t#addressSource: ItemIdentifier;\n\t#addressSourceData: ?SourceData = null;\n\t#address: MultifieldValue;\n\n\tconstructor(\n\t\trootSource: ItemIdentifier,\n\t\taddressSource: ItemIdentifier,\n\t\taddress: MultifieldValue,\n\t\taddressSourceData: ?SourceData = null,\n\t)\n\t{\n\t\tensureIsItemIdentifier(rootSource);\n\t\tthis.#rootSource = rootSource;\n\n\t\tensureIsItemIdentifier(addressSource);\n\t\tthis.#addressSource = addressSource;\n\n\t\tensureIsValidMultifieldValue(address);\n\t\tthis.#address = Object.freeze({\n\t\t\tid: address.id,\n\t\t\ttypeId: address.typeId,\n\t\t\tvalueType: address.valueType,\n\t\t\tvalue: address.value,\n\t\t\tvalueFormatted: address.valueFormatted,\n\t\t});\n\n\t\tif (addressSourceData)\n\t\t{\n\t\t\tensureIsValidSourceData(addressSourceData);\n\t\t\tthis.#addressSourceData = Object.freeze({\n\t\t\t\ttitle: addressSourceData.title,\n\t\t\t});\n\t\t}\n\t}\n\n\tstatic fromJSON(data: Object): ?Receiver\n\t{\n\t\tconst rootSource = ItemIdentifier.fromJSON(data?.rootSource);\n\t\tif (!rootSource)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\tconst addressSource = ItemIdentifier.fromJSON(data?.addressSource);\n\t\tif (!addressSource)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\treturn new Receiver(rootSource, addressSource, data?.address, data?.addressSourceData);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tget rootSource(): ItemIdentifier\n\t{\n\t\treturn this.#rootSource;\n\t}\n\n\tget addressSource(): ItemIdentifier\n\t{\n\t\treturn this.#addressSource;\n\t}\n\n\tget addressSourceData(): ?SourceData\n\t{\n\t\treturn this.#addressSourceData;\n\t}\n\n\tget address(): MultifieldValue\n\t{\n\t\treturn this.#address;\n\t}\n\n\tisEqualTo(another: Receiver): boolean\n\t{\n\t\tif (!(another instanceof Receiver))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// noinspection OverlyComplexBooleanExpressionJS\n\t\treturn (\n\t\t\tthis.rootSource.isEqualTo(another.rootSource)\n\t\t\t&& this.addressSource.isEqualTo(another.addressSource)\n\t\t\t&& String(this.address.typeId) === String(another.address.typeId)\n\t\t\t&& String(this.address.valueType) === String(another.address.valueType)\n\t\t\t&& String(this.address.value) === String(another.address.value)\n\t\t);\n\t}\n}\n","import { Text, Type } from 'main.core';\nimport { Receiver } from '../receiver';\nimport { ItemIdentifier } from 'crm.data-structures';\n\nexport function extractReceivers(item: ItemIdentifier, entityData: ?Object): Receiver[]\n{\n\tconst receivers = [];\n\tif (entityData?.hasOwnProperty('MULTIFIELD_DATA'))\n\t{\n\t\treceivers.push(...extractReceiversFromMultifieldData(item, entityData));\n\t}\n\tif (entityData?.hasOwnProperty('CLIENT_INFO'))\n\t{\n\t\treceivers.push(...extractReceiversFromClientInfo(item, entityData.CLIENT_INFO));\n\t}\n\n\treturn unique(receivers);\n}\n\nfunction extractReceiversFromMultifieldData(item: ItemIdentifier, entityData: Object): Receiver[]\n{\n\tconst receivers: Receiver[] = [];\n\n\tconst multifields = entityData.MULTIFIELD_DATA;\n\tfor (const multifieldTypeId in multifields)\n\t{\n\t\tif (!multifields.hasOwnProperty(multifieldTypeId) || !Type.isPlainObject(multifields[multifieldTypeId]))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const itemSlug in multifields[multifieldTypeId])\n\t\t{\n\t\t\tif (\n\t\t\t\t!multifields[multifieldTypeId].hasOwnProperty(itemSlug)\n\t\t\t\t|| !Type.isArrayFilled(multifields[multifieldTypeId][itemSlug])\n\t\t\t)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [entityTypeId, entityId] = itemSlug.split('_');\n\t\t\tlet addressSource: ItemIdentifier;\n\t\t\ttry\n\t\t\t{\n\t\t\t\taddressSource = new ItemIdentifier(Text.toInteger(entityTypeId), Text.toInteger(entityId));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst addressSourceTitle = getAddressSourceTitle(item, addressSource, entityData);\n\n\t\t\tfor (const singleMultifield of multifields[multifieldTypeId][itemSlug])\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\treceivers.push(new Receiver(\n\t\t\t\t\t\titem,\n\t\t\t\t\t\taddressSource,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: Text.toInteger(singleMultifield.ID),\n\t\t\t\t\t\t\ttypeId: String(multifieldTypeId),\n\t\t\t\t\t\t\tvalueType: stringOrUndefined(singleMultifield.VALUE_TYPE),\n\t\t\t\t\t\t\tvalue: stringOrUndefined(singleMultifield.VALUE),\n\t\t\t\t\t\t\tvalueFormatted: stringOrUndefined(singleMultifield.VALUE_FORMATTED),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttitle: addressSourceTitle,\n\t\t\t\t\t\t},\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn receivers;\n}\n\nfunction getAddressSourceTitle(rootSource: ItemIdentifier, addressSource: ItemIdentifier, entityData: ?Object): string\n{\n\tif (rootSource.isEqualTo(addressSource))\n\t{\n\t\treturn entityData?.TITLE ?? entityData.FORMATTED_NAME ?? '';\n\t}\n\n\tconst clientDataKey = `${BX.CrmEntityType.resolveName(addressSource.entityTypeId)}_DATA`;\n\tif (Type.isArrayFilled(entityData?.CLIENT_INFO?.[clientDataKey]))\n\t{\n\t\tconst client = entityData.CLIENT_INFO[clientDataKey].find(clientInfo => {\n\t\t\treturn Text.toInteger(clientInfo.id) === addressSource.entityId;\n\t\t});\n\n\t\tif (Type.isString(client?.title))\n\t\t{\n\t\t\treturn client.title;\n\t\t}\n\t}\n\n\treturn '';\n}\n\nfunction extractReceiversFromClientInfo(item: ItemIdentifier, clientInfo: Object): Receiver[]\n{\n\tconst receivers = [];\n\n\tfor (const clientsOfSameType of Object.values(clientInfo))\n\t{\n\t\tif (!Type.isArrayFilled(clientsOfSameType))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (const singleClient of clientsOfSameType)\n\t\t{\n\t\t\tif (!Type.isPlainObject(singleClient))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet addressSource: ItemIdentifier;\n\t\t\ttry\n\t\t\t{\n\t\t\t\taddressSource = new ItemIdentifier(BX.CrmEntityType.resolveId(singleClient.typeName), singleClient.id);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst multifields = singleClient.advancedInfo?.multiFields;\n\t\t\tif (!Type.isArrayFilled(multifields))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (const singleMultifield of multifields)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\treceivers.push(new Receiver(\n\t\t\t\t\t\titem,\n\t\t\t\t\t\taddressSource,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: Text.toInteger(singleMultifield.ID),\n\t\t\t\t\t\t\ttypeId: stringOrUndefined(singleMultifield.TYPE_ID),\n\t\t\t\t\t\t\tvalueType: stringOrUndefined(singleMultifield.VALUE_TYPE),\n\t\t\t\t\t\t\tvalue: stringOrUndefined(singleMultifield.VALUE),\n\t\t\t\t\t\t\tvalueFormatted: stringOrUndefined(singleMultifield.VALUE_FORMATTED),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttitle: stringOrUndefined(singleClient.title),\n\t\t\t\t\t\t},\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn receivers;\n}\n\nfunction stringOrUndefined(value: ?string): string | undefined\n{\n\treturn Type.isNil(value) ? undefined : String(value);\n}\n\nfunction unique(receivers: Receiver[]): Receiver[]\n{\n\treturn receivers.filter((receiver, index) => {\n\t\tconst anotherIndex = receivers.findIndex(anotherReceiver => receiver.isEqualTo(anotherReceiver));\n\n\t\treturn anotherIndex === index;\n\t});\n}\n","import { BaseEvent, EventEmitter } from 'main.core.events';\nimport { Reflection, Type } from 'main.core';\nimport { ItemIdentifier } from 'crm.data-structures';\nimport { Receiver } from './receiver';\nimport { extractReceivers } from './internal/extract-receivers';\nimport { ensureIsItemIdentifier, ensureIsReceiver } from './internal/validation';\n\nconst OBSERVED_EVENTS = new Set([\n\t'onCrmEntityCreate',\n\t'onCrmEntityUpdate',\n\t'onCrmEntityDelete',\n]);\n\n/**\n * @memberOf BX.Crm.MessageSender\n * @mixes EventEmitter\n *\n * @emits BX.Crm.MessageSender.ReceiverRepository:OnReceiversChanged\n * @emits BX.Crm.MessageSender.ReceiverRepository:OnItemDeleted\n *\n * Currently, this class is supposed to work only in the context of entity details tab.\n * In the future, it can be extended to work on any page.\n */\nexport class ReceiverRepository\n{\n\tstatic #instance: ?ReceiverRepository;\n\n\t#onDetailsTabChangeEventHandler: (BaseEvent) => void;\n\n\t#storage: {[itemHash: string]: Receiver[]} = {};\n\n\t#observedItems: {[entityTypeId: number]: Set<number>} = {};\n\n\n\tstatic get Instance(): ReceiverRepository\n\t{\n\t\tif ((window.top !== window) && Reflection.getClass('top.BX.Crm.MessageSender.ReceiverRepository'))\n\t\t{\n\t\t\treturn window.top.BX.Crm.MessageSender.ReceiverRepository;\n\t\t}\n\n\t\tif (!ReceiverRepository.#instance)\n\t\t{\n\t\t\tReceiverRepository.#instance = new ReceiverRepository();\n\t\t}\n\n\t\treturn ReceiverRepository.#instance;\n\t}\n\n\t/**\n\t * @internal This class is a singleton. Use Instance getter instead of constructing a new instance\n\t */\n\tconstructor()\n\t{\n\t\tif (ReceiverRepository.#instance)\n\t\t{\n\t\t\tthrow new Error('Attempt to make a new instance of a singleton');\n\t\t}\n\n\t\tthis.#init();\n\t}\n\n\t#init(): void\n\t{\n\t\tEventEmitter.makeObservable(this, 'BX.Crm.MessageSender.ReceiverRepository');\n\n\t\tthis.#onDetailsTabChangeEventHandler = (event: BaseEvent) => {\n\t\t\tif (!(event instanceof BaseEvent))\n\t\t\t{\n\t\t\t\tconsole.error('unexpected event type', event);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!Type.isArrayFilled(event.getData()) || !Type.isPlainObject(event.getData()[0]))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.#onCrmEntityChange(event.getType(), event.getData()[0]);\n\t\t};\n\t\tthis.#onDetailsTabChangeEventHandler = this.#onDetailsTabChangeEventHandler.bind(this);\n\n\t\tfor (const eventName of OBSERVED_EVENTS)\n\t\t{\n\t\t\tEventEmitter.subscribe(eventName, this.#onDetailsTabChangeEventHandler);\n\t\t}\n\t\tif (BX.SidePanel?.Instance?.isOpen())\n\t\t{\n\t\t\t// we are on entity details slider\n\t\t\tEventEmitter.subscribe('SidePanel.Slider:onDestroy', this.#destroy.bind(this));\n\t\t}\n\t}\n\n\t#destroy(): void\n\t{\n\t\tfor (const eventName of OBSERVED_EVENTS)\n\t\t{\n\t\t\tEventEmitter.unsubscribe(eventName, this.#onDetailsTabChangeEventHandler);\n\t\t}\n\t\tReceiverRepository.#instance = null;\n\t}\n\n\t#onCrmEntityChange(eventType: string, {entityTypeId, entityId, entityData}): void\n\t{\n\t\tif (!this.#observedItems[entityTypeId]?.has(entityId))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tconst item = new ItemIdentifier(entityTypeId, entityId);\n\n\t\tif (\n\t\t\teventType.toLowerCase() === 'onCrmEntityCreate'.toLowerCase()\n\t\t\t|| eventType.toLowerCase() === 'onCrmEntityUpdate'.toLowerCase()\n\t\t)\n\t\t{\n\t\t\tconst oldReceivers = this.#storage[item.hash] ?? [];\n\t\t\tconst newReceivers = extractReceivers(item, entityData);\n\n\t\t\tthis.#storage[item.hash] = newReceivers;\n\n\t\t\tconst added = newReceivers.filter(newReceiver => {\n\t\t\t\treturn Type.isNil(oldReceivers.find(oldReceiver => oldReceiver.isEqualTo(newReceiver)));\n\t\t\t});\n\t\t\tconst deleted = oldReceivers.filter(oldReceiver => {\n\t\t\t\treturn Type.isNil(newReceivers.find(newReceiver => newReceiver.isEqualTo(oldReceiver)));\n\t\t\t});\n\n\t\t\tif (added.length > 0 || deleted.length > 0)\n\t\t\t{\n\t\t\t\tthis.emit('OnReceiversChanged', {item, previous: oldReceivers, current: newReceivers, added, deleted});\n\t\t\t}\n\t\t}\n\t\telse if (eventType.toLowerCase() === 'onCrmEntityDelete'.toLowerCase())\n\t\t{\n\t\t\tdelete this.#storage[item.hash];\n\t\t\tthis.#observedItems[item.entityTypeId].delete(item.entityId);\n\t\t\tthis.emit('OnItemDeleted', {item});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconsole.error('unknown event type', eventType);\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tstatic onDetailsLoad(entityTypeId: number, entityId: number, receiversJSONString: string): void\n\t{\n\t\tlet item: ItemIdentifier;\n\t\ttry\n\t\t{\n\t\t\titem = new ItemIdentifier(entityTypeId, entityId);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tconst instance = ReceiverRepository.Instance;\n\t\tinstance.#startObservingItem(item);\n\n\t\tconst receiversJSON = JSON.parse(receiversJSONString);\n\t\tif (Type.isArrayFilled(receiversJSON))\n\t\t{\n\t\t\tconst receivers = [];\n\t\t\tfor (const singleReceiverJSON of receiversJSON)\n\t\t\t{\n\t\t\t\tconst receiver = Receiver.fromJSON(singleReceiverJSON);\n\t\t\t\tif (!Type.isNil(receiver))\n\t\t\t\t{\n\t\t\t\t\treceivers.push(receiver);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Type.isArrayFilled(receivers))\n\t\t\t{\n\t\t\t\tinstance.#addReceivers(item, receivers);\n\t\t\t}\n\t\t}\n\t}\n\n\t#addReceivers(item: ItemIdentifier, receivers: Receiver[]): void\n\t{\n\t\tensureIsItemIdentifier(item);\n\n\t\tthis.#storage[item.hash] = [];\n\t\tfor (const receiver of receivers)\n\t\t{\n\t\t\tensureIsReceiver(receiver);\n\n\t\t\tthis.#storage[item.hash].push(receiver);\n\t\t}\n\n\t\tthis.#startObservingItem(item);\n\t}\n\n\t#startObservingItem(item: ItemIdentifier): void\n\t{\n\t\tensureIsItemIdentifier(item);\n\n\t\tconst observedItemsOfThisType = this.#observedItems[item.entityTypeId] ?? new Set();\n\t\tobservedItemsOfThisType.add(item.entityId);\n\t\tthis.#observedItems[item.entityTypeId] = observedItemsOfThisType;\n\t}\n\n\tgetReceivers(entityTypeId: number, entityId: number): Receiver[]\n\t{\n\t\ttry\n\t\t{\n\t\t\treturn this.getReceiversByIdentifier(new ItemIdentifier(entityTypeId, entityId));\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tgetReceiversByIdentifier(item: ItemIdentifier): Receiver[]\n\t{\n\t\tensureIsItemIdentifier(item);\n\n\t\treturn this.#storage[item.hash] ?? [];\n\t}\n}\n"],"names":["OpenLineCodes","Object","freeze","telegram","notifications","Types","bitrix24","sms","defaultMessages","agreement","Loc","getMessage","connectSuccess","connectAccessDenied","consentAgreementValidationError","ConditionChecker","[object Object]","openLineCode","senderType","messages","openLineItems","instance","Type","isObjectLike","setOpenLineItems","check","checkApproveConsent","constructor","value","this","items","lineId","Promise","resolve","babelHelpers","async","item","Error","selected","reject","ajax","runAction","then","status","data","errors","catch","force","html","BX","UI","Dialogs","MessageBox","show","modal","minWidth","title","message","buttons","Button","className","color","Color","SUCCESS","text","onclick","button","context","close","LIGHT_BORDER","popupOptions","ajaxParameters","connectorId","withConnector","length","canEditConnector","content","Notification","Center","notify","isStringFilled","url","SidePanel","Instance","open","width","cacheable","events","onClose","replace","name","alert","ensureIsItemIdentifier","candidate","ItemIdentifier","ensureIsReceiver","Receiver","rootSource","addressSource","address","addressSourceData","writable","isPlainObject","isNil","id","isInteger","typeId","valueType","ensureIsValidMultifieldValue","valueFormatted","ensureIsValidSourceData","fromJSON","e","isEqualTo","another","String","extractReceivers","entityData","receivers","hasOwnProperty","push","multifields","MULTIFIELD_DATA","multifieldTypeId","itemSlug","isArrayFilled","entityTypeId","entityId","split","Text","toInteger","addressSourceTitle","getAddressSourceTitle","singleMultifield","ID","stringOrUndefined","VALUE_TYPE","VALUE","VALUE_FORMATTED","extractReceiversFromMultifieldData","clientInfo","clientsOfSameType","values","singleClient","CrmEntityType","resolveId","typeName","advancedInfo","_singleClient$advance","multiFields","TYPE_ID","extractReceiversFromClientInfo","CLIENT_INFO","filter","receiver","index","findIndex","anotherReceiver","unique","TITLE","FORMATTED_NAME","clientDataKey","resolveName","_entityData$CLIENT_IN","client","find","isString","undefined","OBSERVED_EVENTS","Set","ReceiverRepository","window","top","Reflection","getClass","Crm","MessageSender","receiversJSONString","receiversJSON","JSON","parse","singleReceiverJSON","getReceivers","getReceiversByIdentifier","hash","EventEmitter","makeObservable","event","BaseEvent","getData","getType","console","error","bind","eventName","subscribe","_BX$SidePanel","_BX$SidePanel$Instanc","isOpen","unsubscribe","eventType","_babelHelpers$classPr2","has","toLowerCase","oldReceivers","newReceivers","added","newReceiver","oldReceiver","deleted","emit","previous","current","delete","observedItemsOfThisType","add"],"mappings":"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"}