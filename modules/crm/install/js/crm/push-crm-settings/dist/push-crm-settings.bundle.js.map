{"version":3,"file":"push-crm-settings.bundle.js","sources":["../src/params-handling.js","../src/grid/default-sort.js","../src/grid/sort-controller.js","../src/push-crm-settings.js","../src/index.js"],"sourcesContent":["import { Type } from \"main.core\";\n\nexport function requireClassOrNull(param: any, constructor: Function, paramName: string): ?Object\n{\n\tif (Type.isNil(param))\n\t{\n\t\treturn param;\n\t}\n\n\treturn requireClass(param, constructor, paramName);\n}\n\nexport function requireClass(param: any, constructor: Function, paramName: string): Object\n{\n\tif (param instanceof constructor)\n\t{\n\t\treturn param;\n\t}\n\n\tthrow new Error(`Expected ${paramName} be an instance of ${constructor.name}, got ${getType(param)} instead`);\n}\n\nexport function requireStringOrNull(param: any, paramName: string): ?string\n{\n\tif (Type.isStringFilled(param) || Type.isNil(param))\n\t{\n\t\treturn param;\n\t}\n\n\tthrow new Error(`Expected ${paramName} be either non-empty string or null, got ${getType(param)} instead`);\n}\n\nfunction getType(value: any): string\n{\n\tif (Type.isObject(value) && !Type.isPlainObject(value))\n\t{\n\t\treturn value?.constructor?.name || 'unknown';\n\t}\n\n\t// eslint-disable-next-line bitrix-rules/no-typeof\n\treturn typeof value;\n}\n","import { Reflection } from \"main.core\";\n\nconst EntityType = Reflection.getClass('BX.CrmEntityType');\n\nconst DefaultSort: {[key: number]: {column: string, order: 'asc' | 'desc'}} = {};\n\nif (EntityType)\n{\n\tDefaultSort[EntityType.enumeration.deal] = {\n\t\tcolumn: 'DATE_CREATE',\n\t\torder: 'desc',\n\t};\n}\n\nObject.freeze(DefaultSort);\n\nexport {\n\tDefaultSort,\n}\n","import { Text, Type } from \"main.core\";\nimport { requireClass } from \"../params-handling\";\nimport { DefaultSort } from \"./default-sort\";\n\nexport class SortController\n{\n\t#entityTypeId: number;\n\t#grid: BX.Main.grid;\n\n\tconstructor(entityTypeId: number, grid: BX.Main.grid)\n\t{\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tthis.#grid = requireClass(grid, BX.Main.grid, 'grid');\n\t}\n\n\tisLastActivitySortSupported(): boolean\n\t{\n\t\treturn this.#isColumnExists('LAST_ACTIVITY_TIME');\n\t}\n\n\tisLastActivitySortEnabled(): boolean\n\t{\n\t\tconst options = this.#grid.getUserOptions().getCurrentOptions();\n\n\t\tconst column = options.last_sort_by;\n\t\tconst order = options.last_sort_order;\n\n\t\treturn (\n\t\t\tcolumn?.toLowerCase() === 'last_activity_time'\n\t\t\t&& order?.toLowerCase() === 'desc'\n\t\t);\n\t}\n\n\ttoggleLastActivitySort(): void\n\t{\n\t\tif (this.isLastActivitySortEnabled())\n\t\t{\n\t\t\tthis.#disableLastActivitySort();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.#enableLastActivitySort();\n\t\t}\n\t}\n\n\tasync #disableLastActivitySort(): Promise<void>\n\t{\n\t\tconst sort = DefaultSort[this.#entityTypeId];\n\n\t\tlet column: string;\n\n\t\tif (Type.isPlainObject(sort) && this.#isColumnExists(sort.column) && this.#isColumnSortable(sort.column))\n\t\t{\n\t\t\tcolumn = sort.column;\n\n\t\t\tif (!this.#isColumnShowed(column))\n\t\t\t{\n\t\t\t\tawait this.#showColumn(column);\n\t\t\t}\n\n\t\t\tthis.#setSortOrder(column, sort.order);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// fist showed different sortable\n\t\t\tcolumn = this.#getShowedColumnList().find((columnName) => {\n\t\t\t\treturn (\n\t\t\t\t\tcolumnName !== 'LAST_ACTIVITY_TIME'\n\t\t\t\t\t&& this.#isColumnSortable(columnName)\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tthis.#grid.sortByColumn(column);\n\t}\n\n\tasync #enableLastActivitySort(): Promise<void>\n\t{\n\t\tif (!this.#isColumnShowed('LAST_ACTIVITY_TIME'))\n\t\t{\n\t\t\tawait this.#showColumn('LAST_ACTIVITY_TIME');\n\t\t}\n\n\t\tthis.#setSortOrder('LAST_ACTIVITY_TIME', 'desc');\n\n\t\tthis.#grid.sortByColumn('LAST_ACTIVITY_TIME');\n\t}\n\n\t#isColumnExists(column: string): boolean\n\t{\n\t\treturn this.#grid.getParam('COLUMNS_ALL', {}).hasOwnProperty(column);\n\t}\n\n\t#isColumnShowed(column: string): boolean\n\t{\n\t\treturn this.#getShowedColumnList().includes(column);\n\t}\n\n\t#isColumnSortable(column: string): boolean\n\t{\n\t\tconst columnParams = this.#grid.getColumnByName(column);\n\n\t\treturn !!(columnParams && columnParams.sort !== false);\n\t}\n\n\t#getShowedColumnList(): string[]\n\t{\n\t\treturn this.#grid.getSettingsWindow().getShowedColumns();\n\t}\n\n\t#setSortOrder(column: string, order: 'asc' | 'desc'): void\n\t{\n\t\tthis.#grid.getColumnByName(column).sort_order = order;\n\t}\n\n\t#showColumn(column: string): Promise<void, string>\n\t{\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!this.#isColumnExists(column))\n\t\t\t{\n\t\t\t\treject(`Column ${column} does not exists`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.#isColumnShowed(column))\n\t\t\t{\n\t\t\t\treject(`Column ${column} is showed already`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst settingsWindowCheckbox: ?BX.Grid.SettingsWindowColumn = this.#grid.getSettingsWindow().getItems().find(\n\t\t\t\t(checkbox: BX.Grid.SettingsWindowColumn) => checkbox.getId() === column,\n\t\t\t);\n\t\t\tsettingsWindowCheckbox?.select();\n\n\t\t\tconst showedColumns = this.#getShowedColumnList();\n\t\t\tshowedColumns.push(column);\n\n\t\t\tthis.#grid.getSettingsWindow().saveColumns(showedColumns, resolve);\n\t\t});\n\t}\n}\n","import { Menu, MenuItem, MenuItemOptions } from \"main.popup\";\nimport { SettingsController, Type as SortType } from \"crm.kanban.sort\";\nimport { Restriction } from \"crm.kanban.restriction\";\nimport { BaseEvent, EventEmitter } from \"main.core.events\";\nimport { Loc, Reflection, Text } from \"main.core\";\nimport { TodoNotificationSkipMenu } from \"crm.activity.todo-notification-skip-menu\";\nimport { Params } from \"./params\";\nimport { requireClass, requireClassOrNull, requireStringOrNull } from \"./params-handling\";\nimport { SortController as GridSortController } from \"./grid/sort-controller\";\n\nconst EntityType = Reflection.getClass('BX.CrmEntityType');\n\nconst CHECKED_CLASS = 'menu-popup-item-accept';\nconst NOT_CHECKED_CLASS = 'menu-popup-item-none';\n\n/**\n * @memberOf BX.Crm\n */\nexport class PushCrmSettings\n{\n\t#entityTypeId: number;\n\t#rootMenu: Menu;\n\t#targetItemId: ?string;\n\t#kanbanController: ?SettingsController;\n\t#restriction: ?Restriction;\n\t#gridController: ?GridSortController = null;\n\n\t#todoSkipMenu: TodoNotificationSkipMenu;\n\n\t#isSetSortRequestRunning: boolean = false;\n\n\tconstructor(params: Params)\n\t{\n\t\tthis.#entityTypeId = Text.toInteger(params.entityTypeId);\n\t\tif (EntityType && !EntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error(`Provided entityTypeId is invalid: ${this.#entityTypeId}`);\n\t\t}\n\n\t\tthis.#rootMenu = requireClass(params.rootMenu, Menu, 'params.rootMenu');\n\n\t\tthis.#targetItemId = requireStringOrNull(params.targetItemId, 'params.targetItemId');\n\n\t\tthis.#kanbanController = requireClassOrNull(params.controller, SettingsController, 'params.controller');\n\t\tthis.#restriction = requireClassOrNull(params.restriction, Restriction, 'params.restriction');\n\n\t\tif (Reflection.getClass('BX.Main.grid') && params.grid)\n\t\t{\n\t\t\tthis.#gridController = new GridSortController(this.#entityTypeId, params.grid);\n\t\t}\n\n\t\tthis.#todoSkipMenu = new TodoNotificationSkipMenu({\n\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\tselectedValue: requireStringOrNull(params.todoCreateNotificationSkipPeriod, 'params.todoCreateNotificationSkipPeriod'),\n\t\t});\n\n\t\tthis.#bindEvents();\n\t}\n\n\t#bindEvents(): void\n\t{\n\t\tconst onPopupShowHandler = (event: BaseEvent) => {\n\t\t\tconst popup = event.getTarget();\n\t\t\tif (popup.getId() !== this.#rootMenu.getId())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// process this event with the intended target only once\n\t\t\tEventEmitter.unsubscribe(EventEmitter.GLOBAL_TARGET, 'onPopupShow', onPopupShowHandler);\n\n\t\t\tif (!this.#shouldShowPushCrmSettings())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst item: MenuItem = this.#rootMenu.addMenuItem(\n\t\t\t\t{\n\t\t\t\t\ttext: Loc.getMessage('CRM_PUSH_CRM_SETTINGS_MENU_ITEM_TEXT'),\n\t\t\t\t\t// if we provide no items, submenu will not be created. and onShow will never be emitted.\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'stub',\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tthis.#targetItemId,\n\t\t\t);\n\n\t\t\titem.subscribe('SubMenu:onShow', (event) => {\n\t\t\t\tconst target: MenuItem = event.getTarget();\n\n\t\t\t\tfor (const itemOptionsToAdd of this.#getItems())\n\t\t\t\t{\n\t\t\t\t\ttarget.getSubMenu()?.addMenuItem(itemOptionsToAdd);\n\t\t\t\t}\n\n\t\t\t\ttarget.getSubMenu()?.removeMenuItem('stub');\n\t\t\t});\n\t\t};\n\n\t\tEventEmitter.subscribe(EventEmitter.GLOBAL_TARGET, 'onPopupShow', onPopupShowHandler);\n\t}\n\n\t#shouldShowPushCrmSettings(): boolean\n\t{\n\t\treturn this.#getItems().length > 0;\n\t}\n\n\t#getItems(): MenuItemOptions[]\n\t{\n\t\tconst items = [];\n\n\t\tif (this.#shouldShowLastActivitySortToggle())\n\t\t{\n\t\t\titems.push(this.#getLastActivitySortToggle());\n\t\t}\n\n\t\tif (this.#shouldShowTodoSkipMenu())\n\t\t{\n\t\t\titems.push(...this.#todoSkipMenu.getItems());\n\t\t}\n\n\t\treturn items;\n\t}\n\n\t#shouldShowLastActivitySortToggle(): boolean\n\t{\n\t\tconst shouldShowInKanban = (\n\t\t\tthis.#kanbanController?.getCurrentSettings().isTypeSupported(SortType.BY_LAST_ACTIVITY_TIME)\n\t\t\t&& this.#restriction?.isSortTypeChangeAvailable()\n\t\t);\n\n\t\treturn !!(shouldShowInKanban || this.#gridController?.isLastActivitySortSupported());\n\t}\n\n\t#getLastActivitySortToggle(): MenuItemOptions\n\t{\n\t\treturn {\n\t\t\ttext: Loc.getMessage('CRM_PUSH_CRM_SETTINGS_SORT_TOGGLE_TEXT'),\n\t\t\tdisabled: this.#isSetSortRequestRunning,\n\t\t\tclassName: this.#isLastActivitySortEnabled() ? CHECKED_CLASS : NOT_CHECKED_CLASS,\n\t\t\tonclick: this.#handleLastActivitySortToggleClick.bind(this),\n\t\t};\n\t}\n\n\t#isLastActivitySortEnabled(): boolean\n\t{\n\t\tif (this.#kanbanController)\n\t\t{\n\t\t\treturn this.#kanbanController.getCurrentSettings().getCurrentType() === SortType.BY_LAST_ACTIVITY_TIME;\n\t\t}\n\t\tif (this.#gridController)\n\t\t{\n\t\t\treturn this.#gridController.isLastActivitySortEnabled();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t#handleLastActivitySortToggleClick(event: PointerEvent, item: MenuItem): void\n\t{\n\t\titem.getMenuWindow()?.getRootMenuWindow()?.close();\n\t\titem.disable();\n\n\t\tif (this.#kanbanController)\n\t\t{\n\t\t\tif (this.#isSetSortRequestRunning)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.#isSetSortRequestRunning = true;\n\n\t\t\tconst settings = this.#kanbanController.getCurrentSettings();\n\n\t\t\tlet newSortType: string;\n\t\t\tif (settings.getCurrentType() === SortType.BY_LAST_ACTIVITY_TIME)\n\t\t\t{\n\t\t\t\t// first different type\n\t\t\t\tnewSortType = settings.getSupportedTypes().find(sortType => sortType !== SortType.BY_LAST_ACTIVITY_TIME);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnewSortType = SortType.BY_LAST_ACTIVITY_TIME;\n\t\t\t}\n\n\t\t\tthis.#kanbanController.setCurrentSortType(newSortType)\n\t\t\t\t.then(() => {})\n\t\t\t\t.catch(() => {})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tthis.#isSetSortRequestRunning = false;\n\t\t\t\t\titem.enable();\n\t\t\t\t})\n\t\t\t;\n\t\t}\n\t\telse if (this.#gridController)\n\t\t{\n\t\t\tthis.#gridController.toggleLastActivitySort();\n\t\t\titem.enable();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconsole.error('Can not handle last activity toggle click');\n\t\t}\n\t}\n\n\t#shouldShowTodoSkipMenu(): boolean\n\t{\n\t\tlet allowedTypes = [];\n\t\tif (EntityType)\n\t\t{\n\t\t\tallowedTypes = [EntityType.enumeration.deal];\n\t\t}\n\n\t\treturn allowedTypes.includes(this.#entityTypeId);\n\t}\n}\n","import { Reflection } from \"main.core\";\n\nimport { PushCrmSettings } from \"./push-crm-settings\";\n\nconst namespace = Reflection.namespace('BX.Crm');\nnamespace.PushCrmSettings = PushCrmSettings;\n\nexport {\n\tPushCrmSettings,\n};\n"],"names":["requireClassOrNull","param","constructor","paramName","Type","isNil","requireClass","Error","name","getType","requireStringOrNull","isStringFilled","value","isObject","isPlainObject","EntityType","Reflection","getClass","DefaultSort","enumeration","deal","column","order","Object","freeze","SortController","entityTypeId","grid","Text","toInteger","BX","Main","isLastActivitySortSupported","isLastActivitySortEnabled","options","getUserOptions","getCurrentOptions","last_sort_by","last_sort_order","toLowerCase","toggleLastActivitySort","sort","find","columnName","sortByColumn","getParam","hasOwnProperty","includes","columnParams","getColumnByName","getSettingsWindow","getShowedColumns","sort_order","Promise","resolve","reject","settingsWindowCheckbox","getItems","checkbox","getId","select","showedColumns","push","saveColumns","CHECKED_CLASS","NOT_CHECKED_CLASS","PushCrmSettings","params","isDefined","rootMenu","Menu","targetItemId","controller","SettingsController","restriction","Restriction","GridSortController","TodoNotificationSkipMenu","selectedValue","todoCreateNotificationSkipPeriod","onPopupShowHandler","event","popup","getTarget","EventEmitter","unsubscribe","GLOBAL_TARGET","item","addMenuItem","text","Loc","getMessage","items","id","subscribe","target","itemOptionsToAdd","getSubMenu","removeMenuItem","length","shouldShowInKanban","getCurrentSettings","isTypeSupported","SortType","BY_LAST_ACTIVITY_TIME","isSortTypeChangeAvailable","disabled","className","onclick","bind","getCurrentType","getMenuWindow","getRootMenuWindow","close","disable","settings","newSortType","getSupportedTypes","sortType","setCurrentSortType","then","catch","finally","enable","console","error","allowedTypes","namespace"],"mappings":"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"}