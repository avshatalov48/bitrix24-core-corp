{"version":3,"file":"push-crm-settings.bundle.js","sources":["../src/params-handling.js","../src/grid/default-sort.js","../src/grid/sort-controller.js","../src/push-crm-settings.js","../src/index.js"],"sourcesContent":["import { Type } from \"main.core\";\n\nexport function requireClassOrNull(param: any, constructor: Function, paramName: string): ?Object\n{\n\tif (Type.isNil(param))\n\t{\n\t\treturn param;\n\t}\n\n\treturn requireClass(param, constructor, paramName);\n}\n\nexport function requireClass(param: any, constructor: Function, paramName: string): Object\n{\n\tif (param instanceof constructor)\n\t{\n\t\treturn param;\n\t}\n\n\tthrow new Error(`Expected ${paramName} be an instance of ${constructor.name}, got ${getType(param)} instead`);\n}\n\nexport function requireStringOrNull(param: any, paramName: string): ?string\n{\n\tif (Type.isStringFilled(param) || Type.isNil(param))\n\t{\n\t\treturn param;\n\t}\n\n\tthrow new Error(`Expected ${paramName} be either non-empty string or null, got ${getType(param)} instead`);\n}\n\nfunction getType(value: any): string\n{\n\tif (Type.isObject(value) && !Type.isPlainObject(value))\n\t{\n\t\treturn value?.constructor?.name || 'unknown';\n\t}\n\n\t// eslint-disable-next-line bitrix-rules/no-typeof\n\treturn typeof value;\n}\n","import { Extension } from \"main.core\";\n\nconst aliases: {[key: number]: string} = Extension.getSettings('crm.push-crm-settings').get('createTimeAliases', {});\n\nconst DefaultSort: {[key: number]: {column: string, order: 'asc' | 'desc'}} = {};\n\nfor (const entityTypeId in aliases)\n{\n\tDefaultSort[entityTypeId] = {\n\t\tcolumn: aliases[entityTypeId],\n\t\torder: 'desc',\n\t};\n}\n\nObject.freeze(DefaultSort);\n\nexport {\n\tDefaultSort,\n}\n","import { Text, Type } from \"main.core\";\nimport { requireClass } from \"../params-handling\";\nimport { DefaultSort } from \"./default-sort\";\n\nexport class SortController\n{\n\t#entityTypeId: number;\n\t#grid: BX.Main.grid;\n\n\tconstructor(entityTypeId: number, grid: BX.Main.grid)\n\t{\n\t\tthis.#entityTypeId = Text.toInteger(entityTypeId);\n\t\tthis.#grid = requireClass(grid, BX.Main.grid, 'grid');\n\t}\n\n\tisLastActivitySortSupported(): boolean\n\t{\n\t\treturn this.#isColumnExists('LAST_ACTIVITY_TIME');\n\t}\n\n\tisLastActivitySortEnabled(): boolean\n\t{\n\t\tconst options = this.#grid.getUserOptions().getCurrentOptions();\n\n\t\tconst column = options.last_sort_by;\n\t\tconst order = options.last_sort_order;\n\n\t\treturn (\n\t\t\tcolumn?.toLowerCase() === 'last_activity_time'\n\t\t\t&& order?.toLowerCase() === 'desc'\n\t\t);\n\t}\n\n\ttoggleLastActivitySort(): void\n\t{\n\t\tif (this.isLastActivitySortEnabled())\n\t\t{\n\t\t\tthis.#disableLastActivitySort();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.#enableLastActivitySort();\n\t\t}\n\t}\n\n\tasync #disableLastActivitySort(): Promise<void>\n\t{\n\t\tconst sort = DefaultSort[this.#entityTypeId];\n\n\t\tlet column: string;\n\n\t\tif (Type.isPlainObject(sort) && this.#isColumnExists(sort.column) && this.#isColumnSortable(sort.column))\n\t\t{\n\t\t\tcolumn = sort.column;\n\n\t\t\tif (!this.#isColumnShowed(column))\n\t\t\t{\n\t\t\t\tawait this.#showColumn(column);\n\t\t\t}\n\n\t\t\tthis.#setSortOrder(column, sort.order);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// fist showed different sortable\n\t\t\tcolumn = this.#getShowedColumnList().find((columnName) => {\n\t\t\t\treturn (\n\t\t\t\t\tcolumnName !== 'LAST_ACTIVITY_TIME'\n\t\t\t\t\t&& this.#isColumnSortable(columnName)\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tthis.#grid.sortByColumn(column);\n\t}\n\n\tasync #enableLastActivitySort(): Promise<void>\n\t{\n\t\tif (!this.#isColumnShowed('LAST_ACTIVITY_TIME'))\n\t\t{\n\t\t\tawait this.#showColumn('LAST_ACTIVITY_TIME');\n\t\t}\n\n\t\tthis.#setSortOrder('LAST_ACTIVITY_TIME', 'desc');\n\n\t\tthis.#grid.sortByColumn('LAST_ACTIVITY_TIME');\n\t}\n\n\t#isColumnExists(column: string): boolean\n\t{\n\t\treturn this.#grid.getParam('COLUMNS_ALL', {}).hasOwnProperty(column);\n\t}\n\n\t#isColumnShowed(column: string): boolean\n\t{\n\t\treturn this.#getShowedColumnList().includes(column);\n\t}\n\n\t#isColumnSortable(column: string): boolean\n\t{\n\t\tconst columnParams = this.#grid.getColumnByName(column);\n\n\t\treturn !!(columnParams && columnParams.sort !== false);\n\t}\n\n\t#getShowedColumnList(): string[]\n\t{\n\t\treturn this.#grid.getSettingsWindow().getShowedColumns();\n\t}\n\n\t#setSortOrder(column: string, order: 'asc' | 'desc'): void\n\t{\n\t\tthis.#grid.getColumnByName(column).sort_order = order;\n\t}\n\n\t#showColumn(column: string): Promise<void, string>\n\t{\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!this.#isColumnExists(column))\n\t\t\t{\n\t\t\t\treject(`Column ${column} does not exists`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.#isColumnShowed(column))\n\t\t\t{\n\t\t\t\treject(`Column ${column} is showed already`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst settingsWindowCheckbox: ?BX.Grid.SettingsWindowColumn = this.#grid.getSettingsWindow().getItems().find(\n\t\t\t\t(checkbox: BX.Grid.SettingsWindowColumn) => checkbox.getId() === column,\n\t\t\t);\n\t\t\tsettingsWindowCheckbox?.select();\n\n\t\t\tconst showedColumns = this.#getShowedColumnList();\n\t\t\tshowedColumns.push(column);\n\n\t\t\tthis.#grid.getSettingsWindow().saveColumns(showedColumns, resolve);\n\t\t});\n\t}\n}\n","import { Menu, MenuItem, MenuItemOptions } from \"main.popup\";\nimport { SettingsController, Type as SortType } from \"crm.kanban.sort\";\nimport { Restriction } from \"crm.kanban.restriction\";\nimport { BaseEvent, EventEmitter } from \"main.core.events\";\nimport { Loc, Reflection, Text } from \"main.core\";\nimport { TodoNotificationSkipMenu } from \"crm.activity.todo-notification-skip-menu\";\nimport { Params } from \"./params\";\nimport { requireClass, requireClassOrNull, requireStringOrNull } from \"./params-handling\";\nimport { SortController as GridSortController } from \"./grid/sort-controller\";\n\nconst EntityType = Reflection.getClass('BX.CrmEntityType');\n\nconst CHECKED_CLASS = 'menu-popup-item-accept';\nconst NOT_CHECKED_CLASS = 'menu-popup-item-none';\n\n/**\n * @memberOf BX.Crm\n */\nexport class PushCrmSettings\n{\n\t#entityTypeId: number;\n\t#rootMenu: Menu;\n\t#targetItemId: ?string;\n\t#kanbanController: ?SettingsController;\n\t#restriction: ?Restriction;\n\t#gridController: ?GridSortController = null;\n\n\t#todoSkipMenu: TodoNotificationSkipMenu;\n\n\t#isSetSortRequestRunning: boolean = false;\n\t#smartActivityNotificationSupported: boolean = false;\n\n\tconstructor(params: Params)\n\t{\n\t\tthis.#entityTypeId = Text.toInteger(params.entityTypeId);\n\t\tthis.#smartActivityNotificationSupported = Text.toBoolean(params.smartActivityNotificationSupported);\n\n\t\tif (EntityType && !EntityType.isDefined(this.#entityTypeId))\n\t\t{\n\t\t\tthrow new Error(`Provided entityTypeId is invalid: ${this.#entityTypeId}`);\n\t\t}\n\n\t\tthis.#rootMenu = requireClass(params.rootMenu, Menu, 'params.rootMenu');\n\n\t\tthis.#targetItemId = requireStringOrNull(params.targetItemId, 'params.targetItemId');\n\n\t\tthis.#kanbanController = requireClassOrNull(params.controller, SettingsController, 'params.controller');\n\t\tthis.#restriction = requireClassOrNull(params.restriction, Restriction, 'params.restriction');\n\n\t\tif (Reflection.getClass('BX.Main.grid') && params.grid)\n\t\t{\n\t\t\tthis.#gridController = new GridSortController(this.#entityTypeId, params.grid);\n\t\t}\n\n\t\tthis.#todoSkipMenu = new TodoNotificationSkipMenu({\n\t\t\tentityTypeId: this.#entityTypeId,\n\t\t\tselectedValue: requireStringOrNull(params.todoCreateNotificationSkipPeriod, 'params.todoCreateNotificationSkipPeriod'),\n\t\t});\n\n\t\tthis.#bindEvents();\n\t}\n\n\t#bindEvents(): void\n\t{\n\t\tconst onPopupShowHandler = (event: BaseEvent) => {\n\t\t\tconst popup = event.getTarget();\n\t\t\tif (popup.getId() !== this.#rootMenu.getId())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// process this event with the intended target only once\n\t\t\tEventEmitter.unsubscribe(EventEmitter.GLOBAL_TARGET, 'onPopupShow', onPopupShowHandler);\n\n\t\t\tif (!this.#shouldShowPushCrmSettings())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst item: MenuItem = this.#rootMenu.addMenuItem(\n\t\t\t\t{\n\t\t\t\t\ttext: Loc.getMessage('CRM_PUSH_CRM_SETTINGS_MENU_ITEM_TEXT'),\n\t\t\t\t\t// if we provide no items, submenu will not be created. and onShow will never be emitted.\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'stub',\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tthis.#targetItemId,\n\t\t\t);\n\n\t\t\titem.subscribe('SubMenu:onShow', (event) => {\n\t\t\t\tconst target: MenuItem = event.getTarget();\n\n\t\t\t\tfor (const itemOptionsToAdd of this.#getItems())\n\t\t\t\t{\n\t\t\t\t\ttarget.getSubMenu()?.addMenuItem(itemOptionsToAdd);\n\t\t\t\t}\n\n\t\t\t\ttarget.getSubMenu()?.removeMenuItem('stub');\n\t\t\t});\n\t\t};\n\n\t\tEventEmitter.subscribe(EventEmitter.GLOBAL_TARGET, 'onPopupShow', onPopupShowHandler);\n\t}\n\n\t#shouldShowPushCrmSettings(): boolean\n\t{\n\t\treturn this.#getItems().length > 0;\n\t}\n\n\t#getItems(): MenuItemOptions[]\n\t{\n\t\tconst items = [];\n\n\t\tif (this.#shouldShowLastActivitySortToggle())\n\t\t{\n\t\t\titems.push(this.#getLastActivitySortToggle());\n\t\t}\n\n\t\tif (this.#shouldShowTodoSkipMenu())\n\t\t{\n\t\t\titems.push(...this.#todoSkipMenu.getItems());\n\t\t}\n\n\t\treturn items;\n\t}\n\n\t#shouldShowLastActivitySortToggle(): boolean\n\t{\n\t\tconst shouldShowInKanban = (\n\t\t\tthis.#kanbanController?.getCurrentSettings().isTypeSupported(SortType.BY_LAST_ACTIVITY_TIME)\n\t\t\t&& this.#restriction?.isSortTypeChangeAvailable()\n\t\t);\n\n\t\treturn !!(shouldShowInKanban || this.#gridController?.isLastActivitySortSupported());\n\t}\n\n\t#getLastActivitySortToggle(): MenuItemOptions\n\t{\n\t\treturn {\n\t\t\ttext: Loc.getMessage('CRM_PUSH_CRM_SETTINGS_SORT_TOGGLE_TEXT'),\n\t\t\tdisabled: this.#isSetSortRequestRunning,\n\t\t\tclassName: this.#isLastActivitySortEnabled() ? CHECKED_CLASS : NOT_CHECKED_CLASS,\n\t\t\tonclick: this.#handleLastActivitySortToggleClick.bind(this),\n\t\t};\n\t}\n\n\t#isLastActivitySortEnabled(): boolean\n\t{\n\t\tif (this.#kanbanController)\n\t\t{\n\t\t\treturn this.#kanbanController.getCurrentSettings().getCurrentType() === SortType.BY_LAST_ACTIVITY_TIME;\n\t\t}\n\t\tif (this.#gridController)\n\t\t{\n\t\t\treturn this.#gridController.isLastActivitySortEnabled();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t#handleLastActivitySortToggleClick(event: PointerEvent, item: MenuItem): void\n\t{\n\t\titem.getMenuWindow()?.getRootMenuWindow()?.close();\n\t\titem.disable();\n\n\t\tif (this.#kanbanController)\n\t\t{\n\t\t\tif (this.#isSetSortRequestRunning)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.#isSetSortRequestRunning = true;\n\n\t\t\tconst settings = this.#kanbanController.getCurrentSettings();\n\n\t\t\tlet newSortType: string;\n\t\t\tif (settings.getCurrentType() === SortType.BY_LAST_ACTIVITY_TIME)\n\t\t\t{\n\t\t\t\t// first different type\n\t\t\t\tnewSortType = settings.getSupportedTypes().find(sortType => sortType !== SortType.BY_LAST_ACTIVITY_TIME);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnewSortType = SortType.BY_LAST_ACTIVITY_TIME;\n\t\t\t}\n\n\t\t\tthis.#kanbanController.setCurrentSortType(newSortType)\n\t\t\t\t.then(() => {})\n\t\t\t\t.catch(() => {})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tthis.#isSetSortRequestRunning = false;\n\t\t\t\t\titem.enable();\n\t\t\t\t})\n\t\t\t;\n\t\t}\n\t\telse if (this.#gridController)\n\t\t{\n\t\t\tthis.#gridController.toggleLastActivitySort();\n\t\t\titem.enable();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconsole.error('Can not handle last activity toggle click');\n\t\t}\n\t}\n\n\t#shouldShowTodoSkipMenu(): boolean\n\t{\n\t\treturn this.#smartActivityNotificationSupported;\n\t}\n}\n","import { Reflection } from \"main.core\";\n\nimport { PushCrmSettings } from \"./push-crm-settings\";\n\nconst namespace = Reflection.namespace('BX.Crm');\nnamespace.PushCrmSettings = PushCrmSettings;\n\nexport {\n\tPushCrmSettings,\n};\n"],"names":["requireClassOrNull","param","constructor","paramName","Type","isNil","requireClass","Error","name","getType","requireStringOrNull","isStringFilled","value","isObject","isPlainObject","aliases","Extension","getSettings","get","DefaultSort","entityTypeId","column","order","Object","freeze","SortController","grid","Text","toInteger","BX","Main","isLastActivitySortSupported","isLastActivitySortEnabled","options","getUserOptions","getCurrentOptions","last_sort_by","last_sort_order","toLowerCase","toggleLastActivitySort","sort","find","columnName","sortByColumn","getParam","hasOwnProperty","includes","columnParams","getColumnByName","getSettingsWindow","getShowedColumns","sort_order","Promise","resolve","reject","settingsWindowCheckbox","getItems","checkbox","getId","select","showedColumns","push","saveColumns","EntityType","Reflection","getClass","CHECKED_CLASS","NOT_CHECKED_CLASS","PushCrmSettings","params","toBoolean","smartActivityNotificationSupported","isDefined","rootMenu","Menu","targetItemId","controller","SettingsController","restriction","Restriction","GridSortController","TodoNotificationSkipMenu","selectedValue","todoCreateNotificationSkipPeriod","onPopupShowHandler","event","popup","getTarget","EventEmitter","unsubscribe","GLOBAL_TARGET","item","addMenuItem","text","Loc","getMessage","items","id","subscribe","target","itemOptionsToAdd","getSubMenu","removeMenuItem","length","shouldShowInKanban","getCurrentSettings","isTypeSupported","SortType","BY_LAST_ACTIVITY_TIME","isSortTypeChangeAvailable","disabled","className","onclick","bind","getCurrentType","getMenuWindow","getRootMenuWindow","close","disable","settings","newSortType","getSupportedTypes","sortType","setCurrentSortType","then","catch","finally","enable","console","error","namespace"],"mappings":"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"}