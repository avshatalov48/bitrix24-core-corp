this.BX=this.BX||{};(function(e,t,s,n){"use strict";class i{static get possibleActions(){return{deadlineChange:"deadlineChange",taskApprove:"taskApprove",taskDisapprove:"taskDisapprove",taskComplete:"taskComplete",taskChangeResponsible:"taskChangeResponsible",showFlowAttendees:"showFlowAttendees"}}static get accessActions(){return{deadlineChange:"CHANGE_DEADLINE",taskApprove:"APPROVE",taskDisapprove:"DISAPPROVE",taskComplete:"COMPLETE",taskChangeResponsible:"CHANGE_RESPONSIBLE"}}static get ajaxActions(){return{deadlineChange:"tasks.task.update",taskApprove:"tasks.task.approve",taskDisapprove:"tasks.task.disapprove",taskComplete:"tasks.task.complete",taskChangeResponsible:"tasks.task.update"}}static get actionNotificationMessages(){const e="TASKS_COMMENT_ACTION_CONTROLLER_NOTIFICATION";return{deadlineChange:t.Loc.getMessage(`${e}_DEADLINE_CHANGE`),taskApprove:t.Loc.getMessage(`${e}_TASK_APPROVE`),taskDisapprove:t.Loc.getMessage(`${e}_TASK_DISAPPROVE`),taskComplete:t.Loc.getMessage(`${e}_TASK_COMPLETE`),taskChangeResponsible:t.Loc.getMessage(`${e}_TASK_CHANGE_RESPONSIBLE`)}}static init(e={}){return new Promise((t=>{const s=[];if(!i.workHours){if(e.workHours){i.workHours=e.workHours}else{s.push(i.loadWorkHours())}}if(!i.workSettings){if(e.workSettings){i.workSettings=e.workSettings}else{s.push(i.loadWorkSettings())}}if(!s.length){t()}Promise.all(s).then((()=>t()))}))}static loadWorkHours(){return new Promise((e=>{s.rest.callMethod("calendar.settings.get").then((t=>{const{result:s}=t.answer;const[n,a]=String(s.work_time_start).split(".");const[o,r]=String(s.work_time_end).split(".");i.workHours={start:{hours:n,minutes:a},end:{hours:o,minutes:r}};e()}))}))}static loadWorkSettings(){return new Promise((e=>{t.ajax.runAction("tasks.userOption.getCalendarTimeVisibilityOption").then((t=>{i.workSettings={deadlineTimeVisibility:t.data.visibility||"N"};e()}))}))}static isActionValid(e){return Object.keys(i.possibleActions).includes(e)}static processLink(e){var t;const[s,n,a,o]=e.matches;const r=new URLSearchParams(e.url);const[l,c,u]=[r.get("deadline"),r.get("flowId"),JSON.parse((t=r.get("excludeMembers"))!=null?t:"[]")];if(!i.isActionValid(o)){return}switch(o){case i.possibleActions.deadlineChange:i.init().then((()=>{i.showDeadlinePicker(e.anchor,a,l)}));return;case i.possibleActions.taskChangeResponsible:i.showResponsibleSelector(e.anchor,a,c);return;case i.possibleActions.showFlowAttendees:i.showFlowAttendees(e.anchor,c,u);return;default:i.checkCanRun(o,a).then((e=>{if(e){i.runAjaxAction(o,a)}}),(e=>console.error(e)))}}static async showFlowAttendees(e,s,n=[]){const{TeamPopup:i}=await t.Runtime.loadExtension("tasks.flow.team-popup");i.showInstance({flowId:s,bindElement:e,excludeMembers:n})}static showDeadlinePicker(e,s,n){const a=new Date;const o=new Date(Date.UTC(a.getFullYear(),a.getMonth(),a.getDate(),i.workHours.end.hours,i.workHours.end.minutes));const r=n?new Date((Number(n)-(new Date).getTimezoneOffset()*60)*1e3):o;const l=t.Reflection.getClass("BX.calendar");l({node:e,value:r,field:"",form:"",bTime:true,currentTime:Math.round(new Date/1e3)-(new Date).getTimezoneOffset()*60,bHideTimebar:true,bCompatibility:true,bCategoryTimeVisibilityOption:"tasks.bx.calendar.deadline",bTimeVisibility:i.workSettings?i.workSettings.deadlineTimeVisibility==="Y":false,callback_after:e=>i.onDeadlinePicked(e,s)})}static showResponsibleSelector(e,t,s=null){const a=[{id:"department"}];const o=s!==null;if(o){a.unshift({id:"flow-user",options:{flowId:s},dynamicLoad:true})}else{a.unshift({id:"user",options:{intranetUsersOnly:true,emailUsers:false,inviteEmployeeLink:false,inviteGuestLink:false}})}const r=new n.Dialog({targetNode:e,enableSearch:true,multiple:false,cacheable:false,dropdownMode:o,entities:a,clearSearchOnSelect:true,events:{"Item:onSelect":e=>{var s;const n=e==null?void 0:(s=e.data)==null?void 0:s.item;if(n){i.onResponsibleSelected(n.id,t)}r.hide()}}});r.show()}static onResponsibleSelected(e,t){const s=i.possibleActions.taskChangeResponsible;i.runAjaxAction(s,t,{fields:{RESPONSIBLE_ID:e}})}static onDeadlinePicked(e,t){const s=i.possibleActions.deadlineChange;i.checkCanRun(s,t).then((n=>{if(n){i.runAjaxAction(s,t,{fields:{DEADLINE:e.toISOString()}})}}),(e=>console.error(e)))}static checkCanRun(e,s){return new Promise(((n,a)=>{if(i.isAjaxRunning){n(false)}i.isAjaxRunning=true;t.ajax.runAction("tasks.task.getAccess",{data:{taskId:s}}).then((t=>{i.isAjaxRunning=false;const{allowedActions:s}=t.data;const a=Object.keys(s)[0];const o=i.accessActions[e];n(s&&s[a]&&s[a][o])}),(e=>a(e)))}))}static runAjaxAction(e,s,n={}){if(i.isAjaxRunning){return}i.isAjaxRunning=true;const a={taskId:s};n={...n,...a};if(!n.params){n.params={}}n.params.PLATFORM="web";t.ajax.runAction(i.ajaxActions[e],{data:n}).then((()=>{i.showNotification(e);i.isAjaxRunning=false}),(e=>{if(e&&e.errors){const s={MESSAGE:e.errors[0].message,DATA:{ui:"notification"}};const n=t.Reflection.getClass("BX.Tasks");n.alert([s])}i.isAjaxRunning=false}))}static showNotification(e){t.Runtime.loadExtension("ui.notification").then((()=>{const s=t.Reflection.getClass("BX.UI.Notification.Center");s.notify({content:i.actionNotificationMessages[e]})}))}}i.workHours=null;i.workSettings=null;i.isAjaxRunning=false;e.CommentActionController=i})(this.BX.Tasks=this.BX.Tasks||{},BX,BX,BX.UI.EntitySelector);
//# sourceMappingURL=comment-action-controller.bundle.map.js