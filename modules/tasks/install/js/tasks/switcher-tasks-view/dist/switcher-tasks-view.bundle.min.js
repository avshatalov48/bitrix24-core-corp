this.BX=this.BX||{};(function(e,s,t,i){"use strict";var a=babelHelpers.classPrivateFieldLooseKey("pathToTasks");class r{constructor(e){Object.defineProperty(this,a,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,a)[a]=e.pathToTasks}redirectTo(e,t){const i=new s.Uri(window.location.href);i.setQueryParam(e,t);document.location.href=i.toString()}}var l=babelHelpers.classPrivateFieldLooseKey("menu");var o=babelHelpers.classPrivateFieldLooseKey("createMenu");class c extends t.EventEmitter{constructor(e){super();Object.defineProperty(this,o,{value:n});Object.defineProperty(this,l,{writable:true,value:void 0});this.setEventNamespace("BX.Tasks.TasksViewList");babelHelpers.classPrivateFieldLooseBase(this,l)[l]=babelHelpers.classPrivateFieldLooseBase(this,o)[o](e.bindElement,e.viewList)}show(){babelHelpers.classPrivateFieldLooseBase(this,l)[l].toggle()}}function n(e,s){const t=new i.Menu({id:"switcher-tasks-view",className:"switcher-tasks-view__menu",bindElement:e,closeByEsc:true});s.forEach((e=>{t.addMenuItem({dataset:{id:`switcher-tasks-${e.key}`},text:e.title,className:`switcher-tasks-${e.key}-icon ${e.selected?"--selected":""}`,onclick:()=>{if(e.selected){t.close();return}this.emit("click",{urlParam:e.urlParam,urlValue:e.urlValue})}})}));return t}let b=e=>e,d;var v=babelHelpers.classPrivateFieldLooseKey("cache");var u=babelHelpers.classPrivateFieldLooseKey("router");var h=babelHelpers.classPrivateFieldLooseKey("tasksViewList");var p=babelHelpers.classPrivateFieldLooseKey("renderViewBtn");var w=babelHelpers.classPrivateFieldLooseKey("viewClick");var P=babelHelpers.classPrivateFieldLooseKey("setParams");var L=babelHelpers.classPrivateFieldLooseKey("getParam");class m extends t.EventEmitter{constructor(e){super();Object.defineProperty(this,L,{value:F});Object.defineProperty(this,P,{value:H});Object.defineProperty(this,w,{value:y});Object.defineProperty(this,p,{value:B});Object.defineProperty(this,v,{writable:true,value:new s.Cache.MemoryCache});Object.defineProperty(this,u,{writable:true,value:void 0});Object.defineProperty(this,h,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,P)[P](e);babelHelpers.classPrivateFieldLooseBase(this,u)[u]=new r({pathToTasks:babelHelpers.classPrivateFieldLooseBase(this,L)[L]("pathToUserTasks")});this.setEventNamespace("BX.Tasks.SwitcherTasksView")}renderViewBtnTo(e){if(!s.Type.isDomNode(e)){throw new Error("BX.Tasks.SwitcherTasksView: HTMLElement for view btn not found")}s.Dom.prepend(babelHelpers.classPrivateFieldLooseBase(this,p)[p](),e)}}function B(){const e="ui-btn ui-btn-sm ui-btn-light ui-btn-round ui-btn-no-caps ui-btn-themes";const t=s.Tag.render(d||(d=b`
			<button
				data-id="switcher-view-tasks-mode-btn"
				class="${0} switcher-view__btn_options"
			>
				<div 
					class="ui-icon-set --numerable-list"
					style="--ui-icon-set__icon-size: 25px;"
				></div>
				<div class="switcher-view__btn_options-text">
					${0}
				</div>
				<div
					class="ui-icon-set --chevron-down"
					style="--ui-icon-set__icon-size: 19px;"
				></div>
			</button>
		`),e,s.Loc.getMessage("TASKS_VIEW_LIST_TITLE"));s.Event.bind(t,"click",babelHelpers.classPrivateFieldLooseBase(this,w)[w].bind(this));return t}function y(e){if(!babelHelpers.classPrivateFieldLooseBase(this,h)[h]){babelHelpers.classPrivateFieldLooseBase(this,h)[h]=new c({bindElement:e.target,viewList:babelHelpers.classPrivateFieldLooseBase(this,L)[L]("viewList")});babelHelpers.classPrivateFieldLooseBase(this,h)[h].subscribe("click",(e=>{const{urlParam:s,urlValue:t}=e.getData();babelHelpers.classPrivateFieldLooseBase(this,u)[u].redirectTo(s,t)}))}babelHelpers.classPrivateFieldLooseBase(this,h)[h].show()}function H(e){babelHelpers.classPrivateFieldLooseBase(this,v)[v].set("params",e)}function F(e){return babelHelpers.classPrivateFieldLooseBase(this,v)[v].get("params")[e]}e.SwitcherTasksView=m})(this.BX.Tasks=this.BX.Tasks||{},BX,BX.Event,BX.Main);
//# sourceMappingURL=switcher-tasks-view.bundle.map.js