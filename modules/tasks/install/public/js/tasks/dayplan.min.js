BX.namespace("BX.Tasks");BX.Tasks.DayPlan=BX.Tasks.Util.Base.extend({options:{query:false,data:[]},methods:{construct:function(){this.callConstruct(BX.Tasks.Util.Base);if(typeof this.vars=="undefined"){this.vars={}}this.vars.state={};this.vars.timeOffsets={};this.vars.taskData=BX.clone(this.option("data"));this.onPlannerUpdate=BX.debounce(this.onPlannerUpdate,100,this);this.onTimerUpdate=this.onTimerUpdate.bind(this);this.handleTimeManDataReceived=this.handleTimeManDataReceived.bind(this);this.handlePlannerDataReceived=this.handlePlannerDataReceived.bind(this);this.handleSliderDestroy=this.handleSliderDestroy.bind(this);if(window!==window.top){this.bindWidgetEvents(window.top);BX.addCustomEvent("SidePanel.Slider:onDestroy",this.handleSliderDestroy)}else{this.bindWidgetEvents(window)}BX.ready(BX.delegate(function(){if(!this.hasPlanner()){setInterval(BX.delegate(this.timerTickEmulation,this),1e3);BX.addCustomEvent(window,"tasksTaskEvent",BX.delegate(this.onTaskGlobalEvent,this))}},this))},bindWidgetEvents:function(t){t.BX.addCustomEvent(t,"onTimeManDataRecieved",this.handleTimeManDataReceived);t.BX.addCustomEvent(t,"onPlannerDataRecieved",this.handlePlannerDataReceived);t.BX.addCustomEvent(t,"onTaskTimerChange",this.onTimerUpdate)},unbindWidgetEvents:function(t){t.BX.removeCustomEvent(t,"onTimeManDataRecieved",this.handleTimeManDataReceived);t.BX.removeCustomEvent(t,"onPlannerDataRecieved",this.handlePlannerDataReceived);t.BX.removeCustomEvent(t,"onTaskTimerChange",this.onTimerUpdate)},handlePlannerDataReceived:function(t,e){this.onPlannerUpdate(e)},handleTimeManDataReceived:function(t){this.onPlannerUpdate(t.PLANNER)},handleSliderDestroy:function(t){this.unbindWidgetEvents(window.top);BX.removeCustomEvent("SidePanel.Slider:onDestroy",this.handleSliderDestroy)},onPlannerUpdate:function(t){t=t||{};t.TASKS=t.TASKS||[];t.TASK_ON_TIMER=t.TASK_ON_TIMER||{};var e;var a;var i={};for(a=0;a<t.TASKS.length;a++){e=parseInt(t.TASKS[a].ID);if(isNaN(e)){continue}i[e]=true;if(typeof this.vars.state[e]=="undefined"){this.vars.state[e]={timer:false,plan:false}}this.vars.state[e].plan=true}for(a in this.vars.state){if(typeof i[a]=="undefined"){this.fireEvent("task-plan-toggle",[a,false]);this.vars.state[a].plan=false}}e=parseInt(t.TASK_ON_TIMER.ID);if(!isNaN(e)){if(typeof this.vars.state[e]=="undefined"){this.vars.state[e]={timer:false,plan:false}}for(a in this.vars.state){if(this.vars.state[a].timer&&a!=e){this.fireEvent("task-timer-toggle",[false,a])}this.vars.state[a].timer=false}this.vars.state[e].timer=true}},updatePlanner:function(){if(!this.hasPlanner()){return false}var t=true;if(window.BXTIMEMAN)window.BXTIMEMAN.Update(true);else if(window.BXPLANNER&&window.BXPLANNER.update)window.BXPLANNER.update();else t=false;if(window.top!==window){if(window.top.BXTIMEMAN)window.top.BXTIMEMAN.Update(true);else if(window.top.BXPLANNER&&window.top.BXPLANNER.update)window.top.BXPLANNER.update()}return t},hasPlanner:function(){return!!(window.top.BXPLANNER||window.top.BXTIMEMAN)},onTimerUpdate:function(t){t=t||{};t.taskData=t.taskData||{};if(t.action=="refresh_daemon_event"){var e=parseInt(t.data.TASK.TIME_SPENT_IN_LOGS);if(isNaN(e)){e=0}var a=parseInt(t.data.TIMER.RUN_TIME);if(isNaN(a)){a=0}this.fireEvent("task-timer-tick",[t.taskId,e+a,t.data.TASK])}else if(t.action=="stop_timer"){t.taskData.TIMER_IS_RUNNING_FOR_CURRENT_USER=false;this.fireEvent("task-timer-toggle",[t.taskId,false,t.taskData])}else if(t.action=="start_timer"){t.taskData.TIMER_IS_RUNNING_FOR_CURRENT_USER=true;this.fireEvent("task-timer-toggle",[t.taskId,true,t.taskData])}},onTaskGlobalEvent:function(t,e){if(t=="UPDATE"&&typeof e.task!="undefined"&&e.task.ID){this.vars.taskData[e.task.ID]=BX.clone(e.task);this.setTaskTimeOffset(e.task.ID,e.task.TIME_ELAPSED)}},setTaskTimeOffset:function(t,e){this.vars.timeOffsets[t]={inLog:parseInt(e),current:0}},timerTickEmulation:function(){var t=this.vars.taskData;for(var e in t){var a=t[e];if(a.ID&&a.TIMER_IS_RUNNING_FOR_CURRENT_USER){if(typeof this.vars.timeOffsets[a.ID]=="undefined"){this.setTaskTimeOffset(a.ID,a.TIME_ELAPSED)}var i=this.vars.timeOffsets[a.ID];this.fireEvent("task-timer-tick",[a.ID,i.inLog+i.current,a]);i.current++}}},addToPlan:function(t){if(BX.addTaskToPlanner){BX.addTaskToPlanner(t);return true}else if(window.top.BX.addTaskToPlanner){window.top.BX.addTaskToPlanner(t);return true}return false},startTimer:function(t,e,a){if(!t){return}if(e){this.getQuery().add("task.dayplan.timer.start",{taskId:t,stopPrevious:a||false},{},BX.delegate(function(e){var a=e.getByCode("OTHER_TASK_ON_TIMER");if(a){var i=a.data();var s=[t,[]];if(i.TASK&&i.TASK.TITLE&&i.TASK.ID){s[1]={id:i.TASK.ID,title:i.TASK.TITLE}}this.fireEvent("other-task-on-timer",s);e.deleteByCodeAll("OTHER_TASK_ON_TIMER")}else{this.fireEvent("task-timer-toggle",[t,true])}},this))}else{this.fireEvent("task-timer-toggle",[t,true])}},stopTimer:function(t,e){if(!t){return}if(e){this.getQuery().add("task.dayplan.timer.stop",{taskId:t},{},BX.delegate(function(){this.fireEvent("task-timer-toggle",[t,false])},this))}else{this.fireEvent("task-timer-toggle",[t,false])}},getQuery:function(){if(typeof this.query=="undefined"){if(this.option("query")){this.query=this.option("query")}else{this.query=new BX.Tasks.Util.Query({autoExec:true})}}return this.query}}});
//# sourceMappingURL=dayplan.map.js