this.BX=this.BX||{};(function(e,t,i,a,s,n){"use strict";let r=e=>e,d,l,o,c,u,m,p,h,T,g,k,$,v,f,b,E,I,A;class L extends n.Timeline.Item{constructor(e){super(e);this.statusWait=0;this.statusYes=1;this.statusNo=2;this.statusOk=3;this.statusCancel=4;this.setEventNamespace("BX.Rpa.Timeline.Task")}getId(){return"task-"+this.id}getTaskUsers(){return this.data.users}render(){this.layout.container=this.renderContainer();this.layout.container.appendChild(this.renderIcon());this.layout.container.appendChild(this.renderContent());return this.layout.container}renderContainer(){return s.Tag.render(d||(d=r`<div class="ui-item-detail-stream-section ui-item-detail-stream-section-task ${0}"></div>`),this.isLast?"ui-item-detail-stream-section-last":"")}renderHeader(){return s.Tag.render(l||(l=r`
			<div class="ui-item-detail-stream-content-header">
				<div class="ui-item-detail-stream-content-title">
					<span class="ui-item-detail-stream-content-title-text">${0}</span>
				</div>
			</div>`),s.Loc.getMessage("RPA_TIMELINE_TASKS_TITLE"))}renderMain(){return s.Tag.render(o||(o=r`
			<div class="ui-item-detail-stream-content-detail">
				<div class="ui-item-detail-stream-content-detail-subject">
					${0}
					<div class="ui-item-detail-stream-content-detail-subject-inner">
						<a class="ui-item-detail-stream-content-detail-subject-text" href="${0}">${0}</a>
						${0}
					</div>
				</div>
				<div class="ui-item-detail-stream-content-detail-main">
					<span class="ui-item-detail-stream-content-detail-main-text">${0}</span>
				</div>
				${0}
				${0}
			</div>`),this.renderParticipants(),s.Text.encode(this.data.url),s.Text.encode(this.getTitle()),this.renderParticipantsLine(),s.Text.encode(this.description),this.renderTaskFields(),this.renderTaskButtons())}renderParticipants(){let e=this.getTaskUsers().map((({id:e,status:t})=>this.renderParticipantPhoto(e)));if(e.length>4){let t=e.length-4;e=e.slice(0,4);e.push(s.Tag.render(c||(c=r`<span class="ui-item-detail-stream-content-other">
						<span class="ui-item-detail-stream-content-other-text">+${0}</span>
					</span>`),t))}return s.Tag.render(u||(u=r`<div class="ui-item-detail-stream-content-employee-wrap" onclick="${0}">
				${0}
			</div>
		`),this.showParticipants.bind(this),e)}renderParticipantsLine(){let e=[];let t=this.getTaskUsers();t.forEach((({id:i,status:a},n)=>{let d=s.Tag.render(m||(m=r`<span class="ui-item-detail-stream-content-detail-subject-resp">${0}</span>`),s.Text.encode(this.getTaskUserName(i)));if(a>this.statusWait){d.classList.add("ui-item-detail-stream-content-detail-subject-resp-past")}else if(i===this.getUserId()){d.classList.add("ui-item-detail-stream-content-detail-subject-resp-current")}e.push(d);if(this.data.participantJoint!=="queue"&&t.length-1!==n){let t=this.data.participantJoint==="and"?"RPA_TIMELINE_TASKS_SEPARATOR_AND":"RPA_TIMELINE_TASKS_SEPARATOR_OR";e.push(s.Tag.render(p||(p=r`<span class="ui-item-detail-stream-content-detail-subject-separator">${0}</span>`),s.Loc.getMessage(t)))}}));let i=this.data.participantJoint==="queue"?"ui-item-detail-stream-content-detail-subject-resp-wrap-queue":"";return s.Tag.render(h||(h=r`
			<div class="ui-item-detail-stream-content-detail-subject-resp-wrap ${0}">
				${0}
			</div>
		`),i,e)}showParticipants(e){let t=this.getTaskUsers();let i=t.map((({id:e,status:i},a)=>{let n=this.users.get(e);let d=t.length-1!==a?s.Tag.render(T||(T=r`<span class="ui-item-detail-popup-item-separator">
					${0}
					</span>`),s.Loc.getMessage(this.data.participantJoint==="and"?"RPA_TIMELINE_TASKS_SEPARATOR_AND":"RPA_TIMELINE_TASKS_SEPARATOR_OR")):"";let l=s.Tag.render(g||(g=r`<div class="ui-item-detail-popup-item">
					<a class="ui-item-detail-stream-content-employee"
					   ${0}
					   target="_blank"
					   title="${0}"
					   ${0}></a>
					<div class="ui-item-detail-popup-item-inner">
						<span class="ui-item-detail-popup-item-name">${0}</span>
						<span class="ui-item-detail-popup-item-position">${0}</span>
					</div>
					${0}
				</div>`),n.link?`href="${n.link}"`:"",s.Text.encode(n.fullName),n.photo?`style="background-image: url('${n.photo}'); background-size: 100%;"`:"",s.Text.encode(n.fullName),n.workPosition,d);if(i>this.statusWait){l.classList.add("ui-item-detail-popup-item-"+(i===this.statusOk||i===this.statusYes?"success":"fail"))}else{l.classList.add("ui-item-detail-popup-item-"+(e===this.getUserId()?"current":"wait"))}return l}));let n=s.Tag.render(k||(k=r`
					<div class="ui-item-detail-popup">
						${0}
					</div>`),i);if(this.data.participantJoint!=="queue"){n.classList.add("ui-item-detail-popup-option")}let d=new a.Popup("rpa-detail-task-participant-"+this.getId(),e.target,{autoHide:true,draggable:false,bindOptions:{forceBindPosition:true},noAllPaddings:true,closeByEsc:true,cacheable:false,width:280,angle:{position:"top"},overlay:{backgroundColor:"transparent"},content:n});d.show()}renderTaskButtons(){const e=this.data.controls;if(!e){return""}const t=this.data.type==="RpaRequestActivity"?this.getLinkButtonElements(e.BUTTONS):this.getActionButtonElements(e.BUTTONS);return s.Tag.render($||($=r`
			<div class="ui-item-detail-stream-content-detail-status-block">
				${0}
			</div>
		`),t)}getActionButtonElements(e){return e.map((e=>{let t=e.COLOR;let a=i.Manager.calculateTextColor(e.COLOR);return s.Tag.render(v||(v=r`<button class="ui-btn ui-btn-sm ui-btn-default" 
					name="${0}"
					value="${0}"
					style="background-color: #${0};border-color: #${0};color:${0}"
					onclick="${0}"
					>${0}</button>
				`),e.NAME,e.VALUE,t,t,a,this.doTaskHandler.bind(this,e),s.Text.encode(e.TEXT))}))}getLinkButtonElements(e){return[s.Tag.render(f||(f=r`<a class="ui-btn ui-btn-sm ui-btn-default ui-btn-primary" 
					href="${0}"
					>${0}</a>
			`),s.Text.encode(this.data.url),s.Loc.getMessage("RPA_TIMELINE_TASKS_OPEN_TASK"))]}renderTaskFields(){if(!this.data.fieldsToSet){return""}const e=this.data.fieldsToSet.map((e=>s.Tag.render(b||(b=r`
					<div class="ui-item-detail-stream-content-detail-main-field-value">&ndash; ${0}</div>
				`),s.Text.encode(e))));return s.Tag.render(E||(E=r`
			<div class="ui-item-detail-stream-content-detail-main-field">
				<div class="ui-item-detail-stream-content-detail-main-field-title">${0}</div>
				<div class="ui-item-detail-stream-content-detail-main-field-value-block">
					${0}
				</div>
			</div>		
		`),s.Loc.getMessage("RPA_TIMELINE_TASKS_FIELDS_TO_SET"),e)}getTaskUserName(e){if(!e){e=this.getUserId()}let t=this.users.get(s.Text.toInteger(e));return t?t.fullName:"-?-"}renderParticipantPhoto(e){e=s.Text.toInteger(e);let t={fullName:"",photo:null};if(e>0){t=this.users.get(e)}if(!t){return s.Tag.render(I||(I=r`<span></span>`))}const i=s.Text.encode(t.fullName);return s.Tag.render(A||(A=r`<span class="ui-item-detail-stream-content-employee" title="${0}" ${0}></span>`),i,t.photo?`style="background-image: url('${t.photo}'); background-size: 100%;"`:"")}doTaskHandler(e){const t={};t[e.NAME]=e.VALUE;t["taskId"]=this.id;this.emit("onBeforeCompleteTask",{taskId:this.id});s.ajax.runAction("rpa.task.do",{analyticsLabel:"rpaTaskDo",data:t}).then((e=>{if(e.data.completed){if(e.data.timeline){this.completedData=e.data.timeline}this.onDelete();this.emit("onCompleteTask",{taskId:this.id})}}))}}let N=e=>e,P,R,S,_,x,B;class C extends n.Timeline.History{renderContainer(){const e=super.renderContainer();e.classList.add("ui-item-detail-stream-section-history");return e}renderTaskInfo(){let e=this.renderTaskName();if(!e){e=""}let t=this.renderTaskResponsible();if(!t){t=""}return s.Tag.render(P||(P=N`<div class="ui-item-detail-stream-content-detail-subject">
			${0}
			<div class="ui-item-detail-stream-content-detail-subject-inner">
				${0}
				${0}
			</div>
		</div>`),this.renderHeaderUser(this.getUserId(),30),e,t)}renderTaskName(){const e=this.getTask();if(e){return s.Tag.render(R||(R=N`<a class="ui-item-detail-stream-content-detail-subject-text">${0}</a>`),s.Text.encode(e.NAME))}return null}renderTaskResponsible(){let e=this.users.get(s.Text.toInteger(this.getUserId()));if(e){return s.Tag.render(S||(S=N`<span class="ui-item-detail-stream-content-detail-subject-resp">${0}</span>`),s.Text.encode(e.fullName))}return null}renderMain(){let e=this.renderTaskInfo();let t=this.renderDetailMain();if(!t){e.classList.add("rpa-item-detail-stream-content-detail-no-main")}return s.Tag.render(_||(_=N`<div class="ui-item-detail-stream-content-detail">
			${0}
			${0}
		</div>`),e,t||"")}getTask(){if(s.Type.isPlainObject(this.data.task)){return this.data.task}return null}renderDetailMain(){const e=this.getTask();let t="";if(e&&e.DESCRIPTION){t=s.Tag.render(x||(x=N`<span class="ui-item-detail-stream-content-detail-main-text">${0}</span>`),s.Text.encode(e.DESCRIPTION))}let i=this.renderStageChange();let a=this.renderFieldsChange();if(t||i||a){return s.Tag.render(B||(B=N`<div class="ui-item-detail-stream-content-detail-main">
				${0}
				${0}
				${0}
			</div>`),t,a?[this.renderFieldsChangeTitle(),a]:"",i?[this.renderStageChangeTitle(),i]:"")}return null}}const M={Task:L,TaskComplete:C};e.Timeline=M})(this.BX.Rpa=this.BX.Rpa||{},BX.Event,BX.Rpa,BX.Main,BX,BX.UI);
//# sourceMappingURL=timeline.bundle.map.js