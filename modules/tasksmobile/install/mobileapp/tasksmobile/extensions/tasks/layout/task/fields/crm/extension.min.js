jn.define("tasks/layout/task/fields/crm",((e,t,s)=>{const{Loc:r}=e("loc");const{CrmElementField:n}=e("layout/ui/fields/crm-element");class i extends LayoutComponent{constructor(e){super(e);this.state={readOnly:e.readOnly,crm:e.crm||{}}}componentWillReceiveProps(e){this.state={readOnly:e.readOnly,crm:e.crm||{}}}updateState(e){this.setState({readOnly:e.readOnly,crm:e.crm||{}})}render(){if(!n){return null}const e=Object.values(this.state.crm);return n({readOnly:this.state.readOnly,showEditIcon:true,title:r.getMessage("TASKSMOBILE_LAYOUT_TASK_FIELDS_CRM"),hasHiddenEmptyView:true,value:e.map((e=>e.id)),multiple:true,config:{deepMergeStyles:this.props.deepMergeStyles,entityIds:true,entityList:e,provider:{context:"TASKS_CRM"},reloadEntityListFromProps:true,parentWidget:this.props.parentWidget},testId:"crm",onChange:(t,s)=>{const r=s.reduce(((e,t)=>({...e,[`${t.type}_${t.id}`]:{id:t.id,title:t.title,subtitle:t.subtitle,type:t.type}})),{});const n=Object.keys(r);const i=e.map((e=>`${e.type}_${e.id}`));const l=n.filter((e=>!i.includes(e))).concat(i.filter((e=>!n.includes(e))));if(l.length){this.setState({crm:s});this.props.onChange(r)}}})}}s.exports={Crm:i}}));
//# sourceMappingURL=extension.map.js