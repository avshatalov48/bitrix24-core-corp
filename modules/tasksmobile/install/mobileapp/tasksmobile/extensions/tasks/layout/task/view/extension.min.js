jn.define("tasks/layout/task/view",((t,e,s)=>{const{Creator:i}=t("tasks/layout/task/fields/creator");const{Responsible:a}=t("tasks/layout/task/fields/responsible");const{Accomplices:n}=t("tasks/layout/task/fields/accomplices");const{Auditors:d}=t("tasks/layout/task/fields/auditors");const{Title:l}=t("tasks/layout/task/fields/title");const{Description:r}=t("tasks/layout/task/fields/description");const{Deadline:o}=t("tasks/layout/task/fields/deadline");const{Status:h}=t("tasks/layout/task/fields/status");const{Project:k}=t("tasks/layout/task/fields/project");const{IsImportant:u}=t("tasks/layout/task/fields/isImportant");const{Tags:c}=t("tasks/layout/task/fields/tags");const{Files:f}=t("tasks/layout/task/fields/files");const{CanChangeDeadline:p}=t("tasks/layout/task/fields/canChangeDeadline");const{IsMatchWorkTime:g}=t("tasks/layout/task/fields/isMatchWorkTime");const{IsTaskControl:m}=t("tasks/layout/task/fields/isTaskControl");const{IsResultRequired:T}=t("tasks/layout/task/fields/isResultRequired");const{TimeTracking:R}=t("tasks/layout/task/fields/timeTracking");const{DatePlan:y}=t("tasks/layout/task/fields/datePlan");const{Mark:C}=t("tasks/layout/task/fields/mark");const{Crm:S}=t("tasks/layout/task/fields/crm");const{RelatedTasks:D}=t("tasks/layout/task/fields/relatedTasks");const{SubTasks:I}=t("tasks/layout/task/fields/subTasks");const{Comments:E}=t("tasks/layout/task/fields/comments");const{TaskResultList:O}=t("tasks/layout/task/fields/taskResultList");const{CheckList:w}=t("tasks/layout/checklist");const{ActionMenu:F}=t("tasks/layout/task/actionMenu");const{CheckListTree:_}=t("tasks/checklist");const{CalendarSettings:P}=t("tasks/task/calendar");const{DatesResolver:b}=t("tasks/task/datesResolver");const{EventEmitter:M}=t("event-emitter");const{Alert:v}=t("alert");const{Loc:L}=t("loc");const{Type:A}=t("type");const W=54;class N{constructor(t,e){this.taskView=t;this.task=e;this.userId=t.userId;this.comments=new Set}getEventHandlers(){return{task_view:{method:this.onPullView,context:this},task_update:{method:this.onPullUpdate,context:this},comment_add:{method:this.onPullComment,context:this},comment_read_all:{method:this.onPullCommentReadAll,context:this},project_read_all:{method:this.onPullProjectReadAll,context:this},task_result_create:{method:this.onPullTaskResultCreate,context:this},task_result_update:{method:this.onPullTaskResultUpdate,context:this},task_result_delete:{method:this.onPullTaskResultDelete,context:this},task_timer_start:{method:this.onPullTaskTimerStart,context:this},task_timer_stop:{method:this.onPullTaskTimerStop,context:this}}}subscribe(){BX.PULL.subscribe({moduleId:"tasks",callback:t=>this.executePullEvent(t)})}executePullEvent(t){const e=Object.prototype.hasOwnProperty;const s=this.getEventHandlers();const{command:i,params:a}=t;if(e.call(s,i)){const{method:t,context:e}=s[i];if(t){t.apply(e,[a])}}}onPullView(t){this.taskView.onCommentsRead({taskId:t.TASK_ID})}onPullUpdate(t){if(t.TASK_ID.toString()===this.task.id&&t.params.updateCommentExists===false){this.taskView.getTaskData().then((()=>this.taskView.updateFields()))}}onPullComment(t){const[e,s]=t.entityXmlId.split("_");const{messageId:i}=t;if(e!=="TASK"||s!==this.task.id||this.comments.has(i)){return}this.comments.add(i);this.taskView.getTaskData().then((()=>{this.taskView.updateViewTab();this.taskView.updateCommentsValues();this.taskView.updateFields()}))}onPullCommentReadAll(t){const e={all:"view_all",responsible:"view_role_responsible",accomplice:"view_role_accomplice",originator:"view_role_originator",auditor:"view_role_auditor"};const s=Number(t.USER_ID);const i=Number(t.GROUP_ID);const a=t.ROLE||e.all;if(s>0&&s!==this.userId){return}const n={[e.all]:this.task.isMember(),[e.responsible]:this.task.isResponsible(),[e.accomplice]:this.task.isAccomplice(),[e.originator]:this.task.isPureCreator(),[e.auditor]:this.task.isAuditor()};const d=!i||Number(this.task.groupId)===i;if(n[a]&&d){this.taskView.onCommentsRead({taskId:this.task.id})}}onPullProjectReadAll(t){const e=Number(t.USER_ID);const s=Number(t.GROUP_ID);if(e>0&&e!==this.userId){return}if(s?Number(this.task.groupId)===s:Number(this.task.groupId)>0){this.taskView.onCommentsRead({taskId:this.task.id})}}onPullTaskResultCreate(t){this.updateTaskResultData(t)}onPullTaskResultUpdate(t){this.updateTaskResultData(t)}onPullTaskResultDelete(t){this.updateTaskResultData(t)}updateTaskResultData(t){if(t.taskId.toString()===this.task.id){this.taskView.getTaskResultData().then((()=>{this.taskView.updateFields([V.field.taskResultList])}));this.task.updateData({taskRequireResult:t.taskRequireResult,taskHasOpenResult:t.taskHasOpenResult,taskHasResult:t.taskHasResult})}}onPullTaskTimerStart(t){if(t.taskId.toString()===this.task.id){this.task.updateData({timerIsRunningForCurrentUser:"Y",timeElapsed:t.timeElapsed});this.taskView.updateFields([V.field.status])}}onPullTaskTimerStop(t){if(t.taskId.toString()===this.task.id){if(Number(t.userId)===Number(this.task.currentUser.id)){this.task.updateData({timerIsRunningForCurrentUser:"N"})}this.task.updateData({timeElapsed:t.timeElapsed[this.task.currentUser.id]});this.taskView.updateFields([V.field.status])}}}class V extends LayoutComponent{static get section(){return{pinned:"pinned",result:"result",common:"common"}}static get selectFields(){return["ID","TITLE","DESCRIPTION","STATUS","GROUP_ID","CREATED_BY","RESPONSIBLE_ID","ACCOMPLICES","AUDITORS","DEADLINE","ACTIVITY_DATE","START_DATE_PLAN","END_DATE_PLAN","FAVORITE","NOT_VIEWED","IS_MUTED","IS_PINNED","MATCH_WORK_TIME","ALLOW_CHANGE_DEADLINE","TASK_CONTROL","ALLOW_TIME_TRACKING","TIME_SPENT_IN_LOGS","TIME_ESTIMATE","PRIORITY","MARK","CHECKLIST","TAGS","UF_CRM_TASK","UF_TASK_WEBDAV_FILES","COUNTERS","COMMENTS_COUNT","SERVICE_COMMENTS_COUNT","RELATED_TASKS","SUB_TASKS"]}static get queryParams(){return{GET_TASK_LIMIT_EXCEEDED:true,WITH_RESULT_INFO:"Y",WITH_TIMER_INFO:"Y",WITH_FILES_INFO:"Y",WITH_CRM_INFO:"Y",WITH_PARSED_DESCRIPTION:"Y"}}static get field(){return{title:"title",creator:"creator",responsible:"responsible",deadline:"deadline",status:"status",taskResultList:"taskResultList",description:"description",files:"files",checklist:"checklist",project:"project",accomplices:"accomplices",auditors:"auditors",isImportant:"isImportant",tags:"tags",datePlan:"datePlan",datePlanIs:"datePlanIs",datePlanStart:"datePlanStart",datePlanEnd:"datePlanEnd",datePlanDuration:"datePlanDuration",timeTracking:"timeTracking",crm:"crm",canChangeDeadline:"canChangeDeadline",isMatchWorkTime:"isMatchWorkTime",isTaskControl:"isTaskControl",isResultRequired:"isResultRequired",mark:"mark",relatedTasks:"relatedTasks",subTasks:"subTasks",comments:"comments"}}constructor(t){super(t);this.state={showLoading:t.showLoading,readOnly:true};this.layoutWidget=t.layoutWidget;this.userId=Number(t.userId);this.taskId=Number(t.taskId);this.guid=t.guid;this.diskFolderId=Number(t.diskFolderId);this.pathToImages="/bitrix/mobileapp/tasksmobile/extensions/tasks/layout/task/images";this.deadlines=[];if(this.getDeadlinesCachedOption()){this.deadlines=Object.entries(Task.deadlines).map((([t,e])=>({name:e.name,value:this.getDeadlinesCachedOption().value[t]*1e3})))}this.componentEventEmitter=M.createWithUid(this.guid);this.checkList=_.buildTree();this.currentUser=null;this.isInitial=true;this.task=new Task({id:this.userId});this.task.updateData({id:this.taskId});if(t.taskObject){this.task.importProperties(t.taskObject);this.currentUser=this.task.currentUser;this.state.readOnly=!this.task.actions.edit}this.scrollY=0;this.datesResolver=new b({id:this.task.id,guid:this.guid,deadline:this.task.deadline,startDatePlan:this.task.startDatePlan,endDatePlan:this.task.endDatePlan,isMatchWorkTime:this.task.isMatchWorkTime})}componentDidMount(){Promise.allSettled([this.getTaskData(),this.getTaskResultData(),this.getDiskFolderId(),this.getDeadlines(),this.getCurrentUserData(),P.loadSettings()]).then((()=>this.doFinalInitAction()))}doFinalInitAction(){if(this.currentUser){this.task.currentUser=this.currentUser}this.task.enableFieldChangesTracker();this.isInitial=false;this.pull=new N(this,this.task);this.pull.subscribe();this.taskEventEmitter=M.createWithUid(this.task.id);this.bindEvents();this.updateViewTab();this.updateCommentsValues();this.actionMenu=new F({layoutWidget:this.layoutWidget,task:this.task,diskFolderId:this.diskFolderId,deadlines:this.getDeadlinesCachedOption().value,isTaskLimitExceeded:this.taskLimitExceeded});this.updateRightButtons();this.setState({showLoading:false,readOnly:!this.task.actions.edit})}getTaskData(){return new Promise((t=>{new RequestExecutor("tasks.task.get",{taskId:this.taskId,select:this.isInitial?V.selectFields:V.selectFields.filter((t=>t!=="CHECKLIST")),params:V.queryParams}).call().then((e=>{const{task:s}=e.result;if(!s){v.confirm(L.getMessage("TASKSMOBILE_LAYOUT_TASK_VIEW_NO_TASK_ALERT_TITLE"),L.getMessage("TASKSMOBILE_LAYOUT_TASK_VIEW_NO_TASK_ALERT_DESCRIPTION"),[{text:L.getMessage("TASKSMOBILE_LAYOUT_TASK_VIEW_NO_TASK_ALERT_BUTTON_OK"),onPress:()=>this.layoutWidget.back()}])}if(this.isInitial){this.task.setData(s);if(s.hasOwnProperty("checkListTree")){this.checkList=_.buildTree(s.checkListTree)}if(s.hasOwnProperty("checkListCanAdd")){this.checkList.setCanAdd(s.checkListCanAdd)}this.checkList.setTaskId(this.taskId)}else{const t=this.removeChangedFieldFromTask(s);this.task.updateData(t)}this.isDatePlan=this.task.startDatePlan||this.task.endDatePlan;this.datesResolver.setData(this.task);this.taskLimitExceeded=s.taskLimitExceeded;this.componentEventEmitter.emit("tasks.task.view:updateTitle",{title:s.title});t()}))}))}removeChangedFieldFromTask(t){const e={[Task.fields.title]:"title",[Task.fields.description]:"description",[Task.fields.group]:["groupId","group"],[Task.fields.timeEstimate]:"timeEstimate",[Task.fields.priority]:"priority",[Task.fields.mark]:"mark",[Task.fields.creator]:"creator",[Task.fields.responsible]:"responsible",[Task.fields.accomplices]:"accomplicesData",[Task.fields.auditors]:"auditorsData",[Task.fields.crm]:"crm",[Task.fields.tags]:"tags",[Task.fields.files]:"files",[Task.fields.uploadedFiles]:"uploadedFiles",[Task.fields.isResultRequired]:"taskRequireResult",[Task.fields.isMatchWorkTime]:"matchWorkTime",[Task.fields.allowChangeDeadline]:"allowChangeDeadline",[Task.fields.allowTaskControl]:"taskControl",[Task.fields.allowTimeTracking]:"allowTimeTracking",[Task.fields.deadline]:"deadline",[Task.fields.startDatePlan]:"startDatePlan",[Task.fields.endDatePlan]:"endDatePlan"};const s={...t};this.task.getChangedFields().forEach((t=>{let i=e[t];if(i){if(!A.isArray(i)){i=[i]}i.forEach((t=>delete s[t]))}}));return s}getTaskResultData(){return new Promise((t=>{new RequestExecutor("tasks.task.result.list",{taskId:this.taskId,params:{WITH_USER_INFO:"Y",WITH_FILE_INFO:"Y",WITH_PARSED_TEXT:"Y"}}).call().then((e=>{this.taskResultList=e.result;t()}))}))}getDiskFolderId(){return new Promise((t=>{if(this.diskFolderId){return t()}new RequestExecutor("mobile.disk.getUploadedFilesFolder").call().then((e=>{this.diskFolderId=Number(e.result);t()}))}))}getDeadlines(){return new Promise((t=>{const e=new Date;let s=true;if(this.getDeadlinesCachedOption()){const t=new Date(this.getDeadlinesCachedOption().lastTime);s=e.getDate()!==t.getDate()}if(this.deadlines.length>0&&!s){return t()}new RequestExecutor("mobile.tasks.deadlines.get").call().then((s=>{this.deadlines=Object.entries(Task.deadlines).map((([t,e])=>({name:e.name,value:s.result[t]*1e3})));this.updateDeadlinesCachedOption({lastTime:e.getTime(),value:s.result});t()}))}))}getDeadlinesCachedOption(){const t=Application.sharedStorage("tasksTaskList").get("options");if(A.isString(t)){return JSON.parse(t).deadlines}return null}updateDeadlinesCachedOption(t){const e=Application.sharedStorage("tasksTaskList");const s=e.get("options");if(A.isString(s)){const i=JSON.parse(s);i.deadlines=t;e.set("options",JSON.stringify(i))}}getCurrentUserData(){return new Promise((t=>{if(this.currentUser){return t()}new RequestExecutor("tasksmobile.User.getUsersData",{userIds:[this.userId]}).call().then((e=>{this.currentUser=e.result[this.userId];t()}))}))}bindEvents(){this.componentEventEmitter.on("tasks.task.tabs:onCommentsTabRightButtonClick",(()=>this.actionMenu.show()));this.bindActionMenuEvents();this.bindDatesResolverEvents();BX.addCustomEvent("tasks.task.comments:onCommentsRead",(t=>this.onCommentsRead(t)));BX.addCustomEvent("task.view.onCommentAction",(t=>this.onCommentAction(t)))}bindActionMenuEvents(){this.taskEventEmitter.on("tasks.task.actionMenu:start",(()=>this.updateFields([V.field.status])));this.taskEventEmitter.on("tasks.task.actionMenu:pause",(()=>this.updateFields([V.field.status])));this.taskEventEmitter.on("tasks.task.actionMenu:complete",(()=>this.updateFields([V.field.status,V.field.deadline])));this.taskEventEmitter.on("tasks.task.actionMenu:renew",(()=>this.updateFields([V.field.status,V.field.deadline])));this.taskEventEmitter.on("tasks.task.actionMenu:approve",(()=>this.updateFields([V.field.status,V.field.deadline])));this.taskEventEmitter.on("tasks.task.actionMenu:disapprove",(()=>this.updateFields([V.field.status,V.field.deadline])));this.taskEventEmitter.on("tasks.task.actionMenu:delegate",(()=>this.updateFields([V.field.responsible,V.field.auditors])))}bindDatesResolverEvents(){const t=()=>{this.task.addChangedFields([Task.fields.deadline,Task.fields.startDatePlan,Task.fields.endDatePlan,Task.fields.isMatchWorkTime]);this.updateRightButtons()};this.datesResolver.on("datesResolver:deadlineChanged",((e,s)=>{this.task.deadline=e*1e3;this.updateFields([V.field.deadline]);if(s){void this.task.saveDeadline()}else{t()}}));this.datesResolver.on("datesResolver:datesChanged",((e,s)=>{this.task.startDatePlan=e*1e3;this.task.endDatePlan=s*1e3;this.updateFields([V.field.datePlanIs,V.field.datePlanStart,V.field.datePlanEnd,V.field.datePlanDuration]);t()}))}onCommentsRead(t){if(this.task.id===t.taskId.toString()){this.task.pseudoRead();this.updateCommentsValues()}}updateCommentsValues(){this.updateFields([V.field.comments]);this.componentEventEmitter.emit("tasks.task.view:updateTab",{tab:"comments",...this.getNewCommentsCounterData()})}onCommentAction(t){const{taskId:e,userId:s,action:i}=t;if(Number(e)!==Number(this.task.id)||Number(s)!==Number(this.userId)){return}switch(i){case"deadlineChange":this.deadlineRef.openPicker();break;case"taskApprove":void this.task.approve();break;case"taskDisapprove":void this.task.disapprove();break;case"taskComplete":void this.task.complete();break;default:break}}updateViewTab(){this.componentEventEmitter.emit("tasks.task.view:updateTab",{tab:"view",...this.getExpiredCounterData()})}getExpiredCounterData(){return{value:Number(!this.task.isCompletedCounts&&this.task.isExpired),color:this.task.isMember()&&!this.task.isMuted?Task.counterColors.danger:Task.counterColors.gray}}getNewCommentsCounterData(){return{value:Number(this.task.getNewCommentsCount()),color:this.task.isMember()&&!this.task.isMuted?Task.counterColors.success:Task.counterColors.gray}}updateRightButtons(){const t=[];if(this.task.haveChangedFields()){t.push({type:"text",name:L.getMessage(this.isSaving?"TASKSMOBILE_LAYOUT_TASK_VIEW_SAVING_BUTTON":"TASKSMOBILE_LAYOUT_TASK_VIEW_SAVE_BUTTON"),color:this.isSaving?"#bdc1c6":"#0065a3",callback:()=>{if(!this.checkCanSave()){return}this.isSaving=true;this.updateRightButtons();Notify.showIndicatorLoading();if(this.task.isFieldChanged(Task.fields.checkList)&&this.task.getChangedFields().length===1){this.checkList.save(this.task.id).then((()=>this.onSaveSuccess()),(()=>{}))}else if(!this.task.actions.edit&&this.task.actions.changeDeadline){this.task.saveDeadline().then((()=>this.onSaveSuccess(this.task.isFieldChanged(Task.fields.checkList))),(t=>this.onSaveFail(t)))}else{this.task.save().then((()=>this.onSaveSuccess(this.task.isFieldChanged(Task.fields.checkList))),(t=>this.onSaveFail(t)))}}})}else{t.push({type:"more",callback:()=>this.actionMenu.show()})}this.layoutWidget.setRightButtons(t)}checkCanSave(){if(this.isSaving){return false}if(this.task.title===""){Notify.showIndicatorError({hideAfter:2e3,text:L.getMessage("TASKSMOBILE_LAYOUT_TASK_VIEW_SAVE_ERROR_NO_TITLE")});return false}if(this.filesInnerRef&&this.filesInnerRef.hasUploadingFiles()){Notify.showIndicatorError({hideAfter:2e3,text:L.getMessage("TASKSMOBILE_LAYOUT_TASK_VIEW_SAVE_ERROR_LOADING_FILES")});return false}return true}onSaveSuccess(t=false){if(t){void this.checkList.save(this.task.id)}this.isSaving=false;this.task.clearChangedFields();this.updateRightButtons();Notify.showIndicatorSuccess({hideAfter:1e3})}onSaveFail(t){this.isSaving=false;this.updateRightButtons();Notify.showIndicatorError({hideAfter:3e3,text:t.error.description.replace(/<\/?[^>]+(>|$)/g,"")})}getDeepMergeStylesForField(t=false){const e={wrapper:t=>({height:t?undefined:W,minHeight:t?W:undefined,justifyContent:"center",paddingTop:10,paddingBottom:10}),readOnlyWrapper:t=>({height:t?undefined:W,minHeight:t?W:undefined,justifyContent:"center",paddingTop:10,paddingBottom:10})};return Object.entries(e).reduce(((e,[s,i])=>{e[s]=A.isFunction(i)?i(t):i;return e}),{})}render(){if(this.state.showLoading){return this.renderLoadingScreen()}return this.renderTaskViewScreen()}renderLoadingScreen(){return View({},new LoadingScreenComponent)}renderTaskViewScreen(){return View({resizableByKeyboard:true,style:{flex:1,backgroundColor:"#eef2f4",paddingBottom:E.getHeight()}},ScrollView({ref:t=>this.scrollViewRef=t,style:{flex:1,borderRadius:12,marginBottom:0},bounces:true,showsVerticalScrollIndicator:false,onScroll:t=>{this.scrollY=t.contentOffset.y}},View({},...this.renderSections())),new E({commentsCount:this.task.commentsCount-this.task.serviceCommentsCount,newCommentsCounter:this.getNewCommentsCounterData(),ref:t=>this.commentsRef=t,onClick:()=>this.componentEventEmitter.emit("tasks.task.view:setActiveTab",{tab:"comments"})}))}renderSections(){const t=this.getFieldsContent();const e={[V.section.pinned]:{[V.field.title]:t[V.field.title],[V.field.creator]:t[V.field.creator],[V.field.responsible]:t[V.field.responsible],[V.field.deadline]:t[V.field.deadline],[V.field.status]:t[V.field.status]},[V.section.result]:{[V.field.taskResultList]:t[V.field.taskResultList]},[V.section.common]:{[V.field.description]:t[V.field.description],[V.field.files]:t[V.field.files],[V.field.checklist]:t[V.field.checklist],[V.field.project]:t[V.field.project],[V.field.accomplices]:t[V.field.accomplices],[V.field.auditors]:t[V.field.auditors],[V.field.isImportant]:t[V.field.isImportant],[V.field.tags]:t[V.field.tags],[V.field.datePlan]:t[V.field.datePlan],[V.field.timeTracking]:t[V.field.timeTracking],[V.field.crm]:t[V.field.crm],[V.field.canChangeDeadline]:t[V.field.canChangeDeadline],[V.field.isMatchWorkTime]:t[V.field.isMatchWorkTime],[V.field.isTaskControl]:t[V.field.isTaskControl],[V.field.isResultRequired]:t[V.field.isResultRequired],[V.field.mark]:t[V.field.mark],[V.field.relatedTasks]:t[V.field.relatedTasks],[V.field.subTasks]:t[V.field.subTasks]}};return Object.entries(e).map((([t,e])=>{const s=[V.field.title,V.field.files,V.field.taskResultList,V.field.description,V.field.checklist,V.field.datePlan,V.field.timeTracking];const i=[V.field.checklist,V.field.datePlan,V.field.timeTracking];let a="";return View({style:{backgroundColor:"#ffffff",borderRadius:12,paddingHorizontal:16,marginTop:t===V.section.common?0:15,marginBottom:t===V.section.result?5:0},testId:`taskViewSection_${t}`},...Object.entries(e).map((([t,e])=>{if(s.includes(t)||i.includes(a)){a=t;return e}a=t;return this.renderWithTopBorder(e)})))}))}renderWithTopBorder(t){return View({},View({style:{height:.5,backgroundColor:"#e6e6e6"}}),t)}getFieldsContent(){return{[V.field.title]:new l({readOnly:this.state.readOnly,title:this.task.title,focus:null,deepMergeStyles:{...this.getDeepMergeStylesForField(true),editableValue:{fontSize:18,fontWeight:"600",maxHeight:undefined}},ref:t=>this.titleRef=t,onChange:t=>{this.task.updateData({title:t});this.task.addChangedFields(Task.fields.title);this.updateRightButtons()}}),[V.field.creator]:new i({readOnly:this.state.readOnly,creator:this.task.creator,parentWidget:this.layoutWidget,deepMergeStyles:this.getDeepMergeStylesForField(),ref:t=>this.creatorRef=t,onChange:t=>{this.task.updateData({creator:t});this.task.addChangedFields(Task.fields.creator);this.updateRightButtons()}}),[V.field.responsible]:new a({readOnly:this.state.readOnly,responsible:this.task.responsible,parentWidget:this.layoutWidget,deepMergeStyles:this.getDeepMergeStylesForField(),ref:t=>this.responsibleRef=t,onChange:t=>{this.task.updateData({responsible:t});this.task.addChangedFields(Task.fields.responsible);this.updateRightButtons()}}),[V.field.deadline]:new o({readOnly:!this.task.actions.edit&&!this.task.actions.changeDeadline,deadline:this.task.deadline,taskState:this.task.getState(),deadlines:this.deadlines,isTaskCompleted:this.task.isCompletedCounts,counter:this.getExpiredCounterData(),deepMergeStyles:this.getDeepMergeStylesForField(),pathToImages:this.pathToImages,datesResolver:this.datesResolver,ref:t=>this.deadlineRef=t}),[V.field.status]:new h({readOnly:!this.task.actions.start&&!this.task.actions.pause&&!this.task.actions.complete&&!this.task.actions.renew&&!this.task.actions.approve&&!this.task.actions.disapprove&&!this.task.actions.defer,task:this.task,status:this.task.status,isTimerExisting:this.task.allowTimeTracking,isTimerRunning:this.task.isTimerRunningForCurrentUser,timeElapsed:this.task.timeElapsed,timeEstimate:this.task.timeEstimate,parentWidget:this.layoutWidget,deepMergeStyles:this.getDeepMergeStylesForField(),pathToImages:this.pathToImages,ref:t=>this.statusRef=t}),[V.field.taskResultList]:new O({resultList:this.taskResultList,taskId:this.task.id,parentWidget:this.layoutWidget,ref:t=>this.taskResultListRef=t}),[V.field.description]:new r({readOnly:this.state.readOnly||this.task.description!==this.task.parsedDescription,description:this.task.description,parsedDescription:this.task.parsedDescription,task:this.task,deepMergeStyles:this.getDeepMergeStylesForField(true),ref:t=>this.descriptionRef=t,onChange:t=>{this.task.updateData({description:t});this.task.addChangedFields(Task.fields.description);this.updateRightButtons()}}),[V.field.files]:new f({readOnly:this.state.readOnly,userId:this.userId,taskId:this.task.id,files:[...this.task.files||[],...this.task.uploadedFiles||[]],isAlwaysShowed:true,showAddButton:!this.state.readOnly,parentWidget:this.layoutWidget,deepMergeStyles:this.getDeepMergeStylesForField(true),ref:t=>this.filesRef=t,onInnerRef:t=>this.filesInnerRef=t,onChange:t=>{const e=[];const s=[];t.forEach((t=>{if(t.token){e.push(t)}else if(t.id&&!t.isUploading&&!t.hasError){s.push(t)}}));this.task.updateData({uploadedFiles:e,files:s});this.task.addChangedFields([Task.fields.files,Task.fields.uploadedFiles]);this.updateRightButtons()}}),[V.field.checklist]:View({style:{marginHorizontal:-11}},new w({checkList:this.checkList,taskId:this.task.id,taskGuid:this.task.guid,userId:this.userId,diskConfig:{folderId:this.diskFolderId},parentWidget:this.layoutWidget,isLoading:this.checkList.checkEditMode(),onFocus:t=>{if(this.scrollViewRef&&t){const{y:e}=this.scrollViewRef.getPosition(t);if(e>this.scrollY+device.screen.height*.4){const t=e-150;this.scrollViewRef.scrollTo({...{y:t},animated:true})}}},onChange:()=>{this.task.addChangedFields(Task.fields.checkList);this.updateRightButtons()},ref:t=>this.checkListRef=t})),[V.field.project]:new k({readOnly:this.state.readOnly,groupId:this.task.groupId,groupData:this.task.group,parentWidget:this.layoutWidget,deepMergeStyles:this.getDeepMergeStylesForField(),ref:t=>this.projectRef=t,onChange:(t,e)=>{this.task.updateData({groupId:t,group:e});this.task.addChangedFields(Task.fields.group);this.updateRightButtons()}}),[V.field.accomplices]:new n({readOnly:this.state.readOnly,accomplices:this.task.accomplices,parentWidget:this.layoutWidget,deepMergeStyles:this.getDeepMergeStylesForField(true),checkList:this.checkList,ref:t=>this.accomplicesRef=t,onChange:t=>{this.task.updateData({accomplicesData:t});this.task.addChangedFields(Task.fields.accomplices);this.updateRightButtons()}}),[V.field.auditors]:new d({readOnly:this.state.readOnly,auditors:this.task.auditors,parentWidget:this.layoutWidget,deepMergeStyles:this.getDeepMergeStylesForField(true),checkList:this.checkList,ref:t=>this.auditorsRef=t,onChange:t=>{this.task.updateData({auditorsData:t});this.task.addChangedFields(Task.fields.auditors);this.updateRightButtons()}}),[V.field.isImportant]:new u({readOnly:this.state.readOnly,isImportant:this.task.priority===Task.priority.important,deepMergeStyles:this.getDeepMergeStylesForField(),pathToImages:this.pathToImages,ref:t=>this.isImportantRef=t,onChange:t=>{this.task.updateData({priority:t?Task.priority.important:Task.priority.none});this.task.addChangedFields(Task.fields.priority);this.updateRightButtons()}}),[V.field.tags]:new c({readOnly:this.state.readOnly,tags:this.task.tags,taskId:this.taskId,parentWidget:this.layoutWidget,deepMergeStyles:this.getDeepMergeStylesForField(true),ref:t=>this.tagsRef=t,onChange:t=>{this.task.updateData({tags:t});this.task.addChangedFields(Task.fields.tags);this.updateRightButtons()}}),[V.field.datePlan]:new y({readOnly:this.state.readOnly,isDatePlan:this.isDatePlan,startDatePlan:this.task.startDatePlan,endDatePlan:this.task.endDatePlan,deepMergeStyles:this.getDeepMergeStylesForField(),datesResolver:this.datesResolver,ref:t=>this.datePlanRef=t,onDatePlanIsRef:t=>this.datePlanIsRef=t,onDatePlanStartRef:t=>this.datePlanStartRef=t,onDatePlanEndRef:t=>this.datePlanEndRef=t,onDatePlanDurationRef:t=>this.datePlanDurationRef=t,onChange:t=>this.isDatePlan=t}),[V.field.timeTracking]:new R({readOnly:this.state.readOnly,isTimeTracking:this.task.allowTimeTracking,timeEstimate:this.task.timeEstimate,deepMergeStyles:this.getDeepMergeStylesForField(),ref:t=>this.timeTrackingRef=t,onChange:t=>{this.task.updateData(t);if(!A.isUndefined(t.allowTimeTracking)){this.task.addChangedFields(Task.fields.allowTimeTracking);this.updateRightButtons()}if(!A.isUndefined(t.timeEstimate)){this.task.addChangedFields(Task.fields.timeEstimate);this.updateRightButtons()}}}),[V.field.crm]:new S({readOnly:this.state.readOnly,crm:this.task.crm,parentWidget:this.layoutWidget,deepMergeStyles:this.getDeepMergeStylesForField(true),ref:t=>this.crmRef=t,onChange:t=>{this.task.updateData({crm:t});this.task.addChangedFields(Task.fields.crm);this.updateRightButtons()}}),[V.field.canChangeDeadline]:new p({readOnly:this.state.readOnly,canChangeDeadline:this.task.allowChangeDeadline,deepMergeStyles:this.getDeepMergeStylesForField(true),ref:t=>this.canChangeDeadlineRef=t,onChange:t=>{this.task.updateData({allowChangeDeadline:t?"Y":"N"});this.task.addChangedFields(Task.fields.allowChangeDeadline);this.updateRightButtons()}}),[V.field.isMatchWorkTime]:new g({readOnly:this.state.readOnly,isMatchWorkTime:this.task.isMatchWorkTime,deepMergeStyles:this.getDeepMergeStylesForField(true),datesResolver:this.datesResolver,ref:t=>this.isMatchWorkTimeRef=t,onChange:t=>{this.task.updateData({matchWorkTime:t?"Y":"N"});this.task.addChangedFields([Task.fields.isMatchWorkTime,Task.fields.deadline,Task.fields.startDatePlan,Task.fields.endDatePlan]);this.updateRightButtons()}}),[V.field.isTaskControl]:new m({readOnly:this.state.readOnly,isTaskControl:this.task.allowTaskControl,deepMergeStyles:this.getDeepMergeStylesForField(true),ref:t=>this.isTaskControlRef=t,onChange:t=>{this.task.updateData({taskControl:t?"Y":"N"});this.task.addChangedFields(Task.fields.allowTaskControl);this.updateRightButtons()}}),[V.field.isResultRequired]:new T({readOnly:this.state.readOnly,isResultRequired:this.task.isResultRequired,deepMergeStyles:this.getDeepMergeStylesForField(true),ref:t=>this.isResultRequiredRef=t,onChange:t=>{this.task.updateData({taskRequireResult:t?"Y":"N"});this.task.addChangedFields(Task.fields.isResultRequired);this.updateRightButtons()}}),[V.field.mark]:new C({readOnly:this.state.readOnly,mark:this.task.mark,parentWidget:this.layoutWidget,deepMergeStyles:this.getDeepMergeStylesForField(),ref:t=>this.markRef=t,onChange:t=>{this.task.updateData({mark:t});this.task.addChangedFields(Task.fields.mark);this.updateRightButtons()}}),[V.field.relatedTasks]:new D({relatedTasks:this.task.relatedTasks,deepMergeStyles:this.getDeepMergeStylesForField(true),ref:t=>this.relatedTasksRef=t}),[V.field.subTasks]:new I({subTasks:this.task.subTasks,deepMergeStyles:this.getDeepMergeStylesForField(true),ref:t=>this.subTasksRef=t})}}updateFields(t=[]){const e={[V.field.title]:{ref:this.titleRef,newState:{readOnly:this.state.readOnly,title:this.task.title}},[V.field.creator]:{ref:this.creatorRef,newState:{readOnly:this.state.readOnly,creator:this.task.creator}},[V.field.responsible]:{ref:this.responsibleRef,newState:{readOnly:this.state.readOnly,responsible:this.task.responsible}},[V.field.deadline]:{ref:this.deadlineRef,newState:{readOnly:!this.task.actions.edit&&!this.task.actions.changeDeadline,deadline:this.task.deadline,taskState:this.task.getState(),deadlines:this.deadlines,isTaskCompleted:this.task.isCompletedCounts,counter:this.getExpiredCounterData()}},[V.field.status]:{ref:this.statusRef,newState:{readOnly:!this.task.actions.start&&!this.task.actions.pause&&!this.task.actions.complete&&!this.task.actions.renew&&!this.task.actions.approve&&!this.task.actions.disapprove&&!this.task.actions.defer,status:this.task.status,isTimerExisting:this.task.allowTimeTracking,isTimerRunning:this.task.isTimerRunningForCurrentUser,timeElapsed:this.task.timeElapsed,timeEstimate:this.task.timeEstimate}},[V.field.taskResultList]:{ref:this.taskResultListRef,newState:{resultList:this.taskResultList}},[V.field.description]:{ref:this.descriptionRef,newState:{readOnly:this.state.readOnly||this.task.description!==this.task.parsedDescription,description:this.task.description,parsedDescription:this.task.parsedDescription}},[V.field.files]:{ref:this.filesRef,newState:{readOnly:this.state.readOnly,files:[...this.task.files||[],...this.task.uploadedFiles||[]],showAddButton:!this.state.readOnly}},[V.field.project]:{ref:this.projectRef,newState:{readOnly:this.state.readOnly,groupId:this.task.groupId,groupData:this.task.group}},[V.field.accomplices]:{ref:this.accomplicesRef,newState:{readOnly:this.state.readOnly,accomplices:this.task.accomplices}},[V.field.auditors]:{ref:this.auditorsRef,newState:{readOnly:this.state.readOnly,auditors:this.task.auditors}},[V.field.isImportant]:{ref:this.isImportantRef,newState:{readOnly:this.state.readOnly,isImportant:this.task.priority===Task.priority.important}},[V.field.tags]:{ref:this.tagsRef,newState:{readOnly:this.state.readOnly,tags:this.task.tags}},[V.field.datePlanIs]:{ref:this.datePlanIsRef,newState:{readOnly:this.state.readOnly,isDatePlan:this.isDatePlan}},[V.field.datePlanStart]:{ref:this.datePlanStartRef,newState:{readOnly:this.state.readOnly,startDatePlan:this.task.startDatePlan}},[V.field.datePlanEnd]:{ref:this.datePlanEndRef,newState:{readOnly:this.state.readOnly,endDatePlan:this.task.endDatePlan}},[V.field.datePlanDuration]:{ref:this.datePlanDurationRef,newState:{readOnly:this.state.readOnly,duration:this.datesResolver.durationByType,durationType:this.datesResolver.durationType}},[V.field.timeTracking]:{ref:this.timeTrackingRef,newState:{readOnly:this.state.readOnly,isTimeTracking:this.task.allowTimeTracking,timeEstimate:this.task.timeEstimate}},[V.field.crm]:{ref:this.crmRef,newState:{readOnly:this.state.readOnly,crm:this.task.crm}},[V.field.canChangeDeadline]:{ref:this.canChangeDeadlineRef,newState:{readOnly:this.state.readOnly,canChangeDeadline:this.task.allowChangeDeadline}},[V.field.isMatchWorkTime]:{ref:this.isMatchWorkTimeRef,newState:{readOnly:this.state.readOnly,isMatchWorkTime:this.task.isMatchWorkTime}},[V.field.isTaskControl]:{ref:this.isTaskControlRef,newState:{readOnly:this.state.readOnly,isTaskControl:this.task.allowTaskControl}},[V.field.isResultRequired]:{ref:this.isResultRequiredRef,newState:{readOnly:this.state.readOnly,isResultRequired:this.task.isResultRequired}},[V.field.mark]:{ref:this.markRef,newState:{readOnly:this.state.readOnly,mark:this.task.mark}},[V.field.relatedTasks]:{ref:this.relatedTasksRef,newState:{relatedTasks:this.task.relatedTasks}},[V.field.subTasks]:{ref:this.subTasksRef,newState:{subTasks:this.task.subTasks}},[V.field.comments]:{ref:this.commentsRef,newState:{commentsCount:this.task.commentsCount-this.task.serviceCommentsCount,newCommentsCounter:this.getNewCommentsCounterData()}}};if(!t.length){t=Object.keys(e)}t=t.filter((t=>Object.keys(e).includes(t)));t.forEach((t=>{const s=e[t].ref;if(s){s.updateState(e[t].newState)}else{console.error(`${t} ref is undefined`)}}));if(t.includes(V.field.datePlanIs)&&this.datePlanRef){this.datePlanRef.animateBlock(this.isDatePlan)}}}class B{static open(t){const e=new V({layoutWidget:t.layoutWidget,userId:t.userId,taskId:t.taskId,guid:t.guid,taskObject:t.taskObject,showLoading:!t.taskObject});t.layoutWidget.showComponent(e)}}s.exports={TaskView:V,TaskViewManager:B}}));
//# sourceMappingURL=extension.map.js