jn.define("tasks/task/calendar",((t,e,s)=>{const{Type:n}=t("type");class r{constructor(){this.isSettingsLoading=false;this.isSettingsLoaded=false;this.workTime=[{start:{hours:0,minutes:0},end:{hours:24,minutes:0}}];this.weekends={0:true,6:true};this.holidays={};void this.loadSettings()}loadSettings(){return new Promise((t=>{if(this.isSettingsLoading||this.isSettingsLoaded){t();return}this.isSettingsLoading=true;new RequestExecutor("tasksmobile.Calendar.getSettings").call().then((e=>{this.setSettings(e.result);t()}))}))}setSettings(t,e=true){if(e){t=this.adaptSettings(t)}this.setWorkTime(t.workTime);this.setWeekends(t.weekEnds);this.setHolidays(t.holidays);this.isSettingsLoading=false;this.isSettingsLoaded=true}adaptSettings(t){if(!n.isPlainObject(t)){return{}}return{workTime:this.adaptWorkTime(t),weekEnds:this.adaptWeekends(t),holidays:this.adaptHolidays(t)}}adaptWorkTime(t){const e=function(t){t=t.toString();if(t.length===0){return"00"}if(t.length===1){return`0${t}`}return t};const s=t.HOURS;const n=s.START;const r=s.END;return`${e(n.H)}:${e(n.M)}-${e(r.H)}:${e(r.M)}`}adaptWeekends(t){const e=t.WEEKEND;const s={MO:1,TU:2,WE:3,TH:4,FR:5,SA:6,SU:0};return e.reduce(((t,e)=>{t.push(s[e]);return t}),[])}adaptHolidays(t){const e=[];for(const s in t.HOLIDAYS){e.push({month:parseInt(t.HOLIDAYS[s].M)-1,day:parseInt(t.HOLIDAYS[s].D)})}return e}setWorkTime(t){if(n.isStringFilled(t)){t=[t]}if(!n.isArray(t)){return}const e=[];for(let s=0;s<t.length;s++){const n=t[s];const r=/(\d\d):(\d\d)-(\d\d):(\d\d)/;const i=r.exec(n);if(!i){continue}const a=parseInt(i[1],10);const o=parseInt(i[2],10);const l=parseInt(i[3],10);const u=parseInt(i[4],10);e.push({start:{hours:a,minutes:o,time:a*60+o},end:{hours:l,minutes:u,time:l*60+u}})}if(this.isWorkTimeCorrect(e)){this.workTime=e}}setWeekends(t){if(!n.isArray(t)){return}this.weekends={};for(let e=0;e<t.length;e++){const s=t[e];if(s>=0&&s<=6){this.weekends[s]=true}}}setHolidays(t){if(!n.isArray(t)){return}this.holidays={};for(let e=0;e<t.length;e++){const s=t[e];const r=n.isNumber(s.month)&&s.month>=0&&s.month<=11;const i=n.isNumber(s.day)&&s.day>=0&&s.day<=31;if(r&&i){this.holidays[`${s.month}_${s.day}`]=true}}}calculateStartDate(t,e){let s=null;this.processEachDay(null,t,false,((t,n)=>{const r=n-t;if(r>=e){s=new Date(n.getTime()-e);return false}else{e-=r}}));return s}calculateEndDate(t,e){let s=null;this.processEachDay(t,null,true,((t,n)=>{const r=n-t;if(r>=e){s=new Date(t.getTime()+e);return false}else{e-=r}}));return s}calculateDuration(t,e){let s=0;if(t<e){this.processEachDay(t,e,true,((t,e)=>s+=e-t))}else{this.processEachDay(e,t,true,((t,e)=>s-=e-t))}return s}getClosestWorkTime(t,e){const s=e?t:null;const n=e?null:t;this.processEachDay(s,n,e,((s,n)=>{t=e?s:n;return false}));return new Date(t.getTime())}processEachDay(t,e,s,n){const r=new Date(s?t.getTime():e.getTime());const i=s?!e:!t;while(i||(s?r<e:r>t)){const i=this.getWorkHours(r);for(let r=s?0:i.length-1;s?r<i.length:r>=0;s?r++:r--){const s=i[r];const a=s.startDate;const o=s.endDate;if(e!==null&&a>e||t!==null&&o<t){continue}const l=t!==null&&a<t?t:a;const u=e!==null&&o>e?e:o;if(n.call(this,l,u)===false){return false}}r.setUTCHours(0,0,0,0);r.setUTCDate(r.getUTCDate()+(s?1:-1))}}getWorkHours(t){if(this.isWeekend(t)||this.isHoliday(t)){return[]}return this.getWorkIntervals(t)}getWorkIntervals(t){const e=t.getFullYear();const s=t.getMonth();const n=t.getDate();const r=[];for(let t=0;t<this.workTime.length;t++){const i=this.workTime[t];r.push({startDate:new Date(e,s,n,i.start.hours,i.start.minutes),endDate:new Date(e,s,n,i.end.hours,i.end.minutes)})}return r}getWorkDayDuration(){const t=this.getWorkIntervals(new Date);let e=0;for(let s=0;s<t.length;s++){e+=t[s].endDate-t[s].startDate}return e}isWorkTime(t){if(this.isWeekend(t)||this.isHoliday(t)){return false}let e=null;this.processEachDay(t,null,true,((s,n)=>{e=t>=s&&t<=n;return false}));return e}isWeekend(t){return!!this.weekends[t.getUTCDay()]}isHoliday(t){return!!this.holidays[`${t.getUTCMonth()}_${t.getUTCDate()}`]}isWorkTimeCorrect(t){if(!t.length){return false}t.sort(((t,e)=>t.start.time-e.start.time));for(let e=0;e<t.length;e++){const s=t[e];if(s.start.hours<0||s.start.hours>23||s.end.hours<0||s.end.hours>24||s.start.minutes<0||s.start.minutes>59||s.end.minutes<0||s.end.minutes>59||s.start.time>s.end.time){return false}if(e>0){const n=t[e-1];if(n.end.time>s.start.time){return false}}}return true}}const i=new r;s.exports={Calendar:r,CalendarSettings:i}}));
//# sourceMappingURL=extension.map.js