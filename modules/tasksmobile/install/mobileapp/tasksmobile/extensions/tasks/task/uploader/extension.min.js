(()=>{class t{constructor(){this.queueKey="unattachedFiles";this.storage=Application.sharedStorage("TaskUploader")}get(){const t=this.storage.get(this.queueKey);if(typeof t==="string"){return JSON.parse(t)}return{}}set(t){this.storage.set(this.queueKey,JSON.stringify(t))}add(t,e){this.update(t,e)}update(t,e){const s=this.get();s[t]=e;this.set(s)}remove(t){if(this.has(t)){const e=this.get();delete e[t];this.set(e)}}has(t){const e=this.get();const s=Object.prototype.hasOwnProperty;return s.call(e,t)}isEmpty(){return Object.keys(this.get()).length<=0}clear(){this.set({})}}const e={};e.init=function(){console.log("TaskUploader.init");this.filesStorage=new TaskUploadFilesStorage;this.filesStorage.clear();this.unattachedFilesStorage=new t;this.unattachedFilesStorage.clear();this.isAttaching=false;this.releaseUnattachedFilesQueue();BX.addCustomEvent("onFileUploadStatusChanged",this.listener.bind(this))};e.listener=function(t,e,s){if(t===BX.FileUploadEvents.FILE_CREATED){if(s.indexOf("task-")!==0){return false}const t=e.result.data.file;t.extra.params=e.file.params;this.attachFile(s,t)}return true};e.attachFile=function(t,e){console.info("TaskUploader.attachFile:",[t,e]);if(this.isAttaching){if(!this.unattachedFilesStorage.has(t)){this.unattachedFilesStorage.add(t,e)}return}this.isAttaching=true;const s={data:{taskId:e.extra.params.taskId,fileId:e.id}};BX.ajax.runAction("tasks.task.files.attach",s).then((s=>this.onAjaxResponse(s,e,t))).catch((s=>this.onAjaxError(s,e,t)))};e.onAjaxResponse=function(t,e,s){if(t.status==="success"){this.onAjaxSuccess(t,e,s)}else{this.onAjaxError(t,e,s)}};e.onAjaxSuccess=function(t,e,s){const a=TaskUploaderEvents.FILE_SUCCESS_UPLOAD;const i={file:e,result:t.data};this.filesStorage.removeFiles([s]);this.unattachedFilesStorage.remove(s);FileUploadAgent.postFileEvent(a,i,s);this.isAttaching=false};e.onAjaxError=function(t,e,s){const a=TaskUploaderEvents.FILE_FAIL_UPLOAD;const i={file:e,errors:t.errors};this.filesStorage.removeFiles([s]);this.unattachedFilesStorage.remove(s);FileUploadAgent.postFileEvent(a,i,s);this.isAttaching=false};e.releaseUnattachedFilesQueue=function(){if(!this.unattachedFilesStorage.isEmpty()){const t=this.unattachedFilesStorage.get();Object.entries(t).forEach((([t,e])=>this.attachFile(t,e)))}setTimeout((()=>this.releaseUnattachedFilesQueue()),5e3)};e.init()})();
//# sourceMappingURL=extension.map.js