jn.define("bizproc/task/fields",((t,e,i)=>{const o=t("apptheme");const{PureComponent:l}=t("layout/pure-component");const{EntityManager:n}=t("layout/ui/entity-editor/manager");const{EventEmitter:d}=t("event-emitter");const{isFunction:s}=t("utils/object");class r extends l{constructor(t){super(t);this.uid=t.uid||Random.getString();this.customEventEmitter=d.createWithUid(this.uid);this.editor=null;this.handleChangeFields=this.handleChangeFields.bind(this);this.handleScrollToInvalidField=this.handleScrollToInvalidField.bind(this);this.handleScrollToFocusedField=this.handleScrollToFocusedField.bind(this)}componentDidMount(){this.customEventEmitter.on("UI.EntityEditor.Field::onChangeState",this.handleChangeFields);this.customEventEmitter.on("UI.EntityEditor::onScrollToInvalidField",this.handleScrollToInvalidField);this.customEventEmitter.on("UI.EntityEditor::onScrollToFocusedField",this.handleScrollToFocusedField)}componentWillUnmount(){this.customEventEmitter.off("UI.EntityEditor.Field::onChangeState",this.handleChangeFields);this.customEventEmitter.off("UI.EntityEditor::onScrollToInvalidField",this.handleScrollToInvalidField);this.customEventEmitter.off("UI.EntityEditor::onScrollToFocusedField",this.handleScrollToFocusedField)}async getData(){return new Promise(((t,e)=>{this.editor.getValuesToSave().then((e=>t(e))).catch((t=>e(t)))}))}isValid(){return this.editor.validate()}render(){return View({style:{borderRadius:12,borderWidth:1,borderColor:o.colors.bgSeparatorPrimary,backgroundColor:o.colors.bgContentSecondary}},n.create({uid:this.uid,layout:this.props.layout,editorProps:this.props.editor,isEmbedded:true,refCallback:t=>{this.editor=t}}))}handleChangeFields(){this.customEventEmitter.emit("TaskFields:onChangeFieldValue")}handleScrollToInvalidField(t){if(s(this.props.onScrollToInvalidField)){this.props.onScrollToInvalidField(t)}}handleScrollToFocusedField(t){if(s(this.props.onScrollToFocusedField)){this.props.onScrollToFocusedField(t)}}}i.exports={TaskFields:r}}));
//# sourceMappingURL=extension.map.js