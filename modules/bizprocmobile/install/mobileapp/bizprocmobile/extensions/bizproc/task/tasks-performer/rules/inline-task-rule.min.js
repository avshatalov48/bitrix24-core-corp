jn.define("bizproc/task/tasks-performer/rules/inline-task-rule",((t,s,n)=>{const{clone:o}=t("utils/object");const{useCallback:e}=t("utils/function");const{DefaultButton:i}=t("bizproc/task/task-constants");const{TaskButtons:u}=t("bizproc/task/buttons");const{Rule:l}=t("bizproc/task/tasks-performer/rules/rule");class a extends l{static isApplicable(t,s){if(t.length<=0){return false}const n=t[0].activity;for(const s of t){if(!s.isInline||s.activity!==n){return false}}return true}constructor(t){super(t);this.onTaskButtonClick=this.onTaskButtonClick.bind(this)}renderEntryPoint(){return new u({testId:"MBP_TASKS_PERFORMER_INLINE_TASK_RULE",shouldUseEvents:false,task:this.taskToShow,isInline:false,onTaskButtonClick:e(this.onTaskButtonClick)})}calculateEntryPointButtons(){return this.taskToShow?.buttons.length||0}get taskToShow(){const t=this.tasks?o(this.tasks[0]):null;if(t){t.buttons=t.buttons?o(t.buttons):[];if(t.buttons.length===2){t.buttons=[i.APPROVE,i.NON_APPROVE]}else if(t.buttons.length===1){t.buttons=[i.REVIEW]}}return t}onTaskButtonClick({taskRequest:t}){this.doTaskCollection(this.tasks,t).then((t=>{})).catch((t=>{}));this.onFinishRule()}}n.exports={InlineTaskRule:a}}));
//# sourceMappingURL=inline-task-rule.map.js