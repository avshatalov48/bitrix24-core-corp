jn.define("bizproc/task/tasks-performer/rules/rule",((t,s,e)=>{const{Type:o}=t("type");const{clone:n}=t("utils/object");const{useCallback:i}=t("utils/function");const{ButtonsWrapper:a,StartButton:r}=t("bizproc/task/buttons");const{TaskOpener:l}=t("bizproc/task/tasks-performer/rules/task-opener");class u{static isApplicable(t,s){return false}constructor(t={}){this.props=t;this.layout=t.layout;this.tasks=o.isArrayFilled(t.tasks)?n(t.tasks):null;this.uid="tasks-performer-rule";this.completedTasks=[];this.delegatedTasks=[];this.onStartButtonClick=this.onStartButtonClick.bind(this)}renderEntryPoint(){return a({},new r({style:{width:"100%"},onClick:i(this.onStartButtonClick),testId:"MBP_TASKS_PERFORMER_RULES_START_BUTTON"}))}calculateEntryPointButtons(){return 1}onStartButtonClick(){this.start().then((()=>{this.onFinishRule()})).catch((t=>{if(t){console.error(t)}this.onFinishRule(Boolean(t))}))}async start(){throw new Error('Method "start" must be implemented')}doTaskCollection(t,s){return new Promise(((e,o)=>{this.onTasksCompleted(t);const n=t.map((t=>t.id));BX.ajax.runAction("bizprocmobile.Task.doCollection",{json:{taskIds:n.map((t=>parseInt(t,10))),taskRequest:s}}).then(e).catch(o)}))}delegateTasks(t,s){return new Promise(((e,o)=>{this.onTasksDelegated(t);const n=t.map((t=>t.id));const i={taskIds:n,toUserId:s.toUserId,fromUserId:s.fromUserId};BX.ajax.runAction("bizproc.task.delegate",{data:i}).then(e).catch(o)}))}onFinishRule(t=false){if(o.isFunction(this.props.onFinishRule)){this.props.onFinishRule(this.completedTasks,this.delegatedTasks,t)}}async showTask(t){return new Promise(((s,e)=>{const o=new l({parentLayout:this.layout,widgetTitle:t.typeName,uid:this.uid,taskId:t.id,generateExitButton:this.generateExitButton});o.open().then((e=>{if(!e.doTaskRequest&&!e.delegateRequest&&!e.finishRule&&!e.taskNotFound){this.onTasksCancel([t])}if(e.doTaskRequest){this.onTasksCompleted([t])}if(e.delegateRequest){this.onTasksDelegated([t])}if(e.taskNotFound){this.onTaskNotFoundError([t])}s(e)})).catch(e)}))}onTasksCompleted(t){this.completedTasks.push(...t);if(o.isFunction(this.props.onTasksCompleted)){this.props.onTasksCompleted(t)}}onTasksDelegated(t){this.delegatedTasks.push(...t);if(o.isFunction(this.props.onTasksDelegated)){this.props.onTasksDelegated(t)}}onTasksCancel(t){if(o.isFunction(this.props.onTasksCancel)){this.props.onTasksCancel(t)}}onTaskNotFoundError(t){if(o.isFunction(this.props.onTaskNotFoundError)){this.props.onTaskNotFoundError(t)}}get generateExitButton(){return this.props.generateExitButton}}e.exports={Rule:u}}));
//# sourceMappingURL=rule.map.js