jn.define("disk/statemanager/redux/slices/files",((e,s,d)=>{const{isOffline:r}=e("device/connection");const{createSlice:t}=e("statemanager/redux/toolkit");const{ReducerRegistry:i}=e("statemanager/redux/reducer-registry");const{sliceName:a,fileListAdapter:n}=e("disk/statemanager/redux/slices/files/meta");const{rename:l,remove:o,move:c,copy:m}=e("disk/statemanager/redux/slices/files/thunk");const{renamePending:u,renameFulfilled:f,removePending:p,removeFulfilled:g,movePending:v,moveFulfilled:R,copyPending:y,copyFulfilled:F}=e("disk/statemanager/redux/slices/files/extra-reducer");const{FileModel:k}=e("disk/statemanager/redux/slices/files/model/file");const A=e=>e.map((e=>k.prepareReduxFileFromServerFile(e)));const x=t({name:a,initialState:n.getInitialState(),reducers:{filesUpsertedFromServer:{reducer:n.upsertMany,prepare:e=>({payload:A(e)})},filesAddedFromServer:{reducer:n.addMany,prepare:e=>({payload:A(e)})},filesUpserted:{reducer:n.upsertMany},filesAdded:{reducer:n.upsertMany},markAsRemoved:(e,{payload:s})=>{if(r()){return}const{objectId:d}=s;const t=e.entities[d];n.upsertOne(e,{...t,isRemoved:true})},unmarkAsRemoved:(e,{payload:s})=>{if(r()){return}const{objectId:d}=s;const t=e.entities[d];n.upsertOne(e,{...t,isRemoved:false})},setRights:(e,{payload:s})=>{const{objectId:d,rights:r}=s;const t=e.entities[d];n.upsertOne(e,{...t,rights:r})}},extraReducers:e=>{e.addCase(l.pending,u).addCase(l.fulfilled,f).addCase(o.pending,p).addCase(o.fulfilled,g).addCase(c.pending,v).addCase(c.fulfilled,R).addCase(m.pending,y).addCase(m.fulfilled,F)}});const{reducer:S,actions:C}=x;const{filesUpsertedFromServer:h,filesUpserted:U,filesAddedFromServer:M,filesAdded:j,markAsRemoved:I,unmarkAsRemoved:O,setRights:P}=C;i.register(a,S);d.exports={filesUpsertedFromServer:h,filesUpserted:U,filesAddedFromServer:M,filesAdded:j,markAsRemoved:I,unmarkAsRemoved:O,setRights:P}}));
//# sourceMappingURL=extension.map.js