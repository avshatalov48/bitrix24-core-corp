jn.define("disk/statemanager/redux/slices/files/observers/stateful-list",((e,t,s)=>{const{isEqual:d}=e("utils/object");const{selectEntities:o}=e("disk/statemanager/redux/slices/files/selector");const i=(e,t)=>{let s=o(e.getState());return e.subscribe((()=>{const d=o(e.getState());const{moved:i,removed:c,added:r,created:a}=n(s,d);if(i.length>0||c.length>0||r.length>0||a.length>0){t({moved:i,removed:c,added:r,created:a})}s=d}))};const n=(e,t)=>{const s=[];const o=[];const i=[];const n=[];if(e===t){return{moved:s,removed:o,added:i,created:n}}Object.values(t).forEach((t=>{if(!t.isRemoved){const s=e[t.id];if(!s||s.isRemoved){i.push(t)}}}));Object.values(e).forEach((e=>{if(!e.isRemoved){const s=t[e.id];if(!s||s.isRemoved||s.parentId!==e.parentId){o.push(s||e)}}}));const c=new Set([...o,...i].map((({id:e})=>e)));Object.values(t).forEach((t=>{const o=e[t.id];if(!o||c.has(t.id)){return}const{isRemoved:i,...n}=o;const{isRemoved:r,...a}=t;if(!d(n,a)){s.push(t)}}));return{moved:s,removed:o,added:i,created:n}};s.exports={observeListChange:i}}));
//# sourceMappingURL=extension.map.js