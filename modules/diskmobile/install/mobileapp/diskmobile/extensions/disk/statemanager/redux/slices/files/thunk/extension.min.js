jn.define("disk/statemanager/redux/slices/files/thunk",((e,o,t)=>{const n=e("statemanager/redux/store");const{createAsyncThunk:c}=e("statemanager/redux/toolkit");const{sliceName:s}=e("disk/statemanager/redux/slices/files/meta");const{selectById:i}=e("disk/statemanager/redux/slices/files/selector");const{RunActionExecutor:a}=e("rest/run-action-executor");const{isOnline:d}=e("device/connection");const r=()=>d();const m=({action:e,options:o})=>new Promise((t=>{new a(e,o).setHandler(t).call(false)}));const l=c(`${s}/rename`,(({objectId:e,newName:o})=>m({action:"disk.api.commonActions.rename",options:{objectId:e,newName:o,autoCorrect:true}})),{condition:r});const p=c(`${s}/remove`,(({objectId:e})=>m({action:"disk.api.commonActions.markDeleted",options:{objectId:e}})),{condition:r});const u=c(`${s}/move`,(({objectId:e,targetId:o})=>m({action:"disk.api.commonActions.move",options:{objectId:e,toFolderId:o}})),{condition:r});const I=c(`${s}/copy`,(({objectId:e,targetId:o})=>m({action:"disk.api.commonActions.copyTo",options:{objectId:e,toFolderId:o}})),{condition:r});t.exports={rename:l,remove:p,move:u,copy:I}}));
//# sourceMappingURL=extension.map.js