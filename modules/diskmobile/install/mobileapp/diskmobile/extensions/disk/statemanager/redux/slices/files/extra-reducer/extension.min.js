jn.define("disk/statemanager/redux/slices/files/extra-reducer",((e,t,n)=>{const{showErrorToast:s}=e("toast");const{fileListAdapter:o}=e("disk/statemanager/redux/slices/files/meta");const{FileModel:a}=e("disk/statemanager/redux/slices/files/model/file");const{Uuid:r}=e("utils/uuid");const d=(e,t)=>{const{objectId:n,newName:s}=t.meta.arg;const a=e.entities[n];t.meta.arg.oldName=a.name;if(a){o.upsertOne(e,{...a,name:s})}};const c=(e,t)=>{const{objectId:n,oldName:a}=t.meta.arg;const{errors:r}=t.payload;if(r&&r.length>0){const t=e.entities[n];if(t){o.upsertOne(e,{...t,name:a})}s(r[0])}};const i=(e,t)=>{const n=t.meta.arg.objectId;const s=e.entities[n];o.upsertOne(e,{...s,isRemoved:true})};const l=(e,t)=>{const n=t.meta.arg.objectId;const a=e.entities[n];const{errors:r}=t.payload;if(r&&r.length>0){o.upsertOne(e,{...a,isRemoved:false});s(r[0])}else{o.removeOne(e,n)}};const m=(e,t)=>{const{objectId:n,targetId:s}=t.meta.arg;const a=e.entities[n];t.meta.arg.oldParentId=a.parentId;o.upsertOne(e,{...a,parentId:s})};const g=(e,t)=>{const{objectId:n,onFulfilledSuccess:a}=t.meta.arg;const r=e.entities[n];const{errors:d}=t.payload;if(d&&d.length>0){o.upsertOne(e,{...r,parentId:t.meta.arg.oldParentId});s(d[0])}else{a?.()}};const u=(e,t)=>{const{objectId:n,targetId:s}=t.meta.arg;const a=e.entities[n];const d=r.getV4();t.meta.arg.newObjectId=d;o.upsertOne(e,{...a,id:d,parentId:s})};const p=(e,t)=>{const{newObjectId:n,onFulfilledSuccess:r}=t.meta.arg;const{errors:d}=t.payload;if(d&&d.length>0){o.removeOne(e,n);s(d[0])}else{const s=a.prepareReduxFileFromServerFile(t.payload.data.object);o.updateOne(e,{id:n,changes:s});r?.()}};n.exports={renamePending:d,renameFulfilled:c,removePending:i,removeFulfilled:l,movePending:m,moveFulfilled:g,copyPending:u,copyFulfilled:p}}));
//# sourceMappingURL=extension.map.js