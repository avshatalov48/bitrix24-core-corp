jn.define("disk/user-actions/open-chat",((e,s,t)=>{const{Alert:o}=e("alert");const{Loc:a}=e("loc");const n=e("statemanager/redux/store");const{selectById:r}=e("disk/statemanager/redux/slices/files/selector");let i=null;let c=null;const l=async(e,s)=>{try{await _();const t=await d(s);await g(e,t);c.open({dialogId:t})}catch(e){console.error(e);o.alert(a.getMessage("M_DISK_USER_ACTIONS_CHOOSE_CHAT_ERROR_TITLE"),a.getMessage("M_DISK_USER_ACTIONS_CHOOSE_CHAT_ERROR_TEXT"),(()=>{}),a.getMessage("M_DISK_USER_ACTIONS_CHOOSE_CHAT_ERROR_OK"))}};const _=async()=>{const e=await Promise.all([requireLazy("im:messenger/api/dialog-selector"),requireLazy("im:messenger/api/dialog-opener",false)]);i=e[0]?.DialogSelector;c=e[1]?.DialogOpener};const d=async e=>{const s=new i;const t={title:a.getMessage("M_DISK_USER_ACTIONS_CHOOSE_CHAT"),layout:e};const{dialogId:o}=await s.show(t);return o};const g=async(e,s)=>{const t={dialogId:s,fields:{message:O(e)}};return BX.ajax.runAction("im.v2.Chat.Message.send",{data:t})};const O=e=>{const s=r(n.getState(),e);if(s?.isFolder){throw new Error(`Object ${e} is directory`)}if(!s?.links?.showInGrid){throw new Error(`File ${e} not found in redux store`)}return`${currentDomain}${s.links.showInGrid}&cmd=show`};t.exports={openChat:l}}));
//# sourceMappingURL=extension.map.js