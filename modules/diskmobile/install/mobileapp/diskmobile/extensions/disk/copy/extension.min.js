jn.define("disk/copy",((e,t,s)=>{const{Loc:o}=e("loc");const{DirectorySelector:n}=e("selector/widget/entity/tree-selectors/directory-selector");const c=e("statemanager/redux/store");const{dispatch:a}=c;const{copy:r}=e("disk/statemanager/redux/slices/files/thunk");const{selectById:i}=e("disk/statemanager/redux/slices/files/selector");const{selectById:d}=e("disk/statemanager/redux/slices/storages");const{showToast:l}=e("toast");const{openFolder:g}=e("disk/opener/folder");const{fetchObjectWithRights:S}=e("disk/rights");function _(e,t,s,a=PageManager){const r=i(c.getState(),e);const d=new n({widgetParams:{backdrop:{mediumPositionPercent:70,horizontalSwipeAllowed:false},sendButtonName:o.getMessage("M_DISK_COPY_SELECTOR_BUTTON")},allowMultipleSelection:false,closeOnSelect:false,events:{onClose:({parentItem:t})=>{const o=t.rootObjectId||t.id;O(e,o,{context:s,parentWidget:a})}},provider:{storageId:s.storageId||r.storageId,options:{showDirectoriesOnly:false,canSelectFiles:false,order:t,context:s}}});d.getSelector().show({},a)}async function O(e,t,s){const n=i(c.getState(),e);const _=await S(t);if(!_){return}let O=_.name;if(_.parentId===0){const e=d(c.getState(),_.storageId);if(e.type==="user"){O=o.getMessage("M_DISK_COPY_MY_STORAGE_NAME")}}if(_.rights.canAdd===false){l({message:o.getMessage("M_DISK_COPY_ACCESS_DENIED_TOAST_MESSAGE",{"#FOLDER#":O})},s.parentWidget);return}a(r({objectId:e,targetId:_.id,onFulfilledSuccess:()=>{const e=n.typeFile?"M_DISK_COPY_FILE_TOAST_MESSAGE":"M_DISK_COPY_FOLDER_TOAST_MESSAGE";l({message:o.getMessage(e,{"#FOLDER#":O}),buttonText:o.getMessage("M_DISK_COPY_TOAST_BUTTON"),onButtonTap:()=>{g(_.id,s.context,s.parentWidget).catch((e=>console.error(e)))}},s.parentWidget)}}))}s.exports={copyObject:_}}));
//# sourceMappingURL=extension.map.js