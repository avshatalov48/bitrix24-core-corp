this.BX=this.BX||{};this.BX.BIConnector=this.BX.BIConnector||{};this.BX.BIConnector.EntityEditor=this.BX.BIConnector.EntityEditor||{};(function(t,e,i){"use strict";let n=t=>t,a,s,l,r,d,o,c;class u extends BX.UI.EntityEditorList{constructor(t,e){super();this.dateSelectorBlock=null;this.toInput=null;this.startInput=null}static create(t,e){const i=new this(t,e);i.initialize(t,e);return i}static layout(t={}){super.layout()}createTitleNode(){return e.Tag.render(a||(a=n`<span></span>`))}layout(t){super.layout(t);this.layoutRangeField(this.getValue()===u.RANGE_VALUE)}onItemSelect(t,e){this.layoutRangeField(e.value===u.RANGE_VALUE);super.onItemSelect(t,e)}layoutRangeField(t){if(t){e.Dom.removeClass(this._selectContainer,"ui-ctl-w100");e.Dom.addClass(this._innerWrapper,"ui-entity-editor-content-block__range");e.Dom.addClass(this._selectContainer,"ui-ctl-date-range");this.dateSelectorBlock=e.Tag.render(s||(s=n`<div class="ui-ctl-dropdown-range-group"></div>`));const t=e.Text.encode(this.getModel().getField(this.getDateStartFieldName()));this.startInput=e.Tag.render(l||(l=n`<input class="ui-ctl-element" type="text" value="${0}" name="${0}">`),t,this.getDateStartFieldName());e.Event.bind(this.startInput,"click",(()=>{u.showCalendar(this.startInput)}));e.Event.bind(this.startInput,"change",(()=>{this.markAsChanged()}));e.Event.bind(this.startInput,"input",(()=>{this.markAsChanged()}));e.Dom.append(e.Tag.render(r||(r=n`
					<div class="ui-ctl ui-ctl-before-icon ui-ctl-datetime">
						<div class="ui-ctl-before ui-ctl-icon-calendar"></div>
						${0}				
					</div>
				`),this.startInput),this.dateSelectorBlock);e.Dom.append(e.Tag.render(d||(d=n`
					<div class="ui-ctl-dropdown-range-line">
						<span class="ui-ctl-dropdown-range-line-item"></span>
					</div>
				`)),this.dateSelectorBlock);const i=e.Text.encode(this.getModel().getField(this.getDateEndFieldName()));this.endInput=e.Tag.render(o||(o=n`<input class="ui-ctl-element" type="text" value="${0}" name="${0}">`),i,this.getDateEndFieldName());e.Event.bind(this.endInput,"click",(()=>{u.showCalendar(this.endInput)}));e.Event.bind(this.endInput,"change",(()=>{this.markAsChanged()}));e.Event.bind(this.endInput,"input",(()=>{this.markAsChanged()}));e.Dom.append(e.Tag.render(c||(c=n`
					<div class="ui-ctl ui-ctl-before-icon ui-ctl-datetime">
						<div class="ui-ctl-before ui-ctl-icon-calendar"></div>
						${0}
					</div>
				`),this.endInput),this.dateSelectorBlock);e.Dom.append(this.dateSelectorBlock,this._innerWrapper)}else{if(this.dateSelectorBlock!==null){e.Dom.remove(this.dateSelectorBlock);this.dateSelectorBlock=null;this.startInput=null;this.endInput=null}e.Dom.addClass(this._selectContainer,"ui-ctl-w100");e.Dom.removeClass(this._innerWrapper,"ui-entity-editor-content-block__range");e.Dom.removeClass(this._selectContainer,"ui-ctl-date-range")}}getDateStartFieldName(){var t;return(t=this._schemeElement.getData().dateStartFieldName)!=null?t:"DATE_FILTER_START"}getDateEndFieldName(){var t;return(t=this._schemeElement.getData().dateEndFieldName)!=null?t:"DATE_FILTER_END"}save(){super.save();this._model.setField(this.getDateStartFieldName(),null);this._model.setField(this.getDateEndFieldName(),null);if(e.Type.isDomNode(this.endInput)){this._model.setField(this.getDateEndFieldName(),this.endInput.value)}if(e.Type.isDomNode(this.startInput)){this._model.setField(this.getDateStartFieldName(),this.startInput.value)}}static showCalendar(t){BX.calendar({node:t,field:t,bTime:false,bSetFocus:false})}}u.RANGE_VALUE="range";class h{constructor(t="BX.UI.EntityEditorControlFactory"){i.EventEmitter.subscribe(t+":onInitialize",(t=>{const[,e]=t.getCompatData();e.methods["dashboardSettings"]=this.factory.bind(this)}))}factory(t,e,i){if(t==="timePeriod"){return u.create(e,i)}return null}}t.SettingsDateFilterField=u;t.SettingsDateFilterFieldFactory=h})(this.BX.BIConnector.EntityEditor.Field=this.BX.BIConnector.EntityEditor.Field||{},BX,BX.Event);
//# sourceMappingURL=settings-date-filter.bundle.map.js