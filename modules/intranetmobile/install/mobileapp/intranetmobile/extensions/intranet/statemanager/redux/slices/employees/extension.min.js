jn.define("intranet/statemanager/redux/slices/employees",((e,d,r)=>{const{sliceName:t,userListAdapter:a}=e("intranet/statemanager/redux/slices/employees/meta");const{ReducerRegistry:s}=e("statemanager/redux/reducer-registry");const{createSlice:n}=e("statemanager/redux/toolkit");const{confirmUserRequest:i,deleteInvitation:l,fireEmployee:c,hireEmployee:o,reinvite:p,reinviteWithChangeContact:u,changeDepartment:m}=e("intranet/statemanager/redux/slices/employees/thunk");const{deleteInvitationPending:g,deleteInvitationFulfilled:f,deleteInvitationRejected:y,fireEmployeePending:C,fireEmployeeFulfilled:R,fireEmployeeRejected:j,hireEmployeePending:x,hireEmployeeFulfilled:U,hireEmployeeRejected:v,confirmUserRequestPending:h,confirmUserRequestFulfilled:E,confirmUserRequestRejected:F,reinvitePending:I,reinviteRejected:P,changeDepartmentPending:S}=e("intranet/statemanager/redux/slices/employees/extra-reducer");const{IntranetUserModel:q}=e("intranet/statemanager/redux/slices/employees/model/user");const A=n({name:t,initialState:a.getInitialState(),reducers:{usersUpserted:{reducer:a.upsertMany,prepare:e=>({payload:e.map((e=>q.prepareReduxUserFromServerUser(e)))})},usersAdded:{reducer:a.addMany,prepare:e=>({payload:e.map((e=>q.prepareReduxUserFromServerUser(e)))})}},extraReducers:e=>{e.addCase(p.pending,I).addCase(p.rejected,P).addCase(u.pending,I).addCase(u.rejected,P).addCase(l.pending,g).addCase(l.fulfilled,f).addCase(l.rejected,y).addCase(c.pending,C).addCase(c.fulfilled,R).addCase(c.rejected,j).addCase(o.pending,x).addCase(o.fulfilled,U).addCase(o.rejected,v).addCase(i.pending,h).addCase(i.fulfilled,E).addCase(i.rejected,F).addCase(m.pending,S)}});const{reducer:M,actions:k}=A;const{usersUpserted:D,usersAdded:L}=k;s.register(t,M);r.exports={usersUpserted:D,usersAdded:L}}));
//# sourceMappingURL=extension.map.js