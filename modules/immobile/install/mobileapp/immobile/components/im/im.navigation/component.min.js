"use strict";(()=>{console.log("Navigation is loaded.");const{EntityReady:t}=jn.require("entity-ready");class e{constructor(){this.isReady=false;t.addCondition("im.navigation",(()=>this.isReady));this.firstSetBadge=true;this.counters={};this.currentTab=BX.componentParameters.get("firstTabId","chats");this.previousTab="none";this.tabMapping={chats:"im.messenger",openlines:"im.openlines.recent",notifications:"im.notify"};this.componentMapping=null;tabs.on("onTabSelected",this.onTabSelected.bind(this));BX.addCustomEvent("onTabChange",this.onTabChange.bind(this));BX.addCustomEvent("ImRecent::counter::list",this.onUpdateCounters.bind(this));BX.addCustomEvent("onUpdateCounters",this.onUpdateCounters.bind(this));BX.postComponentEvent("requestCounters",[{component:"im.navigation"}],"communication");t.ready("im.navigation");this.isReady=true}onTabChange(t){if(t==="none"||this.currentTab===t){return}if(!PageManager.getNavigator().isActiveTab()){PageManager.getNavigator().makeTabActive()}BX.onViewLoaded((()=>{console.log("onTabChange","change tab",t);const e=this.currentTab;tabs.setActiveItem(t);this.currentTab=tabs.getCurrentItem();if(this.currentTab!==e){this.previousTab=e}}))}onTabSelected(t,e){if(!e){console.log("onTabSelected","select active element",this.currentTab);return true}this.previousTab=this.currentTab;this.currentTab=t.id;console.warn("onTabSelected","select element",{current:this.currentTab,previous:this.previousTab})}onUpdateCounters(t,e){let n=false;let i=Object.assign({},t);for(let t in i){if(!i.hasOwnProperty(t)){continue}i[t]=Number(i[t]);if(Number.isNaN(i[t])){continue}if(this.counters[t]==i[t]){continue}this.counters[t]=i[t];n=true}if(n){this.updateCounters(e===false)}}getComponentCodeByTab(t){return this.tabMapping[t]}getTabCodeByComponent(t){if(this.componentMapping){return this.componentMapping[t]}for(const t in this.tabMapping){if(!this.tabMapping.hasOwnProperty(t)){continue}const e=this.tabMapping[t];this.componentMapping[e]=t}return this.componentMapping[t]}updateCounters(t){if(t&&!this.firstSetBadge){if(!this.updateCountersTimeout){this.updateCountersTimeout=setTimeout(this.update.bind(this),300)}return true}this.firstSetBadge=true;clearTimeout(this.updateCountersTimeout);this.updateCountersTimeout=null;console.info("AppCounters.update: update counters:",this.counters);["chats","openlines","notifications"].forEach((t=>{const e=this.counters[t]?this.counters[t]:0;tabs.updateItem(t,{counter:e,label:e?e.toString():""})}))}}window.Navigation=new e})();
//# sourceMappingURL=component.map.js