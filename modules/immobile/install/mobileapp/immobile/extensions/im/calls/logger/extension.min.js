(function(){class e{constructor(e,t){this.serviceUrl=e;this.token=t;this.socket=null;this.attempt=0;this.reconnectTimeout=null;this.unsentMessages=[];this.onSocketOpenHandler=this.onSocketOpen.bind(this);this.onSocketCloseHandler=this.onSocketClose.bind(this);this.onSocketErrorHandler=this.onSocketError.bind(this);Object.defineProperty(this,"isConnected",{get:function(){return this.socket&&this.socket.readyState===1}});this.connect()}log(e){if(typeof e!="string"){console.error("Message should be string");return}if(this.isConnected){this.socket.send(JSON.stringify({action:"log",message:e}))}else{this.unsentMessages.push(e)}}connect(){if(this.socket){return}if(!this.serviceUrl){console.error("Logging service url is empty");return}if(!this.serviceUrl.startsWith("ws://")&&!this.serviceUrl.startsWith("wss://")){console.error("Logging service url should start with ws:// or wss://");return}if(!this.token){console.error("Logging token is empty");return}this.attempt++;this.socket=new WebSocket(this.serviceUrl+"?token="+this.token);this.bindSocketEvents()}scheduleReconnect(){clearTimeout(this.reconnectTimeout);if(this.attempt>3){console.error("Could not connect to the logging service, giving up");return}this.reconnectTimeout=setTimeout(this.connect.bind(this),this.getConnectionDelay(this.attempt)*1e3)}getConnectionDelay(e){switch(e){case 0:case 1:return 15;case 2:return 30;default:return 60}}disconnect(){clearTimeout(this.reconnectTimeout);if(this.socket){this.removeSocketEvents();this.socket.close(1e3);this.socket=null}}bindSocketEvents(){this.socket.addEventListener("open",this.onSocketOpenHandler);this.socket.addEventListener("close",this.onSocketCloseHandler);this.socket.addEventListener("error",this.onSocketErrorHandler)}removeSocketEvents(){this.socket.removeEventListener("open",this.onSocketOpenHandler);this.socket.removeEventListener("close",this.onSocketCloseHandler);this.socket.removeEventListener("error",this.onSocketErrorHandler)}onSocketOpen(){this.attempt=0;for(var e=0;e<this.unsentMessages.length;e++){this.socket.send(JSON.stringify({action:"log",message:this.unsentMessages[e]}))}this.unsentMessages=[]}onSocketClose(){this.socket=null;this.scheduleReconnect()}onSocketError(e){console.error("socket error",e);this.socket=null;this.scheduleReconnect()}destroy(){this.disconnect();this.unsentMessages=null}}window.CallLogger=e})();
//# sourceMappingURL=extension.map.js