"use strict";(function(){const e=currentDomain+"/bitrix/mobileapp/immobile/extensions/im/calls/controller/";class t{constructor(){this.callView=null;this.callViewPromise=null;this._currentCall=null;Object.defineProperty(this,"currentCall",{get:()=>this._currentCall,set:e=>{if(this._currentCall!=e){BX.postComponentEvent("CallEvents::hasActiveCall",[!!e],"communication");this._currentCall=e}}});this.childCall=null;this.callStartTime=null;this.callTimerInterval=null;this.callWithLegacyMobile=false;this.nativeCall=null;this.chatCounter=0;this.callVideoEnabled=false;this.skipNextDeviceChangeEvent=false;this.onCallUserInvitedHandler=this.onCallUserInvited.bind(this);this.onCallUserStateChangedHandler=this.onCallUserStateChanged.bind(this);this.onCallUserMicrophoneStateHandler=this.onCallUserMicrophoneState.bind(this);this.onCallUserScreenStateHandler=this.onCallUserScreenState.bind(this);this.onCallUserVideoPausedHandler=this.onCallUserVideoPaused.bind(this);this.onCallUserVoiceStartedHandler=this.onCallUserVoiceStarted.bind(this);this.onCallUserVoiceStoppedHandler=this.onCallUserVoiceStopped.bind(this);this.onCallUserFloorRequestHandler=this.onCallUserFloorRequest.bind(this);this.onCallUserEmotionHandler=this.onCallUserEmotion.bind(this);this.onCallLocalMediaReceivedHandler=this.onCallLocalMediaReceived.bind(this);this.onCallLocalMediaStoppedHandler=this.onCallLocalMediaStopped.bind(this);this.onCallRTCStatsReceivedHandler=this.onCallRTCStatsReceived.bind(this);this.onCallCallFailureHandler=this.onCallCallFailure.bind(this);this.onCallStreamReceivedHandler=this.onCallStreamReceived.bind(this);this.onCallStreamRemovedHandler=this.onCallStreamRemoved.bind(this);this.onCallJoinHandler=this.onCallJoin.bind(this);this.onCallLeaveHandler=this.onCallLeave.bind(this);this.onCallDestroyHandler=this.onCallDestroy.bind(this);this.onChildCallFirstStreamHandler=this.onChildCallFirstStream.bind(this);this.onMicButtonClickHandler=this.onMicButtonClick.bind(this);this.onFloorRequestButtonClickHandler=this.onFloorRequestButtonClick.bind(this);this.onCameraButtonClickHandler=this.onCameraButtonClick.bind(this);this.onReplaceCameraClickHandler=this.onReplaceCameraClick.bind(this);this.onChatButtonClickHandler=this.onChatButtonClick.bind(this);this.onPrivateChatButtonClickHandler=this.onPrivateChatButtonClick.bind(this);this.onAnswerButtonClickHandler=this.onAnswerButtonClick.bind(this);this.onHangupButtonClickHandler=this.onHangupButtonClick.bind(this);this.onDeclineButtonClickHandler=this.onDeclineButtonClick.bind(this);this.onSetCentralUserHandler=this.onSetCentralUser.bind(this);this.onSelectAudioDeviceHandler=this.onSelectAudioDevice.bind(this);this.onNativeCallAnsweredHandler=this.onNativeCallAnswered.bind(this);this.onNativeCallEndedHandler=this.onNativeCallEnded.bind(this);this.onNativeCallMutedHandler=this.onNativeCallMuted.bind(this);this.onNativeCallVideoIntentHandler=this.onNativeCallVideoIntent.bind(this);this._nativeAnsweredAction=null;this.ignoreNativeCallAnswer=false;this.onProximitySensorDebounced=CallUtil.debounce(this.onProximitySensor.bind(this),500);this.onAudioDeviceChangedDebounced=CallUtil.debounce(this.onAudioDeviceChanged.bind(this),100);this.init()}init(){BX.addCustomEvent("onCallInvite",this.onCallInvite.bind(this));BX.addCustomEvent("CallEvents::incomingCall",this.onIncomingCall.bind(this));BX.addCustomEvent("CallEvents::joinCall",this.onJoinCall.bind(this));BX.addCustomEvent("onAppActive",this.onAppActive.bind(this));BX.addCustomEvent("onAppPaused",this.onAppPaused.bind(this));BX.addCustomEvent("ImRecent::counter::messages",this.onImMessagesCounter.bind(this));BX.addCustomEvent("CallEvents::openVideoConf",this.openVideoConf.bind(this));BX.PULL.subscribe({type:"server",moduleId:"im",command:"callUserNameUpdate",callback:this.onCallUserNameUpdate.bind(this)});device.on("proximityChanged",this.onProximitySensorDebounced);JNVIAudioManager.on("changed",this.onAudioDeviceChangedDebounced)}onCallInvite(e){let t,l;if("dialogId"in e){if(e.dialogId.startsWith("chat")){l=e.chatData||{}}else{l=e.userData&&e.userData[e.dialogId]||{}}t=e.dialogId}else if("userId"in e){l=e.userData&&e.userData[e.userId]||{};t=e.userId}else{CallUtil.error("Can not start call. No userId or dialogId in event");navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#","E001"));return}let{name:i,avatar:a,color:n}=l;a=decodeURI(a);this.startCall(t,e.video,{name:i,avatar:a,color:n})}maybeShowLocalVideo(e){return new Promise(((t,l)=>{if(!e){return t()}if(!this.callView){return}MediaDevices.getUserMedia({audio:true,video:true}).then((e=>{this.callView.setVideoStream(env.userId,e,MediaDevices.cameraDirection==="front");t()})).catch((e=>l(e)))}))}startCall(e,t,l={}){if(!CallUtil.isDeviceSupported()){CallUtil.error(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));navigator.notification.alert(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));return}if(this.callView||this.currentCall){return}e=e.toString();let i=BX.Call.Provider.Plain;let a=e.toString().substr(0,4)==="chat";if(callEngine.isCallServerAllowed()&&a){i=BX.Call.Provider.Voximplant}this.requestDeviceAccess(t).then((()=>this.openCallView({status:"outgoing",isGroupCall:a,associatedEntityName:l.name,associatedEntityAvatar:l.avatar,associatedEntityAvatarColor:l.color,cameraState:t,chatCounter:this.chatCounter}))).then((()=>{BX.postComponentEvent("CallEvents::viewOpened",[]);BX.postWebEvent("CallEvents::viewOpened",{});this.bindViewEvents();media.audioPlayer().playSound("call_start");return this.maybeShowLocalVideo(t&&!a)})).then((()=>callEngine.createCall({entityType:"chat",entityId:e,provider:i,videoEnabled:!!t,joinExisting:a}))).then((e=>{this.currentCall=e.call;this.bindCallEvents();callInterface.indicator().setMode("outgoing");device.setIdleTimerDisabled(true);device.setProximitySensorEnabled(true);this.callView.appendUsers(this.currentCall.getUsers());CallUtil.getUsers(this.currentCall.id,this.getCallUsers(true)).then((e=>this.callView.updateUserData(e)));media.audioPlayer().playSound("call_outgoing",10);if(e.isNew){this.currentCall.inviteUsers()}else{this.callView.setState({status:"call"});this.currentCall.answer({useVideo:t})}})).catch((e=>{CallUtil.error(e);if(e instanceof DeviceAccessError){CallUtil.showDeviceAccessConfirm(t,(()=>Application.openSettings()))}else if(e instanceof CallJoinedElseWhereError){navigator.notification.alert(BX.message("MOBILE_CALL_ALREADY_JOINED"))}else if("code"in e&&e.code==="ALREADY_FINISHED"){navigator.notification.alert("MOBILE_CALL_ALREADY_FINISHED")}else{navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#","E004"))}this.clearEverything()}))}joinCall(e,t){if(this.callView||this.currentCall){return}this.requestDeviceAccess(t).then((()=>callEngine.getCallWithId(e))).then((e=>{this.currentCall=e.call;device.setIdleTimerDisabled(true);device.setProximitySensorEnabled(true);return this.openCallView({status:"call",chatCounter:this.chatCounter})})).then((()=>{if(!this.currentCall){this.clearEverything();return}this.bindViewEvents();this.callView.appendUsers(this.currentCall.getUsers());if(this.getCallUsers(true).length>this.getMaxActiveMicrophonesCount()){this.currentCall.setMuted(true);this.callView.setMuted(true)}CallUtil.getUsers(this.currentCall.id,this.getCallUsers(true)).then((e=>this.callView.updateUserData(e)));this.bindCallEvents();this.currentCall.answer({useVideo:!!t})})).catch((e=>{CallUtil.error(e);if(e.code&&e.code=="ALREADY_FINISHED"){navigator.notification.alert(BX.message("MOBILE_CALL_ALREADY_FINISHED"))}else if(e instanceof CallJoinedElseWhereError){navigator.notification.alert(BX.message("MOBILE_CALL_ALREADY_JOINED"))}else if(e instanceof DeviceAccessError){CallUtil.showDeviceAccessConfirm(t,(()=>Application.openSettings()))}else{navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#","E004"))}}))}onIncomingCall(e){CallUtil.warn("incoming.call",e);if(!CallUtil.isDeviceSupported()){navigator.notification.alert(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));return}const t=callEngine.calls[e.callId];this.callWithLegacyMobile=e.isLegacyMobile===true;if(t instanceof CallStub){CallUtil.error("This call is already finished");return}if(this.currentCall){if(this.currentCall.id==t.id){}else if(this.currentCall.id==t.parentId){if(!this.childCall){this.childCall=t;this.childCall.users.forEach((e=>this.callView.addUser(e,BX.Call.UserState.Calling)));if(e.userData){this.callView.updateUserData(e.userData)}this.answerChildCall()}}else{CallUtil.warn("can't participate in two calls");t.decline(486)}return}if(this.callView){CallUtil.error("call view already exists");return}if(t.associatedEntity.type==="chat"&&t.associatedEntity.advanced["chatType"]==="videoconf"){CallUtil.error("conferences are not supported yet");return}const l=e.video===true;this.currentCall=callEngine.calls[t.id];if("callservice"in window){const e=callservice.currentCall();if(e&&e.params.type==="internal"&&e.params.call.ID==t.id){this.nativeCall=e;if(Application.isBackground()){CallUtil.warn("Waking up p&p");CallUtil.forceBackgroundConnectPull(10).then((()=>{if(this.currentCall){this.currentCall.repeatAnswerEvents();CallUtil.warn("checking self state");callEngine.getRestClient().callMethod("im.call.getUserState",{callId:this.currentCall.id}).then((e=>{let t=e.data();let l=t.STATE;if(Application.isBackground()&&l!=="calling"){this.clearEverything()}})).catch((e=>{CallUtil.error(e);if(Application.isBackground()){Application.isBackground()}}))}})).catch((e=>{CallUtil.error("Could not connect to p&p",e);this.clearEverything()}))}}}device.setIdleTimerDisabled(true);device.setProximitySensorEnabled(true);this.bindCallEvents();this.bindNativeCallEvents();this.currentCall.setVideoEnabled(l);this.showIncomingCall({video:l,viewStatus:e.autoAnswer?"call":"incoming"}).then((()=>{CallUtil.warn("showIncomingCall success");if(this.currentCall&&e.autoAnswer){CallUtil.warn("auto-answer A");this.onAnswerButtonClick(l)}if(this.nativeCall&&this.nativeCall.connected&&!this.callAnswered){CallUtil.warn("Native call is connected, but we did not receive answered event.");this.answerCurrentCall(this.nativeCall.params.video)}})).catch((e=>{CallUtil.error(e);this.clearEverything()}))}answerCurrentCall(e){media.audioPlayer().stopPlayingSound();if(!this.currentCall){CallUtil.error("no call to answer");this.clearEverything();return}this.currentCall.setVideoEnabled(e);if(this.callAnswered){CallUtil.log("Call already answered")}this.callAnswered=true;this.requestDeviceAccess(e).then((()=>{this.currentCall.answer({useVideo:e});this.callView.setState({status:"connecting"});if(this.getCallUsers(true).length>this.getMaxActiveMicrophonesCount()){this.currentCall.setMuted(true);this.callView.setMuted(true)}})).catch((t=>{CallUtil.error(t);if(t instanceof DeviceAccessError){if(this.currentCall){this.currentCall.decline()}CallUtil.showDeviceAccessConfirm(e,(()=>Application.openSettings()),(()=>{}))}else if(t instanceof CallJoinedElseWhereError){navigator.notification.alert(BX.message("MOBILE_CALL_ALREADY_JOINED"))}else{navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#","E006"))}this.clearEverything()}))}answerChildCall(){this.removeCallEvents();this.childCall.on(BX.Call.Event.onStreamReceived,this.onChildCallFirstStreamHandler);this.childCall.on(BX.Call.Event.onLocalMediaReceived,this.onCallLocalMediaReceivedHandler);this.childCall.answer({useVideo:this.currentCall.isVideoEnabled()})}showIncomingCall(e){return new Promise(((t,l)=>{if(typeof e!="object"){e={}}e.video=e.video===true;this.openCallView({status:e.viewStatus||"incoming",isGroupCall:"id"in this.currentCall.associatedEntity&&this.currentCall.associatedEntity.id.startsWith("chat"),associatedEntityName:this.currentCall.associatedEntity.name,associatedEntityAvatar:this.currentCall.associatedEntity.avatar?CallUtil.makeAbsolute(this.currentCall.associatedEntity.avatar):"",associatedEntityAvatarColor:this.currentCall.associatedEntity.avatarColor,isVideoCall:e.video,cameraState:false,chatCounter:this.chatCounter}).then((()=>{if(!this.currentCall){return l("ALREADY_FINISHED")}media.audioPlayer().playSound("call_incoming",10);callInterface.indicator().setMode("incoming");this.bindViewEvents();let i=this.currentCall.getUsers();for(let e in i){this.callView.addUser(e,i[e])}BX.rest.callMethod("im.call.getUsers",{callId:this.currentCall.id,AVATAR_HR:"Y"}).then((e=>{if(this.callView){this.callView.updateUserData(e.data())}}));if(e.video&&this.currentCall&&this.currentCall.getLocalMedia){this.requestDeviceAccess(true).then((()=>{this.currentCall.getLocalMedia()})).catch((t=>{CallUtil.error(t);if(t instanceof DeviceAccessError){CallUtil.showDeviceAccessConfirm(e.video,(()=>Application.openSettings()))}}))}t()}))}))}onJoinCall(e){if(!CallUtil.isDeviceSupported()){navigator.notification.alert(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));return}if(this.currentCall){if(this.currentCall.id==e){this.unfold()}else{CallUtil.error("cannot join 2 calls yet")}}else{navigator.notification.confirm("",(t=>{if(t==4){return}if(t==3){BX.postComponentEvent("ImMobile.Messenger.Dialog:open",[{dialogId:this.currentCall.associatedEntity.id}],"im.messenger");return}this.joinCall(e,t==1)}),BX.message("MOBILE_CALL_JOIN_GROUP_CALL"),[BX.message("MOBILE_CALL_WITH_VIDEO"),BX.message("MOBILE_CALL_WITHOUT_VIDEO"),BX.message("MOBILE_CALL_OPEN_CHAT"),BX.message("MOBILE_CALL_MICROPHONE_CANCEL")])}}bindViewEvents(){if(!this.callView){return}this.callView.on(CallLayout.Event.MicButtonClick,this.onMicButtonClickHandler);this.callView.on(CallLayout.Event.CameraButtonClick,this.onCameraButtonClickHandler);this.callView.on(CallLayout.Event.ReplaceCamera,this.onReplaceCameraClickHandler);this.callView.on(CallLayout.Event.FloorRequestButtonClick,this.onFloorRequestButtonClickHandler);this.callView.on(CallLayout.Event.ChatButtonClick,this.onChatButtonClickHandler);this.callView.on(CallLayout.Event.PrivateChatButtonClick,this.onPrivateChatButtonClickHandler);this.callView.on(CallLayout.Event.AnswerButtonClick,this.onAnswerButtonClickHandler);this.callView.on(CallLayout.Event.HangupButtonClick,this.onHangupButtonClickHandler);this.callView.on(CallLayout.Event.DeclineButtonClick,this.onDeclineButtonClickHandler);this.callView.on(CallLayout.Event.SetCentralUser,this.onSetCentralUserHandler);this.callView.on(CallLayout.Event.SelectAudioDevice,this.onSelectAudioDeviceHandler)}removeViewEvents(){if(!this.callView){return}this.callView.off(CallLayout.Event.MicButtonClick,this.onMicButtonClickHandler);this.callView.off(CallLayout.Event.CameraButtonClick,this.onCameraButtonClickHandler);this.callView.off(CallLayout.Event.ReplaceCamera,this.onReplaceCameraClickHandler);this.callView.off(CallLayout.Event.FloorRequestButtonClick,this.onFloorRequestButtonClickHandler);this.callView.off(CallLayout.Event.ChatButtonClick,this.onChatButtonClickHandler);this.callView.off(CallLayout.Event.PrivateChatButtonClick,this.onPrivateChatButtonClickHandler);this.callView.off(CallLayout.Event.AnswerButtonClick,this.onAnswerButtonClickHandler);this.callView.off(CallLayout.Event.HangupButtonClick,this.onHangupButtonClickHandler);this.callView.off(CallLayout.Event.DeclineButtonClick,this.onDeclineButtonClickHandler);this.callView.off(CallLayout.Event.SetCentralUser,this.onSetCentralUserHandler);this.callView.off(CallLayout.Event.SelectAudioDevice,this.onSelectAudioDeviceHandler)}bindCallEvents(){if(!this.currentCall){return}this.currentCall.on(BX.Call.Event.onUserInvited,this.onCallUserInvitedHandler).on(BX.Call.Event.onUserStateChanged,this.onCallUserStateChangedHandler).on(BX.Call.Event.onUserMicrophoneState,this.onCallUserMicrophoneStateHandler).on(BX.Call.Event.onUserScreenState,this.onCallUserScreenStateHandler).on(BX.Call.Event.onUserVideoPaused,this.onCallUserVideoPausedHandler).on(BX.Call.Event.onUserVoiceStarted,this.onCallUserVoiceStartedHandler).on(BX.Call.Event.onUserVoiceStopped,this.onCallUserVoiceStoppedHandler).on(BX.Call.Event.onUserFloorRequest,this.onCallUserFloorRequestHandler).on(BX.Call.Event.onUserEmotion,this.onCallUserEmotionHandler).on(BX.Call.Event.onLocalMediaReceived,this.onCallLocalMediaReceivedHandler).on(BX.Call.Event.onLocalMediaStopped,this.onCallLocalMediaStoppedHandler).on(BX.Call.Event.onRTCStatsReceived,this.onCallRTCStatsReceivedHandler).on(BX.Call.Event.onCallFailure,this.onCallCallFailureHandler).on(BX.Call.Event.onStreamReceived,this.onCallStreamReceivedHandler).on(BX.Call.Event.onStreamRemoved,this.onCallStreamRemovedHandler).on(BX.Call.Event.onJoin,this.onCallJoinHandler).on(BX.Call.Event.onLeave,this.onCallLeaveHandler).on(BX.Call.Event.onDestroy,this.onCallDestroyHandler)}removeCallEvents(){if(!this.currentCall){return}this.currentCall.off(BX.Call.Event.onUserInvited,this.onCallUserInvitedHandler).off(BX.Call.Event.onUserStateChanged,this.onCallUserStateChangedHandler).off(BX.Call.Event.onUserMicrophoneState,this.onCallUserMicrophoneStateHandler).off(BX.Call.Event.onUserScreenState,this.onCallUserScreenStateHandler).off(BX.Call.Event.onUserVoiceStarted,this.onCallUserVoiceStartedHandler).off(BX.Call.Event.onUserVoiceStopped,this.onCallUserVoiceStoppedHandler).off(BX.Call.Event.onUserFloorRequest,this.onCallUserFloorRequestHandler).off(BX.Call.Event.onUserEmotion,this.onCallUserEmotionHandler).off(BX.Call.Event.onLocalMediaReceived,this.onCallLocalMediaReceivedHandler).off(BX.Call.Event.onLocalMediaStopped,this.onCallLocalMediaStoppedHandler).off(BX.Call.Event.onRTCStatsReceived,this.onCallRTCStatsReceivedHandler).off(BX.Call.Event.onCallFailure,this.onCallCallFailureHandler).off(BX.Call.Event.onStreamReceived,this.onCallStreamReceivedHandler).off(BX.Call.Event.onStreamRemoved,this.onCallStreamRemovedHandler).off(BX.Call.Event.onJoin,this.onCallJoinHandler).off(BX.Call.Event.onLeave,this.onCallLeaveHandler).off(BX.Call.Event.onDestroy,this.onCallDestroyHandler)}bindNativeCallEvents(){if(!this.nativeCall){return}this.nativeCall.on("answered",this.onNativeCallAnsweredHandler).on("ended",this.onNativeCallEndedHandler).on("muted",this.onNativeCallMutedHandler).on("videointent",this.onNativeCallVideoIntentHandler)}prepareWidgetLayer(){return new Promise(((e,t)=>{if(uicomponent.widgetLayer()&&this.rootWidget){return e(this.rootWidget)}uicomponent.createWidgetLayer("layout",{backdrop:{}}).then((t=>e(t))).catch((e=>t(e)))}))}openWidgetLayer(){return new Promise(((e,t)=>{this.prepareWidgetLayer().then((e=>{this.rootWidget=e;this.rootWidget.setListener((e=>{if(e==="onViewRemoved"){if(uicomponent.widgetLayer()){uicomponent.widgetLayer().close().then((()=>{this.rootWidget=null}))}else{this.rootWidget=null}}}));return uicomponent.widgetLayer().show()})).then((()=>e())).catch((e=>t(e)))}))}openCallView(e={}){if(this.callViewPromise){return this.callViewPromise}this.callViewPromise=new Promise(((t,l)=>{this.openWidgetLayer().then((()=>{CallUtil.warn("creating new CallLayout");this.callView=new CallLayout(e);this.rootWidget.showComponent(this.callView);this.callViewPromise=null;t()})).catch((e=>{CallUtil.error(e);this.callViewPromise=null}))}));return this.callViewPromise}fold(){if(!this.currentCall||!this.callView){return}let t=e+"img/blank.png";if(this.currentCall.associatedEntity&&this.currentCall.associatedEntity.avatar&&!CallUtil.isAvatarBlank(this.currentCall.associatedEntity.avatar)){t=encodeURI(CallUtil.makeAbsolute(this.currentCall.associatedEntity.avatar))}uicomponent.widgetLayer().hide().then((()=>{callInterface.indicator().setMode("active");callInterface.indicator().imageUrl=t;callInterface.indicator().show();callInterface.indicator().once("tap",(()=>this.unfold()));device.setProximitySensorEnabled(false);BX.postComponentEvent("CallEvents::viewClosed",[]);BX.postWebEvent("CallEvents::viewClosed",{})}))}unfold(){callInterface.indicator().close();if(!this.currentCall||!this.callView){return}uicomponent.widgetLayer().show();device.setProximitySensorEnabled(true);BX.postComponentEvent("CallEvents::viewOpened",[]);BX.postWebEvent("CallEvents::viewOpened",{})}startCallTimer(){this.callTimerInterval=setInterval((()=>{callInterface.indicator().setTime(CallUtil.formatSeconds(((new Date).getTime()-this.callStartTime)/1e3))}),1e3)}stopCallTimer(){clearTimeout(this.callTimerInterval);this.callTimerInterval=null}getCallUsers(e){if(!this.currentCall){return[]}let t=Object.keys(this.currentCall.getUsers());if(e){t.push(this.currentCall.userId)}return t}onCallUserNameUpdate(e){let{userId:t,name:l}=e;if(this.callView){this.callView.updateUserData({[t]:{name:l}})}}onImMessagesCounter(e){this.chatCounter=e;if(this.callView){this.callView.setChatCounter(e)}}onAppActive(){CallUtil.log("onAppActive");if(!this.currentCall){CallUtil.warn("no current call");return}const e=Application.getLastNotification();if(Application.getPlatform()==="android"&&!this.currentCall.isReady()&&e.hasOwnProperty("id")&&e.id.startsWith("IM_CALL_")){CallUtil.log("check push");try{let t=JSON.parse(e.params);CallUtil.log(t);const l=t.PARAMS.call;const i=t.PARAMS.video;const a=l.ID;if(a==this.currentCall.id){CallUtil.warn("auto-answer B");this.answerCurrentCall(i)}}catch(e){CallUtil.error(e)}}else{CallUtil.log("onAppActive");this.currentCall.log("onAppActive");this.currentCall.setVideoPaused(false);if(!this._hasHeadphones()&&JNVIAudioManager.currentDevice=="receiver"){CallUtil.warn("switching audio output to speaker on application activation");this._selectSpeaker()}}}onAppPaused(){if(!this.currentCall){return}CallUtil.log("onAppPaused");this.currentCall.log("onAppPaused");this.currentCall.setVideoPaused(true)}onProximitySensor(){if(!this.currentCall){return}if(device.proximityState){this.currentCall.setVideoPaused(true)}else{this.currentCall.setVideoPaused(false)}}onAudioDeviceChanged(e){if(Application.isBackground()){return}CallUtil.log("onAudioDeviceChanged",e);if(this.skipNextDeviceChangeEvent){this.skipNextDeviceChangeEvent=false;return}if(e=="receiver"&&this.currentCall){this._selectSpeaker()}}onMicButtonClick(){if(!this.currentCall){return}let e=!this.currentCall.isMuted();this.currentCall.setMuted(e);this.callView.setMuted(e);if(this.nativeCall){this.nativeCall.mute(e)}}onCameraButtonClick(){if(!this.currentCall){return}let e=!this.currentCall.isVideoEnabled();if(this.callWithLegacyMobile){navigator.notification.alert(BX.message("MOBILE_CALL_NO_CAMERA_WITH_LEGACY_APP"),(()=>{}),BX.message("MOBILE_CALL_ERROR"));return}if(e){MediaDevices.requestCameraAccess().then((()=>{this.currentCall.setVideoEnabled(e);this.callView.setCameraState(e)})).catch((()=>{navigator.notification.alert(BX.message("MOBILE_CALL_MICROPHONE_CAN_NOT_ACCESS_CAMERA"),(()=>{}),BX.message("MOBILE_CALL_MICROPHONE_ACCESS_DENIED"))}))}else{this.currentCall.setVideoEnabled(e);this.callView.setCameraState(e)}}onReplaceCameraClick(){if(!this.currentCall&&!this.currentCall.videoEnabled){return}this.currentCall.switchCamera();setTimeout((()=>this.callView.setMirrorLocalVideo(this.currentCall.isFrontCameraUsed())),1e3)}onChatButtonClick(){this.fold();if(this.currentCall){BX.postComponentEvent("onOpenDialog",[{dialogId:this.currentCall.associatedEntity.id},true],"im.recent");BX.postComponentEvent("ImMobile.Messenger.Dialog:open",[{dialogId:this.currentCall.associatedEntity.id}],"im.messenger")}}onPrivateChatButtonClick(e){this.fold();BX.postComponentEvent("onOpenDialog",[{dialogId:e},true],"im.recent");BX.postComponentEvent("ImMobile.Messenger.Dialog:open",[{dialogId:e}],"im.messenger")}onFloorRequestButtonClick(){let e=this.callView.getUserFloorRequestState(env.userId);let t=this.callView.getUserTalking(env.userId);this.callView.setUserFloorRequestState(env.userId,!e);if(this.currentCall){this.currentCall.requestFloor(!e)}clearTimeout(this.callViewFloorRequestTimeout);if(t&&!e){this.callViewFloorRequestTimeout=setTimeout((()=>{if(this.currentCall){this.currentCall.requestFloor(false)}}),1500)}}onAnswerButtonClick(e){CallUtil.log("onAnswerButtonClick");this.answerCurrentCall(e);if(this.nativeCall){CallUtil.log("looks like the native call is not answered , calling answer");this.ignoreNativeCallAnswer=true;this.nativeCall.answer()}}onHangupButtonClick(){if(this.currentCall){this.currentCall.hangup()}this.clearEverything()}onDeclineButtonClick(){if(this.currentCall){this.currentCall.decline()}this.clearEverything()}onSetCentralUser(e){if(this.currentCall&&this.currentCall.allowVideoFrom){this.currentCall.allowVideoFrom([e])}}onSelectAudioDevice(e){this.skipNextDeviceChangeEvent=true;JNVIAudioManager.selectAudioDevice(e)}onCallUserInvited(e){if(this.callView){this.callView.addUser(e.userId);CallUtil.getUsers(this.currentCall.id,[e.userId]).then((e=>this.callView.updateUserData(e)))}}onCallUserStateChanged(e,t,l,i){if(this.callView){this.callView.setUserState(e,t)}if(t===BX.Call.UserState.Connecting||t===BX.Call.UserState.Connected){media.audioPlayer().stopPlayingSound()}if(t===BX.Call.UserState.Connected&&!this.callStartTime){this.callStartTime=(new Date).getTime();callInterface.indicator().setMode("active");this.startCallTimer()}if(t===BX.Call.UserState.Connected&&this._nativeAnsweredAction){this._nativeAnsweredAction.fullfill();this._nativeAnsweredAction=null}if(i){this.callWithLegacyMobile=true}}onCallUserMicrophoneState(e,t){if(this.callView){this.callView.setUserMicrophoneState(e,t)}}onCallUserScreenState(e,t){if(this.callView){this.callView.setUserScreenState(e,t)}}onCallUserVideoPaused(e,t){if(this.callView){this.callView.setUserVideoPaused(e,t)}}onCallUserVoiceStarted(e){if(this.callView){this.callView.setUserTalking(e,true)}}onCallUserVoiceStopped(e){if(this.callView){this.callView.setUserTalking(e,false)}}onCallUserFloorRequest(e,t){if(this.callView){this.callView.setUserFloorRequestState(e,t)}}onCallUserEmotion(){}onCallLocalMediaReceived(e){if(this.callView){this.callView.setVideoStream(env.userId,e,this.currentCall.isFrontCameraUsed())}}onCallLocalMediaStopped(){if(this.callView){this.callView.setVideoStream(env.userId,null)}}onCallRTCStatsReceived(){}onCallCallFailure(){CallUtil.error("onCallFailure");this.clearEverything();navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#","E003"))}onCallStreamReceived(e,t){if(this.callView){this.callView.setVideoStream(e,t)}}onCallStreamRemoved(e){if(this.callView){this.callView.setVideoStream(e,null)}}onChildCallFirstStream(e,t){this.currentCall.log("Finishing one-to-one call, switching to group call");this.callView.setVideoStream(e,t);this.childCall.off(BX.Call.Event.onStreamReceived,this.onChildCallFirstStreamHandler);this.removeCallEvents();var l=this.currentCall;l.hangup();this.currentCall=this.childCall;this.childCall=null;if(l.muted){this.currentCall.setMuted(true)}this.bindCallEvents()}onCallJoin(e){if(e.local){CallUtil.warn("joined local call");if(!this._hasHeadphones()&&JNVIAudioManager.currentDevice=="receiver"&&!Application.isBackground()){CallUtil.warn("no headphones");this._selectSpeaker()}return}this.clearEverything()}onCallLeave(e){if(!e.local&&this.currentCall&&this.currentCall.ready){CallUtil.error(new Error("received remote leave with active call!"));return}this.clearEverything()}onCallDestroy(){this.clearEverything()}onNativeCallAnswered(e){CallUtil.log("onNativeCallAnswered");if(this.nativeCall){this._nativeAnsweredAction=e;if(!this.ignoreNativeCallAnswer){if(this.callViewPromise){this.callViewPromise.then((()=>{this.answerCurrentCall(this.nativeCall.params.video)}))}else if(this.callView){this.answerCurrentCall(this.nativeCall.params.video)}else{CallUtil.error("callView is not initialized")}}}}onNativeCallEnded(e){if(this.nativeCall&&this.nativeCall.connected){this.onHangupButtonClick()}else{this.onDeclineButtonClick()}if(e){setTimeout((()=>e.fullfill()),500)}}onNativeCallMuted(e){this.currentCall.setMuted(e);this.callView.setMuted(e)}onNativeCallVideoIntent(){setTimeout((()=>this.onCameraButtonClick()),1e3)}getMaxActiveMicrophonesCount(){return 4}clearEverything(){if(this.currentCall){this.removeCallEvents();this.currentCall=null}if(this._nativeAnsweredAction){this._nativeAnsweredAction.fail();this._nativeAnsweredAction=null}if(this.nativeCall){this.nativeCall.finish();this.nativeCall=null}this.ignoreNativeCallAnswer=false;if(uicomponent.widgetLayer()){uicomponent.widgetLayer().close().then((()=>{this.rootWidget=null}))}else{this.rootWidget=null}this.callView=null;callInterface.indicator().close();this.callStartTime=null;this.callViewPromise=null;this.callAnswered=false;this.stopCallTimer();media.audioPlayer().stopPlayingSound();device.setIdleTimerDisabled(false);device.setProximitySensorEnabled(false);this.callWithLegacyMobile=false;this.callVideoEnabled=false;this.skipNextDeviceChangeEvent=false;BX.postComponentEvent("CallEvents::viewClosed",[]);BX.postWebEvent("CallEvents::viewClosed",{})}requestDeviceAccess(e){return new Promise(((t,l)=>{MediaDevices.requestMicrophoneAccess().then((()=>{if(!e){return t()}MediaDevices.requestCameraAccess().then((()=>t())).catch((({justDenied:e})=>l(new DeviceAccessError(e))))})).catch((({justDenied:e})=>l(new DeviceAccessError(e))))}))}_hasHeadphones(){return JNVIAudioManager.availableAudioDevices.some((e=>e==="wired"||e==="bluetooth"))}_selectSpeaker(){this.skipNextDeviceChangeEvent=true;JNVIAudioManager.selectAudioDevice("speaker")}test(e="call",t={}){let l=[3,4,464,473];this.openCallView({status:e,isGroupCall:true,isVideoCall:true,associatedEntityName:"Very very long chat name. Very very long chat name. Very very long chat name. And again.",associatedEntityAvatar:"",...t}).then((()=>{this.bindViewEvents();l.forEach((e=>this.callView.addUser(e,BX.Call.UserState.Connected)));this.callView.pinUser(3);BX.rest.callMethod("im.user.list.get",{ID:l.concat(env.userId),AVATAR_HR:"Y"}).then((e=>this.callView.updateUserData(e.data())));CallUtil.log("trying get video");MediaDevices.getUserMedia({audio:true,video:true}).then((e=>{CallUtil.log("video track received");CallUtil.log(e.getTracks());this.stream=e;this.callView.setVideoStream(env.userId,e)})).catch((e=>CallUtil.error(e)))}))}testMenu(e=5,t=false){let l=[];for(let i=0;i<e;i++){l.push({text:`items ${i}`,iconClass:"returnToSpeaker",onClick:()=>CallUtil.log(`item ${i} click`)});if(t){l.push({separator:true})}}this.menu=new CallMenu({items:[{text:"zxc iop",iconClass:"participants",showSubMenu:true,color:"#FF0000",onClick:()=>{CallUtil.log(456)}},{separator:true},...l],onClose:()=>{CallUtil.log("test menu closed");this.menu&&this.menu.destroy();uicomponent.widgetLayer()&&uicomponent.widgetLayer().close()},onDestroy:()=>{this.menu=null}});this.openWidgetLayer().then((()=>this.menu.show())).then((()=>CallUtil.log("success"))).catch((e=>CallUtil.error(e)))}testDevices(){let e=JNVIAudioManager.availableAudioDevices.map((e=>({text:e,selected:e===JNVIAudioManager.currentDevice,onClick:()=>{if(this.menu){this.menu.close()}JNVIAudioManager.selectAudioDevice(e)}})));e.push({separator:true});e.push({text:BX.message("MOBILE_CALL_MENU_CANCEL"),onClick:()=>{if(this.menu){this.menu.close()}}});CallUtil.log(e);this.menu=new CallMenu({items:e,onClose:()=>this.menu.destroy(),onDestroy:()=>{this.menu=null;uicomponent.widgetLayer().close()}});this.openWidgetLayer().then((()=>this.menu.show())).then((()=>CallUtil.log("success"))).catch((e=>CallUtil.error(e)))}ttt(){CallUtil.log(e+"img/blank.png");callInterface.indicator().setMode("active");callInterface.indicator().imageUrl=e+"img/blank.png";callInterface.indicator().show()}openVideoConf(e){CallUtil.log("CallEvents::openVideoConf",e);let t=BX.componentParameters.get("jitsiServer");if(!t){CallUtil.error("Component parameter jitsiServer is empty")}let l="org.jitsi.meet://"+t+"/"+e;CallUtil.log(l);if(Application.canOpenUrl(l)){Application.openUrl(l);return}Application.openUrl(l);navigator.notification.confirm(BX.message("MOBILE_CALL_INSTALL_JITSI_MEET"),(e=>{if(e==1){device.platform==="iOS"?Application.openUrl("https://apps.apple.com/ru/app/jitsi-meet/id1165103905"):Application.openUrl("https://play.google.com/store/apps/details?id=org.jitsi.meet")}}),BX.message("MOBILE_CALL_APP_REQUIRED"),[device.platform==="iOS"?BX.message("MOBILE_CALL_OPEN_APP_STORE"):BX.message("MOBILE_CALL_OPEN_PLAY_MARKET"),BX.message("MOBILE_CALL_MICROPHONE_CANCEL")])}}if("uicomponent"in window&&uicomponent.widgetLayer()){uicomponent.widgetLayer().close()}window.CallController=t})();
//# sourceMappingURL=extension.map.js