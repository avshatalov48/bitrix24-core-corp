jn.define("im/messenger/api/dialog-opener",((e,t,n)=>{const{Type:r}=jn.require("type");const{EntityReady:o}=jn.require("entity-ready");const{EventType:s,FeatureFlag:i}=jn.require("im/messenger/const");class a{static getVersion(){return 1}static openLine(e){return new Promise(((t,n)=>{if(!i.native.openWebComponentParentWidgetSupported){n({text:"This method is not supported in applications with the API version less than 45.",code:"UNSUPPORTED_APP_VERSION"});return}if(!r.isStringFilled(e.userCode)){n({text:"options.userCode must be a filled string.",code:"INVALID_ARGUMENT"});return}o.wait("chat").then((()=>{const r=s.messenger.openLineParams+"::"+e.userCode;const o=s=>{BX.removeCustomEvent(r,o);if(!s.data.DIALOG_ID){n({text:"Failed to load the chat.",code:"LOADING_ERROR"});return}if(e.parentWidget){PageManager.openWebComponent(s,e.parentWidget)}else{PageManager.openWebComponent(s)}t()};BX.addCustomEvent(r,o);BX.postComponentEvent(s.messenger.getOpenLineParams,[{userCode:e.userCode,titleParams:e.titleParams}],"im.messenger")}))}))}}n.exports={DialogOpener:a}}));
//# sourceMappingURL=extension.map.js