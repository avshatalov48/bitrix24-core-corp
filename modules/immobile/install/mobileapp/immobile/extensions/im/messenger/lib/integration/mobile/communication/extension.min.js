jn.define("im/messenger/lib/integration/mobile/communication",((e,t,n)=>{const{RestManager:o}=jn.require("im/messenger/lib/rest-manager");const{RestMethod:r}=jn.require("im/messenger/const");const{Logger:s}=jn.require("im/messenger/lib/logger");class i{constructor(){o.on(r.userCounters,{},this.handleUserCountersGet.bind(this));o.on(r.serverTime,{},this.handleServerTime.bind(this));o.on(r.imDesktopStatusGet,{},this.handleDesktopStatusGet.bind(this))}handleUserCountersGet(e){const t=e.error();if(t){s.error("Counters.handleUserCountersGet",t);return}s.info("Counters.handleUserCountersGet",e.data(),e.time());const n=e.data();const o=e.time?e.time():null;BX.postComponentEvent("onSetUserCounters",[n,o],"communication")}handleServerTime(e){const t=e.error();if(t){s.error("Communication.handleServerTime",t);return}s.info("Communication.handleServerTime",e.data());BX.postComponentEvent("onUpdateServerTime",[e.data()],"communication")}handleDesktopStatusGet(e){const t=e.error();if(t){s.error("Communication.handleDesktopStatusGet",t);return}s.info("Communication.handleDesktopStatusGet",e.data());BX.postComponentEvent("setDesktopStatus",[e.data()],"communication")}}n.exports={Communication:i}}));
//# sourceMappingURL=extension.map.js