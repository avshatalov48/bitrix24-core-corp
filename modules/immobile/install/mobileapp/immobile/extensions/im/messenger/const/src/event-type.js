/**
 * @module im/messenger/const/event-type
 */
jn.define('im/messenger/const/event-type', (require, exports, module) => {
	const EventType = Object.freeze({
		/** Application events */
		app: {
			activeBefore: 'onAppActiveBefore',
			paused: 'onAppPaused',
			active: 'onAppActive',
			failRestoreConnection: 'failRestoreConnection',
			changeStatus: 'changeStatus',
		},
		jnComponent: {
			openRequest: 'openRequest',
		},
		view: {
			close: 'onViewRemoved',
			show: 'onViewShown',
			hidden: 'onViewHidden',
			titleClick: 'titleClick',
			barButtonTap: 'barButtonTap',
			barButtonLongTap: 'barButtonLongTap',
		},
		/** Messenger component events */
		messenger: {
			openDialog: 'ImMobile.Messenger.Dialog:open',
			openDialogComplete: 'ImMobile.Messenger.Dialog:openComplete',
			getOpenDialogParams: 'ImMobile.Messenger.Dialog:getOpenParams',
			openDialogParams: 'ImMobile.Messenger.Dialog:openParams',
			openLine: 'ImMobile.Messenger.Openlines:open',
			getOpenLineParams: 'ImMobile.Messenger.Openlines:getOpenParams',
			openLineParams: 'ImMobile.Messenger.Openlines:openParams',
			openNotifications: 'ImMobile.Messenger.Notifications:open',
			showSearch: 'ImMobile.Messenger.Search:open',
			hideSearch: 'ImMobile.Messenger.Search:close',
			createChat: 'ImMobile.Messenger.Chat:create',
			createChannel: 'ImMobile.Messenger.Channel:create',
			refresh: 'ImMobile.Messenger:refresh',
			init: 'ImMobile.Messenger.Init',
			afterRefreshSuccess: 'ImMobile.Messenger:afterRefreshSuccess',
			renderRecent: 'ImMobile.Messenger:renderRecent',
			destroyDialog: 'ImMobile.Messenger:destroyDialog',
			uploadFiles: 'ImMobile.Messenger:uploadFiles',
			uploadFileError: 'ImMobile.Messenger:uploadFileError',
			cancelFileUpload: 'ImMobile.Messenger:cancelFileUpload',
			dialogAccessError: 'ImMobile.Messenger:dialogAccessError',
			updatePlanLimitsData: 'ImMobile.Messenger:updatePlanLimitsData',
		},
		/** Extension events */
		recent: {
			itemSelected: 'onItemSelected',
			itemAction: 'onItemAction',
			searchShow: 'onSearchShow',
			searchHide: 'onSearchHide',
			userTypeText: 'onUserTypeText',
			scopeSelected: 'onScopeSelected',
			searchItemSelected: 'onSearchItemSelected',
			scroll: 'onScroll',
			refresh: 'onRefresh',
			itemWillDisplay: 'itemWillDisplay',
			sectionButtonClick: 'sectionButtonClick',
			searchSectionButtonClick: 'searchSectionButtonClick',
			createChat: 'custom:createChat',
			readAll: 'custom:readAll',
			loadNextPage: 'custom:loadNextPage',
		},
		dialog: {
			titleClick: 'titleClick',
			attachTap: 'attachTap',
			topReached: 'topReached',
			bottomReached: 'bottomReached',
			resend: 'resend',
			reply: 'reply',
			readyToReply: 'readyToReply',
			viewAreaMessagesChanged: 'viewableMessagesChanged',
			scrollToNewMessages: 'scrollToNewMessages',
			playAudioButtonTap: 'playTap',
			playbackCompleted: 'playbackCompleted',
			audioRecordingStart: 'audioRecordingStart',
			audioRecordingFinish: 'audioRecordingFinish',
			submitAudio: 'submitAudio',
			scrollBegin: 'scrollBegin',
			scrollEnd: 'scrollEnd',
			messageTap: 'messageTap',
			messageCheckInButtonTap: 'messageCheckInButtonTap',
			messageBannerButtonTap: 'messageBannerButtonTap',
			messageAvatarTap: 'avatarTap',
			messageAvatarLongTap: 'avatarLongTap',
			messageDoubleTap: 'messageDoubleTap',
			messageLongTap: 'messageLongTap',
			messageQuoteTap: 'messageQuoteTap',
			messageMenuReactionTap: 'messageMenuReactionTap',
			messageMenuActionTap: 'messageMenuActionTap',
			messageFileDownloadTap: 'messageFileDownloadTap',
			messageFileUploadCancelTap: 'messageFileUploadCancelTap',
			messageButtonTap: 'messageButtonTap',
			messageAttachUserTap: 'attachUserTap',
			messageAttachUrlTap: 'attachUrlTap',
			messageAttachImageTap: 'attachImageTap',
			messageAttachFileTap: 'attachFileTap',
			messageKeyboardButtonTap: 'messageKeyboardButtonTap',
			copilotFootnoteTap: 'copilotFootnoteTap',
			urlTap: 'urlTap',
			imageTap: 'imageTap',
			audioTap: 'audioTap',
			audioRateTap: 'audioRateTap',
			videoTap: 'videoTap',
			fileTap: 'fileTap',
			fileDownloadTap: 'fileDownloadTap',
			forwardTap: 'forwardTap',
			sendTap: 'sendTap',
			putTap: 'putTap',
			phoneTap: 'phoneTap',
			statusFieldTap: 'statusFieldTap',
			chatJoinButtonTap: 'chatJoinButtonTap',
			mentionTap: 'mentionTap',
			visibleMessagesChanged: 'custom:visibleMessagesChanged',
			loadTopPage: 'custom:loadTopPage',
			loadBottomPage: 'custom:loadBottomPage',
			messageRead: 'custom:messageRead',
			input: 'input',
			reactionTap: 'reactionTap',
			reactionLongTap: 'reactionLongTap',
			richNameTap: 'richNameTap',
			richPreviewTap: 'richPreviewTap',
			richCancelTap: 'richCancelTap',
			channelCommentTap: 'channelCommentTap',
			updateUploadProgressByMessageId: 'updateUploadProgressByMessageId',
			external: {
				goToMessageContext: 'ImMobile.Messenger.Dialog:goToMessageContext',
				scrollToBottom: 'ImMobile.Messenger.Dialog:scrollToBottom',
				scrollToFirstUnread: 'ImMobile.Messenger.Dialog:scrollToFirstUnread',
				disableScrollToBottom: 'ImMobile.Messenger.Dialog:disableScrollToBottom',
				mention: 'ImMobile.Messenger.Dialog:mention',
				sendMessage: 'ImMobile.Messenger.Dialog:sendMessage',
				textarea: {
					insertText: 'ImMobile.Messenger.Dialog.Textarea:insertText',
				},
				close: 'ImMobile.Messenger.Dialog:close',
				delete: 'ImMobile.Messenger.Dialog:delete',
				deleteComment: 'ImMobile.Messenger.Dialog:deleteComment',
			},

			textField: {
				submit: 'submit',
				cancelQuote: 'cancelQuote',
				quoteRemoveAnimationEnd: 'quoteRemoveAnimationEnd',
				quoteTap: 'quoteTap',
				changeText: 'changeText',
				changeState: 'changeState',
				focus: 'focus',
				blur: 'blur',
			},
			statusField: {
				tap: 'tap',
			},
			chatJoinButton: {
				tap: 'tap',
			},
			pinPanel: {
				itemTap: 'itemTap',
				buttonTap: 'buttonTap',
			},
		},
		/** Integration (other components events) */
		chatDialog: {
			initComplete: 'chatdialog::init::complete',
			counterChange: 'chatdialog::counter::change',
			taskStatusSuccess: 'chatbackground::task::status::success',
			accessError: 'chatdialog::access::error',
		},
		call: {
			active: 'CallEvents::active',
			inactive: 'CallEvents::inactive',
			join: 'CallEvents::joinCall',
			leave: 'CallEvents::leaveCall',
		},
		notification: {
			open: 'onNotificationsOpen',
			reload: 'ImMobile.Messenger.Notification:reload',
		},
		setting: {
			chat: {
				change: 'ImMobile.Messenger.Settings.Chat:change',
			},
		},
		sync: {
			requestResultReceived: 'requestResultReceived',
			requestResultSaved: 'requestResultSaved',
		},
		navigation: {
			tabChanged: 'ImMobile.Navigation:tabChanged',
			broadCastEventWithTabChange: 'ImMobile.Navigation:broadCastEventWithChangeTab',
			changeTab: 'ImMobile.Navigation:changeTab',
			changeTabResult: 'ImMobile.Navigation:changeTabResult',
		},
	});

	module.exports = { EventType };
});
