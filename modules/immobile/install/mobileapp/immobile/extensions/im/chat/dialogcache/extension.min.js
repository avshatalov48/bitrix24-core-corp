"use strict";(function(){class e{constructor(e="default",s="en"){this.maxDialogStore=250;this.maxMessageStore=20;this.dialogs=new Map;this.dialogQueue=[];this.updateDialogQueue=[];this.messageQueue=[];this.updateMessageQueue=[];this.deleteMessageQueue=[];this.database=null}openDatabase(e="default",s="en"){this.database=new ReactDatabase(ChatDatabaseName,e,s)}setDatabase(e){this.database=e}set dialogsLoaded(e){if(e===false){console.warn('ChatDialogCache.dialogsLoaded (property): this value dont accept value "false"');return false}if(this._dialogsLoaded){return false}this._dialogsLoaded=true;this.dialogQueue.forEach((e=>this.addDialog(e.id,e.params)));this.dialogQueue=[];this.updateDialogQueue.forEach((e=>this.updateDialog(e.id,e.params)));this.updateDialogQueue=[];this.messageQueue.forEach((e=>this.addMessage(e.dialogId,e.data)));this.messageQueue=[];this.updateMessageQueue.forEach((e=>this.updateMessage(e.dialogId,e.data)));this.updateMessageQueue=[];this.deleteMessageQueue.forEach((e=>this.deleteMessage(e.dialogId,e.messageId)));this.deleteMessageQueue=[]}get dialogsLoaded(){return this._dialogsLoaded===true}getStore(e=false){return new Promise(((s,t)=>{if(!this.database){t(false);return false}let a=new Date;if(this.dialogsLoaded&&!e){console.info("ChatDialogCache.getStore: success ("+(new Date-a)+"ms)",this.dialogs);s(this.dialogs)}else{let e=()=>{console.info("ChatDialogCache.getStore: success ("+(new Date-a)+"ms)",this.dialogs);s(this.dialogs)};this._loadDialogs().then(e).catch(e)}return true}))}getDialog(s,t=true){return new Promise(((a,i)=>{if(!this.database){i(false);return true}s=e.formatDialogId(s);if(!s){console.warn("ChatDialogCache.getDialog: format dialogId is not correct");i(false);return true}let o=new Date;if(this.dialogs.has(s)&&t){let e=this.dialogs.get(s);console.info("ChatDialogCache.getDialog: success ("+(new Date-o)+"ms)",e);a(e)}else{this._loadDialogs(s).then((()=>{let e=this.dialogs.get(s);console.info("ChatDialogCache.getDialog: success ("+(new Date-o)+"ms)",e);a(e)})).catch((()=>{console.info("ChatDialogCache.getDialog: dialog not found ("+(new Date-o)+"ms)");i(false)}))}}))}addDialog(s,t={}){if(!this.database){return null}s=e.formatDialogId(s);if(!s){console.warn("ChatDialogCache.adddDialog: format dialogId is not correct");return null}t=Object.assign({},t);if(!this.dialogsLoaded){this.dialogQueue.push({dialogId:s,params:t});return true}if(this.dialogs.has(s)){let e=this.dialogs.get(s);e.lastModified=new Date;if(t.readList){e.readList=t.readList}if(t.userList){e.userList=t.userList}if(t.phoneList){e.phoneList=t.phoneList}if(t.unreadList){e.unreadList=t.unreadList}if(t.options){e.options=t.options}}else{this.dialogs.set(s,{id:s,lastModified:new Date,readList:t.readList||{},unreadList:t.unreadList||[],userList:t.userList||{},phoneList:t.phoneList||{},options:t.options||{},messages:new Map})}return new Promise(((e,t)=>{this.database.table(ChatTables.dialogOptions).then((t=>{t.replace(this._getDialogFields(s)).then((s=>{e(true)})).catch((e=>console.error(e)))}))}))}updateDialog(s,t){if(!this.database){return null}s=e.formatDialogId(s);if(!s){console.warn("ChatDialogCache.updateDialog: format dialogId is not correct");return null}t=Object.assign({},t);if(!this.dialogsLoaded){this.updateDialogQueue.push({dialogId:s,params:t});return false}if(!this.dialogs.has(s)){return false}let a=this.dialogs.get(s);a.lastModified=new Date;if(t.readList){a.readList=t.readList}if(t.unreadList){a.unreadList=t.unreadList}if(t.userList){a.userList=t.userList}if(t.phoneList){a.phoneList=t.phoneList}if(t.options){a.options=t.options}return new Promise(((e,t)=>{this.database.table(ChatTables.dialogOptions).then((t=>{let i={};i.lastModified=(new Date).getTime();i.lastModifiedAtom=(new Date).toString();i.options=Object.assign({},a.options);if(a.readList){i.options.readList=a.readList}if(a.unreadList){i.options.unreadList=a.unreadList}if(a.userList){i.options.userList=a.userList}if(a.phoneList){i.options.phoneList=a.phoneList}t.update(s.toString(),i).then((s=>{e(true)})).catch((e=>console.error(e)))}))}))}addMessage(s,t){if(!this.database){return null}s=e.formatDialogId(s);if(!s){console.warn("ChatDialogCache.addMessage: format dialogId is not correct");return null}t=Object.assign({},t);if(!this.dialogsLoaded){this.messageQueue.push({dialogId:s,data:t});return true}if(!this.dialogs.has(s)){this.dialogs.set(s,{id:s,lastModified:new Date,readList:{},unreadList:[],userList:{},phoneList:{},options:{},messages:new Map})}this.dialogs.get(s).messages.set(t.message.id.toString(),t);if(typeof this.removeMessagesIfOverflowTimeout=="undefined"){this.removeMessagesIfOverflowTimeout={}}clearTimeout(this.removeMessagesIfOverflowTimeout[s]);this.removeMessagesIfOverflowTimeout[s]=setTimeout((()=>{delete this.removeMessagesIfOverflowTimeout[s];this._removeMessagesIfOverflow(s).catch((()=>{}))}),500);this._addMessageToDb(s,t);return true}updateMessage(s,t){if(!this.database){return null}s=e.formatDialogId(s);if(!s){console.warn("ChatDialogCache.updateMessage: format dialogId is not correct");return null}t=Object.assign({},t);if(!this.dialogsLoaded){this.updateMessageQueue.push({dialogId:s,data:t});return true}if(!this.dialogs.has(s)){return false}if(!this.dialogs.get(s).messages.has(t.message.id.toString())){return false}let a=t.message.id.toString();let i=this.dialogs.get(s).messages.get(a);for(let e in t.message){if(!t.message.hasOwnProperty(e)){continue}i.message[e]=t.message[e]}this.dialogs.get(s).messages.set(a,i);this._addMessageToDb(s,i);return true}deleteMessage(s,t){if(!this.database){return null}s=e.formatDialogId(s);if(!s){console.warn("ChatDialogCache.deleteMessage: format dialogId is not correct");return null}if(!this.dialogsLoaded){this.deleteMessageQueue.push({dialogId:s,messageId:t});return true}if(!this.dialogs.has(s)){return false}if(!this.dialogs.get(s).messages.has(t.toString())){return false}this.dialogs.get(s).messages.delete(t);this._deleteMessageFromDb(s,t);return true}getMessageFormat(e){let{message:s,files:t={},users:a={},dropFileIfNotExists:i=false}=e;let o={message:{},files:new Map,users:new Map};o.message=s;if(o.message.params.FILE_ID){let e=false;o.message.params.FILE_ID.forEach(((s,a)=>{if(t[s]){s=parseInt(s);o.files.set(s,t[s])}else if(i){e=true;delete o.message.params.FILE_ID[a]}}));if(e){let e=0;o.message.params.FILE_ID.forEach((s=>e++));if(e<=0){o.message.params.FILE_ID=[];if(!o.message.text){o.message.text="["+BX.message("IM_F_FILE")+"]"}}}}let r=parseInt(o.message.senderId);if(r&&a[r]){o.users.set(r,a[r])}return o}getUpdateMessageFormat(e){let{message:s,hasFiles:t=false,hasAttach:a=false}=e;let i={};i.message=s;if(typeof e.message.text!="undefined"){if(e.message.text.length<=0){if(t){i.message.text="["+BX.message("IM_F_FILE")+"]"}else if(a){i.message.text="["+BX.message("IM_F_ATTACH")+"]"}else{i.message.text=BX.message("IM_M_DELETED")}}else{i.message.text=e.message.text}}return i}_loadDialogs(e=[]){if(typeof e=="number"||typeof e=="string"){e=[e]}let s=new Promise(((s,t)=>{this.database.table(ChatTables.dialogOptions).then((t=>{let a=null;if(e.length>0){a="ID IN ('"+e.join("', '")+"')"}t.get(a,{lastModified:"DESC"}).then((t=>{let a={select:[],delete:[]};if(t.length<=0){e.forEach((e=>{this.dialogs.set(e,{id:e,lastModified:new Date,readList:{},unreadList:[],userList:{},phoneList:{},options:{},messages:new Map});a.select.push(e)}));s(a);return true}let i=0;t.forEach((e=>{if(i<this.maxDialogStore){let s=e.OPTIONS?JSON.parse(e.OPTIONS):{};let t={};if(typeof s.readList!=="undefined"){t=Object.assign({},s.readList);for(let e in t){if(!t.hasOwnProperty(e)){continue}if(t[e].date){t[e].date=new Date(t[e].date)}}delete s.readList}let i={};if(typeof s.userList!=="undefined"){i=Object.assign({},s.userList);for(let e in i){if(!i.hasOwnProperty(e)){continue}i[e]=ChatDataConverter.getUserDataFormat(i[e])}delete s.userList}let o={};if(typeof s.phoneList!=="undefined"){o=Object.assign({},s.phoneList);delete s.phoneList}let r=[];if(typeof s.unreadList!="undefined"){r=s.unreadList.map((e=>e));delete s.unreadList}this.dialogs.set(e.ID,{id:e.ID,lastModified:new Date(e.LASTMODIFIEDATOM),readList:t,unreadList:r,userList:i,phoneList:o,options:s,messages:new Map});a.select.push(e.ID)}else{a.delete.push(e.ID)}i++}));s(a)})).catch((e=>console.error(e)))}))}));return new Promise(((e,t)=>{s.then((s=>{this._loadMessages(s.select).then((()=>{e(true)})).catch((()=>{e(true);console.info("ChatDialogCache._loadMessages: message not found",s.select)}));if(s.delete>0){this.database.table(ChatTables.dialogMessages).then((e=>{e.delete("DIALOGID IN ('"+s.delete.join("', '")+"')").catch((e=>console.error(e)))}))}}))}))}_loadMessages(e){if(typeof e=="number"||typeof e=="string"){e=[e]}return new Promise(((s,t)=>{this.database.table(ChatTables.dialogMessages).then((a=>{a.get("DIALOGID IN ('"+e.join("', '")+"')",{id:"DESC"}).then((e=>{let i=[];if(e.length<=0){this.dialogsLoaded=true;t(false);return true}let o={};let r={};e.forEach((e=>{if(!o[e.DIALOGID]){o[e.DIALOGID]=0}if(o[e.DIALOGID]<this.maxMessageStore){if(!r[e.DIALOGID]){r[e.DIALOGID]=[]}r[e.DIALOGID].push(e)}else{i.push(e.ID)}o[e.DIALOGID]++}));for(let e in r){if(!r.hasOwnProperty(e)){return true}if(!this.dialogs.has(e)){this.dialogs.set(e,{id:e,lastModified:new Date,readList:{},unreadList:[],userList:{},phoneList:{},options:{},messages:new Map})}r[e].sort(((e,s)=>{if(s.ID>e.ID){return-1}else if(s.ID>e.ID){return 1}else{return 0}})).forEach((s=>{s.VALUE=JSON.parse(s.VALUE);s.VALUE.users=new Map(s.VALUE.users);s.VALUE.files=new Map(s.VALUE.files);this.dialogs.get(e).messages.set(s.ID,s.VALUE)}))}this.dialogsLoaded=true;s(true);if(i.length>0){a.delete("ID IN ('"+i.join("', '")+"')").catch((e=>console.error(e)))}})).catch((e=>console.error(e)))}))}))}_addMessageToDb(e,s){s=Object.assign({},s);let t=new Date;let a=new Promise(((s,t)=>{this.database.table(ChatTables.dialogOptions).then((t=>{t.replace(this._getDialogFields(e)).then((e=>{s(true)})).catch((e=>console.error(e)))}))}));return new Promise(((t,i)=>{a.then((a=>{this.database.table(ChatTables.dialogMessages).then((a=>{let i=[];s.files.forEach(((e,s)=>{i.push([s,e])}));s.files=i;let o=[];s.users.forEach(((e,s)=>{o.push([s,e])}));s.users=o;a.replace({id:s.message.id.toString(),dialogId:e.toString(),value:s}).then((e=>{t(true)})).catch((e=>console.error(e)))}))}))}))}_deleteMessageFromDb(e,s){let t=new Date;let a=new Promise(((s,t)=>{this.database.table(ChatTables.dialogOptions).then((t=>{t.replace(this._getDialogFields(e)).then((e=>{s(true)})).catch((e=>console.error(e)))}))}));return new Promise(((e,t)=>{a.then((t=>{this.database.table(ChatTables.dialogMessages).then((t=>{let a=[];if(typeof s!="object"){a=[s.toString()]}else{s.forEach((e=>a.push(e.toString())))}t.delete("ID IN ('"+a.join("', '")+"')").then((()=>{e(a)})).catch((e=>console.error(e)))}))}))}))}_removeMessagesIfOverflow(s){s=e.formatDialogId(s);if(s&&this.dialogs.has(s)){let e=this.dialogs.get(s);e.messages=new Map(Array.from(e.messages).slice(this.maxMessageStore*-1))}return new Promise(((e,t)=>{if(!s){t(false);return true}this.database.table(ChatTables.dialogMessages).then((t=>{t.get({dialogId:s},{id:"DESC"}).then((s=>{let a=[];if(s.length<=0){e(a);return true}let i=0;s.forEach((e=>{if(i>=this.maxDialogStore){a.push(e.ID)}i++}));if(a.length>0){t.delete("ID IN ('"+a.join("', '")+"')").then((()=>{e(a)})).catch((e=>console.error(e)))}else{e(a)}})).catch((e=>console.error(e)))}))}))}_getDialogFields(e){if(!this.dialogs.has(e)){this.dialogs.set(e,{id:e,lastModified:new Date,readList:{},unreadList:[],userList:{},phoneList:{},options:{},messages:new Map})}let s=this.dialogs.get(e);let t=Object.assign({},s.options);t.readList=s.readList;t.unreadList=s.unreadList;t.userList=s.userList;t.phoneList=s.phoneList;return{id:e.toString(),lastModified:(new Date).getTime(),lastModifiedAtom:(new Date).toString(),options:JSON.stringify(t)}}static formatDialogId(e){if(typeof e=="number"||/^[0-9]+$/.test(e)){e=e.toString()}else if(typeof e=="string"&&e.startsWith("chat")){e="chat"+parseInt(e.substr(4))}else{console.warn("ChatDialogCache.formatDialogId: format dialogId is not correct",e);e=null}return e}}window.ChatDialogCache=e})();
//# sourceMappingURL=extension.map.js