this.BX=this.BX||{};(function(e,t,s,a){"use strict";const o=Object.freeze({createChecklist:"create_checklist"});var i=babelHelpers.classPrivateFieldLooseKey("engine");var r=babelHelpers.classPrivateFieldLooseKey("isAgreementAccepted");var l=babelHelpers.classPrivateFieldLooseKey("checkOptions");var n=babelHelpers.classPrivateFieldLooseKey("initEngine");var c=babelHelpers.classPrivateFieldLooseKey("checkAgreement");var d=babelHelpers.classPrivateFieldLooseKey("showNotification");class b{constructor(e){Object.defineProperty(this,d,{value:p});Object.defineProperty(this,c,{value:h});Object.defineProperty(this,n,{value:u});Object.defineProperty(this,l,{value:m});Object.defineProperty(this,i,{writable:true,value:void 0});Object.defineProperty(this,r,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,l)[l](e);babelHelpers.classPrivateFieldLooseBase(this,n)[n]({moduleId:e.moduleId,contextId:e.contextId,contextParameters:e.contextParameters||{}});babelHelpers.classPrivateFieldLooseBase(this,r)[r]=a.Extension.getSettings("ai.command-executor").isAgreementAccepted===true}async makeChecklistFromText(e){return new Promise(((t,a)=>{if(!e){throw new Error("AI.CommandExecutor.makeChecklistFromText: text is required parameter")}if(babelHelpers.classPrivateFieldLooseBase(this,r)[r]===false){babelHelpers.classPrivateFieldLooseBase(this,c)[c]((()=>{babelHelpers.classPrivateFieldLooseBase(this,r)[r]=true;this.makeChecklistFromText(e).then((e=>{t(e)})).catch((e=>{a(e)}))}),(()=>{a(new Error("Agreement is not accepted"))}))}else{const r=new s.Text({prompt:{code:o.createChecklist}});r.setMarkers({original_message:e});babelHelpers.classPrivateFieldLooseBase(this,i)[i].setPayload(r);babelHelpers.classPrivateFieldLooseBase(this,i)[i].setAnalyticParameters({c_section:"tasks"});babelHelpers.classPrivateFieldLooseBase(this,i)[i].textCompletions(r).then((e=>{t(e.data.result)})).catch((e=>{var t;const s=e==null?void 0:(t=e.errors)==null?void 0:t[0];if((s==null?void 0:s.code)==="CLOUD_REGISTRATION_DATA_NOT_FOUND"){babelHelpers.classPrivateFieldLooseBase(this,d)[d](s.message)}a(e)}))}}))}}function m(e){if(!e.moduleId){throw new Error("BX.AI.CommandExecutor: moduleId is required option")}if(!e.contextId){throw new Error("BX.AI.CommandExecutor: contextId is required option")}}function u(e){babelHelpers.classPrivateFieldLooseBase(this,i)[i]=new t.Engine;babelHelpers.classPrivateFieldLooseBase(this,i)[i].setContextId(e.contextId).setModuleId(e.moduleId).setContextParameters(e.contextParameters)}async function h(e,t){const{CopilotAgreement:s}=await a.Runtime.loadExtension("ai.copilot-agreement");const o={moduleId:babelHelpers.classPrivateFieldLooseBase(this,i)[i].getModuleId(),contextId:babelHelpers.classPrivateFieldLooseBase(this,i)[i].getContextId(),events:{onAccept:e,onCancel:t}};const r=new s(o);return r.checkAgreement()}async function p(e){await a.Runtime.loadExtension("ui.notification");const t=a.Reflection.getClass("BX.UI.Notification.Center");t.notify({id:"command-executor-notification",content:e})}e.CommandExecutor=b})(this.BX.AI=this.BX.AI||{},BX.AI,BX.AI.Payload,BX);
//# sourceMappingURL=command-executor.bundle.map.js